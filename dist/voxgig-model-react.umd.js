(function(global2, factory) {
  typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require("react"), require("react-redux"), require("react-router-dom"), require("@mui/material"), require("react-dom"), require("@emotion/styled"), require("@emotion/react"), require("@mui/icons-material")) : typeof define === "function" && define.amd ? define(["exports", "react", "react-redux", "react-router-dom", "@mui/material", "react-dom", "@emotion/styled", "@emotion/react", "@mui/icons-material"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.VoxgigModelReact = {}, global2.React, global2.reactRedux, global2.reactRouterDom, global2.material, global2.ReactDOM, global2.emStyled, global2.react, global2.iconsMaterial));
})(this, function(exports2, React, reactRedux, reactRouterDom, material, ReactDOM, emStyled, react, iconsMaterial) {
  "use strict";var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __pow = Math.pow;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __restKey = (key) => typeof key === "symbol" ? key : key + "";
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

  function _interopNamespaceDefault(e) {
    const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
    if (e) {
      for (const k in e) {
        if (k !== "default") {
          const d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: () => e[k]
          });
        }
      }
    }
    n.default = e;
    return Object.freeze(n);
  }
  const React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
  const ReactDOM__namespace = /* @__PURE__ */ _interopNamespaceDefault(ReactDOM);
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  function getDefaultExportFromCjs(x) {
    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
  }
  function getDefaultExportFromNamespaceIfPresent(n) {
    return n && Object.prototype.hasOwnProperty.call(n, "default") ? n["default"] : n;
  }
  function getDefaultExportFromNamespaceIfNotNamed(n) {
    return n && Object.prototype.hasOwnProperty.call(n, "default") && Object.keys(n).length === 1 ? n["default"] : n;
  }
  function getAugmentedNamespace(n) {
    if (n.__esModule)
      return n;
    var f = n.default;
    if (typeof f == "function") {
      var a = function a2() {
        if (this instanceof a2) {
          return Reflect.construct(f, arguments, this.constructor);
        }
        return f.apply(this, arguments);
      };
      a.prototype = f.prototype;
    } else
      a = {};
    Object.defineProperty(a, "__esModule", { value: true });
    Object.keys(n).forEach(function(k) {
      var d = Object.getOwnPropertyDescriptor(n, k);
      Object.defineProperty(a, k, d.get ? d : {
        enumerable: true,
        get: function() {
          return n[k];
        }
      });
    });
    return a;
  }
  var jsxRuntime$2 = { exports: {} };
  var reactJsxRuntime_production_min = {};
  /**
   * @license React
   * react-jsx-runtime.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var hasRequiredReactJsxRuntime_production_min;
  function requireReactJsxRuntime_production_min() {
    if (hasRequiredReactJsxRuntime_production_min)
      return reactJsxRuntime_production_min;
    hasRequiredReactJsxRuntime_production_min = 1;
    "use strict";
    var f = React, k = Symbol.for("react.element"), l = Symbol.for("react.fragment"), m = Object.prototype.hasOwnProperty, n = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, p = { key: true, ref: true, __self: true, __source: true };
    function q(c, a, g) {
      var b, d = {}, e = null, h = null;
      void 0 !== g && (e = "" + g);
      void 0 !== a.key && (e = "" + a.key);
      void 0 !== a.ref && (h = a.ref);
      for (b in a)
        m.call(a, b) && !p.hasOwnProperty(b) && (d[b] = a[b]);
      if (c && c.defaultProps)
        for (b in a = c.defaultProps, a)
          void 0 === d[b] && (d[b] = a[b]);
      return { $$typeof: k, type: c, key: e, ref: h, props: d, _owner: n.current };
    }
    reactJsxRuntime_production_min.Fragment = l;
    reactJsxRuntime_production_min.jsx = q;
    reactJsxRuntime_production_min.jsxs = q;
    return reactJsxRuntime_production_min;
  }
  var reactJsxRuntime_development = {};
  /**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var hasRequiredReactJsxRuntime_development;
  function requireReactJsxRuntime_development() {
    if (hasRequiredReactJsxRuntime_development)
      return reactJsxRuntime_development;
    hasRequiredReactJsxRuntime_development = 1;
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        var React$1 = React;
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactSharedInternals = React$1.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function getWrappedName2(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName2(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var assign2 = Object.assign;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign2({}, props, {
                  value: prevLog
                }),
                info: assign2({}, props, {
                  value: prevInfo
                }),
                warn: assign2({}, props, {
                  value: prevWarn
                }),
                error: assign2({}, props, {
                  value: prevError
                }),
                group: assign2({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign2({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign2({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix2;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix2 === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match2 = x.stack.trim().match(/\n( *(at )?)/);
                prefix2 = match2 && match2[1] || "";
              }
            }
            return "\n" + prefix2 + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values2, location2, componentName, element) {
          {
            var has2 = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has2(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location2, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown;
        var specialPropRefWarningShown;
        var didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config2) {
          {
            if (hasOwnProperty.call(config2, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config2.ref !== void 0;
        }
        function hasValidKey(config2) {
          {
            if (hasOwnProperty.call(config2, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config2.key !== void 0;
        }
        function warnIfStringRefCannotBeAutoConverted(config2, self2) {
          {
            if (typeof config2.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config2.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        function defineKeyPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingKey = function() {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
        }
        function defineRefPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingRef = function() {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
        }
        var ReactElement = function(type, key, ref, self2, source, owner, props) {
          var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type,
            key,
            ref,
            props,
            // Record the component responsible for creating this element.
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function jsxDEV(type, config2, maybeKey, source, self2) {
          {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            if (maybeKey !== void 0) {
              {
                checkKeyStringCoercion(maybeKey);
              }
              key = "" + maybeKey;
            }
            if (hasValidKey(config2)) {
              {
                checkKeyStringCoercion(config2.key);
              }
              key = "" + config2.key;
            }
            if (hasValidRef(config2)) {
              ref = config2.ref;
              warnIfStringRefCannotBeAutoConverted(config2, self2);
            }
            for (propName in config2) {
              if (hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config2[propName];
              }
            }
            if (type && type.defaultProps) {
              var defaultProps2 = type.defaultProps;
              for (propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
            }
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function isValidElement(object) {
          {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
        }
        function getDeclarationErrorAddendum() {
          {
            if (ReactCurrentOwner$1.current) {
              var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
        }
        function getSourceInfoErrorAddendum(source) {
          {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
        }
        function validateExplicitKey(element, parentType) {
          {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node2, parentType) {
          {
            if (typeof node2 !== "object") {
              return;
            }
            if (isArray(node2)) {
              for (var i = 0; i < node2.length; i++) {
                var child = node2[i];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node2)) {
              if (node2._store) {
                node2._store.validated = true;
              }
            } else if (node2) {
              var iteratorFn = getIteratorFn(node2);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node2.entries) {
                  var iterator = iteratorFn.call(node2);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes2;
            if (typeof type === "function") {
              propTypes2 = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
            // Inner props are checked in the reconciler.
            type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes2 = type.propTypes;
            } else {
              return;
            }
            if (propTypes2) {
              var name = getComponentNameFromType(type);
              checkPropTypes(propTypes2, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
          {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendum(source);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
            var element = jsxDEV(type, props, key, source, self2);
            if (element == null) {
              return element;
            }
            if (validType) {
              var children = props.children;
              if (children !== void 0) {
                if (isStaticChildren) {
                  if (isArray(children)) {
                    for (var i = 0; i < children.length; i++) {
                      validateChildKeys(children[i], type);
                    }
                    if (Object.freeze) {
                      Object.freeze(children);
                    }
                  } else {
                    error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                  }
                } else {
                  validateChildKeys(children, type);
                }
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
        }
        function jsxWithValidationStatic(type, props, key) {
          {
            return jsxWithValidation(type, props, key, true);
          }
        }
        function jsxWithValidationDynamic(type, props, key) {
          {
            return jsxWithValidation(type, props, key, false);
          }
        }
        var jsx = jsxWithValidationDynamic;
        var jsxs = jsxWithValidationStatic;
        reactJsxRuntime_development.Fragment = REACT_FRAGMENT_TYPE;
        reactJsxRuntime_development.jsx = jsx;
        reactJsxRuntime_development.jsxs = jsxs;
      })();
    }
    return reactJsxRuntime_development;
  }
  var jsxRuntime = jsxRuntime$2.exports;
  "use strict";
  if (process.env.NODE_ENV === "production") {
    jsxRuntime$2.exports = requireReactJsxRuntime_production_min();
  } else {
    jsxRuntime$2.exports = requireReactJsxRuntime_development();
  }
  var jsxRuntimeExports = jsxRuntime$2.exports;
  const jsxRuntime$1 = /* @__PURE__ */ getDefaultExportFromCjs(jsxRuntimeExports);
  var gubu_min$2 = { exports: {} };
  var gubu_min = gubu_min$2.exports;
  (function(module2, exports3) {
    !function(e) {
      if (true)
        module2.exports = e();
      else if (false)
        (void 0)([], e);
      else {
        ("undefined" != typeof window ? window : "undefined" != typeof commonjsGlobal ? commonjsGlobal : "undefined" != typeof self ? self : this).Gubu = e();
      }
    }(function() {
      var e = {}, t = {};
      Object.defineProperty(t, "__esModule", { value: true }), t.Gubu = void 0;
      const n = Symbol.for("gubu$"), l = { gubu$: n, v$: "5.0.1" }, r2 = Symbol.for("gubu$nil"), i = /^[A-Z]/, o = "", u = "gubu", s = "name", a = "nan", f = "never", h = "number", p = "required", c = "array", d = "function", v = "object", g = "string", y = "undefined", b = "any", m = "list", $ = "instance", I = "null", x = "type", k = "Object", w = "Array", G = "Above", S = "After", N = "All", V = "Any", R = "Before", A = "Below", O = "Check", D = "Child", j = "Closed", C = "Define", E = "Default", B = "Empty", M = "Exact", L = "Func", T = "Key", q = "Max", F = "Min", P = "Never", W = "Len", J = "One", K = "Open", z = "Optional", H = "Refer", U = "Rename", _2 = "Required", Z = "Skip", Q = "Some", X = "Value", Y = " for property ", ee = '"$PATH"', te = '"$VALUE"', ne = (e2) => Object.keys(e2), le = (e2, t2, n2) => Object.defineProperty(e2, t2, n2), re = (e2) => Array.isArray(e2), ie = (e2) => JSON.parse(e2), oe = (e2, t2) => JSON.stringify(e2, t2);
      class ue {
        constructor(e2, t2, n2, l2) {
          this.match = false, this.dI = 0, this.nI = 2, this.cI = -1, this.pI = 0, this.sI = -1, this.valType = f, this.isRoot = false, this.key = o, this.type = f, this.stop = true, this.nextSibling = true, this.fromDefault = false, this.ignoreVal = void 0, this.err = [], this.parents = [], this.keys = [], this.path = [], this.root = e2, this.vals = [e2, -1], this.node = t2, this.nodes = [t2, -1], this.ctx = n2 || {}, this.match = !!l2;
        }
        next() {
          this.stop = false, this.fromDefault = false, this.ignoreVal = void 0, this.isRoot = 0 === this.pI;
          let e2 = this.nodes[this.pI];
          for (; +e2; )
            this.dI--, this.ctx.log && -1 < this.dI && this.ctx.log("e" + (Array.isArray(this.parents[this.pI]) ? "a" : "o"), this), this.pI = +e2, e2 = this.nodes[this.pI];
          e2 ? (this.node = e2, this.updateVal(this.vals[this.pI]), this.key = this.keys[this.pI], this.cI = this.pI, this.sI = this.pI + 1, this.parent = this.parents[this.pI], this.nextSibling = true, this.type = this.node.t, this.path[this.dI] = this.key, this.oval = this.val) : this.stop = true;
        }
        updateVal(e2) {
          this.val = e2, this.valType = typeof this.val, h === this.valType && isNaN(this.val) && (this.valType = a), this.isRoot && !this.match && (this.root = this.val);
        }
        printStacks() {
          var e2;
          console.log("\nNODE", "d=" + this.dI, "c=" + this.cI, "p=" + this.pI, "n=" + this.nI, +this.node, this.node.t, this.path, this.err.length);
          for (let t2 = 0; t2 < this.nodes.length || t2 < this.vals.length || t2 < this.parents.length; t2++)
            console.log(t2, "	", isNaN(+this.nodes[t2]) ? this.keys[t2] + ":" + (null === (e2 = this.nodes[t2]) || void 0 === e2 ? void 0 : e2.t) : +this.nodes[t2], "	", _e(this.vals[t2]), "	", _e(this.parents[t2]));
        }
      }
      class se extends TypeError {
        constructor(e2, t2, n2) {
          super(t2.map((e3) => e3.t).join("\n")), this.gubu = true, this.name = "GubuError", this.code = e2, this.desc = () => ({ name: "GubuError", code: e2, err: t2, ctx: n2 });
        }
        toJSON() {
          return __spreadProps(__spreadValues({}, this), { err: this.desc().err, name: this.name, message: this.message });
        }
      }
      const ae = { String: true, Number: true, Boolean: true, Object: true, Array: true, Function: true, Symbol: true, BigInt: true }, fe = { string: o, number: 0, boolean: false, object: {}, array: [], symbol: Symbol(o), bigint: BigInt(0), null: null };
      function he(e2, t2, u2) {
        var s2, f2, p2, m2;
        if (pe === e2)
          e2 = void 0;
        else if (null != e2 && (null === (s2 = e2.$) || void 0 === s2 ? void 0 : s2.gubu$)) {
          if (n === e2.$.gubu$)
            return e2.d = null == t2 ? e2.d : t2, e2;
          if (true === e2.$.gubu$) {
            let l2 = __spreadValues({}, e2);
            return l2.$ = __spreadProps(__spreadValues({ v$: "5.0.1" }, l2.$), { gubu$: n }), l2.v = null != l2.v && v === typeof l2.v ? __spreadValues({}, l2.v) : l2.v, l2.t = l2.t || typeof l2.v, d === l2.t && ae[l2.v.name] && (l2.t = l2.v.name.toLowerCase(), l2.v = Ze(fe[l2.t]), l2.f = l2.v), l2.r = !!l2.r, l2.p = !!l2.p, l2.d = null == t2 ? null == l2.d ? -1 : l2.d : t2, l2.b = l2.b || [], l2.a = l2.a || [], l2.u = l2.u || {}, l2.m = l2.m || u2, l2;
          }
        }
        let x2 = null === e2 ? I : typeof e2;
        x2 = y === x2 ? b : x2;
        let w2 = e2, G2 = w2, S2 = r2, N2 = false, V2 = {}, R2 = [], A2 = [];
        if (v === x2)
          G2 = void 0, re(w2) ? (x2 = c, 1 === w2.length && (S2 = w2[0], w2 = [])) : null != w2 && Function !== w2.constructor && Object !== w2.constructor && null != w2.constructor ? (x2 = $, V2.n = w2.constructor.name, V2.i = w2.constructor, G2 = w2) : 0 === ne(w2).length && (S2 = Ie());
        else if (d === x2)
          if (ae[e2.name])
            x2 = e2.name.toLowerCase(), N2 = true, w2 = Ze(fe[x2]), G2 = w2, k === e2.name && (S2 = Ie());
          else if (w2.gubu === l || true === (null === (f2 = w2.$) || void 0 === f2 ? void 0 : f2.gubu)) {
            let e3 = w2.node ? w2.node() : w2;
            x2 = e3.t, w2 = e3.v, G2 = w2, N2 = e3.r, V2 = __spreadValues({}, e3.u), R2 = [...e3.a], A2 = [...e3.b];
          } else
            "Function" === w2.constructor.name && i.test(w2.name) && (x2 = $, N2 = true, V2.n = null === (m2 = null === (p2 = w2.prototype) || void 0 === p2 ? void 0 : p2.constructor) || void 0 === m2 ? void 0 : m2.name, V2.i = w2);
        else
          h === x2 && isNaN(w2) ? x2 = a : g === x2 && o === w2 && (V2.empty = true);
        let O2 = null == w2 || v !== x2 && c !== x2 ? w2 : __spreadValues({}, w2);
        return { $: l, t: x2, v: O2, f: G2, n: null != O2 && v === typeof O2 ? ne(O2).length : 0, c: S2, r: N2, p: false, d: null == t2 ? -1 : t2, u: V2, a: R2, b: A2, m: u2 };
      }
      function pe(t2, i2) {
        const u2 = null == i2 ? {} : i2;
        u2.name = null == u2.name ? "G" + (o + Math.random()).substring(2, 8) : o + u2.name;
        let s2 = he(t2, 0);
        function a2(e2, t3, n2) {
          let l2 = new ue(e2, s2, t3, n2);
          for (; l2.next(), !l2.stop; ) {
            let t4 = l2.node, n3 = false;
            if (0 < t4.b.length)
              for (let e3 = 0; e3 < t4.b.length; e3++) {
                let r3 = ce(t4.b[e3], l2);
                t4 = l2.node, void 0 !== r3.done && (n3 = r3.done);
              }
            if (!n3) {
              let n4 = true, i4 = void 0 === l2.val;
              if (f === l2.type)
                l2.err.push(He(f, l2, 1070));
              else if (v === l2.type) {
                let e3;
                if (t4.r && i4 ? (l2.ignoreVal = true, l2.err.push(He(p, l2, 1010))) : i4 || null !== l2.val && v === l2.valType && !re(l2.val) ? !t4.p && i4 && void 0 !== t4.f ? (l2.updateVal(t4.f), l2.fromDefault = true, e3 = l2.val, n4 = false) : t4.p && i4 || (l2.updateVal(l2.val || (l2.fromDefault = true, {})), e3 = l2.val) : (l2.err.push(He(x, l2, 1020)), e3 = re(l2.val) ? l2.val : {}), n4 && (e3 = null == e3 && false === l2.ctx.err ? {} : e3, null != e3)) {
                  l2.ctx.log && l2.ctx.log("so", l2);
                  let n5 = false, i5 = ne(t4.v), o2 = l2.nI;
                  if (0 < i5.length) {
                    n5 = true, l2.pI = o2;
                    for (let n6 = 0; n6 < i5.length; n6++) {
                      let r3, o3 = i5[n6];
                      if (o3.endsWith("$$")) {
                        if (r3 = { short: "" }, "string" == typeof t4.v[o3] ? r3.short = t4.v[o3] : r3 = __spreadValues(__spreadValues({}, r3), t4.v[o3]), n6++, i5.length <= n6)
                          break;
                        if (i5[n6] !== o3.substring(0, o3.length - 2))
                          throw new Error("Invalid meta key: " + o3);
                        o3 = i5[n6];
                      }
                      let u4 = t4.v[o3] = he(t4.v[o3], 1 + l2.dI, r3);
                      l2.nodes[l2.nI] = u4, l2.vals[l2.nI] = e3[o3], l2.parents[l2.nI] = e3, l2.keys[l2.nI] = o3, l2.nI++;
                    }
                  }
                  let u3 = ne(e3).filter((e4) => void 0 === t4.v[e4]);
                  if (0 < u3.length)
                    if (r2 === t4.c)
                      l2.ignoreVal = true, l2.err.push(He("closed", l2, 1100, void 0, { k: u3 }));
                    else {
                      n5 = true, l2.pI = o2;
                      for (let n6 of u3) {
                        let r3 = t4.c = he(t4.c, 1 + l2.dI);
                        l2.nodes[l2.nI] = r3, l2.vals[l2.nI] = e3[n6], l2.parents[l2.nI] = e3, l2.keys[l2.nI] = n6, l2.nI++;
                      }
                    }
                  n5 ? (l2.dI++, l2.nodes[l2.nI] = l2.sI, l2.parents[l2.nI] = e3, l2.nextSibling = false, l2.nI++) : l2.ctx.log && l2.ctx.log("eo", l2);
                }
              } else if (c === l2.type)
                if (t4.r && i4)
                  l2.ignoreVal = true, l2.err.push(He(p, l2, 1030));
                else if (i4 || re(l2.val)) {
                  if (!t4.p && i4 && void 0 !== t4.f)
                    l2.updateVal(t4.f), l2.fromDefault = true;
                  else if (!t4.p || null != l2.val) {
                    l2.updateVal(l2.val || (l2.fromDefault = true, []));
                    let n5 = r2 !== t4.c, i5 = 0 < l2.val.length, u3 = ne(t4.v).filter((e3) => !isNaN(+e3)), s3 = 0 < u3.length;
                    if (l2.ctx.log && l2.ctx.log("sa", l2), i5 || s3) {
                      l2.pI = l2.nI;
                      let e3 = 0;
                      if (s3)
                        if (u3.length < l2.val.length && !n5)
                          l2.ignoreVal = true, l2.err.push(He("closed", l2, 1090, void 0, { k: u3.length }));
                        else
                          for (; e3 < u3.length; e3++) {
                            let n6 = t4.v[e3] = he(t4.v[e3], 1 + l2.dI);
                            l2.nodes[l2.nI] = n6, l2.vals[l2.nI] = l2.val[e3], l2.parents[l2.nI] = l2.val, l2.keys[l2.nI] = o + e3, l2.nI++;
                          }
                      if (n5 && i5) {
                        let n6 = t4.c = he(t4.c, 1 + l2.dI);
                        for (; e3 < l2.val.length; e3++)
                          l2.nodes[l2.nI] = n6, l2.vals[l2.nI] = l2.val[e3], l2.parents[l2.nI] = l2.val, l2.keys[l2.nI] = o + e3, l2.nI++;
                      }
                      l2.ignoreVal || (l2.dI++, l2.nodes[l2.nI] = l2.sI, l2.parents[l2.nI] = l2.val, l2.nextSibling = false, l2.nI++);
                    } else
                      l2.ctx.log && n5 && null == e2 && l2.ctx.log("kv", __spreadProps(__spreadValues({}, l2), { key: 0, val: t4.c })), l2.ctx.log && l2.ctx.log("ea", l2);
                  }
                } else
                  l2.err.push(He(x, l2, 1040));
              else if (b === l2.type || m === l2.type || void 0 === l2.val || l2.type === l2.valType || $ === l2.type && t4.u.i && l2.val instanceof t4.u.i || I === l2.type && null === l2.val)
                if (void 0 === l2.val) {
                  let e3 = l2.path[l2.dI];
                  !t4.r || y === l2.type && l2.parent.hasOwnProperty(e3) ? void 0 !== t4.f && !t4.p || y === l2.type ? (l2.updateVal(t4.f), l2.fromDefault = true) : b === l2.type && (l2.ignoreVal = void 0 === l2.ignoreVal || l2.ignoreVal) : (l2.ignoreVal = true, l2.err.push(He(p, l2, 1060))), l2.ctx.log && l2.ctx.log("kv", l2);
                } else
                  g !== l2.type || o !== l2.val || t4.u.empty || l2.err.push(He(p, l2, 1080)), l2.ctx.log && l2.ctx.log("kv", l2);
              else
                l2.err.push(He(x, l2, 1050));
            }
            if (0 < t4.a.length)
              for (let e3 = 0; e3 < t4.a.length; e3++) {
                let r3 = ce(t4.a[e3], l2);
                t4 = l2.node, void 0 !== r3.done && (n3 = r3.done);
              }
            let i3 = l2.node.p ? false !== l2.ignoreVal : !!l2.ignoreVal;
            !l2.match && null != l2.parent && !n3 && !i3 && (l2.parent[l2.key] = l2.val), l2.nextSibling && (l2.pI = l2.sI);
          }
          if (0 < l2.err.length) {
            if (re(l2.ctx.err))
              l2.ctx.err.push(...l2.err);
            else if (!l2.match && false !== l2.ctx.err)
              throw new se("shape", l2.err, l2.ctx);
          }
          return l2.match ? 0 === l2.err.length : l2.root;
        }
        function h2(e2, t3) {
          return a2(e2, t3, false);
        }
        h2.valid = function(e2, t3) {
          let n2 = t3 || {};
          return n2.err = n2.err || [], a2(e2, n2, false), 0 === n2.err.length;
        }, h2.match = (e2, t3) => a2(e2, t3 = t3 || {}, true), h2.error = (e2, t3) => {
          let n2 = t3 || {};
          return n2.err = n2.err || [], a2(e2, n2, false), n2.err;
        }, h2.spec = () => (h2(void 0, { err: false }), ie(_e(s2, (e2, t3) => n === t3 || t3, false, true))), h2.node = () => (h2.spec(), s2);
        let d2 = o;
        return h2.toString = () => (d2 = Me(o === d2 ? _e(s2 && s2.$ && (n === s2.$.gubu$ || true === s2.$.gubu$) ? s2.v : s2) : d2), `[Gubu ${u2.name} ${d2}]`), e.inspect && e.inspect.custom && (h2[e.inspect.custom] = h2.toString), h2.gubu = l, h2;
      }
      function ce(e2, t2) {
        var n2;
        let l2, r3 = {}, i2 = false;
        try {
          i2 = !(void 0 !== t2.val || !(null === (n2 = e2.gubu$) || void 0 === n2 ? void 0 : n2.Check)) || e2(t2.val, r3, t2);
        } catch (s2) {
          l2 = s2;
        }
        let u2 = re(r3.err) ? 0 < r3.err.length : null != r3.err;
        if (!i2 || u2) {
          if (void 0 === t2.val && (t2.node.p || !t2.node.r) && true !== r3.done)
            return delete r3.err, r3;
          let n3 = r3.why || "check", i3 = de(t2);
          if (g === typeof r3.err)
            t2.err.push(ze(t2, r3.err));
          else if (v === typeof r3.err)
            t2.err.push(...[r3.err].flat().map((e3) => (e3.p = null == e3.p ? i3 : e3.p, e3.m = null == e3.m ? 2010 : e3.m, e3)));
          else {
            let r4 = e2.name;
            null != r4 && o != r4 || (r4 = Me(e2.toString().replace(/[ \t\r\n]+/g, " "))), t2.err.push(He(n3, t2, 1045, void 0, { thrown: l2 }, r4));
          }
          r3.done = null == r3.done || r3.done;
        }
        return r3.hasOwnProperty("uval") ? (t2.updateVal(r3.uval), t2.ignoreVal = false) : void 0 === r3.val || Number.isNaN(r3.val) || (t2.updateVal(r3.val), t2.ignoreVal = false), void 0 !== r3.node && (t2.node = r3.node), void 0 !== r3.type && (t2.type = r3.type), r3;
      }
      function de(e2) {
        return e2.path.slice(1, e2.dI + 1).filter((e3) => null != e3).join(".");
      }
      const ve = function(e2) {
        let t2 = Ke(this, e2);
        return t2.r = true, t2.p = false, void 0 === e2 && 1 === arguments.length && (t2.t = y, t2.v = void 0), t2;
      }, ge = function(e2) {
        let t2 = Ke(this, e2);
        return t2.r = false, void 0 === e2 && 1 === arguments.length && (t2.t = y, t2.v = void 0), t2;
      }, ye = function(e2) {
        let t2 = Ke(this, e2);
        return t2.r = false, t2.p = true, t2;
      }, be = function(e2) {
        let t2 = Ke(this);
        return t2.t = d, t2.v = e2, t2.f = e2, t2;
      }, me = function(e2, t2) {
        let n2 = Ke(this, void 0 === t2 ? e2 : t2);
        return n2.r = false, n2.f = e2, d === typeof e2 && ae[e2.name] && (n2.t = e2.name.toLowerCase(), n2.f = Ze(fe[n2.t])), n2.p = false, n2;
      }, $e = function(e2) {
        let t2 = Ke(this, e2);
        return t2.u.empty = true, t2;
      }, Ie = function(e2) {
        let t2 = Ke(this, e2);
        return t2.t = b, void 0 !== e2 && (t2.v = e2, t2.f = e2), t2;
      }, xe = function(e2) {
        let t2 = Ke(this, e2);
        return t2.t = f, t2;
      }, ke = function(e2, t2) {
        let n2 = Ke(this), l2 = "number" == typeof e2;
        n2.t = g, l2 && null == t2 && (n2 = he([]));
        let r3 = null;
        return "function" == typeof e2 && (r3 = e2, n2 = Ie()), n2.b.push(function(n3, i2, o2) {
          if (r3)
            i2.val = r3(o2.path, o2);
          else if (l2) {
            let n4 = e2;
            i2.val = o2.path.slice(o2.path.length - 1 - (0 <= n4 ? n4 : 0), o2.path.length - 1 + (0 <= n4 ? 0 : 1)), "string" == typeof t2 && (i2.val = i2.val.join(t2));
          } else
            null == e2 && (i2.val = o2.path[o2.path.length - 2]);
          return true;
        }), n2;
      }, we = function(...e2) {
        let t2 = Ke();
        t2.t = m, t2.r = true;
        let n2 = e2.map((e3) => Xe(e3));
        return t2.u.list = e2, t2.b.push(function(t3, l2, r3) {
          let i2 = true;
          for (let e3 of n2) {
            let n3 = __spreadProps(__spreadValues({}, r3.ctx), { err: [] });
            e3(t3, n3), 0 < n3.err.length && (i2 = false);
          }
          return i2 || (l2.why = N, l2.err = [ze(r3, X + " " + te + Y + ee + " does not satisfy all of: " + e2.map((e3) => _e(e3, null, true)).join(", "))]), i2;
        }), t2;
      }, Ge = function(...e2) {
        let t2 = Ke();
        t2.t = m, t2.r = true;
        let n2 = e2.map((e3) => Xe(e3));
        return t2.u.list = e2, t2.b.push(function(t3, l2, r3) {
          let i2 = false;
          for (let e3 of n2) {
            let n3 = __spreadProps(__spreadValues({}, r3.ctx), { err: [] }), o2 = e3.match(t3, n3);
            o2 && (l2.val = e3(t3, n3)), i2 || (i2 = o2);
          }
          return i2 || (l2.why = Q, l2.err = [ze(r3, X + " " + te + Y + ee + " does not satisfy any of: " + e2.map((e3) => _e(e3, null, true)).join(", "))]), i2;
        }), t2;
      }, Se = function(...e2) {
        let t2 = Ke();
        t2.t = m, t2.r = true;
        let n2 = e2.map((e3) => Xe(e3));
        return t2.u.list = e2, t2.b.push(function(t3, l2, r3) {
          let i2 = 0;
          for (let e3 of n2) {
            let n3 = __spreadProps(__spreadValues({}, r3.ctx), { err: [] });
            if (e3.match(t3, n3)) {
              i2++, l2.val = e3(t3, n3);
              break;
            }
          }
          return 1 !== i2 && (l2.why = J, l2.err = [ze(r3, X + " " + te + Y + ee + " does not satisfy one of: " + e2.map((e3) => _e(e3, null, true)).join(", "))]), true;
        }), t2;
      }, Ne = function(...e2) {
        let t2 = Ke();
        return t2.b.push(function(t3, n2, l2) {
          for (let r3 = 0; r3 < e2.length; r3++)
            if (t3 === e2[r3])
              return true;
          return n2.err = ze(l2, X + " " + te + Y + ee + " must be exactly one of: " + l2.node.s + "."), n2.done = true, false;
        }), t2.s = e2.map((e3) => _e(e3, null, true)).join(", "), t2;
      }, Ve = function(e2, t2) {
        let n2 = Ke(this, t2);
        return n2.b.push(e2), n2;
      }, Re = function(e2, t2) {
        let n2 = Ke(this, t2);
        return n2.a.push(e2), n2;
      }, Ae = function(e2, t2) {
        let n2 = Ke(this, t2);
        if (d === typeof e2) {
          let t3 = e2;
          t3.gubu$ = t3.gubu$ || {}, t3.gubu$.Check = true, n2.b.push(e2), n2.s = (null == n2.s ? o : n2.s + ";") + _e(e2, null, true), n2.r = true;
        } else if (v === typeof e2) {
          if (Object.prototype.toString.call(e2).includes("RegExp")) {
            let t3 = (t4) => null != t4 && !Number.isNaN(t4) && !!String(t4).match(e2);
            le(t3, s, { value: String(e2) }), le(t3, "gubu$", { value: { Check: true } }), n2.b.push(t3), n2.s = _e(e2), n2.r = true;
          }
        } else
          g === typeof e2 && (n2.t = e2, n2.r = true);
        return n2;
      }, Oe = function(e2) {
        let t2 = Ke(this, e2);
        return t2.c = Ie(), t2;
      }, De = function(e2) {
        let t2 = Ke(this, e2);
        return c === t2.t && r2 !== t2.c && 0 === t2.n ? (t2.v = [t2.c], t2.c = r2) : t2.c = r2, t2;
      }, je = function(e2, t2) {
        let n2 = Ke(this, t2), l2 = g === typeof e2 ? e2 : (v === typeof e2 && e2 || {}).name;
        return null != l2 && o != l2 && n2.b.push(function(e3, t3, n3) {
          return (n3.ctx.ref = n3.ctx.ref || {})[l2] = n3.node, true;
        }), n2;
      }, Ce = function(e2, t2) {
        let n2 = Ke(this, t2), l2 = v === typeof e2 && e2 || {}, r3 = g === typeof e2 ? e2 : l2.name, i2 = !!l2.fill;
        return null != r3 && o != r3 && n2.b.push(function(e3, t3, n3) {
          if (void 0 !== e3 || i2) {
            let e4 = n3.ctx.ref = n3.ctx.ref || {};
            if (void 0 !== e4[r3]) {
              let n4 = __spreadValues({}, e4[r3]);
              n4.t = n4.t || f, t3.node = n4, t3.type = n4.t;
            }
          }
          return true;
        }), n2;
      }, Ee = function(e2, t2) {
        let n2 = Ke(this, t2), l2 = v === typeof e2 && e2 || {}, r3 = g === typeof e2 ? e2 : l2.name, i2 = "boolean" == typeof l2.keep ? l2.keep : void 0, u2 = re(l2.claim) ? l2.claim : [];
        if (null != r3 && o != r3) {
          let e3 = (e4, t4, n3) => {
            if (void 0 === e4 && 0 < u2.length) {
              n3.ctx.Rename = n3.ctx.Rename || {}, n3.ctx.Rename.fromDefault = n3.ctx.Rename.fromDefault || {};
              for (let e5 of u2) {
                let l3 = n3.ctx.Rename.fromDefault[e5] || {};
                if (void 0 !== n3.parent[e5] && !l3.yes) {
                  t4.val = n3.parent[e5], n3.match || (n3.parent[r3] = t4.val), t4.node = l3.node;
                  for (let e6 = 0; e6 < n3.err.length; e6++)
                    n3.err[e6].k === l3.key && (n3.err.splice(e6, 1), e6--);
                  if (i2) {
                    let t5 = n3.cI + 1;
                    n3.nodes.splice(t5, 0, he(l3.dval)), n3.vals.splice(t5, 0, void 0), n3.parents.splice(t5, 0, n3.parent), n3.keys.splice(t5, 0, e5), n3.nI++, n3.pI++;
                  } else
                    delete n3.parent[e5];
                  break;
                }
              }
              void 0 === t4.val && (t4.val = n3.node.v);
            }
            return true;
          };
          le(e3, s, { value: "Rename:" + r3 }), n2.b.push(e3);
          let t3 = (e4, t4, n3) => (n3.parent[r3] = e4, n3.match || i2 || n3.key === r3 || re(n3.parent) && false !== i2 || (delete n3.parent[n3.key], t4.done = true), n3.ctx.Rename = n3.ctx.Rename || {}, n3.ctx.Rename.fromDefault = n3.ctx.Rename.fromDefault || {}, n3.ctx.Rename.fromDefault[r3] = { yes: n3.fromDefault, key: n3.key, dval: n3.node.v, node: n3.node }, true);
          le(t3, s, { value: "Rename:" + r3 }), n2.a.push(t3);
        }
        return n2;
      };
      function Be(e2) {
        return h === typeof e2 ? e2 : h === typeof (null == e2 ? void 0 : e2.length) ? e2.length : null != e2 && v === typeof e2 ? ne(e2).length : NaN;
      }
      function Me(e2, t2) {
        let n2 = String(e2), l2 = null == t2 || isNaN(t2) ? 30 : t2 < 0 ? 0 : ~~t2, r3 = null == e2 ? 0 : n2.length, i2 = null == e2 ? o : n2.substring(0, r3);
        return i2 = l2 < r3 ? i2.substring(0, l2 - 3) + "..." : i2, i2.substring(0, l2);
      }
      const Le = function(e2, t2) {
        let n2 = Ke(this, t2);
        return n2.b.push(function(t3, n3, l2) {
          let r3 = Be(t3);
          if (e2 <= r3)
            return true;
          let i2 = h === typeof t3 ? o : "length ";
          return n3.err = ze(l2, X + " " + te + Y + ee + ` must be a minimum ${i2}of ${e2} (was ${r3}).`), false;
        }), n2.s = F + "(" + e2 + (null == t2 ? o : "," + _e(t2)) + ")", n2;
      }, Te = function(e2, t2) {
        let n2 = Ke(this, t2);
        return n2.b.push(function(t3, n3, l2) {
          let r3 = Be(t3);
          if (r3 <= e2)
            return true;
          let i2 = h === typeof t3 ? o : "length ";
          return n3.err = ze(l2, X + " " + te + Y + ee + ` must be a maximum ${i2}of ${e2} (was ${r3}).`), false;
        }), n2.s = q + "(" + e2 + (null == t2 ? o : "," + _e(t2)) + ")", n2;
      }, qe = function(e2, t2) {
        let n2 = Ke(this, t2);
        return n2.b.push(function(t3, n3, l2) {
          let r3 = Be(t3);
          if (e2 < r3)
            return true;
          let i2 = h === typeof t3 ? "be" : "have length";
          return n3.err = ze(l2, X + " " + te + Y + ee + ` must ${i2} above ${e2} (was ${r3}).`), false;
        }), n2.s = G + "(" + e2 + (null == t2 ? o : "," + _e(t2)) + ")", n2;
      }, Fe = function(e2, t2) {
        let n2 = Ke(this, t2);
        return n2.b.push(function(t3, n3, l2) {
          let r3 = Be(t3);
          if (r3 < e2)
            return true;
          let i2 = h === typeof t3 ? "be" : "have length";
          return n3.err = ze(l2, X + " " + te + Y + ee + ` must ${i2} below ${e2} (was ${r3}).`), false;
        }), n2.s = A + "(" + e2 + (null == t2 ? o : "," + _e(t2)) + ")", n2;
      }, Pe = function(e2, t2) {
        let n2 = Ke(this, t2 || Ie());
        return n2.b.push(function(t3, n3, l2) {
          let r3 = Be(t3);
          if (e2 === r3)
            return true;
          let i2 = h === typeof t3 ? o : " in length";
          return n3.err = ze(l2, X + " " + te + Y + ee + ` must be exactly ${e2}${i2} (was ${r3}).`), false;
        }), n2.s = W + "(" + e2 + (null == t2 ? o : "," + _e(t2)) + ")", n2;
      }, We = function(e2, t2) {
        let n2 = Ke(null == t2 ? this : t2), l2 = he(e2);
        return n2.c = l2, n2;
      }, Je = function(e2) {
        let t2 = Ke(this, {});
        return t2.c = he(e2), t2;
      };
      function Ke(e2, t2) {
        let n2 = he(null == e2 || e2.window === e2 || e2.global === e2 ? t2 : e2);
        return Object.assign(n2, { Above: qe, After: Re, Any: Ie, Before: Ve, Below: Fe, Check: Ae, Child: Je, Closed: De, Open: Oe, Define: je, Empty: $e, Exact: Ne, Max: Te, Min: Le, Never: xe, Len: Pe, Refer: Ce, Rename: Ee, Required: ve, Skip: ye, Value: We });
      }
      function ze(e2, t2, n2, l2) {
        return He(n2 || "check", e2, 4e3, t2, l2);
      }
      function He(e2, t2, n2, l2, r3, i2) {
        let u2 = { k: t2.key, n: t2.node, v: t2.val, p: de(t2), w: e2, m: n2, t: o, u: r3 || {} }, s2 = Me((void 0 === t2.val ? o : _e(t2.val)).replace(/"/g, o));
        if (null == l2 || o === l2) {
          let n3 = s2.startsWith("[") ? c : s2.startsWith("{") ? v : "value", l3 = s2.startsWith("[") || re(t2.parents[t2.pI]) ? "index" : "property", a2 = "is", h2 = null == r3 ? void 0 : r3.k;
          h2 = re(h2) ? (l3 = 1 < h2.length ? (a2 = "are", "properties") : l3, h2.join(", ")) : h2, u2.t = "Validation failed for " + (0 < u2.p.length ? `${l3} "${u2.p}" with ` : o) + `${n3} "${s2}" because ` + (x === e2 ? $ === t2.node.t ? `the ${n3} is not an instance of ${t2.node.u.n} ` : `the ${n3} is not of type ${t2.node.t}` : p === e2 ? o === t2.val ? "an empty string is not allowed" : `the ${n3} is required` : "closed" === e2 ? `the ${l3} "${h2}" ${a2} not allowed` : f === e2 ? "no value is allowed" : `check "${null == i2 ? e2 : i2}" failed`) + (u2.u.thrown ? " (threw: " + u2.u.thrown.message + ")" : ".");
        } else
          u2.t = l2.replace(/\$VALUE/g, s2).replace(/\$PATH/g, u2.p);
        return u2;
      }
      function Ue(e2) {
        return null != e2.s && o !== e2.s ? e2.s : e2.r || void 0 === e2.v ? e2.t : e2.v;
      }
      function _e(e2, t2, l2, r3) {
        let i2;
        r3 || !e2 || !e2.$ || n !== e2.$.gubu$ && true !== e2.$.gubu$ || (e2 = Ue(e2));
        try {
          i2 = oe(e2, (e3, l3) => {
            var i3, u2;
            if (t2 && (l3 = t2(e3, l3)), null != l3 && v === typeof l3 && l3.constructor && k !== l3.constructor.name && w !== l3.constructor.name)
              l3 = d === typeof l3.toString ? l3.toString() : l3.constructor.name;
            else if (d === typeof l3)
              l3 = d === typeof pe[l3.name] && isNaN(+e3) ? void 0 : null != l3.name && o !== l3.name ? l3.name : Me(l3.toString().replace(/[ \t\r\n]+/g, " "));
            else if ("bigint" == typeof l3)
              l3 = String(l3.toString());
            else {
              if (Number.isNaN(l3))
                return "NaN";
              true === r3 || true !== (null === (i3 = null == l3 ? void 0 : l3.$) || void 0 === i3 ? void 0 : i3.gubu$) && n !== (null === (u2 = null == l3 ? void 0 : l3.$) || void 0 === u2 ? void 0 : u2.gubu$) || (l3 = Ue(l3));
            }
            return l3;
          }), i2 = String(i2);
        } catch (u2) {
          i2 = oe(String(e2));
        }
        return true === l2 && (i2 = i2.replace(/^"/, o).replace(/"$/, o)), i2;
      }
      function Ze(e2) {
        return null == e2 || v !== typeof e2 ? e2 : ie(oe(e2));
      }
      const Qe = (e2) => he(__spreadProps(__spreadValues({}, e2), { $: { gubu$: true } }));
      if (y !== typeof window) {
        let e2 = [{ b: qe, n: G }, { b: Re, n: S }, { b: we, n: N }, { b: Ie, n: V }, { b: Ve, n: R }, { b: Fe, n: A }, { b: Ae, n: O }, { b: Je, n: D }, { b: De, n: j }, { b: je, n: C }, { b: me, n: E }, { b: $e, n: B }, { b: Ne, n: M }, { b: be, n: L }, { b: ke, n: T }, { b: Te, n: q }, { b: Le, n: F }, { b: xe, n: P }, { b: Pe, n: W }, { b: Se, n: J }, { b: Oe, n: K }, { b: ge, n: z }, { b: Ce, n: H }, { b: Ee, n: U }, { b: ve, n: _2 }, { b: ye, n: Z }, { b: Ge, n: Q }, { b: We, n: X }];
        for (let t2 of e2)
          le(t2.b, s, { value: t2.n });
      }
      Object.assign(pe, { Gubu: pe, Above: qe, After: Re, All: we, Any: Ie, Before: Ve, Below: Fe, Check: Ae, Child: Je, Closed: De, Define: je, Default: me, Empty: $e, Exact: Ne, Func: be, Key: ke, Max: Te, Min: Le, Never: xe, Len: Pe, One: Se, Open: Oe, Optional: ge, Refer: Ce, Rename: Ee, Required: ve, Skip: ye, Some: Ge, Value: We, GAbove: qe, GAfter: Re, GAll: we, GAny: Ie, GBefore: Ve, GBelow: Fe, GCheck: Ae, GChild: Je, GClosed: De, GDefine: je, GDefault: me, GEmpty: $e, GExact: Ne, GFunc: be, GKey: ke, GMax: Te, GMin: Le, GNever: xe, GLen: Pe, GOne: Se, GOpen: Oe, GOptional: ge, GRefer: Ce, GRename: Ee, GRequired: ve, GSkip: ye, GSome: Ge, GValue: We, G$: Qe, buildize: Ke, makeErr: ze, stringify: _e, truncate: Me, nodize: he, isShape: (e2) => e2 && l === e2.gubu }), le(pe, s, { value: u });
      const Xe = pe;
      t.Gubu = Xe;
      const { Gubu: Ye } = t;
      return Ye;
    });
  })(gubu_min$2, gubu_min$2.exports);
  var gubu_minExports = gubu_min$2.exports;
  const gubu_min$1 = /* @__PURE__ */ getDefaultExportFromCjs(gubu_minExports);
  var ChevronRight = {};
  var interopRequireDefault$2 = { exports: {} };
  var interopRequireDefault = interopRequireDefault$2.exports;
  (function(module2) {
    function _interopRequireDefault2(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    module2.exports = _interopRequireDefault2, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  })(interopRequireDefault$2);
  var interopRequireDefaultExports = interopRequireDefault$2.exports;
  const interopRequireDefault$1 = /* @__PURE__ */ getDefaultExportFromCjs(interopRequireDefaultExports);
  var createSvgIcon$1 = {};
  function chainPropTypes(propType1, propType2) {
    if (process.env.NODE_ENV === "production") {
      return () => null;
    }
    return function validate(...args) {
      return propType1(...args) || propType2(...args);
    };
  }
  function _extends$2() {
    _extends$2 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$2.apply(this, arguments);
  }
  function isPlainObject$1(item) {
    if (typeof item !== "object" || item === null) {
      return false;
    }
    const prototype = Object.getPrototypeOf(item);
    return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in item) && !(Symbol.iterator in item);
  }
  function deepClone(source) {
    if (!isPlainObject$1(source)) {
      return source;
    }
    const output = {};
    Object.keys(source).forEach((key) => {
      output[key] = deepClone(source[key]);
    });
    return output;
  }
  function deepmerge(target, source, options = {
    clone: true
  }) {
    const output = options.clone ? _extends$2({}, target) : target;
    if (isPlainObject$1(target) && isPlainObject$1(source)) {
      Object.keys(source).forEach((key) => {
        if (key === "__proto__") {
          return;
        }
        if (isPlainObject$1(source[key]) && key in target && isPlainObject$1(target[key])) {
          output[key] = deepmerge(target[key], source[key], options);
        } else if (options.clone) {
          output[key] = isPlainObject$1(source[key]) ? deepClone(source[key]) : source[key];
        } else {
          output[key] = source[key];
        }
      });
    }
    return output;
  }
  var propTypes$1 = { exports: {} };
  var reactIs$3 = { exports: {} };
  var reactIs_production_min$1 = {};
  /** @license React v16.13.1
   * react-is.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var hasRequiredReactIs_production_min$1;
  function requireReactIs_production_min$1() {
    if (hasRequiredReactIs_production_min$1)
      return reactIs_production_min$1;
    hasRequiredReactIs_production_min$1 = 1;
    "use strict";
    var b = "function" === typeof Symbol && Symbol.for, c = b ? Symbol.for("react.element") : 60103, d = b ? Symbol.for("react.portal") : 60106, e = b ? Symbol.for("react.fragment") : 60107, f = b ? Symbol.for("react.strict_mode") : 60108, g = b ? Symbol.for("react.profiler") : 60114, h = b ? Symbol.for("react.provider") : 60109, k = b ? Symbol.for("react.context") : 60110, l = b ? Symbol.for("react.async_mode") : 60111, m = b ? Symbol.for("react.concurrent_mode") : 60111, n = b ? Symbol.for("react.forward_ref") : 60112, p = b ? Symbol.for("react.suspense") : 60113, q = b ? Symbol.for("react.suspense_list") : 60120, r2 = b ? Symbol.for("react.memo") : 60115, t = b ? Symbol.for("react.lazy") : 60116, v = b ? Symbol.for("react.block") : 60121, w = b ? Symbol.for("react.fundamental") : 60117, x = b ? Symbol.for("react.responder") : 60118, y = b ? Symbol.for("react.scope") : 60119;
    function z(a) {
      if ("object" === typeof a && null !== a) {
        var u = a.$$typeof;
        switch (u) {
          case c:
            switch (a = a.type, a) {
              case l:
              case m:
              case e:
              case g:
              case f:
              case p:
                return a;
              default:
                switch (a = a && a.$$typeof, a) {
                  case k:
                  case n:
                  case t:
                  case r2:
                  case h:
                    return a;
                  default:
                    return u;
                }
            }
          case d:
            return u;
        }
      }
    }
    function A(a) {
      return z(a) === m;
    }
    reactIs_production_min$1.AsyncMode = l;
    reactIs_production_min$1.ConcurrentMode = m;
    reactIs_production_min$1.ContextConsumer = k;
    reactIs_production_min$1.ContextProvider = h;
    reactIs_production_min$1.Element = c;
    reactIs_production_min$1.ForwardRef = n;
    reactIs_production_min$1.Fragment = e;
    reactIs_production_min$1.Lazy = t;
    reactIs_production_min$1.Memo = r2;
    reactIs_production_min$1.Portal = d;
    reactIs_production_min$1.Profiler = g;
    reactIs_production_min$1.StrictMode = f;
    reactIs_production_min$1.Suspense = p;
    reactIs_production_min$1.isAsyncMode = function(a) {
      return A(a) || z(a) === l;
    };
    reactIs_production_min$1.isConcurrentMode = A;
    reactIs_production_min$1.isContextConsumer = function(a) {
      return z(a) === k;
    };
    reactIs_production_min$1.isContextProvider = function(a) {
      return z(a) === h;
    };
    reactIs_production_min$1.isElement = function(a) {
      return "object" === typeof a && null !== a && a.$$typeof === c;
    };
    reactIs_production_min$1.isForwardRef = function(a) {
      return z(a) === n;
    };
    reactIs_production_min$1.isFragment = function(a) {
      return z(a) === e;
    };
    reactIs_production_min$1.isLazy = function(a) {
      return z(a) === t;
    };
    reactIs_production_min$1.isMemo = function(a) {
      return z(a) === r2;
    };
    reactIs_production_min$1.isPortal = function(a) {
      return z(a) === d;
    };
    reactIs_production_min$1.isProfiler = function(a) {
      return z(a) === g;
    };
    reactIs_production_min$1.isStrictMode = function(a) {
      return z(a) === f;
    };
    reactIs_production_min$1.isSuspense = function(a) {
      return z(a) === p;
    };
    reactIs_production_min$1.isValidElementType = function(a) {
      return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r2 || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);
    };
    reactIs_production_min$1.typeOf = z;
    return reactIs_production_min$1;
  }
  var reactIs_development$1 = {};
  /** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var hasRequiredReactIs_development$1;
  function requireReactIs_development$1() {
    if (hasRequiredReactIs_development$1)
      return reactIs_development$1;
    hasRequiredReactIs_development$1 = 1;
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        var hasSymbol2 = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol2 ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol2 ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol2 ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol2 ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol2 ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol2 ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol2 ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol2 ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol2 ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol2 ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol2 ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol2 ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol2 ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol2 ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol2 ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol2 ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal2 = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement2(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        reactIs_development$1.AsyncMode = AsyncMode;
        reactIs_development$1.ConcurrentMode = ConcurrentMode;
        reactIs_development$1.ContextConsumer = ContextConsumer;
        reactIs_development$1.ContextProvider = ContextProvider;
        reactIs_development$1.Element = Element2;
        reactIs_development$1.ForwardRef = ForwardRef;
        reactIs_development$1.Fragment = Fragment;
        reactIs_development$1.Lazy = Lazy;
        reactIs_development$1.Memo = Memo;
        reactIs_development$1.Portal = Portal2;
        reactIs_development$1.Profiler = Profiler;
        reactIs_development$1.StrictMode = StrictMode;
        reactIs_development$1.Suspense = Suspense;
        reactIs_development$1.isAsyncMode = isAsyncMode;
        reactIs_development$1.isConcurrentMode = isConcurrentMode;
        reactIs_development$1.isContextConsumer = isContextConsumer;
        reactIs_development$1.isContextProvider = isContextProvider;
        reactIs_development$1.isElement = isElement2;
        reactIs_development$1.isForwardRef = isForwardRef;
        reactIs_development$1.isFragment = isFragment;
        reactIs_development$1.isLazy = isLazy;
        reactIs_development$1.isMemo = isMemo;
        reactIs_development$1.isPortal = isPortal;
        reactIs_development$1.isProfiler = isProfiler;
        reactIs_development$1.isStrictMode = isStrictMode;
        reactIs_development$1.isSuspense = isSuspense;
        reactIs_development$1.isValidElementType = isValidElementType;
        reactIs_development$1.typeOf = typeOf;
      })();
    }
    return reactIs_development$1;
  }
  var reactIs$2 = reactIs$3.exports;
  var hasRequiredReactIs;
  function requireReactIs() {
    if (hasRequiredReactIs)
      return reactIs$3.exports;
    hasRequiredReactIs = 1;
    "use strict";
    if (process.env.NODE_ENV === "production") {
      reactIs$3.exports = requireReactIs_production_min$1();
    } else {
      reactIs$3.exports = requireReactIs_development$1();
    }
    return reactIs$3.exports;
  }
  /*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  */
  var objectAssign;
  var hasRequiredObjectAssign;
  function requireObjectAssign() {
    if (hasRequiredObjectAssign)
      return objectAssign;
    hasRequiredObjectAssign = 1;
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    objectAssign = shouldUseNative() ? Object.assign : function(target, source) {
      var from2;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from2 = Object(arguments[s]);
        for (var key in from2) {
          if (hasOwnProperty.call(from2, key)) {
            to[key] = from2[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from2);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from2, symbols[i])) {
              to[symbols[i]] = from2[symbols[i]];
            }
          }
        }
      }
      return to;
    };
    return objectAssign;
  }
  var ReactPropTypesSecret_1;
  var hasRequiredReactPropTypesSecret;
  function requireReactPropTypesSecret() {
    if (hasRequiredReactPropTypesSecret)
      return ReactPropTypesSecret_1;
    hasRequiredReactPropTypesSecret = 1;
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    ReactPropTypesSecret_1 = ReactPropTypesSecret;
    return ReactPropTypesSecret_1;
  }
  var has;
  var hasRequiredHas;
  function requireHas() {
    if (hasRequiredHas)
      return has;
    hasRequiredHas = 1;
    has = Function.call.bind(Object.prototype.hasOwnProperty);
    return has;
  }
  var checkPropTypes_1;
  var hasRequiredCheckPropTypes;
  function requireCheckPropTypes() {
    if (hasRequiredCheckPropTypes)
      return checkPropTypes_1;
    hasRequiredCheckPropTypes = 1;
    "use strict";
    var printWarning = function() {
    };
    if (process.env.NODE_ENV !== "production") {
      var ReactPropTypesSecret = requireReactPropTypesSecret();
      var loggedTypeFailures = {};
      var has2 = requireHas();
      printWarning = function(text2) {
        var message = "Warning: " + text2;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function checkPropTypes(typeSpecs, values2, location2, componentName, getStack) {
      if (process.env.NODE_ENV !== "production") {
        for (var typeSpecName in typeSpecs) {
          if (has2(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location2 + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location2 + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (process.env.NODE_ENV !== "production") {
        loggedTypeFailures = {};
      }
    };
    checkPropTypes_1 = checkPropTypes;
    return checkPropTypes_1;
  }
  var factoryWithTypeCheckers;
  var hasRequiredFactoryWithTypeCheckers;
  function requireFactoryWithTypeCheckers() {
    if (hasRequiredFactoryWithTypeCheckers)
      return factoryWithTypeCheckers;
    hasRequiredFactoryWithTypeCheckers = 1;
    "use strict";
    var ReactIs2 = requireReactIs();
    var assign2 = requireObjectAssign();
    var ReactPropTypesSecret = requireReactPropTypesSecret();
    var has2 = requireHas();
    var checkPropTypes = requireCheckPropTypes();
    var printWarning = function() {
    };
    if (process.env.NODE_ENV !== "production") {
      printWarning = function(text2) {
        var message = "Warning: " + text2;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess2) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (process.env.NODE_ENV !== "production") {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location2, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess2) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (process.env.NODE_ENV !== "production" && typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location2, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location2, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location2, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location2, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location2, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location2, propFullName) {
          var propValue = props[propName];
          if (!ReactIs2.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location2, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (process.env.NODE_ENV !== "production") {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location2, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location2, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has2(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          process.env.NODE_ENV !== "production" ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location2, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location2, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has2(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location2, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location2, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location2 + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location2, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location2, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign2({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has2(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location2 + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
    return factoryWithTypeCheckers;
  }
  var factoryWithThrowingShims;
  var hasRequiredFactoryWithThrowingShims;
  function requireFactoryWithThrowingShims() {
    if (hasRequiredFactoryWithThrowingShims)
      return factoryWithThrowingShims;
    hasRequiredFactoryWithThrowingShims = 1;
    "use strict";
    var ReactPropTypesSecret = requireReactPropTypesSecret();
    function emptyFunction() {
    }
    function emptyFunctionWithReset() {
    }
    emptyFunctionWithReset.resetWarningCache = emptyFunction;
    factoryWithThrowingShims = function() {
      function shim(props, propName, componentName, location2, propFullName, secret) {
        if (secret === ReactPropTypesSecret) {
          return;
        }
        var err = new Error(
          "Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types"
        );
        err.name = "Invariant Violation";
        throw err;
      }
      ;
      shim.isRequired = shim;
      function getShim() {
        return shim;
      }
      ;
      var ReactPropTypes = {
        array: shim,
        bigint: shim,
        bool: shim,
        func: shim,
        number: shim,
        object: shim,
        string: shim,
        symbol: shim,
        any: shim,
        arrayOf: getShim,
        element: shim,
        elementType: shim,
        instanceOf: getShim,
        node: shim,
        objectOf: getShim,
        oneOf: getShim,
        oneOfType: getShim,
        shape: getShim,
        exact: getShim,
        checkPropTypes: emptyFunctionWithReset,
        resetWarningCache: emptyFunction
      };
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
    return factoryWithThrowingShims;
  }
  var propTypes = propTypes$1.exports;
  if (process.env.NODE_ENV !== "production") {
    var ReactIs = requireReactIs();
    var throwOnDirectAccess = true;
    propTypes$1.exports = requireFactoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
  } else {
    propTypes$1.exports = requireFactoryWithThrowingShims()();
  }
  var propTypesExports = propTypes$1.exports;
  const PropTypes = /* @__PURE__ */ getDefaultExportFromCjs(propTypesExports);
  function isClassComponent$2(elementType) {
    const {
      prototype = {}
    } = elementType;
    return Boolean(prototype.isReactComponent);
  }
  function acceptingRef(props, propName, componentName, location2, propFullName) {
    const element = props[propName];
    const safePropName = propFullName || propName;
    if (element == null || // When server-side rendering React doesn't warn either.
    // This is not an accurate check for SSR.
    // This is only in place for Emotion compat.
    // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
    typeof window === "undefined") {
      return null;
    }
    let warningHint;
    const elementType = element.type;
    if (typeof elementType === "function" && !isClassComponent$2(elementType)) {
      warningHint = "Did you accidentally use a plain function component for an element instead?";
    }
    if (warningHint !== void 0) {
      return new Error(`Invalid ${location2} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
    }
    return null;
  }
  const elementAcceptingRef = chainPropTypes(PropTypes.element, acceptingRef);
  elementAcceptingRef.isRequired = chainPropTypes(PropTypes.element.isRequired, acceptingRef);
  function isClassComponent$1(elementType) {
    const {
      prototype = {}
    } = elementType;
    return Boolean(prototype.isReactComponent);
  }
  function elementTypeAcceptingRef(props, propName, componentName, location2, propFullName) {
    const propValue = props[propName];
    const safePropName = propFullName || propName;
    if (propValue == null || // When server-side rendering React doesn't warn either.
    // This is not an accurate check for SSR.
    // This is only in place for emotion compat.
    // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
    typeof window === "undefined") {
      return null;
    }
    let warningHint;
    if (typeof propValue === "function" && !isClassComponent$1(propValue)) {
      warningHint = "Did you accidentally provide a plain function component instead?";
    }
    if (warningHint !== void 0) {
      return new Error(`Invalid ${location2} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element type that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
    }
    return null;
  }
  const elementTypeAcceptingRef$1 = chainPropTypes(PropTypes.elementType, elementTypeAcceptingRef);
  const specialProperty = "exact-prop: ​";
  function exactProp(propTypes2) {
    if (process.env.NODE_ENV === "production") {
      return propTypes2;
    }
    return _extends$2({}, propTypes2, {
      [specialProperty]: (props) => {
        const unsupportedProps = Object.keys(props).filter((prop) => !propTypes2.hasOwnProperty(prop));
        if (unsupportedProps.length > 0) {
          return new Error(`The following props are not supported: ${unsupportedProps.map((prop) => `\`${prop}\``).join(", ")}. Please remove them.`);
        }
        return null;
      }
    });
  }
  function formatMuiErrorMessage(code) {
    let url = "https://mui.com/production-error/?code=" + code;
    for (let i = 1; i < arguments.length; i += 1) {
      url += "&args[]=" + encodeURIComponent(arguments[i]);
    }
    return "Minified MUI error #" + code + "; visit " + url + " for the full message.";
  }
  var reactIs$1 = { exports: {} };
  var reactIs_production_min = {};
  /**
   * @license React
   * react-is.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var hasRequiredReactIs_production_min;
  function requireReactIs_production_min() {
    if (hasRequiredReactIs_production_min)
      return reactIs_production_min;
    hasRequiredReactIs_production_min = 1;
    "use strict";
    var b = Symbol.for("react.element"), c = Symbol.for("react.portal"), d = Symbol.for("react.fragment"), e = Symbol.for("react.strict_mode"), f = Symbol.for("react.profiler"), g = Symbol.for("react.provider"), h = Symbol.for("react.context"), k = Symbol.for("react.server_context"), l = Symbol.for("react.forward_ref"), m = Symbol.for("react.suspense"), n = Symbol.for("react.suspense_list"), p = Symbol.for("react.memo"), q = Symbol.for("react.lazy"), t = Symbol.for("react.offscreen"), u;
    u = Symbol.for("react.module.reference");
    function v(a) {
      if ("object" === typeof a && null !== a) {
        var r2 = a.$$typeof;
        switch (r2) {
          case b:
            switch (a = a.type, a) {
              case d:
              case f:
              case e:
              case m:
              case n:
                return a;
              default:
                switch (a = a && a.$$typeof, a) {
                  case k:
                  case h:
                  case l:
                  case q:
                  case p:
                  case g:
                    return a;
                  default:
                    return r2;
                }
            }
          case c:
            return r2;
        }
      }
    }
    reactIs_production_min.ContextConsumer = h;
    reactIs_production_min.ContextProvider = g;
    reactIs_production_min.Element = b;
    reactIs_production_min.ForwardRef = l;
    reactIs_production_min.Fragment = d;
    reactIs_production_min.Lazy = q;
    reactIs_production_min.Memo = p;
    reactIs_production_min.Portal = c;
    reactIs_production_min.Profiler = f;
    reactIs_production_min.StrictMode = e;
    reactIs_production_min.Suspense = m;
    reactIs_production_min.SuspenseList = n;
    reactIs_production_min.isAsyncMode = function() {
      return false;
    };
    reactIs_production_min.isConcurrentMode = function() {
      return false;
    };
    reactIs_production_min.isContextConsumer = function(a) {
      return v(a) === h;
    };
    reactIs_production_min.isContextProvider = function(a) {
      return v(a) === g;
    };
    reactIs_production_min.isElement = function(a) {
      return "object" === typeof a && null !== a && a.$$typeof === b;
    };
    reactIs_production_min.isForwardRef = function(a) {
      return v(a) === l;
    };
    reactIs_production_min.isFragment = function(a) {
      return v(a) === d;
    };
    reactIs_production_min.isLazy = function(a) {
      return v(a) === q;
    };
    reactIs_production_min.isMemo = function(a) {
      return v(a) === p;
    };
    reactIs_production_min.isPortal = function(a) {
      return v(a) === c;
    };
    reactIs_production_min.isProfiler = function(a) {
      return v(a) === f;
    };
    reactIs_production_min.isStrictMode = function(a) {
      return v(a) === e;
    };
    reactIs_production_min.isSuspense = function(a) {
      return v(a) === m;
    };
    reactIs_production_min.isSuspenseList = function(a) {
      return v(a) === n;
    };
    reactIs_production_min.isValidElementType = function(a) {
      return "string" === typeof a || "function" === typeof a || a === d || a === f || a === e || a === m || a === n || a === t || "object" === typeof a && null !== a && (a.$$typeof === q || a.$$typeof === p || a.$$typeof === g || a.$$typeof === h || a.$$typeof === l || a.$$typeof === u || void 0 !== a.getModuleId) ? true : false;
    };
    reactIs_production_min.typeOf = v;
    return reactIs_production_min;
  }
  var reactIs_development = {};
  /**
   * @license React
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var hasRequiredReactIs_development;
  function requireReactIs_development() {
    if (hasRequiredReactIs_development)
      return reactIs_development;
    hasRequiredReactIs_development = 1;
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                  case REACT_SUSPENSE_LIST_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_SERVER_CONTEXT_TYPE:
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal2 = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        var hasWarnedAboutDeprecatedIsConcurrentMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isConcurrentMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
              hasWarnedAboutDeprecatedIsConcurrentMode = true;
              console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement2(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        function isSuspenseList(object) {
          return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
        }
        reactIs_development.ContextConsumer = ContextConsumer;
        reactIs_development.ContextProvider = ContextProvider;
        reactIs_development.Element = Element2;
        reactIs_development.ForwardRef = ForwardRef;
        reactIs_development.Fragment = Fragment;
        reactIs_development.Lazy = Lazy;
        reactIs_development.Memo = Memo;
        reactIs_development.Portal = Portal2;
        reactIs_development.Profiler = Profiler;
        reactIs_development.StrictMode = StrictMode;
        reactIs_development.Suspense = Suspense;
        reactIs_development.SuspenseList = SuspenseList;
        reactIs_development.isAsyncMode = isAsyncMode;
        reactIs_development.isConcurrentMode = isConcurrentMode;
        reactIs_development.isContextConsumer = isContextConsumer;
        reactIs_development.isContextProvider = isContextProvider;
        reactIs_development.isElement = isElement2;
        reactIs_development.isForwardRef = isForwardRef;
        reactIs_development.isFragment = isFragment;
        reactIs_development.isLazy = isLazy;
        reactIs_development.isMemo = isMemo;
        reactIs_development.isPortal = isPortal;
        reactIs_development.isProfiler = isProfiler;
        reactIs_development.isStrictMode = isStrictMode;
        reactIs_development.isSuspense = isSuspense;
        reactIs_development.isSuspenseList = isSuspenseList;
        reactIs_development.isValidElementType = isValidElementType;
        reactIs_development.typeOf = typeOf;
      })();
    }
    return reactIs_development;
  }
  var reactIs = reactIs$1.exports;
  "use strict";
  if (process.env.NODE_ENV === "production") {
    reactIs$1.exports = requireReactIs_production_min();
  } else {
    reactIs$1.exports = requireReactIs_development();
  }
  var reactIsExports = reactIs$1.exports;
  const index = /* @__PURE__ */ getDefaultExportFromCjs(reactIsExports);
  const fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
  function getFunctionName(fn) {
    const match2 = `${fn}`.match(fnNameMatchRegex);
    const name = match2 && match2[1];
    return name || "";
  }
  function getFunctionComponentName(Component, fallback = "") {
    return Component.displayName || Component.name || getFunctionName(Component) || fallback;
  }
  function getWrappedName(outerType, innerType, wrapperName) {
    const functionName = getFunctionComponentName(innerType);
    return outerType.displayName || (functionName !== "" ? `${wrapperName}(${functionName})` : wrapperName);
  }
  function getDisplayName(Component) {
    if (Component == null) {
      return void 0;
    }
    if (typeof Component === "string") {
      return Component;
    }
    if (typeof Component === "function") {
      return getFunctionComponentName(Component, "Component");
    }
    if (typeof Component === "object") {
      switch (Component.$$typeof) {
        case reactIsExports.ForwardRef:
          return getWrappedName(Component, Component.render, "ForwardRef");
        case reactIsExports.Memo:
          return getWrappedName(Component, Component.type, "memo");
        default:
          return void 0;
      }
    }
    return void 0;
  }
  function HTMLElementType(props, propName, componentName, location2, propFullName) {
    if (process.env.NODE_ENV === "production") {
      return null;
    }
    const propValue = props[propName];
    const safePropName = propFullName || propName;
    if (propValue == null) {
      return null;
    }
    if (propValue && propValue.nodeType !== 1) {
      return new Error(`Invalid ${location2} \`${safePropName}\` supplied to \`${componentName}\`. Expected an HTMLElement.`);
    }
    return null;
  }
  const ponyfillGlobal = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : Function("return this")();
  const refType = PropTypes.oneOfType([PropTypes.func, PropTypes.object]);
  function capitalize(string) {
    if (typeof string !== "string") {
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: \`capitalize(string)\` expects a string argument.` : formatMuiErrorMessage(7));
    }
    return string.charAt(0).toUpperCase() + string.slice(1);
  }
  function createChainedFunction(...funcs) {
    return funcs.reduce((acc, func) => {
      if (func == null) {
        return acc;
      }
      return function chainedFunction(...args) {
        acc.apply(this, args);
        func.apply(this, args);
      };
    }, () => {
    });
  }
  function debounce$1(func, wait = 166) {
    let timeout;
    function debounced(...args) {
      const later = () => {
        func.apply(this, args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    }
    debounced.clear = () => {
      clearTimeout(timeout);
    };
    return debounced;
  }
  function deprecatedPropType(validator2, reason) {
    if (process.env.NODE_ENV === "production") {
      return () => null;
    }
    return (props, propName, componentName, location2, propFullName) => {
      const componentNameSafe = componentName || "<<anonymous>>";
      const propFullNameSafe = propFullName || propName;
      if (typeof props[propName] !== "undefined") {
        return new Error(`The ${location2} \`${propFullNameSafe}\` of \`${componentNameSafe}\` is deprecated. ${reason}`);
      }
      return null;
    };
  }
  function isMuiElement(element, muiNames) {
    var _muiName, _element$type;
    return /* @__PURE__ */ React__namespace.isValidElement(element) && muiNames.indexOf(
      // For server components `muiName` is avaialble in element.type._payload.value.muiName
      // relevant info - https://github.com/facebook/react/blob/2807d781a08db8e9873687fccc25c0f12b4fb3d4/packages/react/src/ReactLazy.js#L45
      // eslint-disable-next-line no-underscore-dangle
      (_muiName = element.type.muiName) != null ? _muiName : (_element$type = element.type) == null || (_element$type = _element$type._payload) == null || (_element$type = _element$type.value) == null ? void 0 : _element$type.muiName
    ) !== -1;
  }
  function ownerDocument(node2) {
    return node2 && node2.ownerDocument || document;
  }
  function ownerWindow(node2) {
    const doc = ownerDocument(node2);
    return doc.defaultView || window;
  }
  function requirePropFactory(componentNameInError, Component) {
    if (process.env.NODE_ENV === "production") {
      return () => null;
    }
    const prevPropTypes = Component ? _extends$2({}, Component.propTypes) : null;
    const requireProp = (requiredProp) => (props, propName, componentName, location2, propFullName, ...args) => {
      const propFullNameSafe = propFullName || propName;
      const defaultTypeChecker = prevPropTypes == null ? void 0 : prevPropTypes[propFullNameSafe];
      if (defaultTypeChecker) {
        const typeCheckerResult = defaultTypeChecker(props, propName, componentName, location2, propFullName, ...args);
        if (typeCheckerResult) {
          return typeCheckerResult;
        }
      }
      if (typeof props[propName] !== "undefined" && !props[requiredProp]) {
        return new Error(`The prop \`${propFullNameSafe}\` of \`${componentNameInError}\` can only be used together with the \`${requiredProp}\` prop.`);
      }
      return null;
    };
    return requireProp;
  }
  function setRef(ref, value) {
    if (typeof ref === "function") {
      ref(value);
    } else if (ref) {
      ref.current = value;
    }
  }
  "use client";
  const useEnhancedEffect = typeof window !== "undefined" ? React__namespace.useLayoutEffect : React__namespace.useEffect;
  "use client";
  let globalId = 0;
  function useGlobalId(idOverride) {
    const [defaultId, setDefaultId] = React__namespace.useState(idOverride);
    const id = idOverride || defaultId;
    React__namespace.useEffect(() => {
      if (defaultId == null) {
        globalId += 1;
        setDefaultId(`mui-${globalId}`);
      }
    }, [defaultId]);
    return id;
  }
  const maybeReactUseId = React__namespace["useId".toString()];
  function useId(idOverride) {
    if (maybeReactUseId !== void 0) {
      const reactId = maybeReactUseId();
      return idOverride != null ? idOverride : reactId;
    }
    return useGlobalId(idOverride);
  }
  function unsupportedProp(props, propName, componentName, location2, propFullName) {
    if (process.env.NODE_ENV === "production") {
      return null;
    }
    const propFullNameSafe = propFullName || propName;
    if (typeof props[propName] !== "undefined") {
      return new Error(`The prop \`${propFullNameSafe}\` is not supported. Please remove it.`);
    }
    return null;
  }
  "use client";
  function useControlled({
    controlled,
    default: defaultProp,
    name,
    state = "value"
  }) {
    const {
      current: isControlled
    } = React__namespace.useRef(controlled !== void 0);
    const [valueState, setValue] = React__namespace.useState(defaultProp);
    const value = isControlled ? controlled : valueState;
    if (process.env.NODE_ENV !== "production") {
      React__namespace.useEffect(() => {
        if (isControlled !== (controlled !== void 0)) {
          console.error([`MUI: A component is changing the ${isControlled ? "" : "un"}controlled ${state} state of ${name} to be ${isControlled ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled ${name} element for the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join("\n"));
        }
      }, [state, name, controlled]);
      const {
        current: defaultValue
      } = React__namespace.useRef(defaultProp);
      React__namespace.useEffect(() => {
        if (!isControlled && defaultValue !== defaultProp) {
          console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. To suppress this warning opt to use a controlled ${name}.`].join("\n"));
        }
      }, [JSON.stringify(defaultProp)]);
    }
    const setValueIfUncontrolled = React__namespace.useCallback((newValue) => {
      if (!isControlled) {
        setValue(newValue);
      }
    }, []);
    return [value, setValueIfUncontrolled];
  }
  "use client";
  function useEventCallback(fn) {
    const ref = React__namespace.useRef(fn);
    useEnhancedEffect(() => {
      ref.current = fn;
    });
    return React__namespace.useRef((...args) => (
      // @ts-expect-error hide `this`
      (0, ref.current)(...args)
    )).current;
  }
  "use client";
  function useForkRef(...refs) {
    return React__namespace.useMemo(() => {
      if (refs.every((ref) => ref == null)) {
        return null;
      }
      return (instance) => {
        refs.forEach((ref) => {
          setRef(ref, instance);
        });
      };
    }, refs);
  }
  "use client";
  const UNINITIALIZED = {};
  function useLazyRef(init, initArg) {
    const ref = React__namespace.useRef(UNINITIALIZED);
    if (ref.current === UNINITIALIZED) {
      ref.current = init(initArg);
    }
    return ref;
  }
  "use client";
  const EMPTY$1 = [];
  function useOnMount(fn) {
    React__namespace.useEffect(fn, EMPTY$1);
  }
  "use client";
  class Timeout {
    constructor() {
      this.currentId = 0;
      this.clear = () => {
        if (this.currentId !== 0) {
          clearTimeout(this.currentId);
          this.currentId = 0;
        }
      };
      this.disposeEffect = () => {
        return this.clear;
      };
    }
    static create() {
      return new Timeout();
    }
    /**
     * Executes `fn` after `delay`, clearing any previously scheduled call.
     */
    start(delay, fn) {
      this.clear();
      this.currentId = setTimeout(() => {
        this.currentId = 0;
        fn();
      }, delay);
    }
  }
  function useTimeout() {
    const timeout = useLazyRef(Timeout.create).current;
    useOnMount(timeout.disposeEffect);
    return timeout;
  }
  "use client";
  let hadKeyboardEvent = true;
  let hadFocusVisibleRecently = false;
  const hadFocusVisibleRecentlyTimeout = new Timeout();
  const inputTypesWhitelist = {
    text: true,
    search: true,
    url: true,
    tel: true,
    email: true,
    password: true,
    number: true,
    date: true,
    month: true,
    week: true,
    time: true,
    datetime: true,
    "datetime-local": true
  };
  function focusTriggersKeyboardModality(node2) {
    const {
      type,
      tagName
    } = node2;
    if (tagName === "INPUT" && inputTypesWhitelist[type] && !node2.readOnly) {
      return true;
    }
    if (tagName === "TEXTAREA" && !node2.readOnly) {
      return true;
    }
    if (node2.isContentEditable) {
      return true;
    }
    return false;
  }
  function handleKeyDown$1(event) {
    if (event.metaKey || event.altKey || event.ctrlKey) {
      return;
    }
    hadKeyboardEvent = true;
  }
  function handlePointerDown() {
    hadKeyboardEvent = false;
  }
  function handleVisibilityChange() {
    if (this.visibilityState === "hidden") {
      if (hadFocusVisibleRecently) {
        hadKeyboardEvent = true;
      }
    }
  }
  function prepare(doc) {
    doc.addEventListener("keydown", handleKeyDown$1, true);
    doc.addEventListener("mousedown", handlePointerDown, true);
    doc.addEventListener("pointerdown", handlePointerDown, true);
    doc.addEventListener("touchstart", handlePointerDown, true);
    doc.addEventListener("visibilitychange", handleVisibilityChange, true);
  }
  function teardown(doc) {
    doc.removeEventListener("keydown", handleKeyDown$1, true);
    doc.removeEventListener("mousedown", handlePointerDown, true);
    doc.removeEventListener("pointerdown", handlePointerDown, true);
    doc.removeEventListener("touchstart", handlePointerDown, true);
    doc.removeEventListener("visibilitychange", handleVisibilityChange, true);
  }
  function isFocusVisible(event) {
    const {
      target
    } = event;
    try {
      return target.matches(":focus-visible");
    } catch (error) {
    }
    return hadKeyboardEvent || focusTriggersKeyboardModality(target);
  }
  function useIsFocusVisible() {
    const ref = React__namespace.useCallback((node2) => {
      if (node2 != null) {
        prepare(node2.ownerDocument);
      }
    }, []);
    const isFocusVisibleRef = React__namespace.useRef(false);
    function handleBlurVisible() {
      if (isFocusVisibleRef.current) {
        hadFocusVisibleRecently = true;
        hadFocusVisibleRecentlyTimeout.start(100, () => {
          hadFocusVisibleRecently = false;
        });
        isFocusVisibleRef.current = false;
        return true;
      }
      return false;
    }
    function handleFocusVisible(event) {
      if (isFocusVisible(event)) {
        isFocusVisibleRef.current = true;
        return true;
      }
      return false;
    }
    return {
      isFocusVisibleRef,
      onFocus: handleFocusVisible,
      onBlur: handleBlurVisible,
      ref
    };
  }
  function getScrollbarSize(doc) {
    const documentWidth = doc.documentElement.clientWidth;
    return Math.abs(window.innerWidth - documentWidth);
  }
  let cachedType;
  function detectScrollType() {
    if (cachedType) {
      return cachedType;
    }
    const dummy = document.createElement("div");
    const container = document.createElement("div");
    container.style.width = "10px";
    container.style.height = "1px";
    dummy.appendChild(container);
    dummy.dir = "rtl";
    dummy.style.fontSize = "14px";
    dummy.style.width = "4px";
    dummy.style.height = "1px";
    dummy.style.position = "absolute";
    dummy.style.top = "-1000px";
    dummy.style.overflow = "scroll";
    document.body.appendChild(dummy);
    cachedType = "reverse";
    if (dummy.scrollLeft > 0) {
      cachedType = "default";
    } else {
      dummy.scrollLeft = 1;
      if (dummy.scrollLeft === 0) {
        cachedType = "negative";
      }
    }
    document.body.removeChild(dummy);
    return cachedType;
  }
  function getNormalizedScrollLeft(element, direction) {
    const scrollLeft = element.scrollLeft;
    if (direction !== "rtl") {
      return scrollLeft;
    }
    const type = detectScrollType();
    switch (type) {
      case "negative":
        return element.scrollWidth - element.clientWidth + scrollLeft;
      case "reverse":
        return element.scrollWidth - element.clientWidth - scrollLeft;
      default:
        return scrollLeft;
    }
  }
  "use client";
  const usePreviousProps = (value) => {
    const ref = React__namespace.useRef({});
    React__namespace.useEffect(() => {
      ref.current = value;
    });
    return ref.current;
  };
  function getValidReactChildren(children) {
    return React__namespace.Children.toArray(children).filter((child) => /* @__PURE__ */ React__namespace.isValidElement(child));
  }
  const visuallyHidden = {
    border: 0,
    clip: "rect(0 0 0 0)",
    height: "1px",
    margin: -1,
    overflow: "hidden",
    padding: 0,
    position: "absolute",
    whiteSpace: "nowrap",
    width: "1px"
  };
  function getTypeByValue(value) {
    const valueType = typeof value;
    switch (valueType) {
      case "number":
        if (Number.isNaN(value)) {
          return "NaN";
        }
        if (!Number.isFinite(value)) {
          return "Infinity";
        }
        if (value !== Math.floor(value)) {
          return "float";
        }
        return "number";
      case "object":
        if (value === null) {
          return "null";
        }
        return value.constructor.name;
      default:
        return valueType;
    }
  }
  function ponyfillIsInteger(x) {
    return typeof x === "number" && isFinite(x) && Math.floor(x) === x;
  }
  const isInteger = Number.isInteger || ponyfillIsInteger;
  function requiredInteger(props, propName, componentName, location2) {
    const propValue = props[propName];
    if (propValue == null || !isInteger(propValue)) {
      const propType = getTypeByValue(propValue);
      return new RangeError(`Invalid ${location2} \`${propName}\` of type \`${propType}\` supplied to \`${componentName}\`, expected \`integer\`.`);
    }
    return null;
  }
  function validator(props, propName, ...other) {
    const propValue = props[propName];
    if (propValue === void 0) {
      return null;
    }
    return requiredInteger(props, propName, ...other);
  }
  function validatorNoop() {
    return null;
  }
  validator.isRequired = requiredInteger;
  validatorNoop.isRequired = validatorNoop;
  const integerPropType = process.env.NODE_ENV === "production" ? validatorNoop : validator;
  function resolveProps(defaultProps2, props) {
    const output = _extends$2({}, props);
    Object.keys(defaultProps2).forEach((propName) => {
      if (propName.toString().match(/^(components|slots)$/)) {
        output[propName] = _extends$2({}, defaultProps2[propName], output[propName]);
      } else if (propName.toString().match(/^(componentsProps|slotProps)$/)) {
        const defaultSlotProps = defaultProps2[propName] || {};
        const slotProps = props[propName];
        output[propName] = {};
        if (!slotProps || !Object.keys(slotProps)) {
          output[propName] = defaultSlotProps;
        } else if (!defaultSlotProps || !Object.keys(defaultSlotProps)) {
          output[propName] = slotProps;
        } else {
          output[propName] = _extends$2({}, slotProps);
          Object.keys(defaultSlotProps).forEach((slotPropName) => {
            output[propName][slotPropName] = resolveProps(defaultSlotProps[slotPropName], slotProps[slotPropName]);
          });
        }
      } else if (output[propName] === void 0) {
        output[propName] = defaultProps2[propName];
      }
    });
    return output;
  }
  function composeClasses(slots, getUtilityClass, classes = void 0) {
    const output = {};
    Object.keys(slots).forEach(
      // `Object.keys(slots)` can't be wider than `T` because we infer `T` from `slots`.
      // @ts-expect-error https://github.com/microsoft/TypeScript/pull/12253#issuecomment-263132208
      (slot) => {
        output[slot] = slots[slot].reduce((acc, key) => {
          if (key) {
            const utilityClass = getUtilityClass(key);
            if (utilityClass !== "") {
              acc.push(utilityClass);
            }
            if (classes && classes[key]) {
              acc.push(classes[key]);
            }
          }
          return acc;
        }, []).join(" ");
      }
    );
    return output;
  }
  const defaultGenerator = (componentName) => componentName;
  const createClassNameGenerator = () => {
    let generate = defaultGenerator;
    return {
      configure(generator) {
        generate = generator;
      },
      generate(componentName) {
        return generate(componentName);
      },
      reset() {
        generate = defaultGenerator;
      }
    };
  };
  const ClassNameGenerator = createClassNameGenerator();
  const globalStateClasses = {
    active: "active",
    checked: "checked",
    completed: "completed",
    disabled: "disabled",
    error: "error",
    expanded: "expanded",
    focused: "focused",
    focusVisible: "focusVisible",
    open: "open",
    readOnly: "readOnly",
    required: "required",
    selected: "selected"
  };
  function generateUtilityClass(componentName, slot, globalStatePrefix = "Mui") {
    const globalStateClass = globalStateClasses[slot];
    return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${ClassNameGenerator.generate(componentName)}-${slot}`;
  }
  function isGlobalState(slot) {
    return globalStateClasses[slot] !== void 0;
  }
  function generateUtilityClasses(componentName, slots, globalStatePrefix = "Mui") {
    const result = {};
    slots.forEach((slot) => {
      result[slot] = generateUtilityClass(componentName, slot, globalStatePrefix);
    });
    return result;
  }
  function clamp$1(val, min2 = Number.MIN_SAFE_INTEGER, max2 = Number.MAX_SAFE_INTEGER) {
    return Math.max(min2, Math.min(val, max2));
  }
  /**
   * @mui/utils v5.15.9
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function r$1(e) {
    var t, f, n = "";
    if ("string" == typeof e || "number" == typeof e)
      n += e;
    else if ("object" == typeof e)
      if (Array.isArray(e))
        for (t = 0; t < e.length; t++)
          e[t] && (f = r$1(e[t])) && (n && (n += " "), n += f);
      else
        for (t in e)
          e[t] && (n && (n += " "), n += t);
    return n;
  }
  function clsx$1() {
    for (var e, t, f = 0, n = ""; f < arguments.length; )
      (e = arguments[f++]) && (t = r$1(e)) && (n && (n += " "), n += t);
    return n;
  }
  function isHostComponent(element) {
    return typeof element === "string";
  }
  function appendOwnerState(elementType, otherProps, ownerState) {
    if (elementType === void 0 || isHostComponent(elementType)) {
      return otherProps;
    }
    return _extends$2({}, otherProps, {
      ownerState: _extends$2({}, otherProps.ownerState, ownerState)
    });
  }
  function areArraysEqual(array1, array2, itemComparer = (a, b) => a === b) {
    return array1.length === array2.length && array1.every((value, index2) => itemComparer(value, array2[index2]));
  }
  function extractEventHandlers(object, excludeKeys = []) {
    if (object === void 0) {
      return {};
    }
    const result = {};
    Object.keys(object).filter((prop) => prop.match(/^on[A-Z]/) && typeof object[prop] === "function" && !excludeKeys.includes(prop)).forEach((prop) => {
      result[prop] = object[prop];
    });
    return result;
  }
  function resolveComponentProps(componentProps, ownerState) {
    if (typeof componentProps === "function") {
      return componentProps(ownerState);
    }
    return componentProps;
  }
  function omitEventHandlers(object) {
    if (object === void 0) {
      return {};
    }
    const result = {};
    Object.keys(object).filter((prop) => !(prop.match(/^on[A-Z]/) && typeof object[prop] === "function")).forEach((prop) => {
      result[prop] = object[prop];
    });
    return result;
  }
  function mergeSlotProps(parameters) {
    const {
      getSlotProps,
      additionalProps,
      externalSlotProps,
      externalForwardedProps,
      className
    } = parameters;
    if (!getSlotProps) {
      const joinedClasses2 = clsx$1(externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className, className, additionalProps == null ? void 0 : additionalProps.className);
      const mergedStyle2 = _extends$2({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
      const props2 = _extends$2({}, additionalProps, externalForwardedProps, externalSlotProps);
      if (joinedClasses2.length > 0) {
        props2.className = joinedClasses2;
      }
      if (Object.keys(mergedStyle2).length > 0) {
        props2.style = mergedStyle2;
      }
      return {
        props: props2,
        internalRef: void 0
      };
    }
    const eventHandlers = extractEventHandlers(_extends$2({}, externalForwardedProps, externalSlotProps));
    const componentsPropsWithoutEventHandlers = omitEventHandlers(externalSlotProps);
    const otherPropsWithoutEventHandlers = omitEventHandlers(externalForwardedProps);
    const internalSlotProps = getSlotProps(eventHandlers);
    const joinedClasses = clsx$1(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
    const mergedStyle = _extends$2({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
    const props = _extends$2({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);
    if (joinedClasses.length > 0) {
      props.className = joinedClasses;
    }
    if (Object.keys(mergedStyle).length > 0) {
      props.style = mergedStyle;
    }
    return {
      props,
      internalRef: internalSlotProps.ref
    };
  }
  const _excluded$1H = ["elementType", "externalSlotProps", "ownerState"];
  function useSlotProps(parameters) {
    var _parameters$additiona;
    const {
      elementType,
      externalSlotProps,
      ownerState
    } = parameters, rest = _objectWithoutPropertiesLoose(parameters, _excluded$1H);
    const resolvedComponentsProps = resolveComponentProps(externalSlotProps, ownerState);
    const {
      props: mergedProps,
      internalRef
    } = mergeSlotProps(_extends$2({}, rest, {
      externalSlotProps: resolvedComponentsProps
    }));
    const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);
    const props = appendOwnerState(elementType, _extends$2({}, mergedProps, {
      ref
    }), ownerState);
    return props;
  }
  function stripDiacritics(string) {
    return typeof string.normalize !== "undefined" ? string.normalize("NFD").replace(/[\u0300-\u036f]/g, "") : string;
  }
  function createFilterOptions(config2 = {}) {
    const {
      ignoreAccents = true,
      ignoreCase = true,
      limit,
      matchFrom = "any",
      stringify: stringify2,
      trim: trim2 = false
    } = config2;
    return (options, {
      inputValue,
      getOptionLabel
    }) => {
      let input = trim2 ? inputValue.trim() : inputValue;
      if (ignoreCase) {
        input = input.toLowerCase();
      }
      if (ignoreAccents) {
        input = stripDiacritics(input);
      }
      const filteredOptions = !input ? options : options.filter((option) => {
        let candidate = (stringify2 || getOptionLabel)(option);
        if (ignoreCase) {
          candidate = candidate.toLowerCase();
        }
        if (ignoreAccents) {
          candidate = stripDiacritics(candidate);
        }
        return matchFrom === "start" ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;
      });
      return typeof limit === "number" ? filteredOptions.slice(0, limit) : filteredOptions;
    };
  }
  function findIndex(array, comp) {
    for (let i = 0; i < array.length; i += 1) {
      if (comp(array[i])) {
        return i;
      }
    }
    return -1;
  }
  const defaultFilterOptions = createFilterOptions();
  const pageSize$1 = 5;
  const defaultIsActiveElementInListbox = (listboxRef) => {
    var _listboxRef$current$p;
    return listboxRef.current !== null && ((_listboxRef$current$p = listboxRef.current.parentElement) == null ? void 0 : _listboxRef$current$p.contains(document.activeElement));
  };
  function useAutocomplete(props) {
    const {
      // eslint-disable-next-line @typescript-eslint/naming-convention
      unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      unstable_classNamePrefix = "Mui",
      autoComplete = false,
      autoHighlight = false,
      autoSelect = false,
      blurOnSelect = false,
      clearOnBlur = !props.freeSolo,
      clearOnEscape = false,
      componentName = "useAutocomplete",
      defaultValue = props.multiple ? [] : null,
      disableClearable = false,
      disableCloseOnSelect = false,
      disabled: disabledProp,
      disabledItemsFocusable = false,
      disableListWrap = false,
      filterOptions = defaultFilterOptions,
      filterSelectedOptions = false,
      freeSolo = false,
      getOptionDisabled,
      getOptionLabel: getOptionLabelProp = (option) => {
        var _option$label;
        return (_option$label = option.label) != null ? _option$label : option;
      },
      groupBy: groupBy2,
      handleHomeEndKeys = !props.freeSolo,
      id: idProp,
      includeInputInList = false,
      inputValue: inputValueProp,
      isOptionEqualToValue = (option, value2) => option === value2,
      multiple = false,
      onChange,
      onClose: onClose2,
      onHighlightChange,
      onInputChange,
      onOpen: onOpen2,
      open: openProp,
      openOnFocus = false,
      options,
      readOnly = false,
      selectOnFocus = !props.freeSolo,
      value: valueProp
    } = props;
    const id = useId(idProp);
    let getOptionLabel = getOptionLabelProp;
    getOptionLabel = (option) => {
      const optionLabel = getOptionLabelProp(option);
      if (typeof optionLabel !== "string") {
        if (process.env.NODE_ENV !== "production") {
          const erroneousReturn = optionLabel === void 0 ? "undefined" : `${typeof optionLabel} (${optionLabel})`;
          console.error(`MUI: The \`getOptionLabel\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);
        }
        return String(optionLabel);
      }
      return optionLabel;
    };
    const ignoreFocus = React__namespace.useRef(false);
    const firstFocus = React__namespace.useRef(true);
    const inputRef = React__namespace.useRef(null);
    const listboxRef = React__namespace.useRef(null);
    const [anchorEl, setAnchorEl] = React__namespace.useState(null);
    const [focusedTag, setFocusedTag] = React__namespace.useState(-1);
    const defaultHighlighted = autoHighlight ? 0 : -1;
    const highlightedIndexRef = React__namespace.useRef(defaultHighlighted);
    const [value, setValueState] = useControlled({
      controlled: valueProp,
      default: defaultValue,
      name: componentName
    });
    const [inputValue, setInputValueState] = useControlled({
      controlled: inputValueProp,
      default: "",
      name: componentName,
      state: "inputValue"
    });
    const [focused, setFocused] = React__namespace.useState(false);
    const resetInputValue = React__namespace.useCallback((event, newValue) => {
      const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;
      if (!isOptionSelected && !clearOnBlur) {
        return;
      }
      let newInputValue;
      if (multiple) {
        newInputValue = "";
      } else if (newValue == null) {
        newInputValue = "";
      } else {
        const optionLabel = getOptionLabel(newValue);
        newInputValue = typeof optionLabel === "string" ? optionLabel : "";
      }
      if (inputValue === newInputValue) {
        return;
      }
      setInputValueState(newInputValue);
      if (onInputChange) {
        onInputChange(event, newInputValue, "reset");
      }
    }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);
    const [open, setOpenState] = useControlled({
      controlled: openProp,
      default: false,
      name: componentName,
      state: "open"
    });
    const [inputPristine, setInputPristine] = React__namespace.useState(true);
    const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);
    const popupOpen = open && !readOnly;
    const filteredOptions = popupOpen ? filterOptions(
      options.filter((option) => {
        if (filterSelectedOptions && (multiple ? value : [value]).some((value2) => value2 !== null && isOptionEqualToValue(option, value2))) {
          return false;
        }
        return true;
      }),
      // we use the empty string to manipulate `filterOptions` to not filter any options
      // i.e. the filter predicate always returns true
      {
        inputValue: inputValueIsSelectedValue && inputPristine ? "" : inputValue,
        getOptionLabel
      }
    ) : [];
    const previousProps = usePreviousProps({
      filteredOptions,
      value
    });
    React__namespace.useEffect(() => {
      const valueChange = value !== previousProps.value;
      if (focused && !valueChange) {
        return;
      }
      if (freeSolo && !valueChange) {
        return;
      }
      resetInputValue(null, value);
    }, [value, resetInputValue, focused, previousProps.value, freeSolo]);
    const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;
    if (process.env.NODE_ENV !== "production") {
      if (value !== null && !freeSolo && options.length > 0) {
        const missingValue = (multiple ? value : [value]).filter((value2) => !options.some((option) => isOptionEqualToValue(option, value2)));
        if (missingValue.length > 0) {
          console.warn([`MUI: The value provided to ${componentName} is invalid.`, `None of the options match with \`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\`.`, "You can use the `isOptionEqualToValue` prop to customize the equality test."].join("\n"));
        }
      }
    }
    const focusTag = useEventCallback((tagToFocus) => {
      if (tagToFocus === -1) {
        inputRef.current.focus();
      } else {
        anchorEl.querySelector(`[data-tag-index="${tagToFocus}"]`).focus();
      }
    });
    React__namespace.useEffect(() => {
      if (multiple && focusedTag > value.length - 1) {
        setFocusedTag(-1);
        focusTag(-1);
      }
    }, [value, multiple, focusedTag, focusTag]);
    function validOptionIndex(index2, direction) {
      if (!listboxRef.current || index2 === -1) {
        return -1;
      }
      let nextFocus = index2;
      while (true) {
        if (direction === "next" && nextFocus === filteredOptions.length || direction === "previous" && nextFocus === -1) {
          return -1;
        }
        const option = listboxRef.current.querySelector(`[data-option-index="${nextFocus}"]`);
        const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute("aria-disabled") === "true";
        if (option && !option.hasAttribute("tabindex") || nextFocusDisabled) {
          nextFocus += direction === "next" ? 1 : -1;
        } else {
          return nextFocus;
        }
      }
    }
    const setHighlightedIndex = useEventCallback(({
      event,
      index: index2,
      reason = "auto"
    }) => {
      highlightedIndexRef.current = index2;
      if (index2 === -1) {
        inputRef.current.removeAttribute("aria-activedescendant");
      } else {
        inputRef.current.setAttribute("aria-activedescendant", `${id}-option-${index2}`);
      }
      if (onHighlightChange) {
        onHighlightChange(event, index2 === -1 ? null : filteredOptions[index2], reason);
      }
      if (!listboxRef.current) {
        return;
      }
      const prev2 = listboxRef.current.querySelector(`[role="option"].${unstable_classNamePrefix}-focused`);
      if (prev2) {
        prev2.classList.remove(`${unstable_classNamePrefix}-focused`);
        prev2.classList.remove(`${unstable_classNamePrefix}-focusVisible`);
      }
      const listboxNode = listboxRef.current.parentElement.querySelector('[role="listbox"]');
      if (!listboxNode) {
        return;
      }
      if (index2 === -1) {
        listboxNode.scrollTop = 0;
        return;
      }
      const option = listboxRef.current.querySelector(`[data-option-index="${index2}"]`);
      if (!option) {
        return;
      }
      option.classList.add(`${unstable_classNamePrefix}-focused`);
      if (reason === "keyboard") {
        option.classList.add(`${unstable_classNamePrefix}-focusVisible`);
      }
      if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== "mouse") {
        const element = option;
        const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;
        const elementBottom = element.offsetTop + element.offsetHeight;
        if (elementBottom > scrollBottom) {
          listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;
        } else if (element.offsetTop - element.offsetHeight * (groupBy2 ? 1.3 : 0) < listboxNode.scrollTop) {
          listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy2 ? 1.3 : 0);
        }
      }
    });
    const changeHighlightedIndex = useEventCallback(({
      event,
      diff,
      direction = "next",
      reason = "auto"
    }) => {
      if (!popupOpen) {
        return;
      }
      const getNextIndex = () => {
        const maxIndex = filteredOptions.length - 1;
        if (diff === "reset") {
          return defaultHighlighted;
        }
        if (diff === "start") {
          return 0;
        }
        if (diff === "end") {
          return maxIndex;
        }
        const newIndex = highlightedIndexRef.current + diff;
        if (newIndex < 0) {
          if (newIndex === -1 && includeInputInList) {
            return -1;
          }
          if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {
            return 0;
          }
          return maxIndex;
        }
        if (newIndex > maxIndex) {
          if (newIndex === maxIndex + 1 && includeInputInList) {
            return -1;
          }
          if (disableListWrap || Math.abs(diff) > 1) {
            return maxIndex;
          }
          return 0;
        }
        return newIndex;
      };
      const nextIndex = validOptionIndex(getNextIndex(), direction);
      setHighlightedIndex({
        index: nextIndex,
        reason,
        event
      });
      if (autoComplete && diff !== "reset") {
        if (nextIndex === -1) {
          inputRef.current.value = inputValue;
        } else {
          const option = getOptionLabel(filteredOptions[nextIndex]);
          inputRef.current.value = option;
          const index2 = option.toLowerCase().indexOf(inputValue.toLowerCase());
          if (index2 === 0 && inputValue.length > 0) {
            inputRef.current.setSelectionRange(inputValue.length, option.length);
          }
        }
      }
    });
    const checkHighlightedOptionExists = () => {
      const isSameValue = (value1, value2) => {
        const label1 = value1 ? getOptionLabel(value1) : "";
        const label2 = value2 ? getOptionLabel(value2) : "";
        return label1 === label2;
      };
      if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && (multiple ? value.length === previousProps.value.length && previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val)) : isSameValue(previousProps.value, value))) {
        const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];
        if (previousHighlightedOption) {
          const previousHighlightedOptionExists = filteredOptions.some((option) => {
            return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);
          });
          if (previousHighlightedOptionExists) {
            return true;
          }
        }
      }
      return false;
    };
    const syncHighlightedIndex = React__namespace.useCallback(() => {
      if (!popupOpen) {
        return;
      }
      if (checkHighlightedOptionExists()) {
        return;
      }
      const valueItem = multiple ? value[0] : value;
      if (filteredOptions.length === 0 || valueItem == null) {
        changeHighlightedIndex({
          diff: "reset"
        });
        return;
      }
      if (!listboxRef.current) {
        return;
      }
      if (valueItem != null) {
        const currentOption = filteredOptions[highlightedIndexRef.current];
        if (multiple && currentOption && findIndex(value, (val) => isOptionEqualToValue(currentOption, val)) !== -1) {
          return;
        }
        const itemIndex = findIndex(filteredOptions, (optionItem) => isOptionEqualToValue(optionItem, valueItem));
        if (itemIndex === -1) {
          changeHighlightedIndex({
            diff: "reset"
          });
        } else {
          setHighlightedIndex({
            index: itemIndex
          });
        }
        return;
      }
      if (highlightedIndexRef.current >= filteredOptions.length - 1) {
        setHighlightedIndex({
          index: filteredOptions.length - 1
        });
        return;
      }
      setHighlightedIndex({
        index: highlightedIndexRef.current
      });
    }, [
      // Only sync the highlighted index when the option switch between empty and not
      filteredOptions.length,
      // Don't sync the highlighted index with the value when multiple
      // eslint-disable-next-line react-hooks/exhaustive-deps
      multiple ? false : value,
      filterSelectedOptions,
      changeHighlightedIndex,
      setHighlightedIndex,
      popupOpen,
      inputValue,
      multiple
    ]);
    const handleListboxRef = useEventCallback((node2) => {
      setRef(listboxRef, node2);
      if (!node2) {
        return;
      }
      syncHighlightedIndex();
    });
    if (process.env.NODE_ENV !== "production") {
      React__namespace.useEffect(() => {
        if (!inputRef.current || inputRef.current.nodeName !== "INPUT") {
          if (inputRef.current && inputRef.current.nodeName === "TEXTAREA") {
            console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (e.g. enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join("\n"));
          } else {
            console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, "", componentName === "useAutocomplete" ? "Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed." : "Make sure you have customized the input component correctly."].join("\n"));
          }
        }
      }, [componentName]);
    }
    React__namespace.useEffect(() => {
      syncHighlightedIndex();
    }, [syncHighlightedIndex]);
    const handleOpen = (event) => {
      if (open) {
        return;
      }
      setOpenState(true);
      setInputPristine(true);
      if (onOpen2) {
        onOpen2(event);
      }
    };
    const handleClose = (event, reason) => {
      if (!open) {
        return;
      }
      setOpenState(false);
      if (onClose2) {
        onClose2(event, reason);
      }
    };
    const handleValue = (event, newValue, reason, details) => {
      if (multiple) {
        if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {
          return;
        }
      } else if (value === newValue) {
        return;
      }
      if (onChange) {
        onChange(event, newValue, reason, details);
      }
      setValueState(newValue);
    };
    const isTouch = React__namespace.useRef(false);
    const selectNewValue = (event, option, reasonProp = "selectOption", origin = "options") => {
      let reason = reasonProp;
      let newValue = option;
      if (multiple) {
        newValue = Array.isArray(value) ? value.slice() : [];
        if (process.env.NODE_ENV !== "production") {
          const matches = newValue.filter((val) => isOptionEqualToValue(option, val));
          if (matches.length > 1) {
            console.error([`MUI: The \`isOptionEqualToValue\` method of ${componentName} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join("\n"));
          }
        }
        const itemIndex = findIndex(newValue, (valueItem) => isOptionEqualToValue(option, valueItem));
        if (itemIndex === -1) {
          newValue.push(option);
        } else if (origin !== "freeSolo") {
          newValue.splice(itemIndex, 1);
          reason = "removeOption";
        }
      }
      resetInputValue(event, newValue);
      handleValue(event, newValue, reason, {
        option
      });
      if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {
        handleClose(event, reason);
      }
      if (blurOnSelect === true || blurOnSelect === "touch" && isTouch.current || blurOnSelect === "mouse" && !isTouch.current) {
        inputRef.current.blur();
      }
    };
    function validTagIndex(index2, direction) {
      if (index2 === -1) {
        return -1;
      }
      let nextFocus = index2;
      while (true) {
        if (direction === "next" && nextFocus === value.length || direction === "previous" && nextFocus === -1) {
          return -1;
        }
        const option = anchorEl.querySelector(`[data-tag-index="${nextFocus}"]`);
        if (!option || !option.hasAttribute("tabindex") || option.disabled || option.getAttribute("aria-disabled") === "true") {
          nextFocus += direction === "next" ? 1 : -1;
        } else {
          return nextFocus;
        }
      }
    }
    const handleFocusTag = (event, direction) => {
      if (!multiple) {
        return;
      }
      if (inputValue === "") {
        handleClose(event, "toggleInput");
      }
      let nextTag = focusedTag;
      if (focusedTag === -1) {
        if (inputValue === "" && direction === "previous") {
          nextTag = value.length - 1;
        }
      } else {
        nextTag += direction === "next" ? 1 : -1;
        if (nextTag < 0) {
          nextTag = 0;
        }
        if (nextTag === value.length) {
          nextTag = -1;
        }
      }
      nextTag = validTagIndex(nextTag, direction);
      setFocusedTag(nextTag);
      focusTag(nextTag);
    };
    const handleClear = (event) => {
      ignoreFocus.current = true;
      setInputValueState("");
      if (onInputChange) {
        onInputChange(event, "", "clear");
      }
      handleValue(event, multiple ? [] : null, "clear");
    };
    const handleKeyDown2 = (other) => (event) => {
      if (other.onKeyDown) {
        other.onKeyDown(event);
      }
      if (event.defaultMuiPrevented) {
        return;
      }
      if (focusedTag !== -1 && ["ArrowLeft", "ArrowRight"].indexOf(event.key) === -1) {
        setFocusedTag(-1);
        focusTag(-1);
      }
      if (event.which !== 229) {
        switch (event.key) {
          case "Home":
            if (popupOpen && handleHomeEndKeys) {
              event.preventDefault();
              changeHighlightedIndex({
                diff: "start",
                direction: "next",
                reason: "keyboard",
                event
              });
            }
            break;
          case "End":
            if (popupOpen && handleHomeEndKeys) {
              event.preventDefault();
              changeHighlightedIndex({
                diff: "end",
                direction: "previous",
                reason: "keyboard",
                event
              });
            }
            break;
          case "PageUp":
            event.preventDefault();
            changeHighlightedIndex({
              diff: -pageSize$1,
              direction: "previous",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "PageDown":
            event.preventDefault();
            changeHighlightedIndex({
              diff: pageSize$1,
              direction: "next",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "ArrowDown":
            event.preventDefault();
            changeHighlightedIndex({
              diff: 1,
              direction: "next",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "ArrowUp":
            event.preventDefault();
            changeHighlightedIndex({
              diff: -1,
              direction: "previous",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "ArrowLeft":
            handleFocusTag(event, "previous");
            break;
          case "ArrowRight":
            handleFocusTag(event, "next");
            break;
          case "Enter":
            if (highlightedIndexRef.current !== -1 && popupOpen) {
              const option = filteredOptions[highlightedIndexRef.current];
              const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
              event.preventDefault();
              if (disabled) {
                return;
              }
              selectNewValue(event, option, "selectOption");
              if (autoComplete) {
                inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);
              }
            } else if (freeSolo && inputValue !== "" && inputValueIsSelectedValue === false) {
              if (multiple) {
                event.preventDefault();
              }
              selectNewValue(event, inputValue, "createOption", "freeSolo");
            }
            break;
          case "Escape":
            if (popupOpen) {
              event.preventDefault();
              event.stopPropagation();
              handleClose(event, "escape");
            } else if (clearOnEscape && (inputValue !== "" || multiple && value.length > 0)) {
              event.preventDefault();
              event.stopPropagation();
              handleClear(event);
            }
            break;
          case "Backspace":
            if (multiple && !readOnly && inputValue === "" && value.length > 0) {
              const index2 = focusedTag === -1 ? value.length - 1 : focusedTag;
              const newValue = value.slice();
              newValue.splice(index2, 1);
              handleValue(event, newValue, "removeOption", {
                option: value[index2]
              });
            }
            break;
          case "Delete":
            if (multiple && !readOnly && inputValue === "" && value.length > 0 && focusedTag !== -1) {
              const index2 = focusedTag;
              const newValue = value.slice();
              newValue.splice(index2, 1);
              handleValue(event, newValue, "removeOption", {
                option: value[index2]
              });
            }
            break;
          default:
        }
      }
    };
    const handleFocus = (event) => {
      setFocused(true);
      if (openOnFocus && !ignoreFocus.current) {
        handleOpen(event);
      }
    };
    const handleBlur2 = (event) => {
      if (unstable_isActiveElementInListbox(listboxRef)) {
        inputRef.current.focus();
        return;
      }
      setFocused(false);
      firstFocus.current = true;
      ignoreFocus.current = false;
      if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {
        selectNewValue(event, filteredOptions[highlightedIndexRef.current], "blur");
      } else if (autoSelect && freeSolo && inputValue !== "") {
        selectNewValue(event, inputValue, "blur", "freeSolo");
      } else if (clearOnBlur) {
        resetInputValue(event, value);
      }
      handleClose(event, "blur");
    };
    const handleInputChange = (event) => {
      const newValue = event.target.value;
      if (inputValue !== newValue) {
        setInputValueState(newValue);
        setInputPristine(false);
        if (onInputChange) {
          onInputChange(event, newValue, "input");
        }
      }
      if (newValue === "") {
        if (!disableClearable && !multiple) {
          handleValue(event, null, "clear");
        }
      } else {
        handleOpen(event);
      }
    };
    const handleOptionMouseOver = (event) => {
      setHighlightedIndex({
        event,
        index: Number(event.currentTarget.getAttribute("data-option-index")),
        reason: "mouse"
      });
    };
    const handleOptionTouchStart = () => {
      isTouch.current = true;
    };
    const handleOptionClick = (event) => {
      const index2 = Number(event.currentTarget.getAttribute("data-option-index"));
      selectNewValue(event, filteredOptions[index2], "selectOption");
      isTouch.current = false;
    };
    const handleTagDelete = (index2) => (event) => {
      const newValue = value.slice();
      newValue.splice(index2, 1);
      handleValue(event, newValue, "removeOption", {
        option: value[index2]
      });
    };
    const handlePopupIndicator = (event) => {
      if (open) {
        handleClose(event, "toggleInput");
      } else {
        handleOpen(event);
      }
    };
    const handleMouseDown = (event) => {
      if (event.target.getAttribute("id") !== id) {
        event.preventDefault();
      }
    };
    const handleClick = () => {
      inputRef.current.focus();
      if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {
        inputRef.current.select();
      }
      firstFocus.current = false;
    };
    const handleInputMouseDown = (event) => {
      if (inputValue === "" || !open) {
        handlePopupIndicator(event);
      }
    };
    let dirty = freeSolo && inputValue.length > 0;
    dirty = dirty || (multiple ? value.length > 0 : value !== null);
    let groupedOptions = filteredOptions;
    if (groupBy2) {
      const indexBy = /* @__PURE__ */ new Map();
      let warn = false;
      groupedOptions = filteredOptions.reduce((acc, option, index2) => {
        const group = groupBy2(option);
        if (acc.length > 0 && acc[acc.length - 1].group === group) {
          acc[acc.length - 1].options.push(option);
        } else {
          if (process.env.NODE_ENV !== "production") {
            if (indexBy.get(group) && !warn) {
              console.warn(`MUI: The options provided combined with the \`groupBy\` method of ${componentName} returns duplicated headers.`, "You can solve the issue by sorting the options with the output of `groupBy`.");
              warn = true;
            }
            indexBy.set(group, true);
          }
          acc.push({
            key: index2,
            index: index2,
            group,
            options: [option]
          });
        }
        return acc;
      }, []);
    }
    if (disabledProp && focused) {
      handleBlur2();
    }
    return {
      getRootProps: (other = {}) => _extends$2({
        "aria-owns": listboxAvailable ? `${id}-listbox` : null
      }, other, {
        onKeyDown: handleKeyDown2(other),
        onMouseDown: handleMouseDown,
        onClick: handleClick
      }),
      getInputLabelProps: () => ({
        id: `${id}-label`,
        htmlFor: id
      }),
      getInputProps: () => ({
        id,
        value: inputValue,
        onBlur: handleBlur2,
        onFocus: handleFocus,
        onChange: handleInputChange,
        onMouseDown: handleInputMouseDown,
        // if open then this is handled imperativeley so don't let react override
        // only have an opinion about this when closed
        "aria-activedescendant": popupOpen ? "" : null,
        "aria-autocomplete": autoComplete ? "both" : "list",
        "aria-controls": listboxAvailable ? `${id}-listbox` : void 0,
        "aria-expanded": listboxAvailable,
        // Disable browser's suggestion that might overlap with the popup.
        // Handle autocomplete but not autofill.
        autoComplete: "off",
        ref: inputRef,
        autoCapitalize: "none",
        spellCheck: "false",
        role: "combobox",
        disabled: disabledProp
      }),
      getClearProps: () => ({
        tabIndex: -1,
        onClick: handleClear
      }),
      getPopupIndicatorProps: () => ({
        tabIndex: -1,
        onClick: handlePopupIndicator
      }),
      getTagProps: ({
        index: index2
      }) => _extends$2({
        key: index2,
        "data-tag-index": index2,
        tabIndex: -1
      }, !readOnly && {
        onDelete: handleTagDelete(index2)
      }),
      getListboxProps: () => ({
        role: "listbox",
        id: `${id}-listbox`,
        "aria-labelledby": `${id}-label`,
        ref: handleListboxRef,
        onMouseDown: (event) => {
          event.preventDefault();
        }
      }),
      getOptionProps: ({
        index: index2,
        option
      }) => {
        const selected = (multiple ? value : [value]).some((value2) => value2 != null && isOptionEqualToValue(option, value2));
        const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
        return {
          key: getOptionLabel(option),
          tabIndex: -1,
          role: "option",
          id: `${id}-option-${index2}`,
          onMouseOver: handleOptionMouseOver,
          onClick: handleOptionClick,
          onTouchStart: handleOptionTouchStart,
          "data-option-index": index2,
          "aria-disabled": disabled,
          "aria-selected": selected
        };
      },
      id,
      inputValue,
      value,
      dirty,
      popupOpen,
      focused: focused || focusedTag !== -1,
      anchorEl,
      setAnchorEl,
      focusedTag,
      groupedOptions
    };
  }
  function useBadge(parameters) {
    const {
      badgeContent: badgeContentProp,
      invisible: invisibleProp = false,
      max: maxProp = 99,
      showZero = false
    } = parameters;
    const prevProps = usePreviousProps({
      badgeContent: badgeContentProp,
      max: maxProp
    });
    let invisible = invisibleProp;
    if (invisibleProp === false && badgeContentProp === 0 && !showZero) {
      invisible = true;
    }
    const {
      badgeContent,
      max: max2 = maxProp
    } = invisible ? prevProps : parameters;
    const displayValue = badgeContent && Number(badgeContent) > max2 ? `${max2}+` : badgeContent;
    return {
      badgeContent,
      invisible,
      max: max2,
      displayValue
    };
  }
  function getBadgeUnstyledUtilityClass(slot) {
    return generateUtilityClass("MuiBadge", slot);
  }
  const badgeUnstyledClasses = generateUtilityClasses("MuiBadge", ["root", "badge", "invisible"]);
  const _excluded$1G = ["badgeContent", "component", "children", "invisible", "max", "slotProps", "slots", "showZero"];
  const useUtilityClasses$1a = (ownerState) => {
    const {
      invisible
    } = ownerState;
    const slots = {
      root: ["root"],
      badge: ["badge", invisible && "invisible"]
    };
    return composeClasses(slots, getBadgeUnstyledUtilityClass, void 0);
  };
  const BadgeUnstyled = /* @__PURE__ */ React__namespace.forwardRef(function BadgeUnstyled2(props, ref) {
    const {
      component,
      children,
      max: maxProp = 99,
      slotProps = {},
      slots = {},
      showZero = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1G);
    const {
      badgeContent,
      max: max2,
      displayValue,
      invisible
    } = useBadge(_extends$2({}, props, {
      max: maxProp
    }));
    const ownerState = _extends$2({}, props, {
      badgeContent,
      invisible,
      max: max2,
      showZero
    });
    const classes = useUtilityClasses$1a(ownerState);
    const Root = component || slots.root || "span";
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        ref
      },
      ownerState,
      className: classes.root
    });
    const Badge2 = slots.badge || "span";
    const badgeProps = useSlotProps({
      elementType: Badge2,
      externalSlotProps: slotProps.badge,
      ownerState,
      className: classes.badge
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(Root, _extends$2({}, rootProps, {
      children: [children, /* @__PURE__ */ jsxRuntimeExports.jsx(Badge2, _extends$2({}, badgeProps, {
        children: displayValue
      }))]
    }));
  });
  process.env.NODE_ENV !== "production" ? BadgeUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The content rendered within the badge.
     */
    badgeContent: PropTypes.node,
    /**
     * The badge will be added relative to this node.
     */
    children: PropTypes.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, the badge is invisible.
     * @default false
     */
    invisible: PropTypes.bool,
    /**
     * Max count to show.
     * @default 99
     */
    max: PropTypes.number,
    /**
     * Controls whether the badge is hidden when `badgeContent` is zero.
     * @default false
     */
    showZero: PropTypes.bool,
    /**
     * The props used for each slot inside the Badge.
     * @default {}
     */
    slotProps: PropTypes.shape({
      badge: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the Badge.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      badge: PropTypes.elementType,
      root: PropTypes.elementType
    })
  } : void 0;
  function getButtonUnstyledUtilityClass(slot) {
    return generateUtilityClass("MuiButton", slot);
  }
  const buttonUnstyledClasses = generateUtilityClasses("MuiButton", ["root", "active", "disabled", "focusVisible"]);
  function useButton(parameters) {
    const {
      disabled = false,
      focusableWhenDisabled,
      href,
      ref: externalRef,
      tabIndex,
      to,
      type
    } = parameters;
    const buttonRef = React__namespace.useRef();
    const [active, setActive] = React__namespace.useState(false);
    const {
      isFocusVisibleRef,
      onFocus: handleFocusVisible,
      onBlur: handleBlurVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible();
    const [focusVisible, setFocusVisible] = React__namespace.useState(false);
    if (disabled && !focusableWhenDisabled && focusVisible) {
      setFocusVisible(false);
    }
    React__namespace.useEffect(() => {
      isFocusVisibleRef.current = focusVisible;
    }, [focusVisible, isFocusVisibleRef]);
    const [hostElementName, setHostElementName] = React__namespace.useState("");
    const createHandleMouseLeave = (otherHandlers) => (event) => {
      var _otherHandlers$onMous;
      if (focusVisible) {
        event.preventDefault();
      }
      (_otherHandlers$onMous = otherHandlers.onMouseLeave) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);
    };
    const createHandleBlur = (otherHandlers) => (event) => {
      var _otherHandlers$onBlur;
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setFocusVisible(false);
      }
      (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);
    };
    const createHandleFocus = (otherHandlers) => (event) => {
      var _otherHandlers$onFocu2;
      if (!buttonRef.current) {
        buttonRef.current = event.currentTarget;
      }
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        var _otherHandlers$onFocu;
        setFocusVisible(true);
        (_otherHandlers$onFocu = otherHandlers.onFocusVisible) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);
      }
      (_otherHandlers$onFocu2 = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu2.call(otherHandlers, event);
    };
    const isNativeButton = () => {
      const button = buttonRef.current;
      return hostElementName === "BUTTON" || hostElementName === "INPUT" && ["button", "submit", "reset"].includes(button == null ? void 0 : button.type) || hostElementName === "A" && (button == null ? void 0 : button.href);
    };
    const createHandleClick = (otherHandlers) => (event) => {
      if (!disabled) {
        var _otherHandlers$onClic;
        (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);
      }
    };
    const createHandleMouseDown = (otherHandlers) => (event) => {
      var _otherHandlers$onMous2;
      if (!disabled) {
        setActive(true);
        document.addEventListener("mouseup", () => {
          setActive(false);
        }, {
          once: true
        });
      }
      (_otherHandlers$onMous2 = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous2.call(otherHandlers, event);
    };
    const createHandleKeyDown = (otherHandlers) => (event) => {
      var _otherHandlers$onKeyD;
      (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);
      if (event.defaultPrevented) {
        return;
      }
      if (event.target === event.currentTarget && !isNativeButton() && event.key === " ") {
        event.preventDefault();
      }
      if (event.target === event.currentTarget && event.key === " " && !disabled) {
        setActive(true);
      }
      if (event.target === event.currentTarget && !isNativeButton() && event.key === "Enter" && !disabled) {
        var _otherHandlers$onClic2;
        (_otherHandlers$onClic2 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic2.call(otherHandlers, event);
        event.preventDefault();
      }
    };
    const createHandleKeyUp = (otherHandlers) => (event) => {
      var _otherHandlers$onKeyU;
      if (event.target === event.currentTarget) {
        setActive(false);
      }
      (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event);
      if (event.target === event.currentTarget && !isNativeButton() && !disabled && event.key === " " && !event.defaultPrevented) {
        var _otherHandlers$onClic3;
        (_otherHandlers$onClic3 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic3.call(otherHandlers, event);
      }
    };
    const updateHostElementName = React__namespace.useCallback((instance) => {
      var _instance$tagName;
      setHostElementName((_instance$tagName = instance == null ? void 0 : instance.tagName) != null ? _instance$tagName : "");
    }, []);
    const handleRef = useForkRef(updateHostElementName, externalRef, focusVisibleRef, buttonRef);
    const buttonProps = {};
    if (hostElementName === "BUTTON") {
      buttonProps.type = type != null ? type : "button";
      if (focusableWhenDisabled) {
        buttonProps["aria-disabled"] = disabled;
      } else {
        buttonProps.disabled = disabled;
      }
    } else if (hostElementName !== "") {
      if (!href && !to) {
        buttonProps.role = "button";
        buttonProps.tabIndex = tabIndex != null ? tabIndex : 0;
      }
      if (disabled) {
        buttonProps["aria-disabled"] = disabled;
        buttonProps.tabIndex = focusableWhenDisabled ? tabIndex != null ? tabIndex : 0 : -1;
      }
    }
    const getRootProps = (otherHandlers = {}) => {
      const propsEventHandlers = extractEventHandlers(parameters);
      const externalEventHandlers = _extends$2({}, propsEventHandlers, otherHandlers);
      delete externalEventHandlers.onFocusVisible;
      return _extends$2({
        type
      }, externalEventHandlers, buttonProps, {
        onBlur: createHandleBlur(externalEventHandlers),
        onClick: createHandleClick(externalEventHandlers),
        onFocus: createHandleFocus(externalEventHandlers),
        onKeyDown: createHandleKeyDown(externalEventHandlers),
        onKeyUp: createHandleKeyUp(externalEventHandlers),
        onMouseDown: createHandleMouseDown(externalEventHandlers),
        onMouseLeave: createHandleMouseLeave(externalEventHandlers),
        ref: handleRef
      });
    };
    return {
      getRootProps,
      focusVisible,
      setFocusVisible,
      disabled,
      active
    };
  }
  const _excluded$1F = ["action", "children", "component", "disabled", "focusableWhenDisabled", "onBlur", "onClick", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseLeave", "slotProps", "slots"];
  const useUtilityClasses$19 = (ownerState) => {
    const {
      active,
      disabled,
      focusVisible
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", focusVisible && "focusVisible", active && "active"]
    };
    return composeClasses(slots, getButtonUnstyledUtilityClass, {});
  };
  const ButtonUnstyled = /* @__PURE__ */ React__namespace.forwardRef(function ButtonUnstyled2(props, forwardedRef) {
    var _ref;
    const {
      action,
      children,
      component,
      focusableWhenDisabled = false,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1F);
    const buttonRef = React__namespace.useRef();
    const {
      active,
      focusVisible,
      setFocusVisible,
      getRootProps
    } = useButton(_extends$2({}, props, {
      focusableWhenDisabled
    }));
    React__namespace.useImperativeHandle(action, () => ({
      focusVisible: () => {
        setFocusVisible(true);
        buttonRef.current.focus();
      }
    }), [setFocusVisible]);
    const ownerState = _extends$2({}, props, {
      active,
      focusableWhenDisabled,
      focusVisible
    });
    const classes = useUtilityClasses$19(ownerState);
    const defaultElement = other.href || other.to ? "a" : "button";
    const Root = (_ref = component != null ? component : slots.root) != null ? _ref : defaultElement;
    const rootProps = useSlotProps({
      elementType: Root,
      getSlotProps: getRootProps,
      externalForwardedProps: other,
      externalSlotProps: slotProps.root,
      additionalProps: {
        ref: forwardedRef
      },
      ownerState,
      className: classes.root
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Root, _extends$2({}, rootProps, {
      children
    }));
  });
  process.env.NODE_ENV !== "production" ? ButtonUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * A ref for imperative actions. It currently only supports `focusVisible()` action.
     */
    action: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
      current: PropTypes.shape({
        focusVisible: PropTypes.func.isRequired
      })
    })]),
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, allows a disabled button to receive focus.
     * @default false
     */
    focusableWhenDisabled: PropTypes.bool,
    /**
     * @ignore
     */
    href: PropTypes.string,
    /**
     * @ignore
     */
    onBlur: PropTypes.func,
    /**
     * @ignore
     */
    onClick: PropTypes.func,
    /**
     * @ignore
     */
    onFocus: PropTypes.func,
    /**
     * @ignore
     */
    onFocusVisible: PropTypes.func,
    /**
     * @ignore
     */
    onKeyDown: PropTypes.func,
    /**
     * @ignore
     */
    onKeyUp: PropTypes.func,
    /**
     * @ignore
     */
    onMouseLeave: PropTypes.func,
    /**
     * The props used for each slot inside the Button.
     * @default {}
     */
    slotProps: PropTypes.shape({
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the Button.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      root: PropTypes.elementType
    }),
    /**
     * @ignore
     */
    to: PropTypes.string
  } : void 0;
  function mapEventPropToEvent(eventProp) {
    return eventProp.substring(2).toLowerCase();
  }
  function clickedRootScrollbar(event, doc) {
    return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
  }
  function ClickAwayListener(props) {
    const {
      children,
      disableReactTree = false,
      mouseEvent = "onClick",
      onClickAway,
      touchEvent = "onTouchEnd"
    } = props;
    const movedRef = React__namespace.useRef(false);
    const nodeRef = React__namespace.useRef(null);
    const activatedRef = React__namespace.useRef(false);
    const syntheticEventRef = React__namespace.useRef(false);
    React__namespace.useEffect(() => {
      setTimeout(() => {
        activatedRef.current = true;
      }, 0);
      return () => {
        activatedRef.current = false;
      };
    }, []);
    const handleRef = useForkRef(
      // @ts-expect-error TODO upstream fix
      children.ref,
      nodeRef
    );
    const handleClickAway = useEventCallback((event) => {
      const insideReactTree = syntheticEventRef.current;
      syntheticEventRef.current = false;
      const doc = ownerDocument(nodeRef.current);
      if (!activatedRef.current || !nodeRef.current || "clientX" in event && clickedRootScrollbar(event, doc)) {
        return;
      }
      if (movedRef.current) {
        movedRef.current = false;
        return;
      }
      let insideDOM;
      if (event.composedPath) {
        insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
      } else {
        insideDOM = !doc.documentElement.contains(
          // @ts-expect-error returns `false` as intended when not dispatched from a Node
          event.target
        ) || nodeRef.current.contains(
          // @ts-expect-error returns `false` as intended when not dispatched from a Node
          event.target
        );
      }
      if (!insideDOM && (disableReactTree || !insideReactTree)) {
        onClickAway(event);
      }
    });
    const createHandleSynthetic = (handlerName) => (event) => {
      syntheticEventRef.current = true;
      const childrenPropsHandler = children.props[handlerName];
      if (childrenPropsHandler) {
        childrenPropsHandler(event);
      }
    };
    const childrenProps = {
      ref: handleRef
    };
    if (touchEvent !== false) {
      childrenProps[touchEvent] = createHandleSynthetic(touchEvent);
    }
    React__namespace.useEffect(() => {
      if (touchEvent !== false) {
        const mappedTouchEvent = mapEventPropToEvent(touchEvent);
        const doc = ownerDocument(nodeRef.current);
        const handleTouchMove = () => {
          movedRef.current = true;
        };
        doc.addEventListener(mappedTouchEvent, handleClickAway);
        doc.addEventListener("touchmove", handleTouchMove);
        return () => {
          doc.removeEventListener(mappedTouchEvent, handleClickAway);
          doc.removeEventListener("touchmove", handleTouchMove);
        };
      }
      return void 0;
    }, [handleClickAway, touchEvent]);
    if (mouseEvent !== false) {
      childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);
    }
    React__namespace.useEffect(() => {
      if (mouseEvent !== false) {
        const mappedMouseEvent = mapEventPropToEvent(mouseEvent);
        const doc = ownerDocument(nodeRef.current);
        doc.addEventListener(mappedMouseEvent, handleClickAway);
        return () => {
          doc.removeEventListener(mappedMouseEvent, handleClickAway);
        };
      }
      return void 0;
    }, [handleClickAway, mouseEvent]);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(React__namespace.Fragment, {
      children: /* @__PURE__ */ React__namespace.cloneElement(children, childrenProps)
    });
  }
  process.env.NODE_ENV !== "production" ? ClickAwayListener.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The wrapped element.
     */
    children: elementAcceptingRef.isRequired,
    /**
     * If `true`, the React tree is ignored and only the DOM tree is considered.
     * This prop changes how portaled elements are handled.
     * @default false
     */
    disableReactTree: PropTypes.bool,
    /**
     * The mouse event to listen to. You can disable the listener by providing `false`.
     * @default 'onClick'
     */
    mouseEvent: PropTypes.oneOf(["onClick", "onMouseDown", "onMouseUp", "onPointerDown", "onPointerUp", false]),
    /**
     * Callback fired when a "click away" event is detected.
     */
    onClickAway: PropTypes.func.isRequired,
    /**
     * The touch event to listen to. You can disable the listener by providing `false`.
     * @default 'onTouchEnd'
     */
    touchEvent: PropTypes.oneOf(["onTouchEnd", "onTouchStart", false])
  } : void 0;
  if (process.env.NODE_ENV !== "production") {
    ClickAwayListener["propTypes"] = exactProp(ClickAwayListener.propTypes);
  }
  const candidatesSelector = ["input", "select", "textarea", "a[href]", "button", "[tabindex]", "audio[controls]", "video[controls]", '[contenteditable]:not([contenteditable="false"])'].join(",");
  function getTabIndex(node2) {
    const tabindexAttr = parseInt(node2.getAttribute("tabindex") || "", 10);
    if (!Number.isNaN(tabindexAttr)) {
      return tabindexAttr;
    }
    if (node2.contentEditable === "true" || (node2.nodeName === "AUDIO" || node2.nodeName === "VIDEO" || node2.nodeName === "DETAILS") && node2.getAttribute("tabindex") === null) {
      return 0;
    }
    return node2.tabIndex;
  }
  function isNonTabbableRadio(node2) {
    if (node2.tagName !== "INPUT" || node2.type !== "radio") {
      return false;
    }
    if (!node2.name) {
      return false;
    }
    const getRadio = (selector) => node2.ownerDocument.querySelector(`input[type="radio"]${selector}`);
    let roving = getRadio(`[name="${node2.name}"]:checked`);
    if (!roving) {
      roving = getRadio(`[name="${node2.name}"]`);
    }
    return roving !== node2;
  }
  function isNodeMatchingSelectorFocusable(node2) {
    if (node2.disabled || node2.tagName === "INPUT" && node2.type === "hidden" || isNonTabbableRadio(node2)) {
      return false;
    }
    return true;
  }
  function defaultGetTabbable(root) {
    const regularTabNodes = [];
    const orderedTabNodes = [];
    Array.from(root.querySelectorAll(candidatesSelector)).forEach((node2, i) => {
      const nodeTabIndex = getTabIndex(node2);
      if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node2)) {
        return;
      }
      if (nodeTabIndex === 0) {
        regularTabNodes.push(node2);
      } else {
        orderedTabNodes.push({
          documentOrder: i,
          tabIndex: nodeTabIndex,
          node: node2
        });
      }
    });
    return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map((a) => a.node).concat(regularTabNodes);
  }
  function defaultIsEnabled() {
    return true;
  }
  function FocusTrap(props) {
    const {
      children,
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableRestoreFocus = false,
      getTabbable = defaultGetTabbable,
      isEnabled = defaultIsEnabled,
      open
    } = props;
    const ignoreNextEnforceFocus = React__namespace.useRef(false);
    const sentinelStart = React__namespace.useRef(null);
    const sentinelEnd = React__namespace.useRef(null);
    const nodeToRestore = React__namespace.useRef(null);
    const reactFocusEventTarget = React__namespace.useRef(null);
    const activated = React__namespace.useRef(false);
    const rootRef = React__namespace.useRef(null);
    const handleRef = useForkRef(children.ref, rootRef);
    const lastKeydown = React__namespace.useRef(null);
    React__namespace.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      activated.current = !disableAutoFocus;
    }, [disableAutoFocus, open]);
    React__namespace.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      const doc = ownerDocument(rootRef.current);
      if (!rootRef.current.contains(doc.activeElement)) {
        if (!rootRef.current.hasAttribute("tabIndex")) {
          if (process.env.NODE_ENV !== "production") {
            console.error(["MUI: The modal content node does not accept focus.", 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'].join("\n"));
          }
          rootRef.current.setAttribute("tabIndex", "-1");
        }
        if (activated.current) {
          rootRef.current.focus();
        }
      }
      return () => {
        if (!disableRestoreFocus) {
          if (nodeToRestore.current && nodeToRestore.current.focus) {
            ignoreNextEnforceFocus.current = true;
            nodeToRestore.current.focus();
          }
          nodeToRestore.current = null;
        }
      };
    }, [open]);
    React__namespace.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      const doc = ownerDocument(rootRef.current);
      const contain = (nativeEvent) => {
        const {
          current: rootElement
        } = rootRef;
        if (rootElement === null) {
          return;
        }
        if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {
          ignoreNextEnforceFocus.current = false;
          return;
        }
        if (!rootElement.contains(doc.activeElement)) {
          if (nativeEvent && reactFocusEventTarget.current !== nativeEvent.target || doc.activeElement !== reactFocusEventTarget.current) {
            reactFocusEventTarget.current = null;
          } else if (reactFocusEventTarget.current !== null) {
            return;
          }
          if (!activated.current) {
            return;
          }
          let tabbable = [];
          if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
            tabbable = getTabbable(rootRef.current);
          }
          if (tabbable.length > 0) {
            var _lastKeydown$current, _lastKeydown$current2;
            const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === "Tab");
            const focusNext = tabbable[0];
            const focusPrevious = tabbable[tabbable.length - 1];
            if (typeof focusNext !== "string" && typeof focusPrevious !== "string") {
              if (isShiftTab) {
                focusPrevious.focus();
              } else {
                focusNext.focus();
              }
            }
          } else {
            rootElement.focus();
          }
        }
      };
      const loopFocus = (nativeEvent) => {
        lastKeydown.current = nativeEvent;
        if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== "Tab") {
          return;
        }
        if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
          ignoreNextEnforceFocus.current = true;
          if (sentinelEnd.current) {
            sentinelEnd.current.focus();
          }
        }
      };
      doc.addEventListener("focusin", contain);
      doc.addEventListener("keydown", loopFocus, true);
      const interval = setInterval(() => {
        if (doc.activeElement && doc.activeElement.tagName === "BODY") {
          contain(null);
        }
      }, 50);
      return () => {
        clearInterval(interval);
        doc.removeEventListener("focusin", contain);
        doc.removeEventListener("keydown", loopFocus, true);
      };
    }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);
    const onFocus = (event) => {
      if (nodeToRestore.current === null) {
        nodeToRestore.current = event.relatedTarget;
      }
      activated.current = true;
      reactFocusEventTarget.current = event.target;
      const childrenPropsHandler = children.props.onFocus;
      if (childrenPropsHandler) {
        childrenPropsHandler(event);
      }
    };
    const handleFocusSentinel = (event) => {
      if (nodeToRestore.current === null) {
        nodeToRestore.current = event.relatedTarget;
      }
      activated.current = true;
    };
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(React__namespace.Fragment, {
      children: [/* @__PURE__ */ jsxRuntimeExports.jsx("div", {
        tabIndex: open ? 0 : -1,
        onFocus: handleFocusSentinel,
        ref: sentinelStart,
        "data-testid": "sentinelStart"
      }), /* @__PURE__ */ React__namespace.cloneElement(children, {
        ref: handleRef,
        onFocus
      }), /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
        tabIndex: open ? 0 : -1,
        onFocus: handleFocusSentinel,
        ref: sentinelEnd,
        "data-testid": "sentinelEnd"
      })]
    });
  }
  process.env.NODE_ENV !== "production" ? FocusTrap.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * A single child content element.
     */
    children: elementAcceptingRef,
    /**
     * If `true`, the focus trap will not automatically shift focus to itself when it opens, and
     * replace it to the last focused element when it closes.
     * This also works correctly with any focus trap children that have the `disableAutoFocus` prop.
     *
     * Generally this should never be set to `true` as it makes the focus trap less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableAutoFocus: PropTypes.bool,
    /**
     * If `true`, the focus trap will not prevent focus from leaving the focus trap while open.
     *
     * Generally this should never be set to `true` as it makes the focus trap less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableEnforceFocus: PropTypes.bool,
    /**
     * If `true`, the focus trap will not restore focus to previously focused element once
     * focus trap is hidden or unmounted.
     * @default false
     */
    disableRestoreFocus: PropTypes.bool,
    /**
     * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.
     * For instance, you can provide the "tabbable" npm dependency.
     * @param {HTMLElement} root
     */
    getTabbable: PropTypes.func,
    /**
     * This prop extends the `open` prop.
     * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.
     * This prop should be memoized.
     * It can be used to support multiple focus trap mounted at the same time.
     * @default function defaultIsEnabled(): boolean {
     *   return true;
     * }
     */
    isEnabled: PropTypes.func,
    /**
     * If `true`, focus is locked.
     */
    open: PropTypes.bool.isRequired
  } : void 0;
  if (process.env.NODE_ENV !== "production") {
    FocusTrap["propTypes"] = exactProp(FocusTrap.propTypes);
  }
  const FormControlUnstyledContext = /* @__PURE__ */ React__namespace.createContext(void 0);
  if (process.env.NODE_ENV !== "production") {
    FormControlUnstyledContext.displayName = "FormControlUnstyledContext";
  }
  function getFormControlUnstyledUtilityClass(slot) {
    return generateUtilityClass("MuiFormControl", slot);
  }
  const formControlUnstyledClasses = generateUtilityClasses("MuiFormControl", ["root", "disabled", "error", "filled", "focused", "required"]);
  const _excluded$1E = ["defaultValue", "children", "component", "disabled", "error", "onChange", "required", "slotProps", "slots", "value"];
  function hasValue$1(value) {
    return value != null && !(Array.isArray(value) && value.length === 0) && value !== "";
  }
  function useUtilityClasses$18(ownerState) {
    const {
      disabled,
      error,
      filled,
      focused,
      required
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", focused && "focused", error && "error", filled && "filled", required && "required"]
    };
    return composeClasses(slots, getFormControlUnstyledUtilityClass, {});
  }
  const FormControlUnstyled = /* @__PURE__ */ React__namespace.forwardRef(function FormControlUnstyled2(props, ref) {
    var _ref;
    const {
      defaultValue,
      children,
      component,
      disabled = false,
      error = false,
      onChange,
      required = false,
      slotProps = {},
      slots = {},
      value: incomingValue
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1E);
    const [value, setValue] = useControlled({
      controlled: incomingValue,
      default: defaultValue,
      name: "FormControl",
      state: "value"
    });
    const filled = hasValue$1(value);
    const [focusedState, setFocused] = React__namespace.useState(false);
    const focused = focusedState && !disabled;
    React__namespace.useEffect(() => setFocused((isFocused) => disabled ? false : isFocused), [disabled]);
    const ownerState = _extends$2({}, props, {
      disabled,
      error,
      filled,
      focused,
      required
    });
    const childContext = React__namespace.useMemo(() => {
      return {
        disabled,
        error,
        filled,
        focused,
        onBlur: () => {
          setFocused(false);
        },
        onChange: (event) => {
          setValue(event.target.value);
          onChange == null ? void 0 : onChange(event);
        },
        onFocus: () => {
          setFocused(true);
        },
        required,
        value: value != null ? value : ""
      };
    }, [disabled, error, filled, focused, onChange, required, setValue, value]);
    const classes = useUtilityClasses$18(ownerState);
    const renderChildren = () => {
      if (typeof children === "function") {
        return children(childContext);
      }
      return children;
    };
    const Root = (_ref = component != null ? component : slots.root) != null ? _ref : "div";
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        ref,
        children: renderChildren()
      },
      ownerState,
      className: classes.root
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(FormControlUnstyledContext.Provider, {
      value: childContext,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Root, _extends$2({}, rootProps))
    });
  });
  process.env.NODE_ENV !== "production" ? FormControlUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * @ignore
     */
    defaultValue: PropTypes.any,
    /**
     * If `true`, the label, input and helper text should be displayed in a disabled state.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the label is displayed in an error state.
     * @default false
     */
    error: PropTypes.bool,
    /**
     * @ignore
     */
    onChange: PropTypes.func,
    /**
     * If `true`, the label will indicate that the `input` is required.
     * @default false
     */
    required: PropTypes.bool,
    /**
     * The props used for each slot inside the FormControl.
     * @default {}
     */
    slotProps: PropTypes.shape({
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the FormControl.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      root: PropTypes.elementType
    }),
    /**
     * @ignore
     */
    value: PropTypes.any
  } : void 0;
  function useFormControlUnstyledContext() {
    return React__namespace.useContext(FormControlUnstyledContext);
  }
  function getInputUnstyledUtilityClass(slot) {
    return generateUtilityClass("MuiInput", slot);
  }
  const inputUnstyledClasses = generateUtilityClasses("MuiInput", ["root", "formControl", "focused", "disabled", "error", "multiline", "input", "inputMultiline", "inputTypeSearch", "adornedStart", "adornedEnd"]);
  function useInput(parameters) {
    const {
      defaultValue: defaultValueProp,
      disabled: disabledProp = false,
      error: errorProp = false,
      onBlur,
      onChange,
      onFocus,
      required: requiredProp = false,
      value: valueProp,
      inputRef: inputRefProp
    } = parameters;
    const formControlContext = useFormControlUnstyledContext();
    let defaultValue;
    let disabled;
    let error;
    let required;
    let value;
    if (formControlContext) {
      var _formControlContext$d, _formControlContext$e, _formControlContext$r;
      defaultValue = void 0;
      disabled = (_formControlContext$d = formControlContext.disabled) != null ? _formControlContext$d : false;
      error = (_formControlContext$e = formControlContext.error) != null ? _formControlContext$e : false;
      required = (_formControlContext$r = formControlContext.required) != null ? _formControlContext$r : false;
      value = formControlContext.value;
      if (process.env.NODE_ENV !== "production") {
        const definedLocalProps = ["defaultValue", "disabled", "error", "required", "value"].filter((prop) => parameters[prop] !== void 0);
        if (definedLocalProps.length > 0) {
          console.warn(["MUI: You have set props on an input that is inside a FormControlUnstyled.", "Set these props on a FormControlUnstyled instead. Otherwise they will be ignored.", `Ignored props: ${definedLocalProps.join(", ")}`].join("\n"));
        }
      }
    } else {
      defaultValue = defaultValueProp;
      disabled = disabledProp;
      error = errorProp;
      required = requiredProp;
      value = valueProp;
    }
    const {
      current: isControlled
    } = React__namespace.useRef(value != null);
    const handleInputRefWarning = React__namespace.useCallback((instance) => {
      if (process.env.NODE_ENV !== "production") {
        if (instance && instance.nodeName !== "INPUT" && !instance.focus) {
          console.error(["MUI: You have provided a `slots.input` to the input component", "that does not correctly handle the `ref` prop.", "Make sure the `ref` prop is called with a HTMLInputElement."].join("\n"));
        }
      }
    }, []);
    const inputRef = React__namespace.useRef(null);
    const handleInputRef = useForkRef(inputRef, inputRefProp, handleInputRefWarning);
    const [focused, setFocused] = React__namespace.useState(false);
    React__namespace.useEffect(() => {
      if (!formControlContext && disabled && focused) {
        setFocused(false);
        onBlur == null ? void 0 : onBlur();
      }
    }, [formControlContext, disabled, focused, onBlur]);
    const handleFocus = (otherHandlers) => (event) => {
      var _otherHandlers$onFocu;
      if (formControlContext != null && formControlContext.disabled) {
        event.stopPropagation();
        return;
      }
      (_otherHandlers$onFocu = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);
      if (formControlContext && formControlContext.onFocus) {
        var _formControlContext$o;
        formControlContext == null ? void 0 : (_formControlContext$o = formControlContext.onFocus) == null ? void 0 : _formControlContext$o.call(formControlContext);
      } else {
        setFocused(true);
      }
    };
    const handleBlur2 = (otherHandlers) => (event) => {
      var _otherHandlers$onBlur;
      (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);
      if (formControlContext && formControlContext.onBlur) {
        formControlContext.onBlur();
      } else {
        setFocused(false);
      }
    };
    const handleChange = (otherHandlers) => (event, ...args) => {
      var _formControlContext$o2, _otherHandlers$onChan;
      if (!isControlled) {
        const element = event.target || inputRef.current;
        if (element == null) {
          throw new Error(process.env.NODE_ENV !== "production" ? `MUI: Expected valid input target. Did you use a custom \`slots.input\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` : formatMuiErrorMessage(17));
        }
      }
      formControlContext == null ? void 0 : (_formControlContext$o2 = formControlContext.onChange) == null ? void 0 : _formControlContext$o2.call(formControlContext, event);
      (_otherHandlers$onChan = otherHandlers.onChange) == null ? void 0 : _otherHandlers$onChan.call(otherHandlers, event, ...args);
    };
    const handleClick = (otherHandlers) => (event) => {
      var _otherHandlers$onClic;
      if (inputRef.current && event.currentTarget === event.target) {
        inputRef.current.focus();
      }
      (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);
    };
    const getRootProps = (externalProps = {}) => {
      const propsEventHandlers = extractEventHandlers(parameters, ["onBlur", "onChange", "onFocus"]);
      const externalEventHandlers = _extends$2({}, propsEventHandlers, extractEventHandlers(externalProps));
      return _extends$2({}, externalProps, externalEventHandlers, {
        onClick: handleClick(externalEventHandlers)
      });
    };
    const getInputProps = (externalProps = {}) => {
      const propsEventHandlers = {
        onBlur,
        onChange,
        onFocus
      };
      const externalEventHandlers = _extends$2({}, propsEventHandlers, extractEventHandlers(externalProps));
      const mergedEventHandlers = _extends$2({}, externalProps, externalEventHandlers, {
        onBlur: handleBlur2(externalEventHandlers),
        onChange: handleChange(externalEventHandlers),
        onFocus: handleFocus(externalEventHandlers)
      });
      return _extends$2({}, mergedEventHandlers, {
        "aria-invalid": error || void 0,
        defaultValue,
        ref: handleInputRef,
        value,
        required,
        disabled
      });
    };
    return {
      disabled,
      error,
      focused,
      formControlContext,
      getInputProps,
      getRootProps,
      required,
      value
    };
  }
  const _excluded$1D = ["aria-describedby", "aria-label", "aria-labelledby", "autoComplete", "autoFocus", "className", "component", "defaultValue", "disabled", "endAdornment", "error", "id", "multiline", "name", "onClick", "onChange", "onKeyDown", "onKeyUp", "onFocus", "onBlur", "placeholder", "readOnly", "required", "startAdornment", "value", "type", "rows", "slotProps", "slots", "minRows", "maxRows"];
  const InputUnstyled = /* @__PURE__ */ React__namespace.forwardRef(function InputUnstyled2(props, forwardedRef) {
    var _ref, _slots$textarea, _slots$input;
    const {
      "aria-describedby": ariaDescribedby,
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledby,
      autoComplete,
      autoFocus,
      className,
      component,
      defaultValue,
      disabled,
      endAdornment,
      error,
      id,
      multiline = false,
      name,
      onClick,
      onChange,
      onKeyDown,
      onKeyUp,
      onFocus,
      onBlur,
      placeholder,
      readOnly,
      required,
      startAdornment,
      value,
      type: typeProp,
      rows,
      slotProps = {},
      slots = {},
      minRows,
      maxRows
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1D);
    const {
      getRootProps,
      getInputProps,
      focused,
      formControlContext,
      error: errorState,
      disabled: disabledState
    } = useInput({
      disabled,
      defaultValue,
      error,
      onBlur,
      onClick,
      onChange,
      onFocus,
      required,
      value
    });
    const type = !multiline ? typeProp != null ? typeProp : "text" : void 0;
    const ownerState = _extends$2({}, props, {
      disabled: disabledState,
      error: errorState,
      focused,
      formControlContext,
      multiline,
      type
    });
    const rootStateClasses = {
      [inputUnstyledClasses.disabled]: disabledState,
      [inputUnstyledClasses.error]: errorState,
      [inputUnstyledClasses.focused]: focused,
      [inputUnstyledClasses.formControl]: Boolean(formControlContext),
      [inputUnstyledClasses.multiline]: multiline,
      [inputUnstyledClasses.adornedStart]: Boolean(startAdornment),
      [inputUnstyledClasses.adornedEnd]: Boolean(endAdornment)
    };
    const inputStateClasses = {
      [inputUnstyledClasses.disabled]: disabledState,
      [inputUnstyledClasses.multiline]: multiline
    };
    const propsToForward = {
      "aria-describedby": ariaDescribedby,
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledby,
      autoComplete,
      autoFocus,
      id,
      onKeyDown,
      onKeyUp,
      name,
      placeholder,
      readOnly,
      type
    };
    const Root = (_ref = component != null ? component : slots.root) != null ? _ref : "div";
    const rootProps = useSlotProps({
      elementType: Root,
      getSlotProps: getRootProps,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        ref: forwardedRef
      },
      ownerState,
      className: [inputUnstyledClasses.root, rootStateClasses, className]
    });
    const Input2 = multiline ? (_slots$textarea = slots.textarea) != null ? _slots$textarea : "textarea" : (_slots$input = slots.input) != null ? _slots$input : "input";
    const inputProps = useSlotProps({
      elementType: Input2,
      getSlotProps: (otherHandlers) => getInputProps(_extends$2({}, otherHandlers, propsToForward)),
      externalSlotProps: slotProps.input,
      additionalProps: _extends$2({
        rows: multiline ? rows : void 0
      }, multiline && !isHostComponent(Input2) && {
        minRows: rows || minRows,
        maxRows: rows || maxRows
      }),
      ownerState,
      className: [inputUnstyledClasses.input, inputStateClasses]
    });
    if (process.env.NODE_ENV !== "production") {
      if (multiline) {
        if (rows) {
          if (minRows || maxRows) {
            console.warn("MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.");
          }
        }
      }
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(Root, _extends$2({}, rootProps, {
      children: [startAdornment, /* @__PURE__ */ jsxRuntimeExports.jsx(Input2, _extends$2({}, inputProps)), endAdornment]
    }));
  });
  process.env.NODE_ENV !== "production" ? InputUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    "aria-describedby": PropTypes.string,
    /**
     * @ignore
     */
    "aria-label": PropTypes.string,
    /**
     * @ignore
     */
    "aria-labelledby": PropTypes.string,
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: PropTypes.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: PropTypes.bool,
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * Class name applied to the root element.
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: PropTypes.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: PropTypes.bool,
    /**
     * Trailing adornment for this input.
     */
    endAdornment: PropTypes.node,
    /**
     * If `true`, the `input` will indicate an error by setting the `aria-invalid` attribute on the input and the `Mui-error` class on the root element.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: PropTypes.bool,
    /**
     * The id of the `input` element.
     */
    id: PropTypes.string,
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: PropTypes.number,
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: PropTypes.number,
    /**
     * If `true`, a `textarea` element is rendered.
     * @default false
     */
    multiline: PropTypes.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: PropTypes.string,
    /**
     * @ignore
     */
    onBlur: PropTypes.func,
    /**
     * @ignore
     */
    onChange: PropTypes.func,
    /**
     * @ignore
     */
    onClick: PropTypes.func,
    /**
     * @ignore
     */
    onFocus: PropTypes.func,
    /**
     * @ignore
     */
    onKeyDown: PropTypes.func,
    /**
     * @ignore
     */
    onKeyUp: PropTypes.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: PropTypes.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: PropTypes.bool,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: PropTypes.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: PropTypes.number,
    /**
     * The props used for each slot inside the Input.
     * @default {}
     */
    slotProps: PropTypes.shape({
      input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the InputBase.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      input: PropTypes.elementType,
      root: PropTypes.elementType,
      textarea: PropTypes.elementType
    }),
    /**
     * Leading adornment for this input.
     */
    startAdornment: PropTypes.node,
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: PropTypes.oneOf(["button", "checkbox", "color", "date", "datetime-local", "email", "file", "hidden", "image", "month", "number", "password", "radio", "range", "reset", "search", "submit", "tel", "text", "time", "url", "week"]),
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: PropTypes.any
  } : void 0;
  var ActionTypes;
  (function(ActionTypes2) {
    ActionTypes2["blur"] = "blur";
    ActionTypes2["focus"] = "focus";
    ActionTypes2["keyDown"] = "keyDown";
    ActionTypes2["optionClick"] = "optionClick";
    ActionTypes2["optionHover"] = "optionHover";
    ActionTypes2["optionsChange"] = "optionsChange";
    ActionTypes2["setValue"] = "setValue";
    ActionTypes2["setHighlight"] = "setHighlight";
    ActionTypes2["textNavigation"] = "textNagivation";
  })(ActionTypes || (ActionTypes = {}));
  const pageSize = 5;
  function findValidOptionToHighlight(index2, lookupDirection, options, focusDisabled, isOptionDisabled, wrapAround) {
    if (options.length === 0 || options.every((o, i) => isOptionDisabled(o, i))) {
      return -1;
    }
    let nextFocus = index2;
    for (; ; ) {
      if (!wrapAround && lookupDirection === "next" && nextFocus === options.length || !wrapAround && lookupDirection === "previous" && nextFocus === -1) {
        return -1;
      }
      const nextFocusDisabled = focusDisabled ? false : isOptionDisabled(options[nextFocus], nextFocus);
      if (nextFocusDisabled) {
        nextFocus += lookupDirection === "next" ? 1 : -1;
        if (wrapAround) {
          nextFocus = (nextFocus + options.length) % options.length;
        }
      } else {
        return nextFocus;
      }
    }
  }
  function getNewHighlightedOption(options, previouslyHighlightedOption, diff, lookupDirection, highlightDisabled, isOptionDisabled, wrapAround, optionComparer) {
    var _options$nextIndex;
    const maxIndex = options.length - 1;
    const defaultHighlightedIndex = -1;
    let nextIndexCandidate;
    const previouslyHighlightedIndex = previouslyHighlightedOption == null ? -1 : options.findIndex((option) => optionComparer(option, previouslyHighlightedOption));
    if (diff === "reset") {
      var _options$defaultHighl;
      return defaultHighlightedIndex === -1 ? null : (_options$defaultHighl = options[defaultHighlightedIndex]) != null ? _options$defaultHighl : null;
    }
    if (diff === "start") {
      nextIndexCandidate = 0;
    } else if (diff === "end") {
      nextIndexCandidate = maxIndex;
    } else {
      const newIndex = previouslyHighlightedIndex + diff;
      if (newIndex < 0) {
        if (!wrapAround && previouslyHighlightedIndex !== -1 || Math.abs(diff) > 1) {
          nextIndexCandidate = 0;
        } else {
          nextIndexCandidate = maxIndex;
        }
      } else if (newIndex > maxIndex) {
        if (!wrapAround || Math.abs(diff) > 1) {
          nextIndexCandidate = maxIndex;
        } else {
          nextIndexCandidate = 0;
        }
      } else {
        nextIndexCandidate = newIndex;
      }
    }
    const nextIndex = findValidOptionToHighlight(nextIndexCandidate, lookupDirection, options, highlightDisabled, isOptionDisabled, wrapAround);
    return (_options$nextIndex = options[nextIndex]) != null ? _options$nextIndex : null;
  }
  function handleOptionSelection(option, state, props) {
    const {
      multiple,
      optionComparer = (o, v) => o === v,
      isOptionDisabled = () => false
    } = props;
    const {
      selectedValue
    } = state;
    const optionIndex = props.options.findIndex((o) => props.optionComparer(option, o));
    if (isOptionDisabled(option, optionIndex)) {
      return state;
    }
    if (multiple) {
      var _ref, _ref2;
      const selectedValues = (_ref = selectedValue) != null ? _ref : [];
      const newSelectedValues = selectedValues.some((sv) => optionComparer(sv, option)) ? selectedValue.filter((v) => !optionComparer(v, option)) : [...(_ref2 = selectedValue) != null ? _ref2 : [], option];
      return {
        selectedValue: newSelectedValues,
        highlightedValue: option
      };
    }
    if (selectedValue != null && optionComparer(option, selectedValue)) {
      return state;
    }
    return {
      selectedValue: option,
      highlightedValue: option
    };
  }
  function handleKeyDown(event, state, props) {
    const {
      options,
      isOptionDisabled,
      disableListWrap,
      disabledItemsFocusable,
      optionComparer
    } = props;
    const moveHighlight = (diff, direction, wrapAround) => {
      return getNewHighlightedOption(options, state.highlightedValue, diff, direction, disabledItemsFocusable != null ? disabledItemsFocusable : false, isOptionDisabled != null ? isOptionDisabled : () => false, wrapAround, optionComparer);
    };
    switch (event.key) {
      case "Home":
        return _extends$2({}, state, {
          highlightedValue: moveHighlight("start", "next", false)
        });
      case "End":
        return _extends$2({}, state, {
          highlightedValue: moveHighlight("end", "previous", false)
        });
      case "PageUp":
        return _extends$2({}, state, {
          highlightedValue: moveHighlight(-pageSize, "previous", false)
        });
      case "PageDown":
        return _extends$2({}, state, {
          highlightedValue: moveHighlight(pageSize, "next", false)
        });
      case "ArrowUp":
        return _extends$2({}, state, {
          highlightedValue: moveHighlight(-1, "previous", !(disableListWrap != null ? disableListWrap : false))
        });
      case "ArrowDown":
        return _extends$2({}, state, {
          highlightedValue: moveHighlight(1, "next", !(disableListWrap != null ? disableListWrap : false))
        });
      case "Enter":
      case " ":
        if (state.highlightedValue === null) {
          return state;
        }
        return handleOptionSelection(state.highlightedValue, state, props);
      default:
        break;
    }
    return state;
  }
  function handleBlur(state) {
    return _extends$2({}, state, {
      highlightedValue: null
    });
  }
  const textCriteriaMatches$1 = (nextFocus, searchString, stringifyOption) => {
    var _stringifyOption;
    const text2 = (_stringifyOption = stringifyOption(nextFocus)) == null ? void 0 : _stringifyOption.trim().toLowerCase();
    if (!text2 || text2.length === 0) {
      return false;
    }
    return text2.indexOf(searchString) === 0;
  };
  function handleTextNavigation(state, searchString, props) {
    const {
      options,
      isOptionDisabled,
      disableListWrap,
      disabledItemsFocusable,
      optionComparer,
      optionStringifier
    } = props;
    const moveHighlight = (previouslyHighlightedOption) => {
      return getNewHighlightedOption(options, previouslyHighlightedOption, 1, "next", disabledItemsFocusable != null ? disabledItemsFocusable : false, isOptionDisabled != null ? isOptionDisabled : () => false, !(disableListWrap != null ? disableListWrap : false), optionComparer);
    };
    const startWithCurrentOption = searchString.length > 1;
    let nextOption = startWithCurrentOption ? state.highlightedValue : moveHighlight(state.highlightedValue);
    for (let index2 = 0; index2 < options.length; index2 += 1) {
      if (!nextOption || !startWithCurrentOption && state.highlightedValue === nextOption) {
        return state;
      }
      if (textCriteriaMatches$1(nextOption, searchString, optionStringifier) && (!isOptionDisabled(nextOption, options.indexOf(nextOption)) || disabledItemsFocusable)) {
        return _extends$2({}, state, {
          highlightedValue: nextOption
        });
      }
      nextOption = moveHighlight(nextOption);
    }
    return state;
  }
  function handleOptionsChange(options, previousOptions, state, props) {
    var _options$find, _options$find2;
    const {
      multiple,
      optionComparer
    } = props;
    const newHighlightedOption = state.highlightedValue == null ? null : (_options$find = options.find((option) => optionComparer(option, state.highlightedValue))) != null ? _options$find : null;
    if (multiple) {
      var _ref3;
      const selectedValues = (_ref3 = state.selectedValue) != null ? _ref3 : [];
      const newSelectedValues = selectedValues.filter((selectedValue) => options.some((option) => optionComparer(option, selectedValue)));
      return {
        highlightedValue: newHighlightedOption,
        selectedValue: newSelectedValues
      };
    }
    const newSelectedValue = (_options$find2 = options.find((option) => optionComparer(option, state.selectedValue))) != null ? _options$find2 : null;
    return {
      highlightedValue: newHighlightedOption,
      selectedValue: newSelectedValue
    };
  }
  function defaultListboxReducer(state, action) {
    const {
      type
    } = action;
    switch (type) {
      case ActionTypes.keyDown:
        return handleKeyDown(action.event, state, action.props);
      case ActionTypes.optionClick:
        return handleOptionSelection(action.option, state, action.props);
      case ActionTypes.blur:
        return handleBlur(state);
      case ActionTypes.setValue:
        return _extends$2({}, state, {
          selectedValue: action.value
        });
      case ActionTypes.setHighlight:
        return _extends$2({}, state, {
          highlightedValue: action.highlight
        });
      case ActionTypes.textNavigation:
        return handleTextNavigation(state, action.searchString, action.props);
      case ActionTypes.optionsChange:
        return handleOptionsChange(action.options, action.previousOptions, state, action.props);
      default:
        return state;
    }
  }
  function getControlledState(internalState, props) {
    if (props.value !== void 0) {
      return _extends$2({}, internalState, {
        selectedValue: props.value
      });
    }
    return internalState;
  }
  function areOptionsEqual$1(option1, option2, optionComparer) {
    if (option1 === option2) {
      return true;
    }
    if (option1 === null || option2 === null) {
      return false;
    }
    return optionComparer(option1, option2);
  }
  function useStateChangeDetection(nextState, internalPreviousState, propsRef, lastActionRef) {
    React__namespace.useEffect(() => {
      if (!propsRef.current || lastActionRef.current === null) {
        return;
      }
      if (lastActionRef.current.type === ActionTypes.setValue || lastActionRef.current.type === ActionTypes.setHighlight) {
        return;
      }
      const previousState = getControlledState(internalPreviousState, propsRef.current);
      const {
        multiple,
        optionComparer
      } = propsRef.current;
      if (multiple) {
        var _previousState$select;
        const previousSelectedValues = (_previousState$select = previousState == null ? void 0 : previousState.selectedValue) != null ? _previousState$select : [];
        const nextSelectedValues = nextState.selectedValue;
        const onChange = propsRef.current.onChange;
        if (!areArraysEqual(nextSelectedValues, previousSelectedValues, optionComparer)) {
          onChange == null ? void 0 : onChange(lastActionRef.current.event, nextSelectedValues);
        }
      } else {
        const previousSelectedValue = previousState == null ? void 0 : previousState.selectedValue;
        const nextSelectedValue = nextState.selectedValue;
        const onChange = propsRef.current.onChange;
        if (!areOptionsEqual$1(nextSelectedValue, previousSelectedValue, optionComparer)) {
          onChange == null ? void 0 : onChange(lastActionRef.current.event, nextSelectedValue);
        }
      }
      if (!areOptionsEqual$1(internalPreviousState.highlightedValue, nextState.highlightedValue, propsRef.current.optionComparer)) {
        var _propsRef$current, _propsRef$current$onH;
        (_propsRef$current = propsRef.current) == null ? void 0 : (_propsRef$current$onH = _propsRef$current.onHighlightChange) == null ? void 0 : _propsRef$current$onH.call(_propsRef$current, lastActionRef.current.event, nextState.highlightedValue);
      }
      lastActionRef.current = null;
    }, [nextState.selectedValue, nextState.highlightedValue, internalPreviousState, propsRef, lastActionRef]);
  }
  function useControllableReducer(internalReducer, externalReducer, props) {
    var _ref;
    const {
      value,
      defaultValue,
      multiple
    } = props.current;
    const actionRef = React__namespace.useRef(null);
    const initialSelectedValue = (_ref = value === void 0 ? defaultValue : value) != null ? _ref : multiple ? [] : null;
    const initialState = {
      highlightedValue: null,
      selectedValue: initialSelectedValue
    };
    const combinedReducer = React__namespace.useCallback((state, action) => {
      actionRef.current = action;
      if (externalReducer) {
        return externalReducer(getControlledState(state, action.props), action);
      }
      return internalReducer(getControlledState(state, action.props), action);
    }, [externalReducer, internalReducer]);
    const [nextState, dispatch] = React__namespace.useReducer(combinedReducer, initialState);
    const dispatchWithProps = React__namespace.useCallback((action) => {
      dispatch(_extends$2({
        props: props.current
      }, action));
    }, [dispatch, props]);
    const previousState = React__namespace.useRef(initialState);
    React__namespace.useEffect(() => {
      previousState.current = nextState;
    }, [previousState, nextState]);
    useStateChangeDetection(nextState, previousState.current, props, actionRef);
    return [getControlledState(nextState, props.current), dispatchWithProps];
  }
  function useLatest(value, deps) {
    const ref = React__namespace.useRef(value);
    React__namespace.useEffect(() => {
      ref.current = value;
    }, deps != null ? deps : [value]);
    return ref;
  }
  const TEXT_NAVIGATION_RESET_TIMEOUT = 500;
  function useTextNavigation(callback) {
    const textCriteriaRef = React__namespace.useRef({
      searchString: "",
      lastTime: null
    });
    return React__namespace.useCallback((event) => {
      if (event.key.length === 1 && event.key !== " ") {
        const textCriteria = textCriteriaRef.current;
        const lowerKey = event.key.toLowerCase();
        const currentTime = performance.now();
        if (textCriteria.searchString.length > 0 && textCriteria.lastTime && currentTime - textCriteria.lastTime > TEXT_NAVIGATION_RESET_TIMEOUT) {
          textCriteria.searchString = lowerKey;
        } else if (textCriteria.searchString.length !== 1 || lowerKey !== textCriteria.searchString) {
          textCriteria.searchString += lowerKey;
        }
        textCriteria.lastTime = currentTime;
        callback(textCriteria.searchString, event);
      }
    }, [callback]);
  }
  const defaultOptionComparer = (optionA, optionB) => optionA === optionB;
  const defaultIsOptionDisabled = () => false;
  const defaultOptionStringifier$1 = (option) => typeof option === "string" ? option : String(option);
  function useListbox(props) {
    var _props$optionIdGenera;
    const {
      disabledItemsFocusable = false,
      disableListWrap = false,
      focusManagement = "activeDescendant",
      id: idProp,
      isOptionDisabled = defaultIsOptionDisabled,
      listboxRef: externalListboxRef,
      multiple = false,
      optionComparer = defaultOptionComparer,
      optionStringifier = defaultOptionStringifier$1,
      options,
      stateReducer: externalReducer,
      value: valueParam
    } = props;
    const id = useId(idProp);
    const defaultIdGenerator = React__namespace.useCallback((_2, index2) => `${id}-option-${index2}`, [id]);
    const optionIdGenerator = (_props$optionIdGenera = props.optionIdGenerator) != null ? _props$optionIdGenera : defaultIdGenerator;
    const propsWithDefaults = useLatest(_extends$2({}, props, {
      disabledItemsFocusable,
      disableListWrap,
      focusManagement,
      isOptionDisabled,
      multiple,
      optionComparer,
      optionStringifier
    }), [props]);
    const listboxRef = React__namespace.useRef(null);
    const handleRef = useForkRef(externalListboxRef, listboxRef);
    const [{
      highlightedValue,
      selectedValue
    }, dispatch] = useControllableReducer(defaultListboxReducer, externalReducer, propsWithDefaults);
    const handleTextNavigation2 = useTextNavigation((searchString, event) => dispatch({
      type: ActionTypes.textNavigation,
      event,
      searchString
    }));
    React__namespace.useEffect(() => {
      if (valueParam !== void 0 && valueParam !== selectedValue) {
        dispatch({
          type: ActionTypes.setValue,
          event: null,
          value: valueParam
        });
      }
    }, [valueParam, selectedValue, dispatch]);
    const highlightedIndex = React__namespace.useMemo(() => {
      return highlightedValue == null ? -1 : options.findIndex((option) => optionComparer(option, highlightedValue));
    }, [highlightedValue, options, optionComparer]);
    const latestSelectedValue = useLatest(selectedValue);
    const latestHighlightedIndex = useLatest(highlightedIndex);
    const previousOptions = React__namespace.useRef([]);
    React__namespace.useEffect(() => {
      if (areArraysEqual(previousOptions.current, options, optionComparer)) {
        return;
      }
      dispatch({
        type: ActionTypes.optionsChange,
        event: null,
        options,
        previousOptions: previousOptions.current
      });
      previousOptions.current = options;
    }, [options, optionComparer, dispatch]);
    const setSelectedValue = React__namespace.useCallback((option) => {
      dispatch({
        type: ActionTypes.setValue,
        event: null,
        value: option
      });
    }, [dispatch]);
    const setHighlightedValue = React__namespace.useCallback((option) => {
      dispatch({
        type: ActionTypes.setHighlight,
        event: null,
        highlight: option
      });
    }, [dispatch]);
    const createHandleOptionClick = React__namespace.useCallback((option, other) => (event) => {
      var _other$onClick;
      (_other$onClick = other.onClick) == null ? void 0 : _other$onClick.call(other, event);
      if (event.defaultPrevented) {
        return;
      }
      event.preventDefault();
      dispatch({
        type: ActionTypes.optionClick,
        option,
        event
      });
    }, [dispatch]);
    const createHandleOptionPointerOver = React__namespace.useCallback((option, other) => (event) => {
      var _other$onMouseOver;
      (_other$onMouseOver = other.onMouseOver) == null ? void 0 : _other$onMouseOver.call(other, event);
      if (event.defaultPrevented) {
        return;
      }
      dispatch({
        type: ActionTypes.optionHover,
        option,
        event
      });
    }, [dispatch]);
    const createHandleKeyDown = (other) => (event) => {
      var _other$onKeyDown;
      (_other$onKeyDown = other.onKeyDown) == null ? void 0 : _other$onKeyDown.call(other, event);
      if (event.defaultPrevented) {
        return;
      }
      const keysToPreventDefault = ["ArrowUp", "ArrowDown", "Home", "End", "PageUp", "PageDown"];
      if (focusManagement === "activeDescendant") {
        keysToPreventDefault.push(" ", "Enter");
      }
      if (keysToPreventDefault.includes(event.key)) {
        event.preventDefault();
      }
      dispatch({
        type: ActionTypes.keyDown,
        event
      });
      handleTextNavigation2(event);
    };
    const createHandleBlur = (other) => (event) => {
      var _other$onBlur, _listboxRef$current;
      (_other$onBlur = other.onBlur) == null ? void 0 : _other$onBlur.call(other, event);
      if (event.defaultPrevented) {
        return;
      }
      if ((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(document.activeElement)) {
        return;
      }
      dispatch({
        type: ActionTypes.blur,
        event
      });
    };
    const getRootProps = (otherHandlers = {}) => {
      return _extends$2({}, otherHandlers, {
        "aria-activedescendant": focusManagement === "activeDescendant" && highlightedValue != null ? optionIdGenerator(highlightedValue, highlightedIndex) : void 0,
        id,
        onBlur: createHandleBlur(otherHandlers),
        onKeyDown: createHandleKeyDown(otherHandlers),
        role: "listbox",
        tabIndex: focusManagement === "DOM" ? -1 : 0,
        ref: handleRef
      });
    };
    const getOptionState = React__namespace.useCallback((option) => {
      let selected;
      const index2 = options.findIndex((opt) => optionComparer(opt, option));
      if (multiple) {
        var _ref;
        selected = ((_ref = latestSelectedValue.current) != null ? _ref : []).some((value) => value != null && optionComparer(option, value));
      } else {
        selected = optionComparer(option, latestSelectedValue.current);
      }
      const disabled = isOptionDisabled(option, index2);
      const highlighted = latestHighlightedIndex.current === index2 && index2 !== -1;
      return {
        disabled,
        highlighted,
        index: index2,
        selected
      };
    }, [options, multiple, isOptionDisabled, optionComparer, latestSelectedValue, latestHighlightedIndex]);
    const getOptionTabIndex = React__namespace.useCallback((optionState) => {
      if (focusManagement === "activeDescendant") {
        return void 0;
      }
      if (!optionState.highlighted) {
        return -1;
      }
      if (optionState.disabled && !disabledItemsFocusable) {
        return -1;
      }
      return 0;
    }, [focusManagement, disabledItemsFocusable]);
    const getOptionProps = React__namespace.useCallback((option, otherHandlers = {}) => {
      const optionState = getOptionState(option);
      return _extends$2({}, otherHandlers, {
        "aria-disabled": optionState.disabled || void 0,
        "aria-selected": optionState.selected,
        id: optionIdGenerator(option, optionState.index),
        onClick: createHandleOptionClick(option, otherHandlers),
        onPointerOver: createHandleOptionPointerOver(option, otherHandlers),
        role: "option",
        tabIndex: getOptionTabIndex(optionState)
      });
    }, [optionIdGenerator, createHandleOptionClick, createHandleOptionPointerOver, getOptionTabIndex, getOptionState]);
    React__namespace.useDebugValue({
      highlightedOption: highlightedValue,
      selectedOption: selectedValue
    });
    return {
      getRootProps,
      getOptionProps,
      getOptionState,
      highlightedOption: highlightedValue,
      selectedOption: selectedValue,
      setSelectedValue,
      setHighlightedValue
    };
  }
  const MenuUnstyledContext = /* @__PURE__ */ React__namespace.createContext(null);
  MenuUnstyledContext.displayName = "MenuUnstyledContext";
  function getMenuUnstyledUtilityClass(slot) {
    return generateUtilityClass("MuiMenu", slot);
  }
  const menuUnstyledClasses = generateUtilityClasses("MuiMenu", ["root", "listbox", "expanded"]);
  function createMessageBus() {
    const listeners = /* @__PURE__ */ new Map();
    function subscribe(topic, callback) {
      let topicListeners = listeners.get(topic);
      if (!topicListeners) {
        topicListeners = /* @__PURE__ */ new Set([callback]);
        listeners.set(topic, topicListeners);
      } else {
        topicListeners.add(callback);
      }
      return () => {
        topicListeners.delete(callback);
        if (topicListeners.size === 0) {
          listeners.delete(topic);
        }
      };
    }
    function publish(topic, ...args) {
      const topicListeners = listeners.get(topic);
      if (topicListeners) {
        topicListeners.forEach((callback) => callback(...args));
      }
    }
    return {
      subscribe,
      publish
    };
  }
  function useMessageBus() {
    const bus = React__namespace.useRef();
    if (!bus.current) {
      bus.current = createMessageBus();
    }
    return bus.current;
  }
  const HIGHLIGHT_CHANGE_TOPIC$1 = "menu:change-highlight";
  function useMenuChangeNotifiers() {
    const messageBus = useMessageBus();
    const notifyHighlightChanged = React__namespace.useCallback((newValue) => {
      messageBus.publish(HIGHLIGHT_CHANGE_TOPIC$1, newValue);
    }, [messageBus]);
    const registerHighlightChangeHandler = React__namespace.useCallback((handler) => {
      return messageBus.subscribe(HIGHLIGHT_CHANGE_TOPIC$1, handler);
    }, [messageBus]);
    return {
      notifyHighlightChanged,
      registerHighlightChangeHandler
    };
  }
  function stateReducer(state, action) {
    if (action.type === ActionTypes.blur || action.type === ActionTypes.optionHover || action.type === ActionTypes.setValue) {
      return state;
    }
    const newState = defaultListboxReducer(state, action);
    if (action.type !== ActionTypes.setHighlight && newState.highlightedValue === null && action.props.options.length > 0) {
      return _extends$2({}, newState, {
        highlightedValue: action.props.options[0]
      });
    }
    return newState;
  }
  function useMenu(parameters = {}) {
    const {
      listboxRef: listboxRefProp,
      open = false,
      onClose: onClose2,
      listboxId
    } = parameters;
    const [menuItems, setMenuItems] = React__namespace.useState({});
    const listboxRef = React__namespace.useRef(null);
    const handleRef = useForkRef(listboxRef, listboxRefProp);
    const registerItem = React__namespace.useCallback((id, metadata) => {
      setMenuItems((previousState) => {
        const newState = _extends$2({}, previousState);
        newState[id] = metadata;
        return newState;
      });
    }, []);
    const unregisterItem = React__namespace.useCallback((id) => {
      setMenuItems((previousState) => {
        const newState = _extends$2({}, previousState);
        delete newState[id];
        return newState;
      });
    }, []);
    const {
      notifyHighlightChanged,
      registerHighlightChangeHandler
    } = useMenuChangeNotifiers();
    const {
      getOptionState,
      getOptionProps,
      getRootProps,
      highlightedOption,
      setHighlightedValue: setListboxHighlight
    } = useListbox({
      options: Object.keys(menuItems),
      optionStringifier: (id) => {
        var _menuItems$id$ref$cur;
        return menuItems[id].label || ((_menuItems$id$ref$cur = menuItems[id].ref.current) == null ? void 0 : _menuItems$id$ref$cur.innerText);
      },
      isOptionDisabled: (id) => {
        var _menuItems$id;
        return (menuItems == null ? void 0 : (_menuItems$id = menuItems[id]) == null ? void 0 : _menuItems$id.disabled) || false;
      },
      listboxRef: handleRef,
      focusManagement: "DOM",
      id: listboxId,
      stateReducer,
      disabledItemsFocusable: true
    });
    React__namespace.useEffect(() => {
      notifyHighlightChanged(highlightedOption);
    }, [highlightedOption, notifyHighlightChanged]);
    const highlightFirstItem = React__namespace.useCallback(() => {
      if (Object.keys(menuItems).length > 0) {
        setListboxHighlight(menuItems[Object.keys(menuItems)[0]].id);
      }
    }, [menuItems, setListboxHighlight]);
    const highlightLastItem = React__namespace.useCallback(() => {
      if (Object.keys(menuItems).length > 0) {
        setListboxHighlight(menuItems[Object.keys(menuItems)[Object.keys(menuItems).length - 1]].id);
      }
    }, [menuItems, setListboxHighlight]);
    React__namespace.useEffect(() => {
      if (!open) {
        highlightFirstItem();
      }
    }, [open, highlightFirstItem]);
    const createHandleKeyDown = (otherHandlers) => (e) => {
      var _otherHandlers$onKeyD;
      (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, e);
      if (e.defaultPrevented) {
        return;
      }
      if (e.key === "Escape" && open) {
        onClose2 == null ? void 0 : onClose2();
      }
    };
    const createHandleBlur = (otherHandlers) => (e) => {
      var _otherHandlers$onBlur, _listboxRef$current;
      (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, e);
      if (!((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(e.relatedTarget))) {
        onClose2 == null ? void 0 : onClose2();
      }
    };
    React__namespace.useEffect(() => {
      var _listboxRef$current2;
      if ((_listboxRef$current2 = listboxRef.current) != null && _listboxRef$current2.contains(document.activeElement) && highlightedOption !== null) {
        var _menuItems$highlighte, _menuItems$highlighte2;
        menuItems == null ? void 0 : (_menuItems$highlighte = menuItems[highlightedOption]) == null ? void 0 : (_menuItems$highlighte2 = _menuItems$highlighte.ref.current) == null ? void 0 : _menuItems$highlighte2.focus();
      }
    }, [highlightedOption, menuItems]);
    const getListboxProps = (otherHandlers = {}) => {
      const rootProps = getRootProps(_extends$2({}, otherHandlers, {
        onBlur: createHandleBlur(otherHandlers),
        onKeyDown: createHandleKeyDown(otherHandlers)
      }));
      return _extends$2({}, otherHandlers, rootProps, {
        role: "menu"
      });
    };
    const getItemState = React__namespace.useCallback((id) => {
      const {
        disabled,
        highlighted
      } = getOptionState(id);
      return {
        disabled,
        highlighted
      };
    }, [getOptionState]);
    React__namespace.useDebugValue({
      menuItems,
      highlightedOption
    });
    const contextValue = React__namespace.useMemo(() => ({
      getItemProps: getOptionProps,
      getItemState,
      registerHighlightChangeHandler,
      registerItem,
      unregisterItem
    }), [getOptionProps, getItemState, registerHighlightChangeHandler, registerItem, unregisterItem]);
    return {
      contextValue,
      getListboxProps,
      highlightedOption,
      highlightFirstItem,
      highlightLastItem,
      menuItems
    };
  }
  var top$1 = "top";
  var bottom$1 = "bottom";
  var right$1 = "right";
  var left$1 = "left";
  var auto = "auto";
  var basePlacements = [top$1, bottom$1, right$1, left$1];
  var start = "start";
  var end = "end";
  var clippingParents = "clippingParents";
  var viewport = "viewport";
  var popper = "popper";
  var reference = "reference";
  var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []);
  var beforeRead = "beforeRead";
  var read = "read";
  var afterRead = "afterRead";
  var beforeMain = "beforeMain";
  var main = "main";
  var afterMain = "afterMain";
  var beforeWrite = "beforeWrite";
  var write = "write";
  var afterWrite = "afterWrite";
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];
  function getNodeName(element) {
    return element ? (element.nodeName || "").toLowerCase() : null;
  }
  function getWindow(node2) {
    if (node2 == null) {
      return window;
    }
    if (node2.toString() !== "[object Window]") {
      var ownerDocument2 = node2.ownerDocument;
      return ownerDocument2 ? ownerDocument2.defaultView || window : window;
    }
    return node2;
  }
  function isElement(node2) {
    var OwnElement = getWindow(node2).Element;
    return node2 instanceof OwnElement || node2 instanceof Element;
  }
  function isHTMLElement$2(node2) {
    var OwnElement = getWindow(node2).HTMLElement;
    return node2 instanceof OwnElement || node2 instanceof HTMLElement;
  }
  function isShadowRoot(node2) {
    if (typeof ShadowRoot === "undefined") {
      return false;
    }
    var OwnElement = getWindow(node2).ShadowRoot;
    return node2 instanceof OwnElement || node2 instanceof ShadowRoot;
  }
  function applyStyles$1(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function(name) {
      var style2 = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name];
      if (!isHTMLElement$2(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style2);
      Object.keys(attributes).forEach(function(name2) {
        var value = attributes[name2];
        if (value === false) {
          element.removeAttribute(name2);
        } else {
          element.setAttribute(name2, value === true ? "" : value);
        }
      });
    });
  }
  function effect$2(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: "0",
        top: "0",
        margin: "0"
      },
      arrow: {
        position: "absolute"
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }
    return function() {
      Object.keys(state.elements).forEach(function(name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
        var style2 = styleProperties.reduce(function(style3, property) {
          style3[property] = "";
          return style3;
        }, {});
        if (!isHTMLElement$2(element) || !getNodeName(element)) {
          return;
        }
        Object.assign(element.style, style2);
        Object.keys(attributes).forEach(function(attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  }
  const applyStyles$2 = {
    name: "applyStyles",
    enabled: true,
    phase: "write",
    fn: applyStyles$1,
    effect: effect$2,
    requires: ["computeStyles"]
  };
  function getBasePlacement(placement) {
    return placement.split("-")[0];
  }
  var max$1 = Math.max;
  var min$1 = Math.min;
  var round$2 = Math.round;
  function getUAString() {
    var uaData = navigator.userAgentData;
    if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
      return uaData.brands.map(function(item) {
        return item.brand + "/" + item.version;
      }).join(" ");
    }
    return navigator.userAgent;
  }
  function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test(getUAString());
  }
  function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (includeScale && isHTMLElement$2(element)) {
      scaleX = element.offsetWidth > 0 ? round$2(clientRect.width) / element.offsetWidth || 1 : 1;
      scaleY = element.offsetHeight > 0 ? round$2(clientRect.height) / element.offsetHeight || 1 : 1;
    }
    var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
    var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width2 = clientRect.width / scaleX;
    var height2 = clientRect.height / scaleY;
    return {
      width: width2,
      height: height2,
      top: y,
      right: x + width2,
      bottom: y + height2,
      left: x,
      x,
      y
    };
  }
  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element);
    var width2 = element.offsetWidth;
    var height2 = element.offsetHeight;
    if (Math.abs(clientRect.width - width2) <= 1) {
      width2 = clientRect.width;
    }
    if (Math.abs(clientRect.height - height2) <= 1) {
      height2 = clientRect.height;
    }
    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: width2,
      height: height2
    };
  }
  function contains$1(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode();
    if (parent.contains(child)) {
      return true;
    } else if (rootNode && isShadowRoot(rootNode)) {
      var next2 = child;
      do {
        if (next2 && parent.isSameNode(next2)) {
          return true;
        }
        next2 = next2.parentNode || next2.host;
      } while (next2);
    }
    return false;
  }
  function getComputedStyle(element) {
    return getWindow(element).getComputedStyle(element);
  }
  function isTableElement(element) {
    return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
  }
  function getDocumentElement(element) {
    return ((isElement(element) ? element.ownerDocument : (
      // $FlowFixMe[prop-missing]
      element.document
    )) || window.document).documentElement;
  }
  function getParentNode(element) {
    if (getNodeName(element) === "html") {
      return element;
    }
    return (
      // this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || // DOM Element detected
      (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element)
    );
  }
  function getTrueOffsetParent(element) {
    if (!isHTMLElement$2(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle(element).position === "fixed") {
      return null;
    }
    return element.offsetParent;
  }
  function getContainingBlock(element) {
    var isFirefox = /firefox/i.test(getUAString());
    var isIE = /Trident/i.test(getUAString());
    if (isIE && isHTMLElement$2(element)) {
      var elementCss = getComputedStyle(element);
      if (elementCss.position === "fixed") {
        return null;
      }
    }
    var currentNode = getParentNode(element);
    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }
    while (isHTMLElement$2(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle(currentNode);
      if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }
    return null;
  }
  function getOffsetParent(element) {
    var window2 = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);
    while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
      offsetParent = getTrueOffsetParent(offsetParent);
    }
    if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static")) {
      return window2;
    }
    return offsetParent || getContainingBlock(element) || window2;
  }
  function getMainAxisFromPlacement(placement) {
    return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
  }
  function within(min2, value, max2) {
    return max$1(min2, min$1(value, max2));
  }
  function withinMaxClamp(min2, value, max2) {
    var v = within(min2, value, max2);
    return v > max2 ? max2 : v;
  }
  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }
  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }
  function expandToHashMap(value, keys) {
    return keys.reduce(function(hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }
  var toPaddingObject = function toPaddingObject2(padding2, state) {
    padding2 = typeof padding2 === "function" ? padding2(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding2;
    return mergePaddingObject(typeof padding2 !== "number" ? padding2 : expandToHashMap(padding2, basePlacements));
  };
  function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left$1, right$1].indexOf(basePlacement) >= 0;
    var len = isVertical ? "height" : "width";
    if (!arrowElement || !popperOffsets2) {
      return;
    }
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === "y" ? top$1 : left$1;
    var maxProp = axis === "y" ? bottom$1 : right$1;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
    var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2;
    var min2 = paddingObject[minProp];
    var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset2 = within(min2, center, max2);
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
  }
  function effect$1(_ref2) {
    var state = _ref2.state, options = _ref2.options;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
    if (arrowElement == null) {
      return;
    }
    if (typeof arrowElement === "string") {
      arrowElement = state.elements.popper.querySelector(arrowElement);
      if (!arrowElement) {
        return;
      }
    }
    if (!contains$1(state.elements.popper, arrowElement)) {
      return;
    }
    state.elements.arrow = arrowElement;
  }
  const arrow$1 = {
    name: "arrow",
    enabled: true,
    phase: "main",
    fn: arrow,
    effect: effect$1,
    requires: ["popperOffsets"],
    requiresIfExists: ["preventOverflow"]
  };
  function getVariation(placement) {
    return placement.split("-")[1];
  }
  var unsetSides = {
    top: "auto",
    right: "auto",
    bottom: "auto",
    left: "auto"
  };
  function roundOffsetsByDPR(_ref, win) {
    var x = _ref.x, y = _ref.y;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round$2(x * dpr) / dpr || 0,
      y: round$2(y * dpr) / dpr || 0
    };
  }
  function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position2 = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
      x,
      y
    }) : {
      x,
      y
    };
    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty("x");
    var hasY = offsets.hasOwnProperty("y");
    var sideX = left$1;
    var sideY = top$1;
    var win = window;
    if (adaptive) {
      var offsetParent = getOffsetParent(popper2);
      var heightProp = "clientHeight";
      var widthProp = "clientWidth";
      if (offsetParent === getWindow(popper2)) {
        offsetParent = getDocumentElement(popper2);
        if (getComputedStyle(offsetParent).position !== "static" && position2 === "absolute") {
          heightProp = "scrollHeight";
          widthProp = "scrollWidth";
        }
      }
      offsetParent = offsetParent;
      if (placement === top$1 || (placement === left$1 || placement === right$1) && variation === end) {
        sideY = bottom$1;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : (
          // $FlowFixMe[prop-missing]
          offsetParent[heightProp]
        );
        y -= offsetY - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }
      if (placement === left$1 || (placement === top$1 || placement === bottom$1) && variation === end) {
        sideX = right$1;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : (
          // $FlowFixMe[prop-missing]
          offsetParent[widthProp]
        );
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }
    var commonStyles = Object.assign({
      position: position2
    }, adaptive && unsetSides);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x,
      y
    }, getWindow(popper2)) : {
      x,
      y
    };
    x = _ref4.x;
    y = _ref4.y;
    if (gpuAcceleration) {
      var _Object$assign;
      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
  }
  function computeStyles(_ref5) {
    var state = _ref5.state, options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration,
      isFixed: state.options.strategy === "fixed"
    };
    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive,
        roundOffsets
      })));
    }
    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: "absolute",
        adaptive: false,
        roundOffsets
      })));
    }
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-placement": state.placement
    });
  }
  const computeStyles$1 = {
    name: "computeStyles",
    enabled: true,
    phase: "beforeWrite",
    fn: computeStyles,
    data: {}
  };
  var passive = {
    passive: true
  };
  function effect(_ref) {
    var state = _ref.state, instance = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window2 = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.addEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.addEventListener("resize", instance.update, passive);
    }
    return function() {
      if (scroll) {
        scrollParents.forEach(function(scrollParent) {
          scrollParent.removeEventListener("scroll", instance.update, passive);
        });
      }
      if (resize) {
        window2.removeEventListener("resize", instance.update, passive);
      }
    };
  }
  const eventListeners = {
    name: "eventListeners",
    enabled: true,
    phase: "write",
    fn: function fn() {
    },
    effect,
    data: {}
  };
  var hash$2 = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function(matched) {
      return hash$2[matched];
    });
  }
  var hash$1 = {
    start: "end",
    end: "start"
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function(matched) {
      return hash$1[matched];
    });
  }
  function getWindowScroll(node2) {
    var win = getWindow(node2);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft,
      scrollTop
    };
  }
  function getWindowScrollBarX(element) {
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }
  function getViewportRect(element, strategy) {
    var win = getWindow(element);
    var html2 = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width2 = html2.clientWidth;
    var height2 = html2.clientHeight;
    var x = 0;
    var y = 0;
    if (visualViewport) {
      width2 = visualViewport.width;
      height2 = visualViewport.height;
      var layoutViewport = isLayoutViewport();
      if (layoutViewport || !layoutViewport && strategy === "fixed") {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }
    return {
      width: width2,
      height: height2,
      x: x + getWindowScrollBarX(element),
      y
    };
  }
  function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html2 = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body2 = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width2 = max$1(html2.scrollWidth, html2.clientWidth, body2 ? body2.scrollWidth : 0, body2 ? body2.clientWidth : 0);
    var height2 = max$1(html2.scrollHeight, html2.clientHeight, body2 ? body2.scrollHeight : 0, body2 ? body2.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;
    if (getComputedStyle(body2 || html2).direction === "rtl") {
      x += max$1(html2.clientWidth, body2 ? body2.clientWidth : 0) - width2;
    }
    return {
      width: width2,
      height: height2,
      x,
      y
    };
  }
  function isScrollParent(element) {
    var _getComputedStyle = getComputedStyle(element), overflow2 = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow2 + overflowY + overflowX);
  }
  function getScrollParent(node2) {
    if (["html", "body", "#document"].indexOf(getNodeName(node2)) >= 0) {
      return node2.ownerDocument.body;
    }
    if (isHTMLElement$2(node2) && isScrollParent(node2)) {
      return node2;
    }
    return getScrollParent(getParentNode(node2));
  }
  function listScrollParents(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) {
      list = [];
    }
    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : (
      // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
      updatedList.concat(listScrollParents(getParentNode(target)))
    );
  }
  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }
  function getInnerBoundingClientRect(element, strategy) {
    var rect = getBoundingClientRect(element, false, strategy === "fixed");
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }
  function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  }
  function getClippingParents(element) {
    var clippingParents2 = listScrollParents(getParentNode(element));
    var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement$2(element) ? getOffsetParent(element) : element;
    if (!isElement(clipperElement)) {
      return [];
    }
    return clippingParents2.filter(function(clippingParent) {
      return isElement(clippingParent) && contains$1(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
    });
  }
  function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
    var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents2[0];
    var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent, strategy);
      accRect.top = max$1(rect.top, accRect.top);
      accRect.right = min$1(rect.right, accRect.right);
      accRect.bottom = min$1(rect.bottom, accRect.bottom);
      accRect.left = max$1(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }
  function computeOffsets(_ref) {
    var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference2.x + reference2.width / 2 - element.width / 2;
    var commonY = reference2.y + reference2.height / 2 - element.height / 2;
    var offsets;
    switch (basePlacement) {
      case top$1:
        offsets = {
          x: commonX,
          y: reference2.y - element.height
        };
        break;
      case bottom$1:
        offsets = {
          x: commonX,
          y: reference2.y + reference2.height
        };
        break;
      case right$1:
        offsets = {
          x: reference2.x + reference2.width,
          y: commonY
        };
        break;
      case left$1:
        offsets = {
          x: reference2.x - element.width,
          y: commonY
        };
        break;
      default:
        offsets = {
          x: reference2.x,
          y: reference2.y
        };
    }
    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
    if (mainAxis != null) {
      var len = mainAxis === "y" ? "height" : "width";
      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
          break;
        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
          break;
        default:
      }
    }
    return offsets;
  }
  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding2 = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding2 !== "number" ? padding2 : expandToHashMap(padding2, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets2 = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: "absolute",
      placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset;
    if (elementContext === popper && offsetData) {
      var offset2 = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function(key) {
        var multiply = [right$1, bottom$1].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top$1, bottom$1].indexOf(key) >= 0 ? "y" : "x";
        overflowOffsets[key] += offset2[axis] * multiply;
      });
    }
    return overflowOffsets;
  }
  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding2 = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
      return getVariation(placement2) === variation;
    }) : basePlacements;
    var allowedPlacements = placements$1.filter(function(placement2) {
      return allowedAutoPlacements.indexOf(placement2) >= 0;
    });
    if (allowedPlacements.length === 0) {
      allowedPlacements = placements$1;
    }
    var overflows = allowedPlacements.reduce(function(acc, placement2) {
      acc[placement2] = detectOverflow(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding: padding2
      })[getBasePlacement(placement2)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function(a, b) {
      return overflows[a] - overflows[b];
    });
  }
  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }
    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }
  function flip(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) {
      return;
    }
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding2 = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
      return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding: padding2,
        flipVariations,
        allowedAutoPlacements
      }) : placement2);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = /* @__PURE__ */ new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements2[0];
    for (var i = 0; i < placements2.length; i++) {
      var placement = placements2[i];
      var _basePlacement = getBasePlacement(placement);
      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top$1, bottom$1].indexOf(_basePlacement) >= 0;
      var len = isVertical ? "width" : "height";
      var overflow2 = detectOverflow(state, {
        placement,
        boundary,
        rootBoundary,
        altBoundary,
        padding: padding2
      });
      var mainVariationSide = isVertical ? isStartVariation ? right$1 : left$1 : isStartVariation ? bottom$1 : top$1;
      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }
      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];
      if (checkMainAxis) {
        checks.push(overflow2[_basePlacement] <= 0);
      }
      if (checkAltAxis) {
        checks.push(overflow2[mainVariationSide] <= 0, overflow2[altVariationSide] <= 0);
      }
      if (checks.every(function(check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }
      checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
      var numberOfChecks = flipVariations ? 3 : 1;
      var _loop = function _loop2(_i2) {
        var fittingPlacement = placements2.find(function(placement2) {
          var checks2 = checksMap.get(placement2);
          if (checks2) {
            return checks2.slice(0, _i2).every(function(check) {
              return check;
            });
          }
        });
        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };
      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);
        if (_ret === "break")
          break;
      }
    }
    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  }
  const flip$1 = {
    name: "flip",
    enabled: true,
    phase: "main",
    fn: flip,
    requiresIfExists: ["offset"],
    data: {
      _skip: false
    }
  };
  function getSideOffsets(overflow2, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }
    return {
      top: overflow2.top - rect.height - preventedOffsets.y,
      right: overflow2.right - rect.width + preventedOffsets.x,
      bottom: overflow2.bottom - rect.height + preventedOffsets.y,
      left: overflow2.left - rect.width - preventedOffsets.x
    };
  }
  function isAnySideFullyClipped(overflow2) {
    return [top$1, right$1, bottom$1, left$1].some(function(side) {
      return overflow2[side] >= 0;
    });
  }
  function hide(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: "reference"
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets,
      popperEscapeOffsets,
      isReferenceHidden,
      hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-reference-hidden": isReferenceHidden,
      "data-popper-escaped": hasPopperEscaped
    });
  }
  const hide$1 = {
    name: "hide",
    enabled: true,
    phase: "main",
    requiresIfExists: ["preventOverflow"],
    fn: hide
  };
  function distanceAndSkiddingToXY(placement, rects, offset2) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left$1, top$1].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
      placement
    })) : offset2, skidding = _ref[0], distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left$1, right$1].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }
  function offset(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function(acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data;
  }
  const offset$1 = {
    name: "offset",
    enabled: true,
    phase: "main",
    requires: ["popperOffsets"],
    fn: offset
  };
  function popperOffsets(_ref) {
    var state = _ref.state, name = _ref.name;
    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: "absolute",
      placement: state.placement
    });
  }
  const popperOffsets$1 = {
    name: "popperOffsets",
    enabled: true,
    phase: "read",
    fn: popperOffsets,
    data: {}
  };
  function getAltAxis(axis) {
    return axis === "x" ? "y" : "x";
  }
  function preventOverflow(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding2 = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow2 = detectOverflow(state, {
      boundary,
      rootBoundary,
      padding: padding2,
      altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };
    if (!popperOffsets2) {
      return;
    }
    if (checkMainAxis) {
      var _offsetModifierState$;
      var mainSide = mainAxis === "y" ? top$1 : left$1;
      var altSide = mainAxis === "y" ? bottom$1 : right$1;
      var len = mainAxis === "y" ? "height" : "width";
      var offset2 = popperOffsets2[mainAxis];
      var min2 = offset2 + overflow2[mainSide];
      var max2 = offset2 - overflow2[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide];
      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset2 + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min$1(min2, tetherMin) : min2, offset2, tether ? max$1(max2, tetherMax) : max2);
      popperOffsets2[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset2;
    }
    if (checkAltAxis) {
      var _offsetModifierState$2;
      var _mainSide = mainAxis === "x" ? top$1 : left$1;
      var _altSide = mainAxis === "x" ? bottom$1 : right$1;
      var _offset = popperOffsets2[altAxis];
      var _len = altAxis === "y" ? "height" : "width";
      var _min = _offset + overflow2[_mainSide];
      var _max = _offset - overflow2[_altSide];
      var isOriginSide = [top$1, left$1].indexOf(basePlacement) !== -1;
      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
      popperOffsets2[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
  }
  const preventOverflow$1 = {
    name: "preventOverflow",
    enabled: true,
    phase: "main",
    fn: preventOverflow,
    requiresIfExists: ["offset"]
  };
  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  function getNodeScroll(node2) {
    if (node2 === getWindow(node2) || !isHTMLElement$2(node2)) {
      return getWindowScroll(node2);
    } else {
      return getHTMLElementScroll(node2);
    }
  }
  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round$2(rect.width) / element.offsetWidth || 1;
    var scaleY = round$2(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  }
  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    var isOffsetParentAnElement = isHTMLElement$2(offsetParent);
    var offsetParentIsScaled = isHTMLElement$2(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement$2(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }
    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }
  function order$1(modifiers) {
    var map = /* @__PURE__ */ new Map();
    var visited = /* @__PURE__ */ new Set();
    var result = [];
    modifiers.forEach(function(modifier) {
      map.set(modifier.name, modifier);
    });
    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function(dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);
          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }
    modifiers.forEach(function(modifier) {
      if (!visited.has(modifier.name)) {
        sort(modifier);
      }
    });
    return result;
  }
  function orderModifiers(modifiers) {
    var orderedModifiers = order$1(modifiers);
    return modifierPhases.reduce(function(acc, phase) {
      return acc.concat(orderedModifiers.filter(function(modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }
  function debounce(fn) {
    var pending;
    return function() {
      if (!pending) {
        pending = new Promise(function(resolve) {
          Promise.resolve().then(function() {
            pending = void 0;
            resolve(fn());
          });
        });
      }
      return pending;
    };
  }
  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function(merged2, current) {
      var existing = merged2[current.name];
      merged2[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged2;
    }, {});
    return Object.keys(merged).map(function(key) {
      return merged[key];
    });
  }
  var DEFAULT_OPTIONS = {
    placement: "bottom",
    modifiers: [],
    strategy: "absolute"
  };
  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return !args.some(function(element) {
      return !(element && typeof element.getBoundingClientRect === "function");
    });
  }
  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions2 = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper2(reference2, popper2, options) {
      if (options === void 0) {
        options = defaultOptions2;
      }
      var state = {
        placement: "bottom",
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions2),
        modifiersData: {},
        elements: {
          reference: reference2,
          popper: popper2
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state,
        setOptions: function setOptions(setOptionsAction) {
          var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions2, state.options, options2);
          state.scrollParents = {
            reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
            popper: listScrollParents(popper2)
          };
          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
          state.orderedModifiers = orderedModifiers.filter(function(m) {
            return m.enabled;
          });
          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }
          var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
          if (!areValidElements(reference3, popper3)) {
            return;
          }
          state.rects = {
            reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
            popper: getLayoutRect(popper3)
          };
          state.reset = false;
          state.placement = state.options.placement;
          state.orderedModifiers.forEach(function(modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          for (var index2 = 0; index2 < state.orderedModifiers.length; index2++) {
            if (state.reset === true) {
              state.reset = false;
              index2 = -1;
              continue;
            }
            var _state$orderedModifie = state.orderedModifiers[index2], fn = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
            if (typeof fn === "function") {
              state = fn({
                state,
                options: _options,
                name,
                instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce(function() {
          return new Promise(function(resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };
      if (!areValidElements(reference2, popper2)) {
        return instance;
      }
      instance.setOptions(options).then(function(state2) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state2);
        }
      });
      function runModifierEffects() {
        state.orderedModifiers.forEach(function(_ref) {
          var name = _ref.name, _ref$options = _ref.options, options2 = _ref$options === void 0 ? {} : _ref$options, effect2 = _ref.effect;
          if (typeof effect2 === "function") {
            var cleanupFn = effect2({
              state,
              name,
              instance,
              options: options2
            });
            var noopFn = function noopFn2() {
            };
            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }
      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function(fn) {
          return fn();
        });
        effectCleanupFns = [];
      }
      return instance;
    };
  }
  var createPopper$2 = /* @__PURE__ */ popperGenerator();
  var defaultModifiers$1 = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$2];
  var createPopper$1 = /* @__PURE__ */ popperGenerator({
    defaultModifiers: defaultModifiers$1
  });
  var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$2, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
  var createPopper = /* @__PURE__ */ popperGenerator({
    defaultModifiers
  });
  function getContainer$1(container) {
    return typeof container === "function" ? container() : container;
  }
  const Portal = /* @__PURE__ */ React__namespace.forwardRef(function Portal2(props, ref) {
    const {
      children,
      container,
      disablePortal = false
    } = props;
    const [mountNode, setMountNode] = React__namespace.useState(null);
    const handleRef = useForkRef(/* @__PURE__ */ React__namespace.isValidElement(children) ? children.ref : null, ref);
    useEnhancedEffect(() => {
      if (!disablePortal) {
        setMountNode(getContainer$1(container) || document.body);
      }
    }, [container, disablePortal]);
    useEnhancedEffect(() => {
      if (mountNode && !disablePortal) {
        setRef(ref, mountNode);
        return () => {
          setRef(ref, null);
        };
      }
      return void 0;
    }, [ref, mountNode, disablePortal]);
    if (disablePortal) {
      if (/* @__PURE__ */ React__namespace.isValidElement(children)) {
        const newProps = {
          ref: handleRef
        };
        return /* @__PURE__ */ React__namespace.cloneElement(children, newProps);
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsx(React__namespace.Fragment, {
        children
      });
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx(React__namespace.Fragment, {
      children: mountNode ? /* @__PURE__ */ ReactDOM__namespace.createPortal(children, mountNode) : mountNode
    });
  });
  process.env.NODE_ENV !== "production" ? Portal.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The children to render into the `container`.
     */
    children: PropTypes.node,
    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: PropTypes.oneOfType([HTMLElementType, PropTypes.func]),
    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: PropTypes.bool
  } : void 0;
  if (process.env.NODE_ENV !== "production") {
    Portal["propTypes"] = exactProp(Portal.propTypes);
  }
  function getPopperUnstyledUtilityClass(slot) {
    return generateUtilityClass("MuiPopperUnstyled", slot);
  }
  const popperUnstyledClasses = generateUtilityClasses("MuiPopperUnstyled", ["root"]);
  const _excluded$1C = ["anchorEl", "children", "component", "direction", "disablePortal", "modifiers", "open", "ownerState", "placement", "popperOptions", "popperRef", "slotProps", "slots", "TransitionProps"], _excluded2$7 = ["anchorEl", "children", "container", "direction", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "style", "transition", "slotProps", "slots"];
  function flipPlacement(placement, direction) {
    if (direction === "ltr") {
      return placement;
    }
    switch (placement) {
      case "bottom-end":
        return "bottom-start";
      case "bottom-start":
        return "bottom-end";
      case "top-end":
        return "top-start";
      case "top-start":
        return "top-end";
      default:
        return placement;
    }
  }
  function resolveAnchorEl$1(anchorEl) {
    return typeof anchorEl === "function" ? anchorEl() : anchorEl;
  }
  function isHTMLElement$1(element) {
    return element.nodeType !== void 0;
  }
  function isVirtualElement(element) {
    return !isHTMLElement$1(element);
  }
  const useUtilityClasses$17 = () => {
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getPopperUnstyledUtilityClass, {});
  };
  const defaultPopperOptions = {};
  const PopperTooltip = /* @__PURE__ */ React__namespace.forwardRef(function PopperTooltip2(props, ref) {
    var _ref;
    const {
      anchorEl,
      children,
      component,
      direction,
      disablePortal,
      modifiers,
      open,
      ownerState,
      placement: initialPlacement,
      popperOptions,
      popperRef: popperRefProp,
      slotProps = {},
      slots = {},
      TransitionProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1C);
    const tooltipRef = React__namespace.useRef(null);
    const ownRef = useForkRef(tooltipRef, ref);
    const popperRef = React__namespace.useRef(null);
    const handlePopperRef = useForkRef(popperRef, popperRefProp);
    const handlePopperRefRef = React__namespace.useRef(handlePopperRef);
    useEnhancedEffect(() => {
      handlePopperRefRef.current = handlePopperRef;
    }, [handlePopperRef]);
    React__namespace.useImperativeHandle(popperRefProp, () => popperRef.current, []);
    const rtlPlacement = flipPlacement(initialPlacement, direction);
    const [placement, setPlacement] = React__namespace.useState(rtlPlacement);
    const [resolvedAnchorElement, setResolvedAnchorElement] = React__namespace.useState(resolveAnchorEl$1(anchorEl));
    React__namespace.useEffect(() => {
      if (popperRef.current) {
        popperRef.current.forceUpdate();
      }
    });
    React__namespace.useEffect(() => {
      if (anchorEl) {
        setResolvedAnchorElement(resolveAnchorEl$1(anchorEl));
      }
    }, [anchorEl]);
    useEnhancedEffect(() => {
      if (!resolvedAnchorElement || !open) {
        return void 0;
      }
      const handlePopperUpdate = (data) => {
        setPlacement(data.placement);
      };
      if (process.env.NODE_ENV !== "production") {
        if (resolvedAnchorElement && isHTMLElement$1(resolvedAnchorElement) && resolvedAnchorElement.nodeType === 1) {
          const box = resolvedAnchorElement.getBoundingClientRect();
          if (process.env.NODE_ENV !== "test" && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        }
      }
      let popperModifiers = [{
        name: "preventOverflow",
        options: {
          altBoundary: disablePortal
        }
      }, {
        name: "flip",
        options: {
          altBoundary: disablePortal
        }
      }, {
        name: "onUpdate",
        enabled: true,
        phase: "afterWrite",
        fn: ({
          state
        }) => {
          handlePopperUpdate(state);
        }
      }];
      if (modifiers != null) {
        popperModifiers = popperModifiers.concat(modifiers);
      }
      if (popperOptions && popperOptions.modifiers != null) {
        popperModifiers = popperModifiers.concat(popperOptions.modifiers);
      }
      const popper2 = createPopper(resolvedAnchorElement, tooltipRef.current, _extends$2({
        placement: rtlPlacement
      }, popperOptions, {
        modifiers: popperModifiers
      }));
      handlePopperRefRef.current(popper2);
      return () => {
        popper2.destroy();
        handlePopperRefRef.current(null);
      };
    }, [resolvedAnchorElement, disablePortal, modifiers, open, popperOptions, rtlPlacement]);
    const childProps = {
      placement
    };
    if (TransitionProps !== null) {
      childProps.TransitionProps = TransitionProps;
    }
    const classes = useUtilityClasses$17();
    const Root = (_ref = component != null ? component : slots.root) != null ? _ref : "div";
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        role: "tooltip",
        ref: ownRef
      },
      ownerState: _extends$2({}, props, ownerState),
      className: classes.root
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Root, _extends$2({}, rootProps, {
      children: typeof children === "function" ? children(childProps) : children
    }));
  });
  const PopperUnstyled = /* @__PURE__ */ React__namespace.forwardRef(function PopperUnstyled2(props, ref) {
    const {
      anchorEl,
      children,
      container: containerProp,
      direction = "ltr",
      disablePortal = false,
      keepMounted = false,
      modifiers,
      open,
      placement = "bottom",
      popperOptions = defaultPopperOptions,
      popperRef,
      style: style2,
      transition = false,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded2$7);
    const [exited, setExited] = React__namespace.useState(true);
    const handleEnter = () => {
      setExited(false);
    };
    const handleExited = () => {
      setExited(true);
    };
    if (!keepMounted && !open && (!transition || exited)) {
      return null;
    }
    let container;
    if (containerProp) {
      container = containerProp;
    } else if (anchorEl) {
      const resolvedAnchorEl = resolveAnchorEl$1(anchorEl);
      container = resolvedAnchorEl && isHTMLElement$1(resolvedAnchorEl) ? ownerDocument(resolvedAnchorEl).body : ownerDocument(null).body;
    }
    const display2 = !open && keepMounted && (!transition || exited) ? "none" : void 0;
    const transitionProps = transition ? {
      in: open,
      onEnter: handleEnter,
      onExited: handleExited
    } : void 0;
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Portal, {
      disablePortal,
      container,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(PopperTooltip, _extends$2({
        anchorEl,
        direction,
        disablePortal,
        modifiers,
        ref,
        open: transition ? !exited : open,
        placement,
        popperOptions,
        popperRef,
        slotProps,
        slots
      }, other, {
        style: _extends$2({
          // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
          position: "fixed",
          // Fix Popper.js display issue
          top: 0,
          left: 0,
          display: display2
        }, style2),
        TransitionProps: transitionProps,
        children
      }))
    });
  });
  process.env.NODE_ENV !== "production" ? PopperUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
     * or a function that returns either.
     * It's used to set the position of the popper.
     * The return value will passed as the reference object of the Popper instance.
     */
    anchorEl: chainPropTypes(PropTypes.oneOfType([HTMLElementType, PropTypes.object, PropTypes.func]), (props) => {
      if (props.open) {
        const resolvedAnchorEl = resolveAnchorEl$1(props.anchorEl);
        if (resolvedAnchorEl && isHTMLElement$1(resolvedAnchorEl) && resolvedAnchorEl.nodeType === 1) {
          const box = resolvedAnchorEl.getBoundingClientRect();
          if (process.env.NODE_ENV !== "test" && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.getBoundingClientRect !== "function" || isVirtualElement(resolvedAnchorEl) && resolvedAnchorEl.contextElement != null && resolvedAnchorEl.contextElement.nodeType !== 1) {
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "It should be an HTML element instance or a virtualElement ", "(https://popper.js.org/docs/v2/virtual-elements/)."].join("\n"));
        }
      }
      return null;
    }),
    /**
     * Popper render function or node.
     */
    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: PropTypes.oneOfType([HTMLElementType, PropTypes.func]),
    /**
     * Direction of the text.
     * @default 'ltr'
     */
    direction: PropTypes.oneOf(["ltr", "rtl"]),
    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: PropTypes.bool,
    /**
     * Always keep the children in the DOM.
     * This prop can be useful in SEO situation or
     * when you want to maximize the responsiveness of the Popper.
     * @default false
     */
    keepMounted: PropTypes.bool,
    /**
     * Popper.js is based on a "plugin-like" architecture,
     * most of its features are fully encapsulated "modifiers".
     *
     * A modifier is a function that is called each time Popper.js needs to
     * compute the position of the popper.
     * For this reason, modifiers should be very performant to avoid bottlenecks.
     * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
     */
    modifiers: PropTypes.arrayOf(PropTypes.shape({
      data: PropTypes.object,
      effect: PropTypes.func,
      enabled: PropTypes.bool,
      fn: PropTypes.func,
      name: PropTypes.any,
      options: PropTypes.object,
      phase: PropTypes.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
      requires: PropTypes.arrayOf(PropTypes.string),
      requiresIfExists: PropTypes.arrayOf(PropTypes.string)
    })),
    /**
     * If `true`, the component is shown.
     */
    open: PropTypes.bool.isRequired,
    /**
     * Popper placement.
     * @default 'bottom'
     */
    placement: PropTypes.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    /**
     * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
     * @default {}
     */
    popperOptions: PropTypes.shape({
      modifiers: PropTypes.array,
      onFirstUpdate: PropTypes.func,
      placement: PropTypes.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
      strategy: PropTypes.oneOf(["absolute", "fixed"])
    }),
    /**
     * A ref that points to the used popper instance.
     */
    popperRef: refType,
    /**
     * The props used for each slot inside the Popper.
     * @default {}
     */
    slotProps: PropTypes.shape({
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the Popper.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      root: PropTypes.elementType
    }),
    /**
     * @ignore
     */
    style: PropTypes.object,
    /**
     * Help supporting a react-transition-group/Transition component.
     * @default false
     */
    transition: PropTypes.bool
  } : void 0;
  const _excluded$1B = ["actions", "anchorEl", "children", "component", "keepMounted", "listboxId", "onClose", "open", "slotProps", "slots"];
  function getUtilityClasses$1(ownerState) {
    const {
      open
    } = ownerState;
    const slots = {
      root: ["root", open && "expanded"],
      listbox: ["listbox", open && "expanded"]
    };
    return composeClasses(slots, getMenuUnstyledUtilityClass, {});
  }
  const MenuUnstyled = /* @__PURE__ */ React__namespace.forwardRef(function MenuUnstyled2(props, forwardedRef) {
    var _ref, _slots$listbox;
    const {
      actions,
      anchorEl,
      children,
      component,
      keepMounted = false,
      listboxId,
      onClose: onClose2,
      open = false,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1B);
    const {
      contextValue,
      getListboxProps,
      highlightFirstItem,
      highlightLastItem
    } = useMenu({
      open,
      onClose: onClose2,
      listboxId
    });
    React__namespace.useImperativeHandle(actions, () => ({
      highlightFirstItem,
      highlightLastItem
    }), [highlightFirstItem, highlightLastItem]);
    const ownerState = _extends$2({}, props, {
      open
    });
    const classes = getUtilityClasses$1(ownerState);
    const Root = (_ref = component != null ? component : slots.root) != null ? _ref : PopperUnstyled;
    const rootProps = useSlotProps({
      elementType: Root,
      externalForwardedProps: other,
      externalSlotProps: slotProps.root,
      additionalProps: {
        anchorEl,
        open,
        keepMounted,
        role: void 0,
        ref: forwardedRef
      },
      className: classes.root,
      ownerState
    });
    const Listbox = (_slots$listbox = slots.listbox) != null ? _slots$listbox : "ul";
    const listboxProps = useSlotProps({
      elementType: Listbox,
      getSlotProps: getListboxProps,
      externalSlotProps: slotProps.listbox,
      ownerState,
      className: classes.listbox
    });
    const menuContextValue = React__namespace.useMemo(() => _extends$2({}, contextValue, {
      open
    }), [contextValue, open]);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Root, _extends$2({}, rootProps, {
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Listbox, _extends$2({}, listboxProps, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(MenuUnstyledContext.Provider, {
          value: menuContextValue,
          children
        })
      }))
    }));
  });
  process.env.NODE_ENV !== "production" ? MenuUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * A ref with imperative actions.
     * It allows to select the first or last menu item.
     */
    actions: refType,
    /**
     * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
     * or a function that returns either.
     * It's used to set the position of the popper.
     */
    anchorEl: PropTypes.oneOfType([HTMLElementType, PropTypes.object, PropTypes.func]),
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * Always keep the menu in the DOM.
     * This prop can be useful in SEO situation or when you want to maximize the responsiveness of the Menu.
     *
     * @default false
     */
    keepMounted: PropTypes.bool,
    /**
     * @ignore
     */
    listboxId: PropTypes.string,
    /**
     * Triggered when focus leaves the menu and the menu should close.
     */
    onClose: PropTypes.func,
    /**
     * Controls whether the menu is displayed.
     * @default false
     */
    open: PropTypes.bool,
    /**
     * The props used for each slot inside the Menu.
     * @default {}
     */
    slotProps: PropTypes.shape({
      listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the Menu.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      listbox: PropTypes.elementType,
      root: PropTypes.elementType
    })
  } : void 0;
  function getMenuItemUnstyledUtilityClass(slot) {
    return generateUtilityClass("MuiMenuItem", slot);
  }
  const menuItemUnstyledClasses = generateUtilityClasses("MuiMenuItem", ["root", "disabled", "focusVisible"]);
  function useForcedRerendering() {
    const [, setState] = React__namespace.useState({});
    return React__namespace.useCallback(() => {
      setState({});
    }, []);
  }
  function useMenuItem(props) {
    var _itemState$disabled;
    const {
      disabled = false,
      ref,
      label
    } = props;
    const id = useId();
    const menuContext = React__namespace.useContext(MenuUnstyledContext);
    const itemRef = React__namespace.useRef(null);
    const handleRef = useForkRef(itemRef, ref);
    if (menuContext === null) {
      throw new Error("MenuItemUnstyled must be used within a MenuUnstyled");
    }
    const {
      registerItem,
      unregisterItem,
      open,
      registerHighlightChangeHandler
    } = menuContext;
    React__namespace.useEffect(() => {
      if (id === void 0) {
        return void 0;
      }
      registerItem(id, {
        disabled,
        id,
        ref: itemRef,
        label
      });
      return () => unregisterItem(id);
    }, [id, registerItem, unregisterItem, disabled, ref, label]);
    const {
      getRootProps: getButtonProps,
      focusVisible
    } = useButton({
      disabled,
      focusableWhenDisabled: true,
      ref: handleRef
    });
    const [focusRequested, requestFocus] = React__namespace.useState(false);
    const focusIfRequested = React__namespace.useCallback(() => {
      if (focusRequested && itemRef.current != null) {
        itemRef.current.focus();
        requestFocus(false);
      }
    }, [focusRequested]);
    React__namespace.useEffect(() => {
      focusIfRequested();
    });
    React__namespace.useDebugValue({
      id,
      disabled,
      label
    });
    const itemState = menuContext.getItemState(id != null ? id : "");
    const {
      highlighted
    } = itemState != null ? itemState : {
      highlighted: false
    };
    const rerender = useForcedRerendering();
    React__namespace.useEffect(() => {
      function updateHighlightedState(highlightedItemId) {
        if (highlightedItemId === id && !highlighted) {
          rerender();
        } else if (highlightedItemId !== id && highlighted) {
          rerender();
        }
      }
      return registerHighlightChangeHandler(updateHighlightedState);
    });
    React__namespace.useEffect(() => {
      requestFocus(highlighted && open);
    }, [highlighted, open]);
    if (id === void 0) {
      return {
        getRootProps: (other) => _extends$2({}, other, getButtonProps(other), {
          role: "menuitem"
        }),
        disabled: false,
        focusVisible,
        highlighted: false
      };
    }
    return {
      getRootProps: (other) => {
        const optionProps = menuContext.getItemProps(id, other);
        return _extends$2({}, other, getButtonProps(other), {
          tabIndex: optionProps.tabIndex,
          id: optionProps.id,
          role: "menuitem"
        });
      },
      disabled: (_itemState$disabled = itemState == null ? void 0 : itemState.disabled) != null ? _itemState$disabled : false,
      focusVisible,
      highlighted
    };
  }
  const _excluded$1A = ["children", "disabled", "component", "label", "slotProps", "slots"];
  function getUtilityClasses(ownerState) {
    const {
      disabled,
      focusVisible
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", focusVisible && "focusVisible"]
    };
    return composeClasses(slots, getMenuItemUnstyledUtilityClass, {});
  }
  const MenuItemUnstyled = /* @__PURE__ */ React__namespace.forwardRef(function MenuItemUnstyled2(props, ref) {
    var _ref;
    const {
      children,
      disabled: disabledProp = false,
      component,
      label,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1A);
    const {
      getRootProps,
      disabled,
      focusVisible,
      highlighted
    } = useMenuItem({
      disabled: disabledProp,
      ref,
      label
    });
    const ownerState = _extends$2({}, props, {
      disabled,
      focusVisible,
      highlighted
    });
    const classes = getUtilityClasses(ownerState);
    const Root = (_ref = component != null ? component : slots.root) != null ? _ref : "li";
    const rootProps = useSlotProps({
      elementType: Root,
      getSlotProps: getRootProps,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      className: classes.root,
      ownerState
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Root, _extends$2({}, rootProps, {
      children
    }));
  });
  process.env.NODE_ENV !== "production" ? MenuItemUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, the menu item will be disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * A text representation of the menu item's content.
     * Used for keyboard text navigation matching.
     */
    label: PropTypes.string,
    /**
     * The props used for each slot inside the MenuItem.
     * @default {}
     */
    slotProps: PropTypes.shape({
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the MenuItem.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      root: PropTypes.elementType
    })
  } : void 0;
  function isOverflowing(container) {
    const doc = ownerDocument(container);
    if (doc.body === container) {
      return ownerWindow(container).innerWidth > doc.documentElement.clientWidth;
    }
    return container.scrollHeight > container.clientHeight;
  }
  function ariaHidden(element, show) {
    if (show) {
      element.setAttribute("aria-hidden", "true");
    } else {
      element.removeAttribute("aria-hidden");
    }
  }
  function getPaddingRight(element) {
    return parseInt(ownerWindow(element).getComputedStyle(element).paddingRight, 10) || 0;
  }
  function isAriaHiddenForbiddenOnElement(element) {
    const forbiddenTagNames = ["TEMPLATE", "SCRIPT", "STYLE", "LINK", "MAP", "META", "NOSCRIPT", "PICTURE", "COL", "COLGROUP", "PARAM", "SLOT", "SOURCE", "TRACK"];
    const isForbiddenTagName = forbiddenTagNames.indexOf(element.tagName) !== -1;
    const isInputHidden = element.tagName === "INPUT" && element.getAttribute("type") === "hidden";
    return isForbiddenTagName || isInputHidden;
  }
  function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude, show) {
    const blacklist = [mountElement, currentElement, ...elementsToExclude];
    [].forEach.call(container.children, (element) => {
      const isNotExcludedElement = blacklist.indexOf(element) === -1;
      const isNotForbiddenElement = !isAriaHiddenForbiddenOnElement(element);
      if (isNotExcludedElement && isNotForbiddenElement) {
        ariaHidden(element, show);
      }
    });
  }
  function findIndexOf(items, callback) {
    let idx = -1;
    items.some((item, index2) => {
      if (callback(item)) {
        idx = index2;
        return true;
      }
      return false;
    });
    return idx;
  }
  function handleContainer(containerInfo, props) {
    const restoreStyle = [];
    const container = containerInfo.container;
    if (!props.disableScrollLock) {
      if (isOverflowing(container)) {
        const scrollbarSize = getScrollbarSize(ownerDocument(container));
        restoreStyle.push({
          value: container.style.paddingRight,
          property: "padding-right",
          el: container
        });
        container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`;
        const fixedElements2 = ownerDocument(container).querySelectorAll(".mui-fixed");
        [].forEach.call(fixedElements2, (element) => {
          restoreStyle.push({
            value: element.style.paddingRight,
            property: "padding-right",
            el: element
          });
          element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
        });
      }
      let scrollContainer;
      if (container.parentNode instanceof DocumentFragment) {
        scrollContainer = ownerDocument(container).body;
      } else {
        const parent = container.parentElement;
        const containerWindow = ownerWindow(container);
        scrollContainer = (parent == null ? void 0 : parent.nodeName) === "HTML" && containerWindow.getComputedStyle(parent).overflowY === "scroll" ? parent : container;
      }
      restoreStyle.push({
        value: scrollContainer.style.overflow,
        property: "overflow",
        el: scrollContainer
      }, {
        value: scrollContainer.style.overflowX,
        property: "overflow-x",
        el: scrollContainer
      }, {
        value: scrollContainer.style.overflowY,
        property: "overflow-y",
        el: scrollContainer
      });
      scrollContainer.style.overflow = "hidden";
    }
    const restore = () => {
      restoreStyle.forEach(({
        value,
        el,
        property
      }) => {
        if (value) {
          el.style.setProperty(property, value);
        } else {
          el.style.removeProperty(property);
        }
      });
    };
    return restore;
  }
  function getHiddenSiblings(container) {
    const hiddenSiblings = [];
    [].forEach.call(container.children, (element) => {
      if (element.getAttribute("aria-hidden") === "true") {
        hiddenSiblings.push(element);
      }
    });
    return hiddenSiblings;
  }
  class ModalManager {
    constructor() {
      this.containers = void 0;
      this.modals = void 0;
      this.modals = [];
      this.containers = [];
    }
    add(modal, container) {
      let modalIndex = this.modals.indexOf(modal);
      if (modalIndex !== -1) {
        return modalIndex;
      }
      modalIndex = this.modals.length;
      this.modals.push(modal);
      if (modal.modalRef) {
        ariaHidden(modal.modalRef, false);
      }
      const hiddenSiblings = getHiddenSiblings(container);
      ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
      const containerIndex = findIndexOf(this.containers, (item) => item.container === container);
      if (containerIndex !== -1) {
        this.containers[containerIndex].modals.push(modal);
        return modalIndex;
      }
      this.containers.push({
        modals: [modal],
        container,
        restore: null,
        hiddenSiblings
      });
      return modalIndex;
    }
    mount(modal, props) {
      const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
      const containerInfo = this.containers[containerIndex];
      if (!containerInfo.restore) {
        containerInfo.restore = handleContainer(containerInfo, props);
      }
    }
    remove(modal, ariaHiddenState = true) {
      const modalIndex = this.modals.indexOf(modal);
      if (modalIndex === -1) {
        return modalIndex;
      }
      const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
      const containerInfo = this.containers[containerIndex];
      containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
      this.modals.splice(modalIndex, 1);
      if (containerInfo.modals.length === 0) {
        if (containerInfo.restore) {
          containerInfo.restore();
        }
        if (modal.modalRef) {
          ariaHidden(modal.modalRef, ariaHiddenState);
        }
        ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
        this.containers.splice(containerIndex, 1);
      } else {
        const nextTop = containerInfo.modals[containerInfo.modals.length - 1];
        if (nextTop.modalRef) {
          ariaHidden(nextTop.modalRef, false);
        }
      }
      return modalIndex;
    }
    isTopModal(modal) {
      return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
    }
  }
  function getModalUtilityClass(slot) {
    return generateUtilityClass("MuiModal", slot);
  }
  const modalUnstyledClasses = generateUtilityClasses("MuiModal", ["root", "hidden"]);
  const _excluded$1z = ["children", "classes", "closeAfterTransition", "component", "container", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "manager", "onBackdropClick", "onClose", "onKeyDown", "open", "onTransitionEnter", "onTransitionExited", "slotProps", "slots"];
  const useUtilityClasses$16 = (ownerState) => {
    const {
      open,
      exited,
      classes
    } = ownerState;
    const slots = {
      root: ["root", !open && exited && "hidden"],
      backdrop: ["backdrop"]
    };
    return composeClasses(slots, getModalUtilityClass, classes);
  };
  function getContainer(container) {
    return typeof container === "function" ? container() : container;
  }
  function getHasTransition(children) {
    return children ? children.props.hasOwnProperty("in") : false;
  }
  const defaultManager = new ModalManager();
  const ModalUnstyled = /* @__PURE__ */ React__namespace.forwardRef(function ModalUnstyled2(props, forwardedRef) {
    var _props$ariaHidden, _ref;
    const {
      children,
      classes: classesProp,
      closeAfterTransition = false,
      component,
      container,
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableEscapeKeyDown = false,
      disablePortal = false,
      disableRestoreFocus = false,
      disableScrollLock = false,
      hideBackdrop = false,
      keepMounted = false,
      // private
      manager = defaultManager,
      onBackdropClick,
      onClose: onClose2,
      onKeyDown,
      open,
      onTransitionEnter,
      onTransitionExited,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1z);
    const [exited, setExited] = React__namespace.useState(!open);
    const modal = React__namespace.useRef({});
    const mountNodeRef = React__namespace.useRef(null);
    const modalRef = React__namespace.useRef(null);
    const handleRef = useForkRef(modalRef, forwardedRef);
    const hasTransition = getHasTransition(children);
    const ariaHiddenProp = (_props$ariaHidden = props["aria-hidden"]) != null ? _props$ariaHidden : true;
    const getDoc = () => ownerDocument(mountNodeRef.current);
    const getModal = () => {
      modal.current.modalRef = modalRef.current;
      modal.current.mountNode = mountNodeRef.current;
      return modal.current;
    };
    const handleMounted = () => {
      manager.mount(getModal(), {
        disableScrollLock
      });
      if (modalRef.current) {
        modalRef.current.scrollTop = 0;
      }
    };
    const handleOpen = useEventCallback(() => {
      const resolvedContainer = getContainer(container) || getDoc().body;
      manager.add(getModal(), resolvedContainer);
      if (modalRef.current) {
        handleMounted();
      }
    });
    const isTopModal = React__namespace.useCallback(() => manager.isTopModal(getModal()), [manager]);
    const handlePortalRef = useEventCallback((node2) => {
      mountNodeRef.current = node2;
      if (!node2 || !modalRef.current) {
        return;
      }
      if (open && isTopModal()) {
        handleMounted();
      } else {
        ariaHidden(modalRef.current, ariaHiddenProp);
      }
    });
    const handleClose = React__namespace.useCallback(() => {
      manager.remove(getModal(), ariaHiddenProp);
    }, [manager, ariaHiddenProp]);
    React__namespace.useEffect(() => {
      return () => {
        handleClose();
      };
    }, [handleClose]);
    React__namespace.useEffect(() => {
      if (open) {
        handleOpen();
      } else if (!hasTransition || !closeAfterTransition) {
        handleClose();
      }
    }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
    const ownerState = _extends$2({}, props, {
      classes: classesProp,
      closeAfterTransition,
      disableAutoFocus,
      disableEnforceFocus,
      disableEscapeKeyDown,
      disablePortal,
      disableRestoreFocus,
      disableScrollLock,
      exited,
      hideBackdrop,
      keepMounted
    });
    const classes = useUtilityClasses$16(ownerState);
    const handleEnter = () => {
      setExited(false);
      if (onTransitionEnter) {
        onTransitionEnter();
      }
    };
    const handleExited = () => {
      setExited(true);
      if (onTransitionExited) {
        onTransitionExited();
      }
      if (closeAfterTransition) {
        handleClose();
      }
    };
    const handleBackdropClick = (event) => {
      if (event.target !== event.currentTarget) {
        return;
      }
      if (onBackdropClick) {
        onBackdropClick(event);
      }
      if (onClose2) {
        onClose2(event, "backdropClick");
      }
    };
    const handleKeyDown2 = (event) => {
      if (onKeyDown) {
        onKeyDown(event);
      }
      if (event.key !== "Escape" || !isTopModal()) {
        return;
      }
      if (!disableEscapeKeyDown) {
        event.stopPropagation();
        if (onClose2) {
          onClose2(event, "escapeKeyDown");
        }
      }
    };
    const childProps = {};
    if (children.props.tabIndex === void 0) {
      childProps.tabIndex = "-1";
    }
    if (hasTransition) {
      childProps.onEnter = createChainedFunction(handleEnter, children.props.onEnter);
      childProps.onExited = createChainedFunction(handleExited, children.props.onExited);
    }
    const Root = (_ref = component != null ? component : slots.root) != null ? _ref : "div";
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        ref: handleRef,
        role: "presentation",
        onKeyDown: handleKeyDown2
      },
      className: classes.root,
      ownerState
    });
    const BackdropComponent = slots.backdrop;
    const backdropProps = useSlotProps({
      elementType: BackdropComponent,
      externalSlotProps: slotProps.backdrop,
      additionalProps: {
        "aria-hidden": true,
        onClick: handleBackdropClick,
        open
      },
      className: classes.backdrop,
      ownerState
    });
    if (!keepMounted && !open && (!hasTransition || exited)) {
      return null;
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      Portal,
      {
        ref: handlePortalRef,
        container,
        disablePortal,
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Root, _extends$2({}, rootProps, {
          children: [!hideBackdrop && BackdropComponent ? /* @__PURE__ */ jsxRuntimeExports.jsx(BackdropComponent, _extends$2({}, backdropProps)) : null, /* @__PURE__ */ jsxRuntimeExports.jsx(FocusTrap, {
            disableEnforceFocus,
            disableAutoFocus,
            disableRestoreFocus,
            isEnabled: isTopModal,
            open,
            children: /* @__PURE__ */ React__namespace.cloneElement(children, childProps)
          })]
        }))
      }
    );
  });
  process.env.NODE_ENV !== "production" ? ModalUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * A single child content element.
     */
    children: elementAcceptingRef.isRequired,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * When set to true the Modal waits until a nested Transition is completed before closing.
     * @default false
     */
    closeAfterTransition: PropTypes.bool,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: PropTypes.oneOfType([HTMLElementType, PropTypes.func]),
    /**
     * If `true`, the modal will not automatically shift focus to itself when it opens, and
     * replace it to the last focused element when it closes.
     * This also works correctly with any modal children that have the `disableAutoFocus` prop.
     *
     * Generally this should never be set to `true` as it makes the modal less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableAutoFocus: PropTypes.bool,
    /**
     * If `true`, the modal will not prevent focus from leaving the modal while open.
     *
     * Generally this should never be set to `true` as it makes the modal less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableEnforceFocus: PropTypes.bool,
    /**
     * If `true`, hitting escape will not fire the `onClose` callback.
     * @default false
     */
    disableEscapeKeyDown: PropTypes.bool,
    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: PropTypes.bool,
    /**
     * If `true`, the modal will not restore focus to previously focused element once
     * modal is hidden or unmounted.
     * @default false
     */
    disableRestoreFocus: PropTypes.bool,
    /**
     * Disable the scroll lock behavior.
     * @default false
     */
    disableScrollLock: PropTypes.bool,
    /**
     * If `true`, the backdrop is not rendered.
     * @default false
     */
    hideBackdrop: PropTypes.bool,
    /**
     * Always keep the children in the DOM.
     * This prop can be useful in SEO situation or
     * when you want to maximize the responsiveness of the Modal.
     * @default false
     */
    keepMounted: PropTypes.bool,
    /**
     * Callback fired when the backdrop is clicked.
     * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
     */
    onBackdropClick: PropTypes.func,
    /**
     * Callback fired when the component requests to be closed.
     * The `reason` parameter can optionally be used to control the response to `onClose`.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
     */
    onClose: PropTypes.func,
    /**
     * @ignore
     */
    onKeyDown: PropTypes.func,
    /**
     * If `true`, the component is shown.
     */
    open: PropTypes.bool.isRequired,
    /**
     * The props used for each slot inside the Modal.
     * @default {}
     */
    slotProps: PropTypes.shape({
      backdrop: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the Modal.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      backdrop: PropTypes.elementType,
      root: PropTypes.elementType
    })
  } : void 0;
  function isOptionGroup(child) {
    return !!child.options;
  }
  function areOptionsEqual(option1, option2) {
    return option1.label === option2.label && option1.value === option2.value && option1.disabled === option2.disabled;
  }
  function getOptionsFromChildren(children) {
    if (children == null) {
      return [];
    }
    const selectChildren = [];
    React__namespace.Children.forEach(children, (node2) => {
      var _props, _props2, _element$props$disabl2;
      const nodeChildren = node2 == null ? void 0 : (_props = node2.props) == null ? void 0 : _props.children;
      if ((node2 == null ? void 0 : (_props2 = node2.props) == null ? void 0 : _props2.value) === void 0) {
        if (nodeChildren != null) {
          var _element$props$disabl;
          const element2 = node2;
          const group = {
            options: getOptionsFromChildren(nodeChildren),
            label: element2.props.label,
            disabled: (_element$props$disabl = element2.props.disabled) != null ? _element$props$disabl : false
          };
          selectChildren.push(group);
        }
        return;
      }
      const element = node2;
      const option = {
        value: element.props.value,
        label: element.props.label || element.props.children,
        disabled: (_element$props$disabl2 = element.props.disabled) != null ? _element$props$disabl2 : false
      };
      selectChildren.push(option);
    });
    return selectChildren != null ? selectChildren : [];
  }
  function flattenOptionGroups(groupedOptions, isGroupDisabled = false) {
    let flatOptions = [];
    groupedOptions.forEach((optionOrGroup) => {
      if (isOptionGroup(optionOrGroup)) {
        flatOptions = flatOptions.concat(flattenOptionGroups(optionOrGroup.options, optionOrGroup.disabled));
      } else {
        flatOptions.push(_extends$2({}, optionOrGroup, {
          disabled: isGroupDisabled || optionOrGroup.disabled
        }));
      }
    });
    return flatOptions;
  }
  const defaultOptionStringifier = (option) => {
    const {
      label,
      value
    } = option;
    if (typeof label === "string") {
      return label;
    }
    if (typeof value === "string") {
      return value;
    }
    return String(option);
  };
  const SELECTION_CHANGE_TOPIC = "select:change-selection";
  const HIGHLIGHT_CHANGE_TOPIC = "select:change-highlight";
  function useSelectChangeNotifiers() {
    const messageBus = useMessageBus();
    const notifySelectionChanged = React__namespace.useCallback((newValue) => {
      messageBus.publish(SELECTION_CHANGE_TOPIC, newValue);
    }, [messageBus]);
    const notifyHighlightChanged = React__namespace.useCallback((newValue) => {
      messageBus.publish(HIGHLIGHT_CHANGE_TOPIC, newValue);
    }, [messageBus]);
    const registerSelectionChangeHandler = React__namespace.useCallback((handler) => {
      return messageBus.subscribe(SELECTION_CHANGE_TOPIC, handler);
    }, [messageBus]);
    const registerHighlightChangeHandler = React__namespace.useCallback((handler) => {
      return messageBus.subscribe(HIGHLIGHT_CHANGE_TOPIC, handler);
    }, [messageBus]);
    return {
      notifySelectionChanged,
      notifyHighlightChanged,
      registerSelectionChangeHandler,
      registerHighlightChangeHandler
    };
  }
  function useSelect(props) {
    const {
      buttonRef: buttonRefProp,
      defaultValue: defaultValueProp,
      disabled = false,
      listboxId: listboxIdProp,
      listboxRef: listboxRefProp,
      multiple = false,
      onChange,
      onHighlightChange,
      onOpenChange,
      open = false,
      options,
      optionStringifier = defaultOptionStringifier,
      value: valueProp
    } = props;
    const buttonRef = React__namespace.useRef(null);
    const handleButtonRef = useForkRef(buttonRefProp, buttonRef);
    const listboxRef = React__namespace.useRef(null);
    const listboxId = useId(listboxIdProp);
    let defaultValue = defaultValueProp;
    if (valueProp === void 0 && defaultValueProp === void 0) {
      defaultValue = multiple ? [] : null;
    }
    const optionsMap = React__namespace.useMemo(() => {
      const map = /* @__PURE__ */ new Map();
      options.forEach((option) => {
        map.set(option.value, option);
      });
      return map;
    }, [options]);
    const ignoreEnterKeyUp = React__namespace.useRef(false);
    const ignoreClick = React__namespace.useRef(false);
    const [listboxFocusRequested, requestListboxFocus] = React__namespace.useState(false);
    const focusListboxIfRequested = React__namespace.useCallback(() => {
      if (listboxFocusRequested && listboxRef.current != null) {
        listboxRef.current.focus();
        requestListboxFocus(false);
      }
    }, [listboxFocusRequested]);
    const handleListboxRef = useForkRef(listboxRefProp, listboxRef, focusListboxIfRequested);
    const {
      notifySelectionChanged,
      notifyHighlightChanged,
      registerHighlightChangeHandler,
      registerSelectionChangeHandler
    } = useSelectChangeNotifiers();
    React__namespace.useEffect(() => {
      focusListboxIfRequested();
    }, [focusListboxIfRequested]);
    React__namespace.useEffect(() => {
      requestListboxFocus(open);
    }, [open]);
    const createHandleMouseDown = (otherHandlers) => (event) => {
      var _otherHandlers$onMous;
      otherHandlers == null ? void 0 : (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);
      if (!event.defaultPrevented && open) {
        ignoreClick.current = true;
      }
    };
    const createHandleButtonClick = (otherHandlers) => (event) => {
      var _otherHandlers$onClic;
      otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);
      if (!event.defaultPrevented && !ignoreClick.current) {
        onOpenChange == null ? void 0 : onOpenChange(!open);
      }
      ignoreClick.current = false;
    };
    const createHandleButtonKeyDown = (otherHandlers) => (event) => {
      var _otherHandlers$onKeyD;
      otherHandlers == null ? void 0 : (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);
      if (event.defaultPrevented) {
        return;
      }
      if (event.key === "Enter") {
        ignoreEnterKeyUp.current = true;
      }
      if (event.key === "ArrowDown" || event.key === "ArrowUp") {
        event.preventDefault();
        onOpenChange == null ? void 0 : onOpenChange(true);
      }
    };
    const createHandleListboxKeyUp = (otherHandlers) => (event) => {
      var _otherHandlers$onKeyU;
      otherHandlers == null ? void 0 : (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event);
      if (event.defaultPrevented) {
        return;
      }
      const closingKeys = multiple ? ["Escape"] : ["Escape", "Enter", " "];
      if (open && !ignoreEnterKeyUp.current && closingKeys.includes(event.key)) {
        var _buttonRef$current;
        buttonRef == null ? void 0 : (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();
      }
      ignoreEnterKeyUp.current = false;
    };
    const createHandleListboxItemClick = React__namespace.useCallback((otherHandlers) => (event) => {
      var _otherHandlers$onClic2;
      otherHandlers == null ? void 0 : (_otherHandlers$onClic2 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic2.call(otherHandlers, event);
      if (event.defaultPrevented) {
        return;
      }
      if (!multiple) {
        onOpenChange == null ? void 0 : onOpenChange(false);
      }
    }, [multiple, onOpenChange]);
    const createHandleListboxBlur = (otherHandlers) => (event) => {
      var _otherHandlers$onBlur;
      otherHandlers == null ? void 0 : (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);
      if (!event.defaultPrevented) {
        onOpenChange == null ? void 0 : onOpenChange(false);
      }
    };
    const listboxReducer = React__namespace.useCallback((state, action) => {
      const newState = defaultListboxReducer(state, action);
      if (action.type === ActionTypes.keyDown && !open && (action.event.key === "ArrowUp" || action.event.key === "ArrowDown")) {
        return _extends$2({}, newState, {
          selectedValue: newState.highlightedValue
        });
      }
      if (action.type === ActionTypes.blur || action.type === ActionTypes.setValue || action.type === ActionTypes.optionsChange) {
        return _extends$2({}, newState, {
          highlightedValue: newState.selectedValue
        });
      }
      return newState;
    }, [open]);
    const {
      getRootProps: getButtonRootProps,
      active: buttonActive,
      focusVisible: buttonFocusVisible
    } = useButton({
      disabled,
      ref: handleButtonRef
    });
    const optionValues = React__namespace.useMemo(() => options.map((o) => o.value), [options]);
    let useListboxParameters;
    const isOptionDisabled = React__namespace.useCallback((valueToCheck) => {
      var _option$disabled;
      const option = optionsMap.get(valueToCheck);
      return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;
    }, [optionsMap]);
    const stringifyOption = React__namespace.useCallback((valueToCheck) => {
      const option = optionsMap.get(valueToCheck);
      if (!option) {
        return "";
      }
      return optionStringifier(option);
    }, [optionsMap, optionStringifier]);
    if (props.multiple) {
      const onChangeMultiple = onChange;
      useListboxParameters = {
        defaultValue,
        id: listboxId,
        isOptionDisabled,
        listboxRef: handleListboxRef,
        multiple: true,
        onChange: (e, newValues) => {
          onChangeMultiple == null ? void 0 : onChangeMultiple(e, newValues);
        },
        onHighlightChange: (e, newValue) => {
          onHighlightChange == null ? void 0 : onHighlightChange(e, newValue != null ? newValue : null);
        },
        options: optionValues,
        optionStringifier: stringifyOption,
        value: valueProp
      };
    } else {
      const onChangeSingle = onChange;
      useListboxParameters = {
        defaultValue,
        id: listboxId,
        isOptionDisabled,
        listboxRef: handleListboxRef,
        multiple: false,
        onChange: (e, newValue) => {
          onChangeSingle == null ? void 0 : onChangeSingle(e, newValue);
        },
        onHighlightChange: (e, newValue) => {
          onHighlightChange == null ? void 0 : onHighlightChange(e, newValue);
        },
        options: optionValues,
        optionStringifier: stringifyOption,
        stateReducer: listboxReducer,
        value: valueProp
      };
    }
    const {
      getRootProps: getListboxRootProps,
      getOptionProps: getListboxOptionProps,
      getOptionState,
      highlightedOption,
      selectedOption
    } = useListbox(useListboxParameters);
    React__namespace.useEffect(() => {
      notifySelectionChanged(selectedOption);
    }, [selectedOption, notifySelectionChanged]);
    React__namespace.useEffect(() => {
      notifyHighlightChanged(highlightedOption);
    }, [highlightedOption, notifyHighlightChanged]);
    const getButtonProps = (otherHandlers = {}) => {
      return _extends$2({}, getButtonRootProps(_extends$2({}, otherHandlers, {
        onClick: createHandleButtonClick(otherHandlers),
        onMouseDown: createHandleMouseDown(otherHandlers),
        onKeyDown: createHandleButtonKeyDown(otherHandlers)
      })), {
        role: "combobox",
        "aria-expanded": open,
        "aria-haspopup": "listbox",
        "aria-controls": listboxId
      });
    };
    const getListboxProps = (otherHandlers = {}) => getListboxRootProps(_extends$2({}, otherHandlers, {
      onBlur: createHandleListboxBlur(otherHandlers),
      onKeyUp: createHandleListboxKeyUp(otherHandlers)
    }));
    const getOptionProps = React__namespace.useCallback((optionValue, otherHandlers = {}) => {
      return getListboxOptionProps(optionValue, _extends$2({}, otherHandlers, {
        onClick: createHandleListboxItemClick(otherHandlers)
      }));
    }, [getListboxOptionProps, createHandleListboxItemClick]);
    React__namespace.useDebugValue({
      selectedOption,
      highlightedOption,
      open
    });
    const contextValue = React__namespace.useMemo(() => ({
      listboxRef,
      getOptionProps,
      getOptionState,
      registerHighlightChangeHandler,
      registerSelectionChangeHandler
    }), [getOptionProps, getOptionState, registerHighlightChangeHandler, registerSelectionChangeHandler]);
    return {
      buttonActive,
      buttonFocusVisible,
      disabled,
      getButtonProps,
      getListboxProps,
      contextValue,
      open,
      value: selectedOption,
      highlightedOption
    };
  }
  const SelectUnstyledContext = /* @__PURE__ */ React__namespace.createContext(void 0);
  function getSelectUnstyledUtilityClass(slot) {
    return generateUtilityClass("MuiSelect", slot);
  }
  const selectUnstyledClasses = generateUtilityClasses("MuiSelect", ["root", "button", "listbox", "popper", "active", "expanded", "disabled", "focusVisible"]);
  const _excluded$1y = ["autoFocus", "children", "component", "defaultListboxOpen", "defaultValue", "disabled", "getSerializedValue", "listboxId", "listboxOpen", "name", "onChange", "onListboxOpenChange", "optionStringifier", "renderValue", "slotProps", "slots", "value"];
  function defaultRenderMultipleValues(selectedOptions) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(React__namespace.Fragment, {
      children: selectedOptions.map((o) => o.label).join(", ")
    });
  }
  function defaultFormValueProvider$1(selectedOptions) {
    if (selectedOptions.length === 0) {
      return "";
    }
    if (selectedOptions.every((o) => typeof o.value === "string" || typeof o.value === "number" || typeof o.value === "boolean")) {
      return selectedOptions.map((o) => String(o.value));
    }
    return JSON.stringify(selectedOptions.map((o) => o.value));
  }
  function useUtilityClasses$15(ownerState) {
    const {
      active,
      disabled,
      open,
      focusVisible
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", focusVisible && "focusVisible", active && "active", open && "expanded"],
      listbox: ["listbox", disabled && "disabled"],
      popper: ["popper"]
    };
    return composeClasses(slots, getSelectUnstyledUtilityClass, {});
  }
  const MultiSelectUnstyled = /* @__PURE__ */ React__namespace.forwardRef(function MultiSelectUnstyled2(props, forwardedRef) {
    var _ref, _slots$listbox, _slots$popper;
    const {
      autoFocus,
      children,
      component,
      defaultListboxOpen = false,
      defaultValue = [],
      disabled: disabledProp,
      getSerializedValue = defaultFormValueProvider$1,
      listboxId,
      listboxOpen: listboxOpenProp,
      name,
      onChange,
      onListboxOpenChange,
      optionStringifier = defaultOptionStringifier,
      renderValue: renderValueProp,
      slotProps = {},
      slots = {},
      value: valueProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1y);
    const renderValue = renderValueProp != null ? renderValueProp : defaultRenderMultipleValues;
    const [groupedOptions, setGroupedOptions] = React__namespace.useState([]);
    const options = React__namespace.useMemo(() => flattenOptionGroups(groupedOptions), [groupedOptions]);
    const [listboxOpen, setListboxOpen] = useControlled({
      controlled: listboxOpenProp,
      default: defaultListboxOpen,
      name: "MultiSelectUnstyled",
      state: "listboxOpen"
    });
    React__namespace.useEffect(() => {
      setGroupedOptions(getOptionsFromChildren(children));
    }, [children]);
    const [buttonDefined, setButtonDefined] = React__namespace.useState(false);
    const buttonRef = React__namespace.useRef(null);
    const listboxRef = React__namespace.useRef(null);
    const Button2 = (_ref = component != null ? component : slots.root) != null ? _ref : "button";
    const ListboxRoot = (_slots$listbox = slots.listbox) != null ? _slots$listbox : "ul";
    const Popper2 = (_slots$popper = slots.popper) != null ? _slots$popper : PopperUnstyled;
    const handleButtonRefChange = React__namespace.useCallback((element) => {
      setButtonDefined(element != null);
    }, []);
    const handleButtonRef = useForkRef(forwardedRef, buttonRef, handleButtonRefChange);
    React__namespace.useEffect(() => {
      if (autoFocus) {
        buttonRef.current.focus();
      }
    }, [autoFocus]);
    const handleOpenChange = React__namespace.useCallback((isOpen) => {
      setListboxOpen(isOpen);
      onListboxOpenChange == null ? void 0 : onListboxOpenChange(isOpen);
    }, [setListboxOpen, onListboxOpenChange]);
    const {
      buttonActive,
      buttonFocusVisible,
      contextValue,
      disabled,
      getButtonProps,
      getListboxProps,
      value
    } = useSelect({
      buttonRef: handleButtonRef,
      defaultValue,
      disabled: disabledProp,
      listboxId,
      multiple: true,
      onChange,
      onOpenChange: handleOpenChange,
      open: listboxOpen,
      options,
      optionStringifier,
      value: valueProp
    });
    const ownerState = _extends$2({}, props, {
      active: buttonActive,
      defaultListboxOpen,
      disabled,
      focusVisible: buttonFocusVisible,
      open: listboxOpen,
      renderValue,
      value
    });
    const classes = useUtilityClasses$15(ownerState);
    const selectedOptions = React__namespace.useMemo(() => {
      if (value == null) {
        return [];
      }
      return options.filter((o) => value.includes(o.value));
    }, [options, value]);
    const buttonProps = useSlotProps({
      elementType: Button2,
      getSlotProps: getButtonProps,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      ownerState,
      className: classes.root
    });
    const listboxProps = useSlotProps({
      elementType: ListboxRoot,
      getSlotProps: getListboxProps,
      externalSlotProps: slotProps.listbox,
      additionalProps: {
        ref: listboxRef
      },
      ownerState,
      className: classes.listbox
    });
    const popperProps = useSlotProps({
      elementType: Popper2,
      externalSlotProps: slotProps.popper,
      additionalProps: {
        anchorEl: buttonRef.current,
        disablePortal: true,
        open: listboxOpen,
        placement: "bottom-start",
        role: void 0
      },
      ownerState,
      className: classes.popper
    });
    const context = React__namespace.useMemo(() => _extends$2({}, contextValue, {
      listboxRef
    }), [contextValue]);
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(React__namespace.Fragment, {
      children: [/* @__PURE__ */ jsxRuntimeExports.jsx(Button2, _extends$2({}, buttonProps, {
        children: renderValue(selectedOptions)
      })), buttonDefined && /* @__PURE__ */ jsxRuntimeExports.jsx(Popper2, _extends$2({}, popperProps, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(ListboxRoot, _extends$2({}, listboxProps, {
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(SelectUnstyledContext.Provider, {
            value: context,
            children
          })
        }))
      })), name && /* @__PURE__ */ jsxRuntimeExports.jsx("input", {
        type: "hidden",
        name,
        value: getSerializedValue(selectedOptions)
      })]
    });
  });
  process.env.NODE_ENV !== "production" ? MultiSelectUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * If `true`, the select element is focused during the first mount
     * @default false
     */
    autoFocus: PropTypes.bool,
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, the select will be initially open.
     * @default false
     */
    defaultListboxOpen: PropTypes.bool,
    /**
     * The default selected values. Use when the component is not controlled.
     * @default []
     */
    defaultValue: PropTypes.array,
    /**
     * If `true`, the select is disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * A function to convert the currently selected values to a type accepted by HTML input.
     * Used to set a value of a hidden input associated with the select,
     * so that the selected values can be posted with a form.
     */
    getSerializedValue: PropTypes.func,
    /**
     * `id` attribute of the listbox element.
     * Also used to derive the `id` attributes of options.
     */
    listboxId: PropTypes.string,
    /**
     * Controls the open state of the select's listbox.
     * @default undefined
     */
    listboxOpen: PropTypes.bool,
    /**
     * Name of the element. For example used by the server to identify the fields in form submits.
     * If the name is provided, the component will render a hidden input element that can be submitted to a server.
     */
    name: PropTypes.string,
    /**
     * Callback fired when an option is selected.
     */
    onChange: PropTypes.func,
    /**
     * Callback fired when the component requests to be opened.
     * Use in controlled mode (see listboxOpen).
     */
    onListboxOpenChange: PropTypes.func,
    /**
     * A function used to convert the option label to a string.
     * It's useful when labels are elements and need to be converted to plain text
     * to enable navigation using character keys on a keyboard.
     *
     * @default defaultOptionStringifier
     */
    optionStringifier: PropTypes.func,
    /**
     * Function that customizes the rendering of the selected values.
     */
    renderValue: PropTypes.func,
    /**
     * The props used for each slot inside the MultiSelect.
     * @default {}
     */
    slotProps: PropTypes.shape({
      listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      popper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the MultiSelect.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      listbox: PropTypes.elementType,
      popper: PropTypes.elementType,
      root: PropTypes.elementType
    }),
    /**
     * The selected values.
     * Set to an empty array to deselect all options.
     */
    value: PropTypes.array
  } : void 0;
  function NoSsr(props) {
    const {
      children,
      defer = false,
      fallback = null
    } = props;
    const [mountedState, setMountedState] = React__namespace.useState(false);
    useEnhancedEffect(() => {
      if (!defer) {
        setMountedState(true);
      }
    }, [defer]);
    React__namespace.useEffect(() => {
      if (defer) {
        setMountedState(true);
      }
    }, [defer]);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(React__namespace.Fragment, {
      children: mountedState ? children : fallback
    });
  }
  process.env.NODE_ENV !== "production" ? NoSsr.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * You can wrap a node.
     */
    children: PropTypes.node,
    /**
     * If `true`, the component will not only prevent server-side rendering.
     * It will also defer the rendering of the children into a different screen frame.
     * @default false
     */
    defer: PropTypes.bool,
    /**
     * The fallback content to display.
     * @default null
     */
    fallback: PropTypes.node
  } : void 0;
  if (process.env.NODE_ENV !== "production") {
    NoSsr["propTypes"] = exactProp(NoSsr.propTypes);
  }
  function getOptionGroupUnstyledUtilityClass(slot) {
    return generateUtilityClass("MuiOptionGroup", slot);
  }
  const optionGroupUnstyledClasses = generateUtilityClasses("MuiOptionGroup", ["root", "label", "list"]);
  const _excluded$1x = ["component", "disabled", "slotProps", "slots"];
  function useUtilityClasses$14(disabled) {
    const slots = {
      root: ["root", disabled && "disabled"],
      label: ["label"],
      list: ["list"]
    };
    return composeClasses(slots, getOptionGroupUnstyledUtilityClass, {});
  }
  const OptionGroupUnstyled = /* @__PURE__ */ React__namespace.forwardRef(function OptionGroupUnstyled2(props, ref) {
    const {
      component,
      disabled = false,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1x);
    const Root = component || (slots == null ? void 0 : slots.root) || "li";
    const Label = (slots == null ? void 0 : slots.label) || "span";
    const List2 = (slots == null ? void 0 : slots.list) || "ul";
    const classes = useUtilityClasses$14(disabled);
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        ref
      },
      ownerState: props,
      className: classes.root
    });
    const labelProps = useSlotProps({
      elementType: Label,
      externalSlotProps: slotProps.label,
      ownerState: props,
      className: classes.label
    });
    const listProps = useSlotProps({
      elementType: List2,
      externalSlotProps: slotProps.list,
      ownerState: props,
      className: classes.list
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(Root, _extends$2({}, rootProps, {
      children: [/* @__PURE__ */ jsxRuntimeExports.jsx(Label, _extends$2({}, labelProps, {
        children: props.label
      })), /* @__PURE__ */ jsxRuntimeExports.jsx(List2, _extends$2({}, listProps, {
        children: props.children
      }))]
    }));
  });
  process.env.NODE_ENV !== "production" ? OptionGroupUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true` all the options in the group will be disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * The human-readable description of the group.
     */
    label: PropTypes.node,
    /**
     * The props used for each slot inside the Input.
     * @default {}
     */
    slotProps: PropTypes.shape({
      label: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      list: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the OptionGroupUnstyled.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      label: PropTypes.elementType,
      list: PropTypes.elementType,
      root: PropTypes.elementType
    })
  } : void 0;
  function getOptionUnstyledUtilityClass(slot) {
    return generateUtilityClass("MuiOption", slot);
  }
  const optionUnstyledClasses = generateUtilityClasses("MuiOption", ["root", "disabled", "selected", "highlighted"]);
  function useOption(params) {
    const {
      value,
      optionRef: optionRefParam
    } = params;
    const selectContext = React__namespace.useContext(SelectUnstyledContext);
    if (!selectContext) {
      throw new Error("Option must have access to the SelectUnstyledContext (i.e., be used inside a SelectUnstyled component).");
    }
    const {
      getOptionProps,
      getOptionState,
      listboxRef,
      registerHighlightChangeHandler,
      registerSelectionChangeHandler
    } = selectContext;
    const optionState = getOptionState(value);
    const {
      selected,
      highlighted
    } = optionState;
    const rerender = useForcedRerendering();
    React__namespace.useEffect(() => {
      function updateSelectedState(selectedValues) {
        if (!selected) {
          if (Array.isArray(selectedValues)) {
            if (selectedValues.includes(value)) {
              rerender();
            }
          } else if (selectedValues === value) {
            rerender();
          }
        } else if (Array.isArray(selectedValues)) {
          if (!selectedValues.includes(value)) {
            rerender();
          }
        } else if (selectedValues !== value) {
          rerender();
        }
      }
      return registerSelectionChangeHandler(updateSelectedState);
    }, [registerSelectionChangeHandler, rerender, selected, value]);
    React__namespace.useEffect(() => {
      function updateHighlightedState(highlightedValue) {
        if (highlightedValue === value && !highlighted) {
          rerender();
        } else if (highlightedValue !== value && highlighted) {
          rerender();
        }
      }
      return registerHighlightChangeHandler(updateHighlightedState);
    }, [registerHighlightChangeHandler, rerender, value, highlighted]);
    const optionRef = React__namespace.useRef(null);
    const handleRef = useForkRef(optionRefParam, optionRef);
    React__namespace.useEffect(() => {
      if (highlighted) {
        if (!listboxRef.current || !optionRef.current) {
          return;
        }
        const listboxClientRect = listboxRef.current.getBoundingClientRect();
        const optionClientRect = optionRef.current.getBoundingClientRect();
        if (optionClientRect.top < listboxClientRect.top) {
          listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;
        } else if (optionClientRect.bottom > listboxClientRect.bottom) {
          listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;
        }
      }
    }, [highlighted, listboxRef]);
    return {
      getRootProps: (otherHandlers = {}) => _extends$2({}, otherHandlers, getOptionProps(value, otherHandlers), {
        ref: handleRef
      }),
      highlighted,
      index: optionState.index,
      selected
    };
  }
  const _excluded$1w = ["children", "component", "disabled", "label", "slotProps", "slots", "value"];
  function useUtilityClasses$13(ownerState) {
    const {
      disabled,
      highlighted,
      selected
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", highlighted && "highlighted", selected && "selected"]
    };
    return composeClasses(slots, getOptionUnstyledUtilityClass, {});
  }
  const OptionUnstyled = /* @__PURE__ */ React__namespace.forwardRef(function OptionUnstyled2(props, ref) {
    const {
      children,
      component,
      disabled = false,
      slotProps = {},
      slots = {},
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1w);
    const selectContext = React__namespace.useContext(SelectUnstyledContext);
    if (!selectContext) {
      throw new Error("OptionUnstyled must be used within a SelectUnstyled");
    }
    const Root = component || slots.root || "li";
    const {
      getRootProps,
      selected,
      highlighted,
      index: index2
    } = useOption({
      disabled,
      value,
      optionRef: ref
    });
    const ownerState = _extends$2({}, props, {
      disabled,
      highlighted,
      index: index2,
      selected
    });
    const classes = useUtilityClasses$13(ownerState);
    const rootProps = useSlotProps({
      getSlotProps: getRootProps,
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      className: classes.root,
      ownerState
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Root, _extends$2({}, rootProps, {
      children
    }));
  });
  process.env.NODE_ENV !== "production" ? OptionUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, the option will be disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * A text representation of the option's content.
     * Used for keyboard text navigation matching.
     */
    label: PropTypes.string,
    /**
     * The props used for each slot inside the OptionUnstyled.
     * @default {}
     */
    slotProps: PropTypes.shape({
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the OptionUnstyled.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      root: PropTypes.elementType
    }),
    /**
     * The value of the option.
     */
    value: PropTypes.any.isRequired
  } : void 0;
  const OptionUnstyled$1 = /* @__PURE__ */ React__namespace.memo(OptionUnstyled);
  const _excluded$1v = ["autoFocus", "children", "component", "defaultValue", "defaultListboxOpen", "disabled", "getSerializedValue", "listboxId", "listboxOpen", "name", "onChange", "onListboxOpenChange", "optionStringifier", "renderValue", "slotProps", "slots", "value"];
  function defaultRenderSingleValue(selectedOption) {
    var _selectedOption$label;
    return (_selectedOption$label = selectedOption == null ? void 0 : selectedOption.label) != null ? _selectedOption$label : "";
  }
  function defaultFormValueProvider(selectedOption) {
    if ((selectedOption == null ? void 0 : selectedOption.value) == null) {
      return "";
    }
    if (typeof selectedOption.value === "string" || typeof selectedOption.value === "number") {
      return selectedOption.value;
    }
    return JSON.stringify(selectedOption.value);
  }
  function useUtilityClasses$12(ownerState) {
    const {
      active,
      disabled,
      open,
      focusVisible
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", focusVisible && "focusVisible", active && "active", open && "expanded"],
      listbox: ["listbox", disabled && "disabled"],
      popper: ["popper"]
    };
    return composeClasses(slots, getSelectUnstyledUtilityClass, {});
  }
  const SelectUnstyled = /* @__PURE__ */ React__namespace.forwardRef(function SelectUnstyled2(props, forwardedRef) {
    var _ref, _slots$listbox, _slots$popper;
    const {
      autoFocus,
      children,
      component,
      defaultValue,
      defaultListboxOpen = false,
      disabled: disabledProp,
      getSerializedValue = defaultFormValueProvider,
      listboxId,
      listboxOpen: listboxOpenProp,
      name,
      onChange,
      onListboxOpenChange,
      optionStringifier = defaultOptionStringifier,
      renderValue: renderValueProp,
      slotProps = {},
      slots = {},
      value: valueProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1v);
    const renderValue = renderValueProp != null ? renderValueProp : defaultRenderSingleValue;
    const [groupedOptions, setGroupedOptions] = React__namespace.useState([]);
    const options = React__namespace.useMemo(() => flattenOptionGroups(groupedOptions), [groupedOptions]);
    const [listboxOpen, setListboxOpen] = useControlled({
      controlled: listboxOpenProp,
      default: defaultListboxOpen,
      name: "SelectUnstyled",
      state: "listboxOpen"
    });
    React__namespace.useEffect(() => {
      setGroupedOptions(getOptionsFromChildren(children));
    }, [children]);
    const [buttonDefined, setButtonDefined] = React__namespace.useState(false);
    const buttonRef = React__namespace.useRef(null);
    const listboxRef = React__namespace.useRef(null);
    const Button2 = (_ref = component != null ? component : slots.root) != null ? _ref : "button";
    const ListboxRoot = (_slots$listbox = slots.listbox) != null ? _slots$listbox : "ul";
    const Popper2 = (_slots$popper = slots.popper) != null ? _slots$popper : PopperUnstyled;
    const handleButtonRefChange = React__namespace.useCallback((element) => {
      setButtonDefined(element != null);
    }, []);
    const handleButtonRef = useForkRef(forwardedRef, buttonRef, handleButtonRefChange);
    React__namespace.useEffect(() => {
      if (autoFocus) {
        buttonRef.current.focus();
      }
    }, [autoFocus]);
    const handleOpenChange = React__namespace.useCallback((isOpen) => {
      setListboxOpen(isOpen);
      onListboxOpenChange == null ? void 0 : onListboxOpenChange(isOpen);
    }, [setListboxOpen, onListboxOpenChange]);
    const {
      buttonActive,
      buttonFocusVisible,
      disabled,
      getButtonProps,
      getListboxProps,
      contextValue,
      value
    } = useSelect({
      buttonRef: handleButtonRef,
      defaultValue,
      disabled: disabledProp,
      listboxId,
      multiple: false,
      open: listboxOpen,
      onChange,
      onOpenChange: handleOpenChange,
      options,
      optionStringifier,
      value: valueProp
    });
    const ownerState = _extends$2({}, props, {
      active: buttonActive,
      defaultListboxOpen,
      disabled,
      focusVisible: buttonFocusVisible,
      open: listboxOpen,
      renderValue,
      value
    });
    const classes = useUtilityClasses$12(ownerState);
    const selectedOption = React__namespace.useMemo(() => {
      var _options$find;
      return (_options$find = options.find((o) => value === o.value)) != null ? _options$find : null;
    }, [options, value]);
    const buttonProps = useSlotProps({
      elementType: Button2,
      getSlotProps: getButtonProps,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      ownerState,
      className: classes.root
    });
    const listboxProps = useSlotProps({
      elementType: ListboxRoot,
      getSlotProps: getListboxProps,
      externalSlotProps: slotProps.listbox,
      additionalProps: {
        ref: listboxRef
      },
      ownerState,
      className: classes.listbox
    });
    const popperProps = useSlotProps({
      elementType: Popper2,
      externalSlotProps: slotProps.popper,
      additionalProps: {
        anchorEl: buttonRef.current,
        disablePortal: true,
        open: listboxOpen,
        placement: "bottom-start",
        role: void 0
      },
      ownerState,
      className: classes.popper
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(React__namespace.Fragment, {
      children: [/* @__PURE__ */ jsxRuntimeExports.jsx(Button2, _extends$2({}, buttonProps, {
        children: renderValue(selectedOption)
      })), buttonDefined && /* @__PURE__ */ jsxRuntimeExports.jsx(Popper2, _extends$2({}, popperProps, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(ListboxRoot, _extends$2({}, listboxProps, {
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(SelectUnstyledContext.Provider, {
            value: contextValue,
            children
          })
        }))
      })), name && /* @__PURE__ */ jsxRuntimeExports.jsx("input", {
        type: "hidden",
        name,
        value: getSerializedValue(selectedOption)
      })]
    });
  });
  process.env.NODE_ENV !== "production" ? SelectUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * If `true`, the select element is focused during the first mount
     * @default false
     */
    autoFocus: PropTypes.bool,
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, the select will be initially open.
     * @default false
     */
    defaultListboxOpen: PropTypes.bool,
    /**
     * The default selected value. Use when the component is not controlled.
     */
    defaultValue: PropTypes.any,
    /**
     * If `true`, the select is disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * A function to convert the currently selected value to a string.
     * Used to set a value of a hidden input associated with the select,
     * so that the selected value can be posted with a form.
     */
    getSerializedValue: PropTypes.func,
    /**
     * `id` attribute of the listbox element.
     * Also used to derive the `id` attributes of options.
     */
    listboxId: PropTypes.string,
    /**
     * Controls the open state of the select's listbox.
     * @default undefined
     */
    listboxOpen: PropTypes.bool,
    /**
     * Name of the element. For example used by the server to identify the fields in form submits.
     * If the name is provided, the component will render a hidden input element that can be submitted to a server.
     */
    name: PropTypes.string,
    /**
     * Callback fired when an option is selected.
     */
    onChange: PropTypes.func,
    /**
     * Callback fired when the component requests to be opened.
     * Use in controlled mode (see listboxOpen).
     */
    onListboxOpenChange: PropTypes.func,
    /**
     * A function used to convert the option label to a string.
     * It's useful when labels are elements and need to be converted to plain text
     * to enable navigation using character keys on a keyboard.
     *
     * @default defaultOptionStringifier
     */
    optionStringifier: PropTypes.func,
    /**
     * Function that customizes the rendering of the selected value.
     */
    renderValue: PropTypes.func,
    /**
     * The props used for each slot inside the Input.
     * @default {}
     */
    slotProps: PropTypes.shape({
      listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      popper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the Select.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      listbox: PropTypes.elementType,
      popper: PropTypes.elementType,
      root: PropTypes.elementType
    }),
    /**
     * The selected value.
     * Set to `null` to deselect all options.
     */
    value: PropTypes.any
  } : void 0;
  function getSliderUtilityClass$1(slot) {
    return generateUtilityClass("MuiSlider", slot);
  }
  const sliderUnstyledClasses = generateUtilityClasses("MuiSlider", ["root", "active", "focusVisible", "disabled", "dragging", "marked", "vertical", "trackInverted", "trackFalse", "rail", "track", "mark", "markActive", "markLabel", "markLabelActive", "thumb"]);
  const INTENTIONAL_DRAG_COUNT_THRESHOLD = 2;
  function asc(a, b) {
    return a - b;
  }
  function clamp(value, min2, max2) {
    if (value == null) {
      return min2;
    }
    return Math.min(Math.max(min2, value), max2);
  }
  function findClosest(values2, currentValue) {
    var _values$reduce;
    const {
      index: closestIndex
    } = (_values$reduce = values2.reduce((acc, value, index2) => {
      const distance = Math.abs(currentValue - value);
      if (acc === null || distance < acc.distance || distance === acc.distance) {
        return {
          distance,
          index: index2
        };
      }
      return acc;
    }, null)) != null ? _values$reduce : {};
    return closestIndex;
  }
  function trackFinger(event, touchId) {
    if (touchId.current !== void 0 && event.changedTouches) {
      const touchEvent = event;
      for (let i = 0; i < touchEvent.changedTouches.length; i += 1) {
        const touch = touchEvent.changedTouches[i];
        if (touch.identifier === touchId.current) {
          return {
            x: touch.clientX,
            y: touch.clientY
          };
        }
      }
      return false;
    }
    return {
      x: event.clientX,
      y: event.clientY
    };
  }
  function valueToPercent$1(value, min2, max2) {
    return (value - min2) * 100 / (max2 - min2);
  }
  function percentToValue(percent, min2, max2) {
    return (max2 - min2) * percent + min2;
  }
  function getDecimalPrecision(num) {
    if (Math.abs(num) < 1) {
      const parts = num.toExponential().split("e-");
      const matissaDecimalPart = parts[0].split(".")[1];
      return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);
    }
    const decimalPart = num.toString().split(".")[1];
    return decimalPart ? decimalPart.length : 0;
  }
  function roundValueToStep(value, step, min2) {
    const nearest = Math.round((value - min2) / step) * step + min2;
    return Number(nearest.toFixed(getDecimalPrecision(step)));
  }
  function setValueIndex({
    values: values2,
    newValue,
    index: index2
  }) {
    const output = values2.slice();
    output[index2] = newValue;
    return output.sort(asc);
  }
  function focusThumb({
    sliderRef,
    activeIndex,
    setActive
  }) {
    var _sliderRef$current, _doc$activeElement;
    const doc = ownerDocument(sliderRef.current);
    if (!((_sliderRef$current = sliderRef.current) != null && _sliderRef$current.contains(doc.activeElement)) || Number(doc == null ? void 0 : (_doc$activeElement = doc.activeElement) == null ? void 0 : _doc$activeElement.getAttribute("data-index")) !== activeIndex) {
      var _sliderRef$current2;
      (_sliderRef$current2 = sliderRef.current) == null ? void 0 : _sliderRef$current2.querySelector(`[type="range"][data-index="${activeIndex}"]`).focus();
    }
    if (setActive) {
      setActive(activeIndex);
    }
  }
  const axisProps = {
    horizontal: {
      offset: (percent) => ({
        left: `${percent}%`
      }),
      leap: (percent) => ({
        width: `${percent}%`
      })
    },
    "horizontal-reverse": {
      offset: (percent) => ({
        right: `${percent}%`
      }),
      leap: (percent) => ({
        width: `${percent}%`
      })
    },
    vertical: {
      offset: (percent) => ({
        bottom: `${percent}%`
      }),
      leap: (percent) => ({
        height: `${percent}%`
      })
    }
  };
  const Identity$2 = (x) => x;
  let cachedSupportsTouchActionNone;
  function doesSupportTouchActionNone() {
    if (cachedSupportsTouchActionNone === void 0) {
      if (typeof CSS !== "undefined" && typeof CSS.supports === "function") {
        cachedSupportsTouchActionNone = CSS.supports("touch-action", "none");
      } else {
        cachedSupportsTouchActionNone = true;
      }
    }
    return cachedSupportsTouchActionNone;
  }
  function useSlider(parameters) {
    const {
      "aria-labelledby": ariaLabelledby,
      defaultValue,
      disabled = false,
      disableSwap = false,
      isRtl = false,
      marks: marksProp = false,
      max: max2 = 100,
      min: min2 = 0,
      name,
      onChange,
      onChangeCommitted,
      orientation = "horizontal",
      ref,
      scale = Identity$2,
      step = 1,
      tabIndex,
      value: valueProp
    } = parameters;
    const touchId = React__namespace.useRef();
    const [active, setActive] = React__namespace.useState(-1);
    const [open, setOpen] = React__namespace.useState(-1);
    const [dragging, setDragging] = React__namespace.useState(false);
    const moveCount = React__namespace.useRef(0);
    const [valueDerived, setValueState] = useControlled({
      controlled: valueProp,
      default: defaultValue != null ? defaultValue : min2,
      name: "Slider"
    });
    const handleChange = onChange && ((event, value, thumbIndex) => {
      const nativeEvent = event.nativeEvent || event;
      const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
      Object.defineProperty(clonedEvent, "target", {
        writable: true,
        value: {
          value,
          name
        }
      });
      onChange(clonedEvent, value, thumbIndex);
    });
    const range = Array.isArray(valueDerived);
    let values2 = range ? valueDerived.slice().sort(asc) : [valueDerived];
    values2 = values2.map((value) => clamp(value, min2, max2));
    const marks = marksProp === true && step !== null ? [...Array(Math.floor((max2 - min2) / step) + 1)].map((_2, index2) => ({
      value: min2 + step * index2
    })) : marksProp || [];
    const marksValues = marks.map((mark) => mark.value);
    const {
      isFocusVisibleRef,
      onBlur: handleBlurVisible,
      onFocus: handleFocusVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible();
    const [focusedThumbIndex, setFocusedThumbIndex] = React__namespace.useState(-1);
    const sliderRef = React__namespace.useRef();
    const handleFocusRef = useForkRef(focusVisibleRef, sliderRef);
    const handleRef = useForkRef(ref, handleFocusRef);
    const createHandleHiddenInputFocus = (otherHandlers) => (event) => {
      var _otherHandlers$onFocu;
      const index2 = Number(event.currentTarget.getAttribute("data-index"));
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        setFocusedThumbIndex(index2);
      }
      setOpen(index2);
      otherHandlers == null ? void 0 : (_otherHandlers$onFocu = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);
    };
    const createHandleHiddenInputBlur = (otherHandlers) => (event) => {
      var _otherHandlers$onBlur;
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setFocusedThumbIndex(-1);
      }
      setOpen(-1);
      otherHandlers == null ? void 0 : (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);
    };
    useEnhancedEffect(() => {
      if (disabled && sliderRef.current.contains(document.activeElement)) {
        var _document$activeEleme;
        (_document$activeEleme = document.activeElement) == null ? void 0 : _document$activeEleme.blur();
      }
    }, [disabled]);
    if (disabled && active !== -1) {
      setActive(-1);
    }
    if (disabled && focusedThumbIndex !== -1) {
      setFocusedThumbIndex(-1);
    }
    const createHandleHiddenInputChange = (otherHandlers) => (event) => {
      var _otherHandlers$onChan;
      (_otherHandlers$onChan = otherHandlers.onChange) == null ? void 0 : _otherHandlers$onChan.call(otherHandlers, event);
      const index2 = Number(event.currentTarget.getAttribute("data-index"));
      const value = values2[index2];
      const marksIndex = marksValues.indexOf(value);
      let newValue = event.target.valueAsNumber;
      if (marks && step == null) {
        newValue = newValue < value ? marksValues[marksIndex - 1] : marksValues[marksIndex + 1];
      }
      newValue = clamp(newValue, min2, max2);
      if (marks && step == null) {
        const currentMarkIndex = marksValues.indexOf(values2[index2]);
        newValue = newValue < values2[index2] ? marksValues[currentMarkIndex - 1] : marksValues[currentMarkIndex + 1];
      }
      if (range) {
        if (disableSwap) {
          newValue = clamp(newValue, values2[index2 - 1] || -Infinity, values2[index2 + 1] || Infinity);
        }
        const previousValue = newValue;
        newValue = setValueIndex({
          values: values2,
          newValue,
          index: index2
        });
        let activeIndex = index2;
        if (!disableSwap) {
          activeIndex = newValue.indexOf(previousValue);
        }
        focusThumb({
          sliderRef,
          activeIndex
        });
      }
      setValueState(newValue);
      setFocusedThumbIndex(index2);
      if (handleChange) {
        handleChange(event, newValue, index2);
      }
      if (onChangeCommitted) {
        onChangeCommitted(event, newValue);
      }
    };
    const previousIndex = React__namespace.useRef();
    let axis = orientation;
    if (isRtl && orientation === "horizontal") {
      axis += "-reverse";
    }
    const getFingerNewValue = ({
      finger,
      move = false
    }) => {
      const {
        current: slider
      } = sliderRef;
      const {
        width: width2,
        height: height2,
        bottom: bottom2,
        left: left2
      } = slider.getBoundingClientRect();
      let percent;
      if (axis.indexOf("vertical") === 0) {
        percent = (bottom2 - finger.y) / height2;
      } else {
        percent = (finger.x - left2) / width2;
      }
      if (axis.indexOf("-reverse") !== -1) {
        percent = 1 - percent;
      }
      let newValue;
      newValue = percentToValue(percent, min2, max2);
      if (step) {
        newValue = roundValueToStep(newValue, step, min2);
      } else {
        const closestIndex = findClosest(marksValues, newValue);
        newValue = marksValues[closestIndex];
      }
      newValue = clamp(newValue, min2, max2);
      let activeIndex = 0;
      if (range) {
        if (!move) {
          activeIndex = findClosest(values2, newValue);
        } else {
          activeIndex = previousIndex.current;
        }
        if (disableSwap) {
          newValue = clamp(newValue, values2[activeIndex - 1] || -Infinity, values2[activeIndex + 1] || Infinity);
        }
        const previousValue = newValue;
        newValue = setValueIndex({
          values: values2,
          newValue,
          index: activeIndex
        });
        if (!(disableSwap && move)) {
          activeIndex = newValue.indexOf(previousValue);
          previousIndex.current = activeIndex;
        }
      }
      return {
        newValue,
        activeIndex
      };
    };
    const handleTouchMove = useEventCallback((nativeEvent) => {
      const finger = trackFinger(nativeEvent, touchId);
      if (!finger) {
        return;
      }
      moveCount.current += 1;
      if (nativeEvent.type === "mousemove" && nativeEvent.buttons === 0) {
        handleTouchEnd(nativeEvent);
        return;
      }
      const {
        newValue,
        activeIndex
      } = getFingerNewValue({
        finger,
        move: true
      });
      focusThumb({
        sliderRef,
        activeIndex,
        setActive
      });
      setValueState(newValue);
      if (!dragging && moveCount.current > INTENTIONAL_DRAG_COUNT_THRESHOLD) {
        setDragging(true);
      }
      if (handleChange && newValue !== valueDerived) {
        handleChange(nativeEvent, newValue, activeIndex);
      }
    });
    const handleTouchEnd = useEventCallback((nativeEvent) => {
      const finger = trackFinger(nativeEvent, touchId);
      setDragging(false);
      if (!finger) {
        return;
      }
      const {
        newValue
      } = getFingerNewValue({
        finger,
        move: true
      });
      setActive(-1);
      if (nativeEvent.type === "touchend") {
        setOpen(-1);
      }
      if (onChangeCommitted) {
        onChangeCommitted(nativeEvent, newValue);
      }
      touchId.current = void 0;
      stopListening();
    });
    const handleTouchStart = useEventCallback((nativeEvent) => {
      if (disabled) {
        return;
      }
      if (!doesSupportTouchActionNone()) {
        nativeEvent.preventDefault();
      }
      const touch = nativeEvent.changedTouches[0];
      if (touch != null) {
        touchId.current = touch.identifier;
      }
      const finger = trackFinger(nativeEvent, touchId);
      if (finger !== false) {
        const {
          newValue,
          activeIndex
        } = getFingerNewValue({
          finger
        });
        focusThumb({
          sliderRef,
          activeIndex,
          setActive
        });
        setValueState(newValue);
        if (handleChange) {
          handleChange(nativeEvent, newValue, activeIndex);
        }
      }
      moveCount.current = 0;
      const doc = ownerDocument(sliderRef.current);
      doc.addEventListener("touchmove", handleTouchMove);
      doc.addEventListener("touchend", handleTouchEnd);
    });
    const stopListening = React__namespace.useCallback(() => {
      const doc = ownerDocument(sliderRef.current);
      doc.removeEventListener("mousemove", handleTouchMove);
      doc.removeEventListener("mouseup", handleTouchEnd);
      doc.removeEventListener("touchmove", handleTouchMove);
      doc.removeEventListener("touchend", handleTouchEnd);
    }, [handleTouchEnd, handleTouchMove]);
    React__namespace.useEffect(() => {
      const {
        current: slider
      } = sliderRef;
      slider.addEventListener("touchstart", handleTouchStart, {
        passive: doesSupportTouchActionNone()
      });
      return () => {
        slider.removeEventListener("touchstart", handleTouchStart, {
          passive: doesSupportTouchActionNone()
        });
        stopListening();
      };
    }, [stopListening, handleTouchStart]);
    React__namespace.useEffect(() => {
      if (disabled) {
        stopListening();
      }
    }, [disabled, stopListening]);
    const createHandleMouseDown = (otherHandlers) => (event) => {
      var _otherHandlers$onMous;
      (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);
      if (disabled) {
        return;
      }
      if (event.defaultPrevented) {
        return;
      }
      if (event.button !== 0) {
        return;
      }
      event.preventDefault();
      const finger = trackFinger(event, touchId);
      if (finger !== false) {
        const {
          newValue,
          activeIndex
        } = getFingerNewValue({
          finger
        });
        focusThumb({
          sliderRef,
          activeIndex,
          setActive
        });
        setValueState(newValue);
        if (handleChange) {
          handleChange(event, newValue, activeIndex);
        }
      }
      moveCount.current = 0;
      const doc = ownerDocument(sliderRef.current);
      doc.addEventListener("mousemove", handleTouchMove);
      doc.addEventListener("mouseup", handleTouchEnd);
    };
    const trackOffset = valueToPercent$1(range ? values2[0] : min2, min2, max2);
    const trackLeap = valueToPercent$1(values2[values2.length - 1], min2, max2) - trackOffset;
    const getRootProps = (otherHandlers = {}) => {
      const ownEventHandlers = {
        onMouseDown: createHandleMouseDown(otherHandlers || {})
      };
      const mergedEventHandlers = _extends$2({}, otherHandlers, ownEventHandlers);
      return _extends$2({
        ref: handleRef
      }, mergedEventHandlers);
    };
    const createHandleMouseOver = (otherHandlers) => (event) => {
      var _otherHandlers$onMous2;
      (_otherHandlers$onMous2 = otherHandlers.onMouseOver) == null ? void 0 : _otherHandlers$onMous2.call(otherHandlers, event);
      const index2 = Number(event.currentTarget.getAttribute("data-index"));
      setOpen(index2);
    };
    const createHandleMouseLeave = (otherHandlers) => (event) => {
      var _otherHandlers$onMous3;
      (_otherHandlers$onMous3 = otherHandlers.onMouseLeave) == null ? void 0 : _otherHandlers$onMous3.call(otherHandlers, event);
      setOpen(-1);
    };
    const getThumbProps = (otherHandlers = {}) => {
      const ownEventHandlers = {
        onMouseOver: createHandleMouseOver(otherHandlers || {}),
        onMouseLeave: createHandleMouseLeave(otherHandlers || {})
      };
      return _extends$2({}, otherHandlers, ownEventHandlers);
    };
    const getHiddenInputProps = (otherHandlers = {}) => {
      var _parameters$step;
      const ownEventHandlers = {
        onChange: createHandleHiddenInputChange(otherHandlers || {}),
        onFocus: createHandleHiddenInputFocus(otherHandlers || {}),
        onBlur: createHandleHiddenInputBlur(otherHandlers || {})
      };
      const mergedEventHandlers = _extends$2({}, otherHandlers, ownEventHandlers);
      return _extends$2({
        tabIndex,
        "aria-labelledby": ariaLabelledby,
        "aria-orientation": orientation,
        "aria-valuemax": scale(max2),
        "aria-valuemin": scale(min2),
        name,
        type: "range",
        min: parameters.min,
        max: parameters.max,
        step: (_parameters$step = parameters.step) != null ? _parameters$step : void 0,
        disabled
      }, mergedEventHandlers, {
        style: _extends$2({}, visuallyHidden, {
          direction: isRtl ? "rtl" : "ltr",
          // So that VoiceOver's focus indicator matches the thumb's dimensions
          width: "100%",
          height: "100%"
        })
      });
    };
    return {
      active,
      axis,
      axisProps,
      dragging,
      focusedThumbIndex,
      getHiddenInputProps,
      getRootProps,
      getThumbProps,
      marks,
      open,
      range,
      trackLeap,
      trackOffset,
      values: values2
    };
  }
  const _excluded$1u = ["aria-label", "aria-valuetext", "aria-labelledby", "className", "component", "classes", "disableSwap", "disabled", "getAriaLabel", "getAriaValueText", "marks", "max", "min", "name", "onChange", "onChangeCommitted", "orientation", "scale", "step", "tabIndex", "track", "value", "valueLabelFormat", "isRtl", "defaultValue", "slotProps", "slots"];
  function Identity$1(x) {
    return x;
  }
  const useUtilityClasses$11 = (ownerState) => {
    const {
      disabled,
      dragging,
      marked,
      orientation,
      track,
      classes
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", dragging && "dragging", marked && "marked", orientation === "vertical" && "vertical", track === "inverted" && "trackInverted", track === false && "trackFalse"],
      rail: ["rail"],
      track: ["track"],
      mark: ["mark"],
      markActive: ["markActive"],
      markLabel: ["markLabel"],
      markLabelActive: ["markLabelActive"],
      valueLabel: ["valueLabel"],
      thumb: ["thumb", disabled && "disabled"],
      active: ["active"],
      disabled: ["disabled"],
      focusVisible: ["focusVisible"]
    };
    return composeClasses(slots, getSliderUtilityClass$1, classes);
  };
  const SliderUnstyled = /* @__PURE__ */ React__namespace.forwardRef(function SliderUnstyled2(props, ref) {
    var _ref, _slots$rail, _slots$track, _slots$thumb, _slots$mark, _slots$markLabel;
    const {
      "aria-label": ariaLabel,
      "aria-valuetext": ariaValuetext,
      "aria-labelledby": ariaLabelledby,
      className,
      component,
      classes: classesProp,
      disableSwap = false,
      disabled = false,
      getAriaLabel,
      getAriaValueText,
      marks: marksProp = false,
      max: max2 = 100,
      min: min2 = 0,
      orientation = "horizontal",
      scale = Identity$1,
      step = 1,
      track = "normal",
      valueLabelFormat = Identity$1,
      isRtl = false,
      defaultValue,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1u);
    const partialOwnerState = _extends$2({}, props, {
      marks: marksProp,
      classes: classesProp,
      disabled,
      isRtl,
      defaultValue,
      max: max2,
      min: min2,
      orientation,
      scale,
      step,
      track,
      valueLabelFormat
    });
    const {
      axisProps: axisProps2,
      getRootProps,
      getHiddenInputProps,
      getThumbProps,
      active,
      axis,
      range,
      focusedThumbIndex,
      dragging,
      marks,
      values: values2,
      trackOffset,
      trackLeap
    } = useSlider(_extends$2({}, partialOwnerState, {
      ref
    }));
    const ownerState = _extends$2({}, partialOwnerState, {
      marked: marks.length > 0 && marks.some((mark) => mark.label),
      dragging,
      focusedThumbIndex
    });
    const classes = useUtilityClasses$11(ownerState);
    const Root = (_ref = component != null ? component : slots.root) != null ? _ref : "span";
    const rootProps = useSlotProps({
      elementType: Root,
      getSlotProps: getRootProps,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      ownerState,
      className: [classes.root, className]
    });
    const Rail = (_slots$rail = slots.rail) != null ? _slots$rail : "span";
    const railProps = useSlotProps({
      elementType: Rail,
      externalSlotProps: slotProps.rail,
      ownerState,
      className: classes.rail
    });
    const Track = (_slots$track = slots.track) != null ? _slots$track : "span";
    const trackProps = useSlotProps({
      elementType: Track,
      externalSlotProps: slotProps.track,
      additionalProps: {
        style: _extends$2({}, axisProps2[axis].offset(trackOffset), axisProps2[axis].leap(trackLeap))
      },
      ownerState,
      className: classes.track
    });
    const Thumb = (_slots$thumb = slots.thumb) != null ? _slots$thumb : "span";
    const thumbProps = useSlotProps({
      elementType: Thumb,
      getSlotProps: getThumbProps,
      externalSlotProps: slotProps.thumb,
      ownerState
    });
    const ValueLabel = slots.valueLabel;
    const valueLabelProps = useSlotProps({
      elementType: ValueLabel,
      externalSlotProps: slotProps.valueLabel,
      ownerState
    });
    const Mark = (_slots$mark = slots.mark) != null ? _slots$mark : "span";
    const markProps = useSlotProps({
      elementType: Mark,
      externalSlotProps: slotProps.mark,
      ownerState,
      className: classes.mark
    });
    const MarkLabel = (_slots$markLabel = slots.markLabel) != null ? _slots$markLabel : "span";
    const markLabelProps = useSlotProps({
      elementType: MarkLabel,
      externalSlotProps: slotProps.markLabel,
      ownerState
    });
    const Input2 = slots.input || "input";
    const inputProps = useSlotProps({
      elementType: Input2,
      getSlotProps: getHiddenInputProps,
      externalSlotProps: slotProps.input,
      ownerState
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(Root, _extends$2({}, rootProps, {
      children: [/* @__PURE__ */ jsxRuntimeExports.jsx(Rail, _extends$2({}, railProps)), /* @__PURE__ */ jsxRuntimeExports.jsx(Track, _extends$2({}, trackProps)), marks.filter((mark) => mark.value >= min2 && mark.value <= max2).map((mark, index2) => {
        const percent = valueToPercent$1(mark.value, min2, max2);
        const style2 = axisProps2[axis].offset(percent);
        let markActive;
        if (track === false) {
          markActive = values2.indexOf(mark.value) !== -1;
        } else {
          markActive = track === "normal" && (range ? mark.value >= values2[0] && mark.value <= values2[values2.length - 1] : mark.value <= values2[0]) || track === "inverted" && (range ? mark.value <= values2[0] || mark.value >= values2[values2.length - 1] : mark.value >= values2[0]);
        }
        return /* @__PURE__ */ jsxRuntimeExports.jsxs(React__namespace.Fragment, {
          children: [/* @__PURE__ */ jsxRuntimeExports.jsx(Mark, _extends$2({
            "data-index": index2
          }, markProps, !isHostComponent(Mark) && {
            markActive
          }, {
            style: _extends$2({}, style2, markProps.style),
            className: clsx$1(markProps.className, markActive && classes.markActive)
          })), mark.label != null ? /* @__PURE__ */ jsxRuntimeExports.jsx(MarkLabel, _extends$2({
            "aria-hidden": true,
            "data-index": index2
          }, markLabelProps, !isHostComponent(MarkLabel) && {
            markLabelActive: markActive
          }, {
            style: _extends$2({}, style2, markLabelProps.style),
            className: clsx$1(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive),
            children: mark.label
          })) : null]
        }, index2);
      }), values2.map((value, index2) => {
        const percent = valueToPercent$1(value, min2, max2);
        const style2 = axisProps2[axis].offset(percent);
        return /* @__PURE__ */ jsxRuntimeExports.jsxs(Thumb, _extends$2({
          "data-index": index2,
          "data-focusvisible": focusedThumbIndex === index2
        }, thumbProps, {
          className: clsx$1(classes.thumb, thumbProps.className, active === index2 && classes.active, focusedThumbIndex === index2 && classes.focusVisible),
          style: _extends$2({}, style2, {
            pointerEvents: disableSwap && active !== index2 ? "none" : void 0
          }, thumbProps.style),
          children: [/* @__PURE__ */ jsxRuntimeExports.jsx(Input2, _extends$2({
            "data-index": index2,
            "aria-label": getAriaLabel ? getAriaLabel(index2) : ariaLabel,
            "aria-valuenow": scale(value),
            "aria-labelledby": ariaLabelledby,
            "aria-valuetext": getAriaValueText ? getAriaValueText(scale(value), index2) : ariaValuetext,
            value: values2[index2]
          }, inputProps)), ValueLabel ? /* @__PURE__ */ jsxRuntimeExports.jsx(ValueLabel, _extends$2({}, !isHostComponent(ValueLabel) && {
            valueLabelFormat,
            index: index2,
            disabled
          }, valueLabelProps, {
            children: typeof valueLabelFormat === "function" ? valueLabelFormat(scale(value), index2) : valueLabelFormat
          })) : null]
        }), index2);
      })]
    }));
  });
  process.env.NODE_ENV !== "production" ? SliderUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The label of the slider.
     */
    "aria-label": chainPropTypes(PropTypes.string, (props) => {
      const range = Array.isArray(props.value || props.defaultValue);
      if (range && props["aria-label"] != null) {
        return new Error("MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.");
      }
      return null;
    }),
    /**
     * The id of the element containing a label for the slider.
     */
    "aria-labelledby": PropTypes.string,
    /**
     * A string value that provides a user-friendly name for the current value of the slider.
     */
    "aria-valuetext": chainPropTypes(PropTypes.string, (props) => {
      const range = Array.isArray(props.value || props.defaultValue);
      if (range && props["aria-valuetext"] != null) {
        return new Error("MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.");
      }
      return null;
    }),
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.
     * @default false
     */
    disableSwap: PropTypes.bool,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.
     * This is important for screen reader users.
     * @param {number} index The thumb label's index to format.
     * @returns {string}
     */
    getAriaLabel: PropTypes.func,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
     * This is important for screen reader users.
     * @param {number} value The thumb label's value to format.
     * @param {number} index The thumb label's index to format.
     * @returns {string}
     */
    getAriaValueText: PropTypes.func,
    /**
     * If `true` the Slider will be rendered right-to-left (with the lowest value on the right-hand side).
     * @default false
     */
    isRtl: PropTypes.bool,
    /**
     * Marks indicate predetermined values to which the user can move the slider.
     * If `true` the marks are spaced according the value of the `step` prop.
     * If an array, it should contain objects with `value` and an optional `label` keys.
     * @default false
     */
    marks: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.shape({
      label: PropTypes.node,
      value: PropTypes.number.isRequired
    })), PropTypes.bool]),
    /**
     * The maximum allowed value of the slider.
     * Should not be equal to min.
     * @default 100
     */
    max: PropTypes.number,
    /**
     * The minimum allowed value of the slider.
     * Should not be equal to max.
     * @default 0
     */
    min: PropTypes.number,
    /**
     * Name attribute of the hidden `input` element.
     */
    name: PropTypes.string,
    /**
     * Callback function that is fired when the slider's value changed.
     *
     * @param {Event} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (any).
     * **Warning**: This is a generic event not a change event.
     * @param {number | number[]} value The new value.
     * @param {number} activeThumb Index of the currently moved thumb.
     */
    onChange: PropTypes.func,
    /**
     * Callback function that is fired when the `mouseup` is triggered.
     *
     * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.
     * @param {number | number[]} value The new value.
     */
    onChangeCommitted: PropTypes.func,
    /**
     * The component orientation.
     * @default 'horizontal'
     */
    orientation: PropTypes.oneOf(["horizontal", "vertical"]),
    /**
     * A transformation function, to change the scale of the slider.
     * @param {any} x
     * @returns {any}
     * @default function Identity(x) {
     *   return x;
     * }
     */
    scale: PropTypes.func,
    /**
     * The props used for each slot inside the Slider.
     * @default {}
     */
    slotProps: PropTypes.shape({
      input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      mark: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      markLabel: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      rail: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      thumb: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      track: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      valueLabel: PropTypes.oneOfType([PropTypes.any, PropTypes.func])
    }),
    /**
     * The components used for each slot inside the Slider.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      input: PropTypes.elementType,
      mark: PropTypes.elementType,
      markLabel: PropTypes.elementType,
      rail: PropTypes.elementType,
      root: PropTypes.elementType,
      thumb: PropTypes.elementType,
      track: PropTypes.elementType,
      valueLabel: PropTypes.elementType
    }),
    /**
     * The granularity with which the slider can step through values. (A "discrete" slider.)
     * The `min` prop serves as the origin for the valid values.
     * We recommend (max - min) to be evenly divisible by the step.
     *
     * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
     * @default 1
     */
    step: PropTypes.number,
    /**
     * Tab index attribute of the hidden `input` element.
     */
    tabIndex: PropTypes.number,
    /**
     * The track presentation:
     *
     * - `normal` the track will render a bar representing the slider value.
     * - `inverted` the track will render a bar representing the remaining slider value.
     * - `false` the track will render without a bar.
     * @default 'normal'
     */
    track: PropTypes.oneOf(["inverted", "normal", false]),
    /**
     * The value of the slider.
     * For ranged sliders, provide an array with two values.
     */
    value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),
    /**
     * The format function the value label's value.
     *
     * When a function is provided, it should have the following signature:
     *
     * - {number} value The value label's value to format
     * - {number} index The value label's index to format
     * @param {any} x
     * @returns {any}
     * @default function Identity(x) {
     *   return x;
     * }
     */
    valueLabelFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string])
  } : void 0;
  function getSnackbarUnstyledUtilityClass(slot) {
    return generateUtilityClass("MuiSnackbar", slot);
  }
  const snackbarUnstyledClasses = generateUtilityClasses("MuiSnackbar", ["root"]);
  function useSnackbar(parameters) {
    const {
      autoHideDuration = null,
      disableWindowBlurListener = false,
      onClose: onClose2,
      open,
      ref,
      resumeHideDuration
    } = parameters;
    const timerAutoHide = React__namespace.useRef();
    React__namespace.useEffect(() => {
      if (!open) {
        return void 0;
      }
      function handleKeyDown2(nativeEvent) {
        if (!nativeEvent.defaultPrevented) {
          if (nativeEvent.key === "Escape" || nativeEvent.key === "Esc") {
            onClose2 == null ? void 0 : onClose2(nativeEvent, "escapeKeyDown");
          }
        }
      }
      document.addEventListener("keydown", handleKeyDown2);
      return () => {
        document.removeEventListener("keydown", handleKeyDown2);
      };
    }, [open, onClose2]);
    const handleClose = useEventCallback((event, reason) => {
      onClose2 == null ? void 0 : onClose2(event, reason);
    });
    const setAutoHideTimer = useEventCallback((autoHideDurationParam) => {
      if (!onClose2 || autoHideDurationParam == null) {
        return;
      }
      clearTimeout(timerAutoHide.current);
      timerAutoHide.current = setTimeout(() => {
        handleClose(null, "timeout");
      }, autoHideDurationParam);
    });
    React__namespace.useEffect(() => {
      if (open) {
        setAutoHideTimer(autoHideDuration);
      }
      return () => {
        clearTimeout(timerAutoHide.current);
      };
    }, [open, autoHideDuration, setAutoHideTimer]);
    const handleClickAway = (event) => {
      onClose2 == null ? void 0 : onClose2(event, "clickaway");
    };
    const handlePause = () => {
      clearTimeout(timerAutoHide.current);
    };
    const handleResume = React__namespace.useCallback(() => {
      if (autoHideDuration != null) {
        setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);
      }
    }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);
    const createHandleBlur = (otherHandlers) => (event) => {
      const onBlurCallback = otherHandlers.onBlur;
      onBlurCallback == null ? void 0 : onBlurCallback(event);
      handleResume();
    };
    const createHandleFocus = (otherHandlers) => (event) => {
      const onFocusCallback = otherHandlers.onFocus;
      onFocusCallback == null ? void 0 : onFocusCallback(event);
      handlePause();
    };
    const createMouseEnter = (otherHandlers) => (event) => {
      const onMouseEnterCallback = otherHandlers.onMouseEnter;
      onMouseEnterCallback == null ? void 0 : onMouseEnterCallback(event);
      handlePause();
    };
    const createMouseLeave = (otherHandlers) => (event) => {
      const onMouseLeaveCallback = otherHandlers.onMouseLeave;
      onMouseLeaveCallback == null ? void 0 : onMouseLeaveCallback(event);
      handleResume();
    };
    React__namespace.useEffect(() => {
      if (!disableWindowBlurListener && open) {
        window.addEventListener("focus", handleResume);
        window.addEventListener("blur", handlePause);
        return () => {
          window.removeEventListener("focus", handleResume);
          window.removeEventListener("blur", handlePause);
        };
      }
      return void 0;
    }, [disableWindowBlurListener, handleResume, open]);
    const getRootProps = (otherHandlers = {}) => {
      const propsEventHandlers = extractEventHandlers(parameters);
      const externalEventHandlers = _extends$2({}, propsEventHandlers, otherHandlers);
      return _extends$2({
        ref,
        // ClickAwayListener adds an `onClick` prop which results in the alert not being announced.
        // See https://github.com/mui/material-ui/issues/29080
        role: "presentation"
      }, externalEventHandlers, {
        onBlur: createHandleBlur(externalEventHandlers),
        onFocus: createHandleFocus(externalEventHandlers),
        onMouseEnter: createMouseEnter(externalEventHandlers),
        onMouseLeave: createMouseLeave(externalEventHandlers)
      });
    };
    return {
      getRootProps,
      onClickAway: handleClickAway
    };
  }
  const _excluded$1t = ["autoHideDuration", "children", "component", "disableWindowBlurListener", "exited", "onBlur", "onClose", "onFocus", "onMouseEnter", "onMouseLeave", "open", "resumeHideDuration", "slotProps", "slots"];
  const useUtilityClasses$10 = () => {
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getSnackbarUnstyledUtilityClass, void 0);
  };
  const SnackbarUnstyled = /* @__PURE__ */ React__namespace.forwardRef(function SnackbarUnstyled2(props, ref) {
    const {
      autoHideDuration = null,
      children,
      component,
      disableWindowBlurListener = false,
      exited = true,
      onClose: onClose2,
      open,
      resumeHideDuration,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1t);
    const classes = useUtilityClasses$10();
    const {
      getRootProps,
      onClickAway
    } = useSnackbar(_extends$2({}, props, {
      autoHideDuration,
      disableWindowBlurListener,
      onClose: onClose2,
      open,
      resumeHideDuration,
      ref
    }));
    const ownerState = props;
    const Root = component || slots.root || "div";
    const rootProps = useSlotProps({
      elementType: Root,
      getSlotProps: getRootProps,
      externalForwardedProps: other,
      externalSlotProps: slotProps.root,
      additionalProps: {
        ref
      },
      ownerState,
      className: classes.root
    });
    const clickAwayListenerProps = useSlotProps({
      elementType: ClickAwayListener,
      externalSlotProps: slotProps.clickAwayListener,
      additionalProps: {
        onClickAway
      },
      ownerState
    });
    delete clickAwayListenerProps.ownerState;
    if (!open && exited) {
      return null;
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx(ClickAwayListener, _extends$2({}, clickAwayListenerProps, {
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Root, _extends$2({}, rootProps, {
        children
      }))
    }));
  });
  process.env.NODE_ENV !== "production" ? SnackbarUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The number of milliseconds to wait before automatically calling the
     * `onClose` function. `onClose` should then set the state of the `open`
     * prop to hide the Snackbar. This behavior is disabled by default with
     * the `null` value.
     * @default null
     */
    autoHideDuration: PropTypes.number,
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.
     * @default false
     */
    disableWindowBlurListener: PropTypes.bool,
    /**
     * The prop used to handle exited transition and unmount the component.
     * @default true
     */
    exited: PropTypes.bool,
    /**
     * @ignore
     */
    onBlur: PropTypes.func,
    /**
     * Callback fired when the component requests to be closed.
     * Typically `onClose` is used to set state in the parent component,
     * which is used to control the `Snackbar` `open` prop.
     * The `reason` parameter can optionally be used to control the response to `onClose`,
     * for example ignoring `clickaway`.
     *
     * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.
     * @param {string} reason Can be: `"timeout"` (`autoHideDuration` expired), `"clickaway"`, or `"escapeKeyDown"`.
     */
    onClose: PropTypes.func,
    /**
     * @ignore
     */
    onFocus: PropTypes.func,
    /**
     * @ignore
     */
    onMouseEnter: PropTypes.func,
    /**
     * @ignore
     */
    onMouseLeave: PropTypes.func,
    /**
     * If `true`, the component is shown.
     */
    open: PropTypes.bool,
    /**
     * The number of milliseconds to wait before dismissing after user interaction.
     * If `autoHideDuration` prop isn't specified, it does nothing.
     * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,
     * we default to `autoHideDuration / 2` ms.
     */
    resumeHideDuration: PropTypes.number,
    /**
     * The props used for each slot inside the Snackbar.
     * @default {}
     */
    slotProps: PropTypes.shape({
      clickAwayListener: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
        children: PropTypes.element.isRequired,
        disableReactTree: PropTypes.bool,
        mouseEvent: PropTypes.oneOf(["onClick", "onMouseDown", "onMouseUp", "onPointerDown", "onPointerUp", false]),
        onClickAway: PropTypes.func,
        touchEvent: PropTypes.oneOf(["onTouchEnd", "onTouchStart", false])
      })]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the Snackbar.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      root: PropTypes.elementType
    })
  } : void 0;
  function useSwitch(props) {
    const {
      checked: checkedProp,
      defaultChecked,
      disabled,
      onBlur,
      onChange,
      onFocus,
      onFocusVisible,
      readOnly,
      required
    } = props;
    const [checked, setCheckedState] = useControlled({
      controlled: checkedProp,
      default: Boolean(defaultChecked),
      name: "Switch",
      state: "checked"
    });
    const createHandleInputChange = (otherProps) => (event) => {
      var _otherProps$onChange;
      if (event.nativeEvent.defaultPrevented) {
        return;
      }
      setCheckedState(event.target.checked);
      onChange == null ? void 0 : onChange(event);
      (_otherProps$onChange = otherProps.onChange) == null ? void 0 : _otherProps$onChange.call(otherProps, event);
    };
    const {
      isFocusVisibleRef,
      onBlur: handleBlurVisible,
      onFocus: handleFocusVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible();
    const [focusVisible, setFocusVisible] = React__namespace.useState(false);
    if (disabled && focusVisible) {
      setFocusVisible(false);
    }
    React__namespace.useEffect(() => {
      isFocusVisibleRef.current = focusVisible;
    }, [focusVisible, isFocusVisibleRef]);
    const inputRef = React__namespace.useRef(null);
    const createHandleFocus = (otherProps) => (event) => {
      var _otherProps$onFocus;
      if (!inputRef.current) {
        inputRef.current = event.currentTarget;
      }
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        setFocusVisible(true);
        onFocusVisible == null ? void 0 : onFocusVisible(event);
      }
      onFocus == null ? void 0 : onFocus(event);
      (_otherProps$onFocus = otherProps.onFocus) == null ? void 0 : _otherProps$onFocus.call(otherProps, event);
    };
    const createHandleBlur = (otherProps) => (event) => {
      var _otherProps$onBlur;
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setFocusVisible(false);
      }
      onBlur == null ? void 0 : onBlur(event);
      (_otherProps$onBlur = otherProps.onBlur) == null ? void 0 : _otherProps$onBlur.call(otherProps, event);
    };
    const handleRefChange = useForkRef(focusVisibleRef, inputRef);
    const getInputProps = (otherProps = {}) => _extends$2({
      checked: checkedProp,
      defaultChecked,
      disabled,
      readOnly,
      ref: handleRefChange,
      required,
      type: "checkbox"
    }, otherProps, {
      onChange: createHandleInputChange(otherProps),
      onFocus: createHandleFocus(otherProps),
      onBlur: createHandleBlur(otherProps)
    });
    return {
      checked,
      disabled: Boolean(disabled),
      focusVisible,
      getInputProps,
      readOnly: Boolean(readOnly)
    };
  }
  function getSwitchUnstyledUtilityClass(slot) {
    return generateUtilityClass("MuiSwitch", slot);
  }
  const switchUnstyledClasses = generateUtilityClasses("MuiSwitch", ["root", "input", "track", "thumb", "checked", "disabled", "focusVisible", "readOnly"]);
  const _excluded$1s = ["checked", "component", "defaultChecked", "disabled", "onBlur", "onChange", "onFocus", "onFocusVisible", "readOnly", "required", "slotProps", "slots"];
  const useUtilityClasses$$ = (ownerState) => {
    const {
      checked,
      disabled,
      focusVisible,
      readOnly
    } = ownerState;
    const slots = {
      root: ["root", checked && "checked", disabled && "disabled", focusVisible && "focusVisible", readOnly && "readOnly"],
      thumb: ["thumb"],
      input: ["input"],
      track: ["track"]
    };
    return composeClasses(slots, getSwitchUnstyledUtilityClass, {});
  };
  const SwitchUnstyled = /* @__PURE__ */ React__namespace.forwardRef(function SwitchUnstyled2(props, ref) {
    var _ref, _slots$thumb, _slots$input, _slots$track;
    const {
      checked: checkedProp,
      component,
      defaultChecked,
      disabled: disabledProp,
      onBlur,
      onChange,
      onFocus,
      onFocusVisible,
      readOnly: readOnlyProp,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1s);
    const useSwitchProps = {
      checked: checkedProp,
      defaultChecked,
      disabled: disabledProp,
      onBlur,
      onChange,
      onFocus,
      onFocusVisible,
      readOnly: readOnlyProp
    };
    const {
      getInputProps,
      checked,
      disabled,
      focusVisible,
      readOnly
    } = useSwitch(useSwitchProps);
    const ownerState = _extends$2({}, props, {
      checked,
      disabled,
      focusVisible,
      readOnly
    });
    const classes = useUtilityClasses$$(ownerState);
    const Root = (_ref = component != null ? component : slots.root) != null ? _ref : "span";
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        ref
      },
      ownerState,
      className: classes.root
    });
    const Thumb = (_slots$thumb = slots.thumb) != null ? _slots$thumb : "span";
    const thumbProps = useSlotProps({
      elementType: Thumb,
      externalSlotProps: slotProps.thumb,
      ownerState,
      className: classes.thumb
    });
    const Input2 = (_slots$input = slots.input) != null ? _slots$input : "input";
    const inputProps = useSlotProps({
      elementType: Input2,
      getSlotProps: getInputProps,
      externalSlotProps: slotProps.input,
      ownerState,
      className: classes.input
    });
    const Track = slots.track === null ? () => null : (_slots$track = slots.track) != null ? _slots$track : "span";
    const trackProps = useSlotProps({
      elementType: Track,
      externalSlotProps: slotProps.track,
      ownerState,
      className: classes.track
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(Root, _extends$2({}, rootProps, {
      children: [/* @__PURE__ */ jsxRuntimeExports.jsx(Track, _extends$2({}, trackProps)), /* @__PURE__ */ jsxRuntimeExports.jsx(Thumb, _extends$2({}, thumbProps)), /* @__PURE__ */ jsxRuntimeExports.jsx(Input2, _extends$2({}, inputProps))]
    }));
  });
  process.env.NODE_ENV !== "production" ? SwitchUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * If `true`, the component is checked.
     */
    checked: PropTypes.bool,
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * The default checked state. Use when the component is not controlled.
     */
    defaultChecked: PropTypes.bool,
    /**
     * If `true`, the component is disabled.
     */
    disabled: PropTypes.bool,
    /**
     * @ignore
     */
    onBlur: PropTypes.func,
    /**
     * Callback fired when the state is changed.
     *
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: PropTypes.func,
    /**
     * @ignore
     */
    onFocus: PropTypes.func,
    /**
     * @ignore
     */
    onFocusVisible: PropTypes.func,
    /**
     * If `true`, the component is read only.
     */
    readOnly: PropTypes.bool,
    /**
     * If `true`, the `input` element is required.
     */
    required: PropTypes.bool,
    /**
     * The props used for each slot inside the Switch.
     * @default {}
     */
    slotProps: PropTypes.shape({
      input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      thumb: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      track: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the Switch.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      input: PropTypes.elementType,
      root: PropTypes.elementType,
      thumb: PropTypes.elementType,
      track: PropTypes.oneOfType([PropTypes.elementType, PropTypes.oneOf([null])])
    })
  } : void 0;
  const _excluded$1r = ["component", "count", "getItemAriaLabel", "onPageChange", "page", "rowsPerPage", "showFirstButton", "showLastButton", "direction", "ownerState", "slotProps", "slots"];
  var _span$4, _span2, _span3, _span4;
  function LastPageIconDefault() {
    return _span$4 || (_span$4 = /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
      children: "⇾|"
    }));
  }
  function FirstPageIconDefault() {
    return _span2 || (_span2 = /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
      children: "|⇽"
    }));
  }
  function NextPageIconDefault() {
    return _span3 || (_span3 = /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
      children: "⇾"
    }));
  }
  function BackPageIconDefault() {
    return _span4 || (_span4 = /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
      children: "⇽"
    }));
  }
  function defaultGetAriaLabel$2(type) {
    return `Go to ${type} page`;
  }
  const TablePaginationActionsUnstyled = /* @__PURE__ */ React__namespace.forwardRef(function TablePaginationActionsUnstyled2(props, ref) {
    var _ref, _slots$root, _slots$firstButton, _slots$lastButton, _slots$nextButton, _slots$backButton, _slots$lastPageIcon, _slots$firstPageIcon, _slots$nextPageIcon, _slots$backPageIcon;
    const {
      component,
      count: count2,
      getItemAriaLabel = defaultGetAriaLabel$2,
      onPageChange,
      page,
      rowsPerPage,
      showFirstButton = false,
      showLastButton = false,
      direction,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1r);
    const ownerState = props;
    const handleFirstPageButtonClick = (event) => {
      onPageChange(event, 0);
    };
    const handleBackButtonClick = (event) => {
      onPageChange(event, page - 1);
    };
    const handleNextButtonClick = (event) => {
      onPageChange(event, page + 1);
    };
    const handleLastPageButtonClick = (event) => {
      onPageChange(event, Math.max(0, Math.ceil(count2 / rowsPerPage) - 1));
    };
    const Root = (_ref = (_slots$root = slots.root) != null ? _slots$root : component) != null ? _ref : "div";
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        ref
      },
      ownerState
    });
    const FirstButton = (_slots$firstButton = slots.firstButton) != null ? _slots$firstButton : "button";
    const firstButtonProps = useSlotProps({
      elementType: FirstButton,
      externalSlotProps: slotProps.firstButton,
      additionalProps: {
        onClick: handleFirstPageButtonClick,
        disabled: page === 0,
        "aria-label": getItemAriaLabel("first", page),
        title: getItemAriaLabel("first", page)
      },
      ownerState
    });
    const LastButton = (_slots$lastButton = slots.lastButton) != null ? _slots$lastButton : "button";
    const lastButtonProps = useSlotProps({
      elementType: LastButton,
      externalSlotProps: slotProps.lastButton,
      additionalProps: {
        onClick: handleLastPageButtonClick,
        disabled: page >= Math.ceil(count2 / rowsPerPage) - 1,
        "aria-label": getItemAriaLabel("last", page),
        title: getItemAriaLabel("last", page)
      },
      ownerState
    });
    const NextButton = (_slots$nextButton = slots.nextButton) != null ? _slots$nextButton : "button";
    const nextButtonProps = useSlotProps({
      elementType: NextButton,
      externalSlotProps: slotProps.nextButton,
      additionalProps: {
        onClick: handleNextButtonClick,
        disabled: count2 !== -1 ? page >= Math.ceil(count2 / rowsPerPage) - 1 : false,
        "aria-label": getItemAriaLabel("next", page),
        title: getItemAriaLabel("next", page)
      },
      ownerState
    });
    const BackButton = (_slots$backButton = slots.backButton) != null ? _slots$backButton : "button";
    const backButtonProps = useSlotProps({
      elementType: BackButton,
      externalSlotProps: slotProps.backButton,
      additionalProps: {
        onClick: handleBackButtonClick,
        disabled: page === 0,
        "aria-label": getItemAriaLabel("previous", page),
        title: getItemAriaLabel("previous", page)
      },
      ownerState
    });
    const LastPageIcon2 = (_slots$lastPageIcon = slots.lastPageIcon) != null ? _slots$lastPageIcon : LastPageIconDefault;
    const FirstPageIcon2 = (_slots$firstPageIcon = slots.firstPageIcon) != null ? _slots$firstPageIcon : FirstPageIconDefault;
    const NextPageIcon = (_slots$nextPageIcon = slots.nextPageIcon) != null ? _slots$nextPageIcon : NextPageIconDefault;
    const BackPageIcon = (_slots$backPageIcon = slots.backPageIcon) != null ? _slots$backPageIcon : BackPageIconDefault;
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(Root, _extends$2({}, rootProps, {
      children: [showFirstButton && /* @__PURE__ */ jsxRuntimeExports.jsx(FirstButton, _extends$2({}, firstButtonProps, {
        children: direction === "rtl" ? /* @__PURE__ */ jsxRuntimeExports.jsx(LastPageIcon2, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(FirstPageIcon2, {})
      })), /* @__PURE__ */ jsxRuntimeExports.jsx(BackButton, _extends$2({}, backButtonProps, {
        children: direction === "rtl" ? /* @__PURE__ */ jsxRuntimeExports.jsx(NextPageIcon, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(BackPageIcon, {})
      })), /* @__PURE__ */ jsxRuntimeExports.jsx(NextButton, _extends$2({}, nextButtonProps, {
        children: direction === "rtl" ? /* @__PURE__ */ jsxRuntimeExports.jsx(BackPageIcon, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(NextPageIcon, {})
      })), showLastButton && /* @__PURE__ */ jsxRuntimeExports.jsx(LastButton, _extends$2({}, lastButtonProps, {
        children: direction === "rtl" ? /* @__PURE__ */ jsxRuntimeExports.jsx(FirstPageIcon2, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(LastPageIcon2, {})
      }))]
    }));
  });
  function getTablePaginationUnstyledUtilityClass(slot) {
    return generateUtilityClass("MuiTablePagination", slot);
  }
  const tablePaginationUnstyledClasses = generateUtilityClasses("MuiTablePagination", ["root", "toolbar", "spacer", "selectLabel", "selectRoot", "select", "selectIcon", "input", "menuItem", "displayedRows", "actions"]);
  const _excluded$1q = ["component", "colSpan", "count", "getItemAriaLabel", "labelDisplayedRows", "labelId", "labelRowsPerPage", "onPageChange", "onRowsPerPageChange", "page", "rowsPerPage", "rowsPerPageOptions", "selectId", "slotProps", "slots"];
  function defaultLabelDisplayedRows$1({
    from: from2,
    to,
    count: count2
  }) {
    return `${from2}–${to} of ${count2 !== -1 ? count2 : `more than ${to}`}`;
  }
  function defaultGetAriaLabel$1(type) {
    return `Go to ${type} page`;
  }
  const useUtilityClasses$_ = () => {
    const slots = {
      root: ["root"],
      toolbar: ["toolbar"],
      spacer: ["spacer"],
      selectLabel: ["selectLabel"],
      select: ["select"],
      input: ["input"],
      selectIcon: ["selectIcon"],
      menuItem: ["menuItem"],
      displayedRows: ["displayedRows"],
      actions: ["actions"]
    };
    return composeClasses(slots, getTablePaginationUnstyledUtilityClass, {});
  };
  const TablePaginationUnstyled = /* @__PURE__ */ React__namespace.forwardRef(function TablePaginationUnstyled2(props, ref) {
    var _ref, _slots$select, _slots$actions, _slots$menuItem, _slots$selectLabel, _slots$displayedRows, _slots$toolbar, _slots$spacer;
    const {
      component,
      colSpan: colSpanProp,
      count: count2,
      getItemAriaLabel = defaultGetAriaLabel$1,
      labelDisplayedRows = defaultLabelDisplayedRows$1,
      labelId: labelIdProp,
      labelRowsPerPage = "Rows per page:",
      onPageChange,
      onRowsPerPageChange,
      page,
      rowsPerPage,
      rowsPerPageOptions = [10, 25, 50, 100],
      selectId: selectIdProp,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1q);
    const ownerState = props;
    const classes = useUtilityClasses$_();
    let colSpan;
    if (!component || component === "td" || !isHostComponent(component)) {
      colSpan = colSpanProp || 1e3;
    }
    const getLabelDisplayedRowsTo = () => {
      if (count2 === -1) {
        return (page + 1) * rowsPerPage;
      }
      return rowsPerPage === -1 ? count2 : Math.min(count2, (page + 1) * rowsPerPage);
    };
    const selectId = useId(selectIdProp);
    const labelId = useId(labelIdProp);
    const Root = (_ref = component != null ? component : slots.root) != null ? _ref : "td";
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        colSpan,
        ref
      },
      ownerState,
      className: classes.root
    });
    const Select2 = (_slots$select = slots.select) != null ? _slots$select : "select";
    const selectProps = useSlotProps({
      elementType: Select2,
      externalSlotProps: slotProps.select,
      additionalProps: {
        value: rowsPerPage,
        id: selectId,
        onChange: (e) => onRowsPerPageChange && onRowsPerPageChange(e),
        "aria-label": rowsPerPage.toString(),
        "aria-labelledby": [labelId, selectId].filter(Boolean).join(" ") || void 0
      },
      ownerState,
      className: classes.select
    });
    const Actions = (_slots$actions = slots.actions) != null ? _slots$actions : TablePaginationActionsUnstyled;
    const actionsProps = useSlotProps({
      elementType: Actions,
      externalSlotProps: slotProps.actions,
      additionalProps: {
        page,
        rowsPerPage,
        count: count2,
        onPageChange,
        getItemAriaLabel
      },
      ownerState,
      className: classes.actions
    });
    const MenuItem2 = (_slots$menuItem = slots.menuItem) != null ? _slots$menuItem : "option";
    const menuItemProps = useSlotProps({
      elementType: MenuItem2,
      externalSlotProps: slotProps.menuItem,
      additionalProps: {
        value: void 0
      },
      ownerState,
      className: classes.menuItem
    });
    const SelectLabel = (_slots$selectLabel = slots.selectLabel) != null ? _slots$selectLabel : "p";
    const selectLabelProps = useSlotProps({
      elementType: SelectLabel,
      externalSlotProps: slotProps.selectLabel,
      additionalProps: {
        id: labelId
      },
      ownerState,
      className: classes.selectLabel
    });
    const DisplayedRows = (_slots$displayedRows = slots.displayedRows) != null ? _slots$displayedRows : "p";
    const displayedRowsProps = useSlotProps({
      elementType: DisplayedRows,
      externalSlotProps: slotProps.displayedRows,
      ownerState,
      className: classes.displayedRows
    });
    const Toolbar2 = (_slots$toolbar = slots.toolbar) != null ? _slots$toolbar : "div";
    const toolbarProps = useSlotProps({
      elementType: Toolbar2,
      externalSlotProps: slotProps.toolbar,
      ownerState,
      className: classes.toolbar
    });
    const Spacer = (_slots$spacer = slots.spacer) != null ? _slots$spacer : "div";
    const spacerProps = useSlotProps({
      elementType: Spacer,
      externalSlotProps: slotProps.spacer,
      ownerState,
      className: classes.spacer
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Root, _extends$2({}, rootProps, {
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Toolbar2, _extends$2({}, toolbarProps, {
        children: [/* @__PURE__ */ jsxRuntimeExports.jsx(Spacer, _extends$2({}, spacerProps)), rowsPerPageOptions.length > 1 && /* @__PURE__ */ jsxRuntimeExports.jsx(SelectLabel, _extends$2({}, selectLabelProps, {
          children: labelRowsPerPage
        })), rowsPerPageOptions.length > 1 && /* @__PURE__ */ jsxRuntimeExports.jsx(Select2, _extends$2({}, selectProps, {
          children: rowsPerPageOptions.map((rowsPerPageOption) => /* @__PURE__ */ React.createElement(MenuItem2, _extends$2({}, menuItemProps, {
            key: typeof rowsPerPageOption !== "number" && rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption,
            value: typeof rowsPerPageOption !== "number" && rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption
          }), typeof rowsPerPageOption !== "number" && rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption))
        })), /* @__PURE__ */ jsxRuntimeExports.jsx(DisplayedRows, _extends$2({}, displayedRowsProps, {
          children: labelDisplayedRows({
            from: count2 === 0 ? 0 : page * rowsPerPage + 1,
            to: getLabelDisplayedRowsTo(),
            count: count2 === -1 ? -1 : count2,
            page
          })
        })), /* @__PURE__ */ jsxRuntimeExports.jsx(Actions, _extends$2({}, actionsProps))]
      }))
    }));
  });
  process.env.NODE_ENV !== "production" ? TablePaginationUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * @ignore
     */
    colSpan: PropTypes.number,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * The total number of rows.
     *
     * To enable server side pagination for an unknown number of items, provide -1.
     */
    count: PropTypes.number.isRequired,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the current page.
     * This is important for screen reader users.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @param {string} type The link or button type to format ('first' | 'last' | 'next' | 'previous').
     * @returns {string}
     * @default function defaultGetAriaLabel(type: ItemAriaLabelType) {
     *   return `Go to ${type} page`;
     * }
     */
    getItemAriaLabel: PropTypes.func,
    /**
     * Customize the displayed rows label. Invoked with a `{ from, to, count, page }`
     * object.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default function defaultLabelDisplayedRows({ from, to, count }: LabelDisplayedRowsArgs) {
     *   return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;
     * }
     */
    labelDisplayedRows: PropTypes.func,
    /**
     * Id of the label element within the pagination.
     */
    labelId: PropTypes.string,
    /**
     * Customize the rows per page label.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Rows per page:'
     */
    labelRowsPerPage: PropTypes.node,
    /**
     * Callback fired when the page is changed.
     *
     * @param {React.MouseEvent<HTMLButtonElement> | null} event The event source of the callback.
     * @param {number} page The page selected.
     */
    onPageChange: PropTypes.func.isRequired,
    /**
     * Callback fired when the number of rows per page is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     */
    onRowsPerPageChange: PropTypes.func,
    /**
     * The zero-based index of the current page.
     */
    page: chainPropTypes(integerPropType.isRequired, (props) => {
      const {
        count: count2,
        page,
        rowsPerPage
      } = props;
      if (count2 === -1) {
        return null;
      }
      const newLastPage = Math.max(0, Math.ceil(count2 / rowsPerPage) - 1);
      if (page < 0 || page > newLastPage) {
        return new Error(`MUI: The page prop of a TablePaginationUnstyled is out of range (0 to ${newLastPage}, but page is ${page}).`);
      }
      return null;
    }),
    /**
     * The number of rows per page.
     *
     * Set -1 to display all the rows.
     */
    rowsPerPage: integerPropType.isRequired,
    /**
     * Customizes the options of the rows per page select field. If less than two options are
     * available, no select field will be displayed.
     * Use -1 for the value with a custom label to show all the rows.
     * @default [10, 25, 50, 100]
     */
    rowsPerPageOptions: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
      label: PropTypes.string.isRequired,
      value: PropTypes.number.isRequired
    })]).isRequired),
    /**
     * Id of the select element within the pagination.
     */
    selectId: PropTypes.string,
    /**
     * The props used for each slot inside the TablePagination.
     * @default {}
     */
    slotProps: PropTypes.shape({
      actions: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      displayedRows: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      menuItem: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      select: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      selectLabel: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      spacer: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      toolbar: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the TablePagination.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      actions: PropTypes.elementType,
      displayedRows: PropTypes.elementType,
      menuItem: PropTypes.elementType,
      root: PropTypes.elementType,
      select: PropTypes.elementType,
      selectLabel: PropTypes.elementType,
      spacer: PropTypes.elementType,
      toolbar: PropTypes.elementType
    })
  } : void 0;
  function getTabPanelUnstyledUtilityClass(slot) {
    return generateUtilityClass("MuiTabPanel", slot);
  }
  const tabPanelUnstyledClasses = generateUtilityClasses("MuiTabPanel", ["root", "hidden"]);
  function getTabsUnstyledUtilityClass(slot) {
    return generateUtilityClass("MuiTabs", slot);
  }
  const tabsUnstyledClasses = generateUtilityClasses("MuiTabs", ["root", "horizontal", "vertical"]);
  function useTabs(parameters) {
    const {
      value: valueProp,
      defaultValue,
      onChange,
      orientation,
      direction,
      selectionFollowsFocus
    } = parameters;
    const [value, setValue] = useControlled({
      controlled: valueProp,
      default: defaultValue,
      name: "Tabs",
      state: "value"
    });
    const idPrefix = useId();
    const onSelected = React__namespace.useCallback((e, newValue) => {
      setValue(newValue);
      if (onChange) {
        onChange(e, newValue);
      }
    }, [onChange, setValue]);
    const tabsContextValue = React__namespace.useMemo(() => {
      return {
        idPrefix,
        value,
        onSelected,
        orientation,
        direction,
        selectionFollowsFocus
      };
    }, [idPrefix, value, onSelected, orientation, direction, selectionFollowsFocus]);
    return {
      tabsContextValue
    };
  }
  const Context = /* @__PURE__ */ React__namespace.createContext(null);
  if (process.env.NODE_ENV !== "production") {
    Context.displayName = "TabsContext";
  }
  function useTabContext() {
    return React__namespace.useContext(Context);
  }
  function getPanelId(context, value) {
    const {
      idPrefix
    } = context;
    if (idPrefix === null) {
      return null;
    }
    return `${context.idPrefix}-P-${value}`;
  }
  function getTabId(context, value) {
    const {
      idPrefix
    } = context;
    if (idPrefix === null) {
      return null;
    }
    return `${context.idPrefix}-T-${value}`;
  }
  const _excluded$1p = ["children", "value", "defaultValue", "orientation", "direction", "component", "onChange", "selectionFollowsFocus", "slotProps", "slots"];
  const useUtilityClasses$Z = (ownerState) => {
    const {
      orientation
    } = ownerState;
    const slots = {
      root: ["root", orientation]
    };
    return composeClasses(slots, getTabsUnstyledUtilityClass, {});
  };
  const TabsUnstyled = /* @__PURE__ */ React__namespace.forwardRef((props, ref) => {
    var _ref;
    const {
      children,
      orientation = "horizontal",
      direction = "ltr",
      component,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1p);
    const {
      tabsContextValue
    } = useTabs(props);
    const ownerState = _extends$2({}, props, {
      orientation,
      direction
    });
    const classes = useUtilityClasses$Z(ownerState);
    const TabsRoot = (_ref = component != null ? component : slots.root) != null ? _ref : "div";
    const tabsRootProps = useSlotProps({
      elementType: TabsRoot,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        ref
      },
      ownerState,
      className: classes.root
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TabsRoot, _extends$2({}, tabsRootProps, {
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Context.Provider, {
        value: tabsContextValue,
        children
      })
    }));
  });
  process.env.NODE_ENV !== "production" ? TabsUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: PropTypes.oneOfType([PropTypes.oneOf([false]), PropTypes.number, PropTypes.string]),
    /**
     * The direction of the text.
     * @default 'ltr'
     */
    direction: PropTypes.oneOf(["ltr", "rtl"]),
    /**
     * Callback invoked when new value is being set.
     */
    onChange: PropTypes.func,
    /**
     * The component orientation (layout flow direction).
     * @default 'horizontal'
     */
    orientation: PropTypes.oneOf(["horizontal", "vertical"]),
    /**
     * If `true` the selected tab changes on focus. Otherwise it only
     * changes on activation.
     */
    selectionFollowsFocus: PropTypes.bool,
    /**
     * The props used for each slot inside the Tabs.
     * @default {}
     */
    slotProps: PropTypes.shape({
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the Tabs.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      root: PropTypes.elementType
    }),
    /**
     * The value of the currently selected `Tab`.
     * If you don't want any selected `Tab`, you can set this prop to `false`.
     */
    value: PropTypes.oneOfType([PropTypes.oneOf([false]), PropTypes.number, PropTypes.string])
  } : void 0;
  function useTabPanel(parameters) {
    const {
      value
    } = parameters;
    const context = useTabContext();
    if (context === null) {
      throw new Error("No TabContext provided");
    }
    const hidden = value !== context.value;
    const id = getPanelId(context, value);
    const tabId = getTabId(context, value);
    const getRootProps = () => {
      return {
        "aria-labelledby": tabId != null ? tabId : void 0,
        hidden,
        id: id != null ? id : void 0
      };
    };
    return {
      hidden,
      getRootProps
    };
  }
  const _excluded$1o = ["children", "component", "value", "slotProps", "slots"];
  const useUtilityClasses$Y = (ownerState) => {
    const {
      hidden
    } = ownerState;
    const slots = {
      root: ["root", hidden && "hidden"]
    };
    return composeClasses(slots, getTabPanelUnstyledUtilityClass, {});
  };
  const TabPanelUnstyled = /* @__PURE__ */ React__namespace.forwardRef(function TabPanelUnstyled2(props, ref) {
    var _ref;
    const {
      children,
      component,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1o);
    const {
      hidden,
      getRootProps
    } = useTabPanel(props);
    const ownerState = _extends$2({}, props, {
      hidden
    });
    const classes = useUtilityClasses$Y(ownerState);
    const TabPanelRoot = (_ref = component != null ? component : slots.root) != null ? _ref : "div";
    const tabPanelRootProps = useSlotProps({
      elementType: TabPanelRoot,
      getSlotProps: getRootProps,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        role: "tabpanel",
        ref
      },
      ownerState,
      className: classes.root
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TabPanelRoot, _extends$2({}, tabPanelRootProps, {
      children: !hidden && children
    }));
  });
  process.env.NODE_ENV !== "production" ? TabPanelUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * The props used for each slot inside the TabPanel.
     * @default {}
     */
    slotProps: PropTypes.shape({
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the TabPanel.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      root: PropTypes.elementType
    }),
    /**
     * The value of the TabPanel. It will be shown when the Tab with the corresponding value is selected.
     */
    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired
  } : void 0;
  function getTabsListUnstyledUtilityClass(slot) {
    return generateUtilityClass("MuiTabsList", slot);
  }
  const tabsListUnstyledClasses = generateUtilityClasses("MuiTabsList", ["root", "horizontal", "vertical"]);
  const nextItem$1 = (list, item) => {
    if (!list) {
      return null;
    }
    if (list === item) {
      return list.firstChild;
    }
    if (item && item.nextElementSibling) {
      return item.nextElementSibling;
    }
    return list.firstChild;
  };
  const previousItem$1 = (list, item) => {
    if (!list) {
      return null;
    }
    if (list === item) {
      return list.lastChild;
    }
    if (item && item.previousElementSibling) {
      return item.previousElementSibling;
    }
    return list.lastChild;
  };
  const moveFocus$1 = (list, currentFocus, traversalFunction) => {
    let wrappedOnce = false;
    let nextFocus = traversalFunction(list, currentFocus);
    while (list && nextFocus) {
      if (nextFocus === list.firstChild) {
        if (wrappedOnce) {
          return;
        }
        wrappedOnce = true;
      }
      const nextFocusDisabled = nextFocus.disabled || nextFocus.getAttribute("aria-disabled") === "true";
      if (!nextFocus.hasAttribute("tabindex") || nextFocusDisabled) {
        nextFocus = traversalFunction(list, nextFocus);
      } else {
        nextFocus.focus();
        return;
      }
    }
  };
  function useTabsList(parameters) {
    const {
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledBy,
      children,
      ref
    } = parameters;
    const tabsListRef = /* @__PURE__ */ React__namespace.createRef();
    const handleRef = useForkRef(tabsListRef, ref);
    const context = useTabContext();
    if (context === null) {
      throw new Error("No TabContext provided");
    }
    const {
      value,
      orientation = "horizontal",
      direction = "ltr"
    } = context;
    const isRtl = direction === "rtl";
    const handleKeyDown2 = (event) => {
      const list = tabsListRef.current;
      const currentFocus = ownerDocument(list).activeElement;
      const role = currentFocus == null ? void 0 : currentFocus.getAttribute("role");
      if (role !== "tab") {
        return;
      }
      let previousItemKey = orientation === "horizontal" ? "ArrowLeft" : "ArrowUp";
      let nextItemKey = orientation === "horizontal" ? "ArrowRight" : "ArrowDown";
      if (orientation === "horizontal" && isRtl) {
        previousItemKey = "ArrowRight";
        nextItemKey = "ArrowLeft";
      }
      switch (event.key) {
        case previousItemKey:
          event.preventDefault();
          moveFocus$1(list, currentFocus, previousItem$1);
          break;
        case nextItemKey:
          event.preventDefault();
          moveFocus$1(list, currentFocus, nextItem$1);
          break;
        case "Home":
          event.preventDefault();
          moveFocus$1(list, null, nextItem$1);
          break;
        case "End":
          event.preventDefault();
          moveFocus$1(list, null, previousItem$1);
          break;
        default:
          break;
      }
    };
    const createHandleKeyDown = (otherHandlers) => (event) => {
      var _otherHandlers$onKeyD;
      handleKeyDown2(event);
      (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);
    };
    const getRootProps = (otherHandlers = {}) => {
      const propsEventHandlers = extractEventHandlers(parameters);
      const externalEventHandlers = _extends$2({}, propsEventHandlers, otherHandlers);
      const ownEventHandlers = {
        onKeyDown: createHandleKeyDown(externalEventHandlers)
      };
      const mergedEventHandlers = _extends$2({}, externalEventHandlers, ownEventHandlers);
      return _extends$2({
        "aria-label": ariaLabel,
        "aria-labelledby": ariaLabelledBy,
        "aria-orientation": orientation === "vertical" ? "vertical" : void 0,
        role: "tablist",
        ref: handleRef
      }, mergedEventHandlers);
    };
    const processChildren = React__namespace.useCallback(() => {
      const valueToIndex = /* @__PURE__ */ new Map();
      let childIndex = 0;
      const processedChildren = React__namespace.Children.map(children, (child) => {
        if (!/* @__PURE__ */ React__namespace.isValidElement(child)) {
          return null;
        }
        if (process.env.NODE_ENV !== "production") {
          if (reactIsExports.isFragment(child)) {
            console.error(["MUI: The Tabs component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
          }
        }
        const childValue = child.props.value === void 0 ? childIndex : child.props.value;
        valueToIndex.set(childValue, childIndex);
        childIndex += 1;
        return /* @__PURE__ */ React__namespace.cloneElement(child, _extends$2({
          value: childValue
        }, childIndex === 1 && value === false && !child.props.tabIndex || value === childValue ? {
          tabIndex: 0
        } : {
          tabIndex: -1
        }));
      });
      return processedChildren;
    }, [children, value]);
    return {
      isRtl,
      orientation,
      value,
      processChildren,
      getRootProps
    };
  }
  const _excluded$1n = ["children", "component", "slotProps", "slots"];
  const useUtilityClasses$X = (ownerState) => {
    const {
      orientation
    } = ownerState;
    const slots = {
      root: ["root", orientation]
    };
    return composeClasses(slots, getTabsListUnstyledUtilityClass, {});
  };
  const TabsListUnstyled = /* @__PURE__ */ React__namespace.forwardRef((props, ref) => {
    var _ref;
    const {
      component,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1n);
    const {
      isRtl,
      orientation,
      getRootProps,
      processChildren
    } = useTabsList(_extends$2({}, props, {
      ref
    }));
    const ownerState = _extends$2({}, props, {
      isRtl,
      orientation
    });
    const classes = useUtilityClasses$X(ownerState);
    const TabsListRoot = (_ref = component != null ? component : slots.root) != null ? _ref : "div";
    const tabsListRootProps = useSlotProps({
      elementType: TabsListRoot,
      getSlotProps: getRootProps,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      ownerState,
      className: classes.root
    });
    const processedChildren = processChildren();
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TabsListRoot, _extends$2({}, tabsListRootProps, {
      children: processedChildren
    }));
  });
  process.env.NODE_ENV !== "production" ? TabsListUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * The props used for each slot inside the TabsList.
     * @default {}
     */
    slotProps: PropTypes.shape({
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the TabsList.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      root: PropTypes.elementType
    })
  } : void 0;
  function getTabUnstyledUtilityClass(slot) {
    return generateUtilityClass("MuiTab", slot);
  }
  const tabUnstyledClasses = generateUtilityClasses("MuiTab", ["root", "selected", "disabled"]);
  const _excluded$1m = ["getRootProps"];
  function useTab(parameters) {
    var _getPanelId, _getTabId;
    const {
      value: valueProp,
      onChange,
      onClick,
      onFocus
    } = parameters;
    const _useButton = useButton(parameters), {
      getRootProps: getRootPropsButton
    } = _useButton, otherButtonProps = _objectWithoutPropertiesLoose(_useButton, _excluded$1m);
    const context = useTabContext();
    if (context === null) {
      throw new Error("No TabContext provided");
    }
    const value = valueProp != null ? valueProp : 0;
    const selected = context.value === value;
    const selectionFollowsFocus = context.selectionFollowsFocus;
    const a11yAttributes = {
      role: "tab",
      "aria-controls": (_getPanelId = getPanelId(context, value)) != null ? _getPanelId : void 0,
      id: (_getTabId = getTabId(context, value)) != null ? _getTabId : void 0,
      "aria-selected": selected,
      disabled: otherButtonProps.disabled
    };
    const createHandleFocus = (otherHandlers) => (event) => {
      var _otherHandlers$onFocu;
      (_otherHandlers$onFocu = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);
      if (event.defaultPrevented) {
        return;
      }
      if (selectionFollowsFocus && !selected) {
        if (onChange) {
          onChange(event, value);
        }
        context.onSelected(event, value);
      }
      if (onFocus) {
        onFocus(event);
      }
    };
    const createHandleClick = (otherHandlers) => (event) => {
      var _otherHandlers$onClic;
      (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);
      if (event.defaultPrevented) {
        return;
      }
      if (!selected) {
        if (onChange) {
          onChange(event, value);
        }
        context.onSelected(event, value);
      }
      if (onClick) {
        onClick(event);
      }
    };
    const getRootProps = (otherHandlers = {}) => {
      const buttonResolvedProps = getRootPropsButton(_extends$2({}, otherHandlers, {
        onClick: createHandleClick(otherHandlers),
        onFocus: createHandleFocus(otherHandlers)
      }));
      return _extends$2({}, buttonResolvedProps, a11yAttributes);
    };
    return _extends$2({
      getRootProps
    }, otherButtonProps, {
      selected
    });
  }
  const _excluded$1l = ["action", "children", "value", "disabled", "onChange", "onClick", "onFocus", "component", "slotProps", "slots"];
  const useUtilityClasses$W = (ownerState) => {
    const {
      selected,
      disabled
    } = ownerState;
    const slots = {
      root: ["root", selected && "selected", disabled && "disabled"]
    };
    return composeClasses(slots, getTabUnstyledUtilityClass, {});
  };
  const TabUnstyled = /* @__PURE__ */ React__namespace.forwardRef(function TabUnstyled2(props, ref) {
    var _ref;
    const {
      action,
      children,
      disabled = false,
      component,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1l);
    const tabRef = React__namespace.useRef();
    const handleRef = useForkRef(tabRef, ref);
    const {
      active,
      focusVisible,
      setFocusVisible,
      selected,
      getRootProps
    } = useTab(_extends$2({}, props, {
      ref: handleRef
    }));
    React__namespace.useImperativeHandle(action, () => ({
      focusVisible: () => {
        setFocusVisible(true);
        tabRef.current.focus();
      }
    }), [setFocusVisible]);
    const ownerState = _extends$2({}, props, {
      active,
      focusVisible,
      disabled,
      selected
    });
    const classes = useUtilityClasses$W(ownerState);
    const TabRoot = (_ref = component != null ? component : slots.root) != null ? _ref : "button";
    const tabRootProps = useSlotProps({
      elementType: TabRoot,
      getSlotProps: getRootProps,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        ref
      },
      ownerState,
      className: classes.root
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TabRoot, _extends$2({}, tabRootProps, {
      children
    }));
  });
  process.env.NODE_ENV !== "production" ? TabUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * A ref for imperative actions. It currently only supports `focusVisible()` action.
     */
    action: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
      current: PropTypes.shape({
        focusVisible: PropTypes.func.isRequired
      })
    })]),
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * Callback invoked when new value is being set.
     */
    onChange: PropTypes.func,
    /**
     * @ignore
     */
    onClick: PropTypes.func,
    /**
     * @ignore
     */
    onFocus: PropTypes.func,
    /**
     * The props used for each slot inside the Tab.
     * @default {}
     */
    slotProps: PropTypes.shape({
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the Tab.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      root: PropTypes.elementType
    }),
    /**
     * You can provide your own value. Otherwise, we fall back to the child position index.
     */
    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string])
  } : void 0;
  const _excluded$1k = ["onChange", "maxRows", "minRows", "style", "value"];
  function getStyleValue$1(computedStyle, property) {
    return parseInt(computedStyle[property], 10) || 0;
  }
  const styles$3 = {
    shadow: {
      // Visibility needed to hide the extra text area on iPads
      visibility: "hidden",
      // Remove from the content flow
      position: "absolute",
      // Ignore the scrollbar width
      overflow: "hidden",
      height: 0,
      top: 0,
      left: 0,
      // Create a new layer, increase the isolation of the computed values
      transform: "translateZ(0)"
    }
  };
  function isEmpty$3(obj) {
    return obj === void 0 || obj === null || Object.keys(obj).length === 0;
  }
  const TextareaAutosize = /* @__PURE__ */ React__namespace.forwardRef(function TextareaAutosize2(props, ref) {
    const {
      onChange,
      maxRows,
      minRows = 1,
      style: style2,
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1k);
    const {
      current: isControlled
    } = React__namespace.useRef(value != null);
    const inputRef = React__namespace.useRef(null);
    const handleRef = useForkRef(ref, inputRef);
    const shadowRef = React__namespace.useRef(null);
    const renders = React__namespace.useRef(0);
    const [state, setState] = React__namespace.useState({});
    const getUpdatedState = React__namespace.useCallback(() => {
      const input = inputRef.current;
      const containerWindow = ownerWindow(input);
      const computedStyle = containerWindow.getComputedStyle(input);
      if (computedStyle.width === "0px") {
        return {};
      }
      const inputShallow = shadowRef.current;
      inputShallow.style.width = computedStyle.width;
      inputShallow.value = input.value || props.placeholder || "x";
      if (inputShallow.value.slice(-1) === "\n") {
        inputShallow.value += " ";
      }
      const boxSizing2 = computedStyle["box-sizing"];
      const padding2 = getStyleValue$1(computedStyle, "padding-bottom") + getStyleValue$1(computedStyle, "padding-top");
      const border2 = getStyleValue$1(computedStyle, "border-bottom-width") + getStyleValue$1(computedStyle, "border-top-width");
      const innerHeight = inputShallow.scrollHeight;
      inputShallow.value = "x";
      const singleRowHeight = inputShallow.scrollHeight;
      let outerHeight = innerHeight;
      if (minRows) {
        outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
      }
      if (maxRows) {
        outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
      }
      outerHeight = Math.max(outerHeight, singleRowHeight);
      const outerHeightStyle = outerHeight + (boxSizing2 === "border-box" ? padding2 + border2 : 0);
      const overflow2 = Math.abs(outerHeight - innerHeight) <= 1;
      return {
        outerHeightStyle,
        overflow: overflow2
      };
    }, [maxRows, minRows, props.placeholder]);
    const updateState = (prevState, newState) => {
      const {
        outerHeightStyle,
        overflow: overflow2
      } = newState;
      if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow2)) {
        renders.current += 1;
        return {
          overflow: overflow2,
          outerHeightStyle
        };
      }
      if (process.env.NODE_ENV !== "production") {
        if (renders.current === 20) {
          console.error(["MUI: Too many re-renders. The layout is unstable.", "TextareaAutosize limits the number of renders to prevent an infinite loop."].join("\n"));
        }
      }
      return prevState;
    };
    const syncHeight = React__namespace.useCallback(() => {
      const newState = getUpdatedState();
      if (isEmpty$3(newState)) {
        return;
      }
      setState((prevState) => {
        return updateState(prevState, newState);
      });
    }, [getUpdatedState]);
    const syncHeightWithFlushSycn = () => {
      const newState = getUpdatedState();
      if (isEmpty$3(newState)) {
        return;
      }
      ReactDOM.flushSync(() => {
        setState((prevState) => {
          return updateState(prevState, newState);
        });
      });
    };
    React__namespace.useEffect(() => {
      const handleResize = debounce$1(() => {
        renders.current = 0;
        if (inputRef.current) {
          syncHeightWithFlushSycn();
        }
      });
      const containerWindow = ownerWindow(inputRef.current);
      containerWindow.addEventListener("resize", handleResize);
      let resizeObserver;
      if (typeof ResizeObserver !== "undefined") {
        resizeObserver = new ResizeObserver(handleResize);
        resizeObserver.observe(inputRef.current);
      }
      return () => {
        handleResize.clear();
        containerWindow.removeEventListener("resize", handleResize);
        if (resizeObserver) {
          resizeObserver.disconnect();
        }
      };
    });
    useEnhancedEffect(() => {
      syncHeight();
    });
    React__namespace.useEffect(() => {
      renders.current = 0;
    }, [value]);
    const handleChange = (event) => {
      renders.current = 0;
      if (!isControlled) {
        syncHeight();
      }
      if (onChange) {
        onChange(event);
      }
    };
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(React__namespace.Fragment, {
      children: [/* @__PURE__ */ jsxRuntimeExports.jsx("textarea", _extends$2({
        value,
        onChange: handleChange,
        ref: handleRef,
        rows: minRows,
        style: _extends$2({
          height: state.outerHeightStyle,
          // Need a large enough difference to allow scrolling.
          // This prevents infinite rendering loop.
          overflow: state.overflow ? "hidden" : null
        }, style2)
      }, other)), /* @__PURE__ */ jsxRuntimeExports.jsx("textarea", {
        "aria-hidden": true,
        className: props.className,
        readOnly: true,
        ref: shadowRef,
        tabIndex: -1,
        style: _extends$2({}, styles$3.shadow, style2, {
          padding: 0
        })
      })]
    });
  });
  process.env.NODE_ENV !== "production" ? TextareaAutosize.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * Maximum number of rows to display.
     */
    maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * Minimum number of rows to display.
     * @default 1
     */
    minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * @ignore
     */
    onChange: PropTypes.func,
    /**
     * @ignore
     */
    placeholder: PropTypes.string,
    /**
     * @ignore
     */
    style: PropTypes.object,
    /**
     * @ignore
     */
    value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string])
  } : void 0;
  /**
   * @mui/base v5.0.0-alpha.118
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  function sheetForTag(tag) {
    if (tag.sheet) {
      return tag.sheet;
    }
    for (var i = 0; i < document.styleSheets.length; i++) {
      if (document.styleSheets[i].ownerNode === tag) {
        return document.styleSheets[i];
      }
    }
  }
  function createStyleElement(options) {
    var tag = document.createElement("style");
    tag.setAttribute("data-emotion", options.key);
    if (options.nonce !== void 0) {
      tag.setAttribute("nonce", options.nonce);
    }
    tag.appendChild(document.createTextNode(""));
    tag.setAttribute("data-s", "");
    return tag;
  }
  var StyleSheet = /* @__PURE__ */ function() {
    function StyleSheet2(options) {
      var _this = this;
      this._insertTag = function(tag) {
        var before;
        if (_this.tags.length === 0) {
          if (_this.insertionPoint) {
            before = _this.insertionPoint.nextSibling;
          } else if (_this.prepend) {
            before = _this.container.firstChild;
          } else {
            before = _this.before;
          }
        } else {
          before = _this.tags[_this.tags.length - 1].nextSibling;
        }
        _this.container.insertBefore(tag, before);
        _this.tags.push(tag);
      };
      this.isSpeedy = options.speedy === void 0 ? process.env.NODE_ENV === "production" : options.speedy;
      this.tags = [];
      this.ctr = 0;
      this.nonce = options.nonce;
      this.key = options.key;
      this.container = options.container;
      this.prepend = options.prepend;
      this.insertionPoint = options.insertionPoint;
      this.before = null;
    }
    var _proto = StyleSheet2.prototype;
    _proto.hydrate = function hydrate(nodes) {
      nodes.forEach(this._insertTag);
    };
    _proto.insert = function insert2(rule) {
      if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
        this._insertTag(createStyleElement(this));
      }
      var tag = this.tags[this.tags.length - 1];
      if (process.env.NODE_ENV !== "production") {
        var isImportRule2 = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
        if (isImportRule2 && this._alreadyInsertedOrderInsensitiveRule) {
          console.error("You're attempting to insert the following rule:\n" + rule + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.");
        }
        this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule2;
      }
      if (this.isSpeedy) {
        var sheet = sheetForTag(tag);
        try {
          sheet.insertRule(rule, sheet.cssRules.length);
        } catch (e) {
          if (process.env.NODE_ENV !== "production" && !/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear|-ms-expand|-ms-reveal){/.test(rule)) {
            console.error('There was a problem inserting the following rule: "' + rule + '"', e);
          }
        }
      } else {
        tag.appendChild(document.createTextNode(rule));
      }
      this.ctr++;
    };
    _proto.flush = function flush() {
      this.tags.forEach(function(tag) {
        return tag.parentNode && tag.parentNode.removeChild(tag);
      });
      this.tags = [];
      this.ctr = 0;
      if (process.env.NODE_ENV !== "production") {
        this._alreadyInsertedOrderInsensitiveRule = false;
      }
    };
    return StyleSheet2;
  }();
  var MS = "-ms-";
  var MOZ = "-moz-";
  var WEBKIT = "-webkit-";
  var COMMENT = "comm";
  var RULESET = "rule";
  var DECLARATION = "decl";
  var PAGE = "@page";
  var MEDIA = "@media";
  var IMPORT = "@import";
  var CHARSET = "@charset";
  var VIEWPORT = "@viewport";
  var SUPPORTS = "@supports";
  var DOCUMENT = "@document";
  var NAMESPACE = "@namespace";
  var KEYFRAMES = "@keyframes";
  var FONT_FACE = "@font-face";
  var COUNTER_STYLE = "@counter-style";
  var FONT_FEATURE_VALUES = "@font-feature-values";
  var LAYER = "@layer";
  var abs = Math.abs;
  var from = String.fromCharCode;
  var assign = Object.assign;
  function hash(value, length2) {
    return charat(value, 0) ^ 45 ? (((length2 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
  }
  function trim(value) {
    return value.trim();
  }
  function match(value, pattern) {
    return (value = pattern.exec(value)) ? value[0] : value;
  }
  function replace(value, pattern, replacement) {
    return value.replace(pattern, replacement);
  }
  function indexof(value, search) {
    return value.indexOf(search);
  }
  function charat(value, index2) {
    return value.charCodeAt(index2) | 0;
  }
  function substr(value, begin, end2) {
    return value.slice(begin, end2);
  }
  function strlen(value) {
    return value.length;
  }
  function sizeof(value) {
    return value.length;
  }
  function append(value, array) {
    return array.push(value), value;
  }
  function combine(array, callback) {
    return array.map(callback).join("");
  }
  var line = 1;
  var column = 1;
  var length = 0;
  var position$1 = 0;
  var character = 0;
  var characters = "";
  function node(value, root, parent, type, props, children, length2) {
    return { value, root, parent, type, props, children, line, column, length: length2, return: "" };
  }
  function copy(root, props) {
    return assign(node("", null, null, "", null, null, 0), root, { length: -root.length }, props);
  }
  function char() {
    return character;
  }
  function prev() {
    character = position$1 > 0 ? charat(characters, --position$1) : 0;
    if (column--, character === 10)
      column = 1, line--;
    return character;
  }
  function next() {
    character = position$1 < length ? charat(characters, position$1++) : 0;
    if (column++, character === 10)
      column = 1, line++;
    return character;
  }
  function peek() {
    return charat(characters, position$1);
  }
  function caret() {
    return position$1;
  }
  function slice(begin, end2) {
    return substr(characters, begin, end2);
  }
  function token(type) {
    switch (type) {
      case 0:
      case 9:
      case 10:
      case 13:
      case 32:
        return 5;
      case 33:
      case 43:
      case 44:
      case 47:
      case 62:
      case 64:
      case 126:
      case 59:
      case 123:
      case 125:
        return 4;
      case 58:
        return 3;
      case 34:
      case 39:
      case 40:
      case 91:
        return 2;
      case 41:
      case 93:
        return 1;
    }
    return 0;
  }
  function alloc(value) {
    return line = column = 1, length = strlen(characters = value), position$1 = 0, [];
  }
  function dealloc(value) {
    return characters = "", value;
  }
  function delimit(type) {
    return trim(slice(position$1 - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
  }
  function tokenize(value) {
    return dealloc(tokenizer(alloc(value)));
  }
  function whitespace(type) {
    while (character = peek())
      if (character < 33)
        next();
      else
        break;
    return token(type) > 2 || token(character) > 3 ? "" : " ";
  }
  function tokenizer(children) {
    while (next())
      switch (token(character)) {
        case 0:
          append(identifier(position$1 - 1), children);
          break;
        case 2:
          append(delimit(character), children);
          break;
        default:
          append(from(character), children);
      }
    return children;
  }
  function escaping(index2, count2) {
    while (--count2 && next())
      if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
        break;
    return slice(index2, caret() + (count2 < 6 && peek() == 32 && next() == 32));
  }
  function delimiter(type) {
    while (next())
      switch (character) {
        case type:
          return position$1;
        case 34:
        case 39:
          if (type !== 34 && type !== 39)
            delimiter(character);
          break;
        case 40:
          if (type === 41)
            delimiter(type);
          break;
        case 92:
          next();
          break;
      }
    return position$1;
  }
  function commenter(type, index2) {
    while (next())
      if (type + character === 47 + 10)
        break;
      else if (type + character === 42 + 42 && peek() === 47)
        break;
    return "/*" + slice(index2, position$1 - 1) + "*" + from(type === 47 ? type : next());
  }
  function identifier(index2) {
    while (!token(peek()))
      next();
    return slice(index2, position$1);
  }
  function compile(value) {
    return dealloc(parse("", null, null, null, [""], value = alloc(value), 0, [0], value));
  }
  function parse(value, root, parent, rule, rules2, rulesets, pseudo, points, declarations) {
    var index2 = 0;
    var offset2 = 0;
    var length2 = pseudo;
    var atrule = 0;
    var property = 0;
    var previous = 0;
    var variable = 1;
    var scanning = 1;
    var ampersand = 1;
    var character2 = 0;
    var type = "";
    var props = rules2;
    var children = rulesets;
    var reference2 = rule;
    var characters2 = type;
    while (scanning)
      switch (previous = character2, character2 = next()) {
        case 40:
          if (previous != 108 && charat(characters2, length2 - 1) == 58) {
            if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f") != -1)
              ampersand = -1;
            break;
          }
        case 34:
        case 39:
        case 91:
          characters2 += delimit(character2);
          break;
        case 9:
        case 10:
        case 13:
        case 32:
          characters2 += whitespace(previous);
          break;
        case 92:
          characters2 += escaping(caret() - 1, 7);
          continue;
        case 47:
          switch (peek()) {
            case 42:
            case 47:
              append(comment(commenter(next(), caret()), root, parent), declarations);
              break;
            default:
              characters2 += "/";
          }
          break;
        case 123 * variable:
          points[index2++] = strlen(characters2) * ampersand;
        case 125 * variable:
        case 59:
        case 0:
          switch (character2) {
            case 0:
            case 125:
              scanning = 0;
            case 59 + offset2:
              if (ampersand == -1)
                characters2 = replace(characters2, /\f/g, "");
              if (property > 0 && strlen(characters2) - length2)
                append(property > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1) : declaration(replace(characters2, " ", "") + ";", rule, parent, length2 - 2), declarations);
              break;
            case 59:
              characters2 += ";";
            default:
              append(reference2 = ruleset(characters2, root, parent, index2, offset2, rules2, points, type, props = [], children = [], length2), rulesets);
              if (character2 === 123)
                if (offset2 === 0)
                  parse(characters2, root, reference2, reference2, props, rulesets, length2, points, children);
                else
                  switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                    case 100:
                    case 108:
                    case 109:
                    case 115:
                      parse(value, reference2, reference2, rule && append(ruleset(value, reference2, reference2, 0, 0, rules2, points, type, rules2, props = [], length2), children), rules2, children, length2, points, rule ? props : children);
                      break;
                    default:
                      parse(characters2, reference2, reference2, reference2, [""], children, 0, points, children);
                  }
          }
          index2 = offset2 = property = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
          break;
        case 58:
          length2 = 1 + strlen(characters2), property = previous;
        default:
          if (variable < 1) {
            if (character2 == 123)
              --variable;
            else if (character2 == 125 && variable++ == 0 && prev() == 125)
              continue;
          }
          switch (characters2 += from(character2), character2 * variable) {
            case 38:
              ampersand = offset2 > 0 ? 1 : (characters2 += "\f", -1);
              break;
            case 44:
              points[index2++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
              break;
            case 64:
              if (peek() === 45)
                characters2 += delimit(next());
              atrule = peek(), offset2 = length2 = strlen(type = characters2 += identifier(caret())), character2++;
              break;
            case 45:
              if (previous === 45 && strlen(characters2) == 2)
                variable = 0;
          }
      }
    return rulesets;
  }
  function ruleset(value, root, parent, index2, offset2, rules2, points, type, props, children, length2) {
    var post = offset2 - 1;
    var rule = offset2 === 0 ? rules2 : [""];
    var size = sizeof(rule);
    for (var i = 0, j = 0, k = 0; i < index2; ++i)
      for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x)
        if (z = trim(j > 0 ? rule[x] + " " + y : replace(y, /&\f/g, rule[x])))
          props[k++] = z;
    return node(value, root, parent, offset2 === 0 ? RULESET : type, props, children, length2);
  }
  function comment(value, root, parent) {
    return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0);
  }
  function declaration(value, root, parent, length2) {
    return node(value, root, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2);
  }
  function prefix$1(value, length2, children) {
    switch (hash(value, length2)) {
      case 5103:
        return WEBKIT + "print-" + value + value;
      case 5737:
      case 4201:
      case 3177:
      case 3433:
      case 1641:
      case 4457:
      case 2921:
      case 5572:
      case 6356:
      case 5844:
      case 3191:
      case 6645:
      case 3005:
      case 6391:
      case 5879:
      case 5623:
      case 6135:
      case 4599:
      case 4855:
      case 4215:
      case 6389:
      case 5109:
      case 5365:
      case 5621:
      case 3829:
        return WEBKIT + value + value;
      case 4789:
        return MOZ + value + value;
      case 5349:
      case 4246:
      case 4810:
      case 6968:
      case 2756:
        return WEBKIT + value + MOZ + value + MS + value + value;
      case 5936:
        switch (charat(value, length2 + 11)) {
          case 114:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
          case 108:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
          case 45:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
        }
      case 6828:
      case 4268:
      case 2903:
        return WEBKIT + value + MS + value + value;
      case 6165:
        return WEBKIT + value + MS + "flex-" + value + value;
      case 5187:
        return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
      case 5443:
        return WEBKIT + value + MS + "flex-item-" + replace(value, /flex-|-self/g, "") + (!match(value, /flex-|baseline/) ? MS + "grid-row-" + replace(value, /flex-|-self/g, "") : "") + value;
      case 4675:
        return WEBKIT + value + MS + "flex-line-pack" + replace(value, /align-content|flex-|-self/g, "") + value;
      case 5548:
        return WEBKIT + value + MS + replace(value, "shrink", "negative") + value;
      case 5292:
        return WEBKIT + value + MS + replace(value, "basis", "preferred-size") + value;
      case 6060:
        return WEBKIT + "box-" + replace(value, "-grow", "") + WEBKIT + value + MS + replace(value, "grow", "positive") + value;
      case 4554:
        return WEBKIT + replace(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
      case 6187:
        return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
      case 5495:
      case 3959:
        return replace(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
      case 4968:
        return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
      case 4200:
        if (!match(value, /flex-|baseline/))
          return MS + "grid-column-align" + substr(value, length2) + value;
        break;
      case 2592:
      case 3360:
        return MS + replace(value, "template-", "") + value;
      case 4384:
      case 3616:
        if (children && children.some(function(element, index2) {
          return length2 = index2, match(element.props, /grid-\w+-end/);
        })) {
          return ~indexof(value + (children = children[length2].value), "span") ? value : MS + replace(value, "-start", "") + value + MS + "grid-row-span:" + (~indexof(children, "span") ? match(children, /\d+/) : +match(children, /\d+/) - +match(value, /\d+/)) + ";";
        }
        return MS + replace(value, "-start", "") + value;
      case 4896:
      case 4128:
        return children && children.some(function(element) {
          return match(element.props, /grid-\w+-start/);
        }) ? value : MS + replace(replace(value, "-end", "-span"), "span ", "") + value;
      case 4095:
      case 3583:
      case 4068:
      case 2532:
        return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
      case 8116:
      case 7059:
      case 5753:
      case 5535:
      case 5445:
      case 5701:
      case 4933:
      case 4677:
      case 5533:
      case 5789:
      case 5021:
      case 4765:
        if (strlen(value) - 1 - length2 > 6)
          switch (charat(value, length2 + 1)) {
            case 109:
              if (charat(value, length2 + 4) !== 45)
                break;
            case 102:
              return replace(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")) + value;
            case 115:
              return ~indexof(value, "stretch") ? prefix$1(replace(value, "stretch", "fill-available"), length2, children) + value : value;
          }
        break;
      case 5152:
      case 5920:
        return replace(value, /(.+?):(\d+)(\s*\/\s*(span)?\s*(\d+))?(.*)/, function(_2, a, b, c, d, e, f) {
          return MS + a + ":" + b + f + (c ? MS + a + "-span:" + (d ? e : +e - +b) + f : "") + value;
        });
      case 4949:
        if (charat(value, length2 + 6) === 121)
          return replace(value, ":", ":" + WEBKIT) + value;
        break;
      case 6444:
        switch (charat(value, charat(value, 14) === 45 ? 18 : 11)) {
          case 120:
            return replace(value, /(.+:)([^;\s!]+)(;|(\s+)?!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
          case 100:
            return replace(value, ":", ":" + MS) + value;
        }
        break;
      case 5719:
      case 2647:
      case 2135:
      case 3927:
      case 2391:
        return replace(value, "scroll-", "scroll-snap-") + value;
    }
    return value;
  }
  function serialize(children, callback) {
    var output = "";
    var length2 = sizeof(children);
    for (var i = 0; i < length2; i++)
      output += callback(children[i], i, children, callback) || "";
    return output;
  }
  function stringify(element, index2, children, callback) {
    switch (element.type) {
      case LAYER:
        if (element.children.length)
          break;
      case IMPORT:
      case DECLARATION:
        return element.return = element.return || element.value;
      case COMMENT:
        return "";
      case KEYFRAMES:
        return element.return = element.value + "{" + serialize(element.children, callback) + "}";
      case RULESET:
        element.value = element.props.join(",");
    }
    return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
  }
  function middleware(collection) {
    var length2 = sizeof(collection);
    return function(element, index2, children, callback) {
      var output = "";
      for (var i = 0; i < length2; i++)
        output += collection[i](element, index2, children, callback) || "";
      return output;
    };
  }
  function rulesheet(callback) {
    return function(element) {
      if (!element.root) {
        if (element = element.return)
          callback(element);
      }
    };
  }
  function prefixer$1(element, index2, children, callback) {
    if (element.length > -1) {
      if (!element.return)
        switch (element.type) {
          case DECLARATION:
            element.return = prefix$1(element.value, element.length, children);
            return;
          case KEYFRAMES:
            return serialize([copy(element, { value: replace(element.value, "@", "@" + WEBKIT) })], callback);
          case RULESET:
            if (element.length)
              return combine(element.props, function(value) {
                switch (match(value, /(::plac\w+|:read-\w+)/)) {
                  case ":read-only":
                  case ":read-write":
                    return serialize([copy(element, { props: [replace(value, /:(read-\w+)/, ":" + MOZ + "$1")] })], callback);
                  case "::placeholder":
                    return serialize([
                      copy(element, { props: [replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")] }),
                      copy(element, { props: [replace(value, /:(plac\w+)/, ":" + MOZ + "$1")] }),
                      copy(element, { props: [replace(value, /:(plac\w+)/, MS + "input-$1")] })
                    ], callback);
                }
                return "";
              });
        }
    }
  }
  function namespace(element) {
    switch (element.type) {
      case RULESET:
        element.props = element.props.map(function(value) {
          return combine(tokenize(value), function(value2, index2, children) {
            switch (charat(value2, 0)) {
              case 12:
                return substr(value2, 1, strlen(value2));
              case 0:
              case 40:
              case 43:
              case 62:
              case 126:
                return value2;
              case 58:
                if (children[++index2] === "global")
                  children[index2] = "", children[++index2] = "\f" + substr(children[index2], index2 = 1, -1);
              case 32:
                return index2 === 1 ? "" : value2;
              default:
                switch (index2) {
                  case 0:
                    element = value2;
                    return sizeof(children) > 1 ? "" : value2;
                  case (index2 = sizeof(children) - 1):
                  case 2:
                    return index2 === 2 ? value2 + element + element : value2 + element;
                  default:
                    return value2;
                }
            }
          });
        });
    }
  }
  var weakMemoize = function weakMemoize2(func) {
    var cache2 = /* @__PURE__ */ new WeakMap();
    return function(arg) {
      if (cache2.has(arg)) {
        return cache2.get(arg);
      }
      var ret = func(arg);
      cache2.set(arg, ret);
      return ret;
    };
  };
  function memoize$1(fn) {
    var cache2 = /* @__PURE__ */ Object.create(null);
    return function(arg) {
      if (cache2[arg] === void 0)
        cache2[arg] = fn(arg);
      return cache2[arg];
    };
  }
  var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index2) {
    var previous = 0;
    var character2 = 0;
    while (true) {
      previous = character2;
      character2 = peek();
      if (previous === 38 && character2 === 12) {
        points[index2] = 1;
      }
      if (token(character2)) {
        break;
      }
      next();
    }
    return slice(begin, position$1);
  };
  var toRules = function toRules2(parsed, points) {
    var index2 = -1;
    var character2 = 44;
    do {
      switch (token(character2)) {
        case 0:
          if (character2 === 38 && peek() === 12) {
            points[index2] = 1;
          }
          parsed[index2] += identifierWithPointTracking(position$1 - 1, points, index2);
          break;
        case 2:
          parsed[index2] += delimit(character2);
          break;
        case 4:
          if (character2 === 44) {
            parsed[++index2] = peek() === 58 ? "&\f" : "";
            points[index2] = parsed[index2].length;
            break;
          }
        default:
          parsed[index2] += from(character2);
      }
    } while (character2 = next());
    return parsed;
  };
  var getRules = function getRules2(value, points) {
    return dealloc(toRules(alloc(value), points));
  };
  var fixedElements = /* @__PURE__ */ new WeakMap();
  var compat = function compat2(element) {
    if (element.type !== "rule" || !element.parent || // positive .length indicates that this rule contains pseudo
    // negative .length indicates that this rule has been already prefixed
    element.length < 1) {
      return;
    }
    var value = element.value, parent = element.parent;
    var isImplicitRule = element.column === parent.column && element.line === parent.line;
    while (parent.type !== "rule") {
      parent = parent.parent;
      if (!parent)
        return;
    }
    if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
      return;
    }
    if (isImplicitRule) {
      return;
    }
    fixedElements.set(element, true);
    var points = [];
    var rules2 = getRules(value, points);
    var parentRules = parent.props;
    for (var i = 0, k = 0; i < rules2.length; i++) {
      for (var j = 0; j < parentRules.length; j++, k++) {
        element.props[k] = points[i] ? rules2[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules2[i];
      }
    }
  };
  var removeLabel = function removeLabel2(element) {
    if (element.type === "decl") {
      var value = element.value;
      if (
        // charcode for l
        value.charCodeAt(0) === 108 && // charcode for b
        value.charCodeAt(2) === 98
      ) {
        element["return"] = "";
        element.value = "";
      }
    }
  };
  var ignoreFlag = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
  var isIgnoringComment = function isIgnoringComment2(element) {
    return element.type === "comm" && element.children.indexOf(ignoreFlag) > -1;
  };
  var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm2(cache2) {
    return function(element, index2, children) {
      if (element.type !== "rule" || cache2.compat)
        return;
      var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);
      if (unsafePseudoClasses) {
        var isNested = !!element.parent;
        var commentContainer = isNested ? element.parent.children : (
          // global rule at the root level
          children
        );
        for (var i = commentContainer.length - 1; i >= 0; i--) {
          var node2 = commentContainer[i];
          if (node2.line < element.line) {
            break;
          }
          if (node2.column < element.column) {
            if (isIgnoringComment(node2)) {
              return;
            }
            break;
          }
        }
        unsafePseudoClasses.forEach(function(unsafePseudoClass) {
          console.error('The pseudo class "' + unsafePseudoClass + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + unsafePseudoClass.split("-child")[0] + '-of-type".');
        });
      }
    };
  };
  var isImportRule = function isImportRule2(element) {
    return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
  };
  var isPrependedWithRegularRules = function isPrependedWithRegularRules2(index2, children) {
    for (var i = index2 - 1; i >= 0; i--) {
      if (!isImportRule(children[i])) {
        return true;
      }
    }
    return false;
  };
  var nullifyElement = function nullifyElement2(element) {
    element.type = "";
    element.value = "";
    element["return"] = "";
    element.children = "";
    element.props = "";
  };
  var incorrectImportAlarm = function incorrectImportAlarm2(element, index2, children) {
    if (!isImportRule(element)) {
      return;
    }
    if (element.parent) {
      console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
      nullifyElement(element);
    } else if (isPrependedWithRegularRules(index2, children)) {
      console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
      nullifyElement(element);
    }
  };
  function prefix(value, length2) {
    switch (hash(value, length2)) {
      case 5103:
        return WEBKIT + "print-" + value + value;
      case 5737:
      case 4201:
      case 3177:
      case 3433:
      case 1641:
      case 4457:
      case 2921:
      case 5572:
      case 6356:
      case 5844:
      case 3191:
      case 6645:
      case 3005:
      case 6391:
      case 5879:
      case 5623:
      case 6135:
      case 4599:
      case 4855:
      case 4215:
      case 6389:
      case 5109:
      case 5365:
      case 5621:
      case 3829:
        return WEBKIT + value + value;
      case 5349:
      case 4246:
      case 4810:
      case 6968:
      case 2756:
        return WEBKIT + value + MOZ + value + MS + value + value;
      case 6828:
      case 4268:
        return WEBKIT + value + MS + value + value;
      case 6165:
        return WEBKIT + value + MS + "flex-" + value + value;
      case 5187:
        return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
      case 5443:
        return WEBKIT + value + MS + "flex-item-" + replace(value, /flex-|-self/, "") + value;
      case 4675:
        return WEBKIT + value + MS + "flex-line-pack" + replace(value, /align-content|flex-|-self/, "") + value;
      case 5548:
        return WEBKIT + value + MS + replace(value, "shrink", "negative") + value;
      case 5292:
        return WEBKIT + value + MS + replace(value, "basis", "preferred-size") + value;
      case 6060:
        return WEBKIT + "box-" + replace(value, "-grow", "") + WEBKIT + value + MS + replace(value, "grow", "positive") + value;
      case 4554:
        return WEBKIT + replace(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
      case 6187:
        return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
      case 5495:
      case 3959:
        return replace(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
      case 4968:
        return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
      case 4095:
      case 3583:
      case 4068:
      case 2532:
        return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
      case 8116:
      case 7059:
      case 5753:
      case 5535:
      case 5445:
      case 5701:
      case 4933:
      case 4677:
      case 5533:
      case 5789:
      case 5021:
      case 4765:
        if (strlen(value) - 1 - length2 > 6)
          switch (charat(value, length2 + 1)) {
            case 109:
              if (charat(value, length2 + 4) !== 45)
                break;
            case 102:
              return replace(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")) + value;
            case 115:
              return ~indexof(value, "stretch") ? prefix(replace(value, "stretch", "fill-available"), length2) + value : value;
          }
        break;
      case 4949:
        if (charat(value, length2 + 1) !== 115)
          break;
      case 6444:
        switch (charat(value, strlen(value) - 3 - (~indexof(value, "!important") && 10))) {
          case 107:
            return replace(value, ":", ":" + WEBKIT) + value;
          case 101:
            return replace(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
        }
        break;
      case 5936:
        switch (charat(value, length2 + 11)) {
          case 114:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
          case 108:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
          case 45:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
        }
        return WEBKIT + value + MS + value + value;
    }
    return value;
  }
  var prefixer = function prefixer2(element, index2, children, callback) {
    if (element.length > -1) {
      if (!element["return"])
        switch (element.type) {
          case DECLARATION:
            element["return"] = prefix(element.value, element.length);
            break;
          case KEYFRAMES:
            return serialize([copy(element, {
              value: replace(element.value, "@", "@" + WEBKIT)
            })], callback);
          case RULESET:
            if (element.length)
              return combine(element.props, function(value) {
                switch (match(value, /(::plac\w+|:read-\w+)/)) {
                  case ":read-only":
                  case ":read-write":
                    return serialize([copy(element, {
                      props: [replace(value, /:(read-\w+)/, ":" + MOZ + "$1")]
                    })], callback);
                  case "::placeholder":
                    return serialize([copy(element, {
                      props: [replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")]
                    }), copy(element, {
                      props: [replace(value, /:(plac\w+)/, ":" + MOZ + "$1")]
                    }), copy(element, {
                      props: [replace(value, /:(plac\w+)/, MS + "input-$1")]
                    })], callback);
                }
                return "";
              });
        }
    }
  };
  var defaultStylisPlugins = [prefixer];
  var createCache = function createCache2(options) {
    var key = options.key;
    if (process.env.NODE_ENV !== "production" && !key) {
      throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
    }
    if (key === "css") {
      var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
      Array.prototype.forEach.call(ssrStyles, function(node2) {
        var dataEmotionAttribute = node2.getAttribute("data-emotion");
        if (dataEmotionAttribute.indexOf(" ") === -1) {
          return;
        }
        document.head.appendChild(node2);
        node2.setAttribute("data-s", "");
      });
    }
    var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
    if (process.env.NODE_ENV !== "production") {
      if (/[^a-z-]/.test(key)) {
        throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key + '" was passed');
      }
    }
    var inserted = {};
    var container;
    var nodesToHydrate = [];
    {
      container = options.container || document.head;
      Array.prototype.forEach.call(
        // this means we will ignore elements which don't have a space in them which
        // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
        document.querySelectorAll('style[data-emotion^="' + key + ' "]'),
        function(node2) {
          var attrib = node2.getAttribute("data-emotion").split(" ");
          for (var i = 1; i < attrib.length; i++) {
            inserted[attrib[i]] = true;
          }
          nodesToHydrate.push(node2);
        }
      );
    }
    var _insert;
    var omnipresentPlugins = [compat, removeLabel];
    if (process.env.NODE_ENV !== "production") {
      omnipresentPlugins.push(createUnsafeSelectorsAlarm({
        get compat() {
          return cache2.compat;
        }
      }), incorrectImportAlarm);
    }
    {
      var currentSheet;
      var finalizingPlugins = [stringify, process.env.NODE_ENV !== "production" ? function(element) {
        if (!element.root) {
          if (element["return"]) {
            currentSheet.insert(element["return"]);
          } else if (element.value && element.type !== COMMENT) {
            currentSheet.insert(element.value + "{}");
          }
        }
      } : rulesheet(function(rule) {
        currentSheet.insert(rule);
      })];
      var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
      var stylis = function stylis2(styles2) {
        return serialize(compile(styles2), serializer);
      };
      _insert = function insert2(selector, serialized, sheet, shouldCache) {
        currentSheet = sheet;
        if (process.env.NODE_ENV !== "production" && serialized.map !== void 0) {
          currentSheet = {
            insert: function insert3(rule) {
              sheet.insert(rule + serialized.map);
            }
          };
        }
        stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
        if (shouldCache) {
          cache2.inserted[serialized.name] = true;
        }
      };
    }
    var cache2 = {
      key,
      sheet: new StyleSheet({
        key,
        container,
        nonce: options.nonce,
        speedy: options.speedy,
        prepend: options.prepend,
        insertionPoint: options.insertionPoint
      }),
      nonce: options.nonce,
      inserted,
      registered: {},
      insert: _insert
    };
    cache2.sheet.hydrate(nodesToHydrate);
    return cache2;
  };
  "use client";
  let cache;
  if (typeof document === "object") {
    cache = createCache({
      key: "css",
      prepend: true
    });
  }
  function StyledEngineProvider(props) {
    const {
      injectFirst,
      children
    } = props;
    return injectFirst && cache ? /* @__PURE__ */ jsxRuntimeExports.jsx(react.CacheProvider, {
      value: cache,
      children
    }) : children;
  }
  process.env.NODE_ENV !== "production" ? StyledEngineProvider.propTypes = {
    /**
     * Your component tree.
     */
    children: PropTypes.node,
    /**
     * By default, the styles are injected last in the <head> element of the page.
     * As a result, they gain more specificity than any other style sheet.
     * If you want to override MUI's styles, set this prop.
     */
    injectFirst: PropTypes.bool
  } : void 0;
  "use client";
  "use client";
  function isEmpty$2(obj) {
    return obj === void 0 || obj === null || Object.keys(obj).length === 0;
  }
  function GlobalStyles$2(props) {
    const {
      styles: styles2,
      defaultTheme: defaultTheme2 = {}
    } = props;
    const globalStyles = typeof styles2 === "function" ? (themeInput) => styles2(isEmpty$2(themeInput) ? defaultTheme2 : themeInput) : styles2;
    return /* @__PURE__ */ jsxRuntimeExports.jsx(react.Global, {
      styles: globalStyles
    });
  }
  process.env.NODE_ENV !== "production" ? GlobalStyles$2.propTypes = {
    defaultTheme: PropTypes.object,
    styles: PropTypes.oneOfType([PropTypes.array, PropTypes.string, PropTypes.object, PropTypes.func])
  } : void 0;
  "use client";
  /**
   * @mui/styled-engine v5.15.9
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  "use client";
  function styled$2(tag, options) {
    const stylesFactory = emStyled(tag, options);
    if (process.env.NODE_ENV !== "production") {
      return (...styles2) => {
        const component = typeof tag === "string" ? `"${tag}"` : "component";
        if (styles2.length === 0) {
          console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join("\n"));
        } else if (styles2.some((style2) => style2 === void 0)) {
          console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
        }
        return stylesFactory(...styles2);
      };
    }
    return stylesFactory;
  }
  const internal_processStyles = (tag, processor) => {
    if (Array.isArray(tag.__emotion_styles)) {
      tag.__emotion_styles = processor(tag.__emotion_styles);
    }
  };
  const _excluded$1j = ["values", "unit", "step"];
  const breakpointKeys = ["xs", "sm", "md", "lg", "xl"];
  const sortBreakpointsValues = (values2) => {
    const breakpointsAsArray = Object.keys(values2).map((key) => ({
      key,
      val: values2[key]
    })) || [];
    breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
    return breakpointsAsArray.reduce((acc, obj) => {
      return _extends$2({}, acc, {
        [obj.key]: obj.val
      });
    }, {});
  };
  function createBreakpoints(breakpoints2) {
    const {
      // The breakpoint **start** at this value.
      // For instance with the first breakpoint xs: [xs, sm).
      values: values2 = {
        xs: 0,
        // phone
        sm: 600,
        // tablet
        md: 900,
        // small laptop
        lg: 1200,
        // desktop
        xl: 1536
        // large screen
      },
      unit = "px",
      step = 5
    } = breakpoints2, other = _objectWithoutPropertiesLoose(breakpoints2, _excluded$1j);
    const sortedValues = sortBreakpointsValues(values2);
    const keys = Object.keys(sortedValues);
    function up(key) {
      const value = typeof values2[key] === "number" ? values2[key] : key;
      return `@media (min-width:${value}${unit})`;
    }
    function down(key) {
      const value = typeof values2[key] === "number" ? values2[key] : key;
      return `@media (max-width:${value - step / 100}${unit})`;
    }
    function between2(start2, end2) {
      const endIndex = keys.indexOf(end2);
      return `@media (min-width:${typeof values2[start2] === "number" ? values2[start2] : start2}${unit}) and (max-width:${(endIndex !== -1 && typeof values2[keys[endIndex]] === "number" ? values2[keys[endIndex]] : end2) - step / 100}${unit})`;
    }
    function only(key) {
      if (keys.indexOf(key) + 1 < keys.length) {
        return between2(key, keys[keys.indexOf(key) + 1]);
      }
      return up(key);
    }
    function not(key) {
      const keyIndex = keys.indexOf(key);
      if (keyIndex === 0) {
        return up(keys[1]);
      }
      if (keyIndex === keys.length - 1) {
        return down(keys[keyIndex]);
      }
      return between2(key, keys[keys.indexOf(key) + 1]).replace("@media", "@media not all and");
    }
    return _extends$2({
      keys,
      values: sortedValues,
      up,
      down,
      between: between2,
      only,
      not,
      unit
    }, other);
  }
  const shape = {
    borderRadius: 4
  };
  const responsivePropType = process.env.NODE_ENV !== "production" ? PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.object, PropTypes.array]) : {};
  function merge(acc, item) {
    if (!item) {
      return acc;
    }
    return deepmerge(acc, item, {
      clone: false
      // No need to clone deep, it's way faster.
    });
  }
  const values$1 = {
    xs: 0,
    // phone
    sm: 600,
    // tablet
    md: 900,
    // small laptop
    lg: 1200,
    // desktop
    xl: 1536
    // large screen
  };
  const defaultBreakpoints = {
    // Sorted ASC by size. That's important.
    // It can't be configured as it's used statically for propTypes.
    keys: ["xs", "sm", "md", "lg", "xl"],
    up: (key) => `@media (min-width:${values$1[key]}px)`
  };
  function handleBreakpoints(props, propValue, styleFromPropValue) {
    const theme = props.theme || {};
    if (Array.isArray(propValue)) {
      const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
      return propValue.reduce((acc, item, index2) => {
        acc[themeBreakpoints.up(themeBreakpoints.keys[index2])] = styleFromPropValue(propValue[index2]);
        return acc;
      }, {});
    }
    if (typeof propValue === "object") {
      const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
      return Object.keys(propValue).reduce((acc, breakpoint) => {
        if (Object.keys(themeBreakpoints.values || values$1).indexOf(breakpoint) !== -1) {
          const mediaKey = themeBreakpoints.up(breakpoint);
          acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
        } else {
          const cssKey = breakpoint;
          acc[cssKey] = propValue[cssKey];
        }
        return acc;
      }, {});
    }
    const output = styleFromPropValue(propValue);
    return output;
  }
  function breakpoints(styleFunction) {
    const newStyleFunction = (props) => {
      const theme = props.theme || {};
      const base = styleFunction(props);
      const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
      const extended = themeBreakpoints.keys.reduce((acc, key) => {
        if (props[key]) {
          acc = acc || {};
          acc[themeBreakpoints.up(key)] = styleFunction(_extends$2({
            theme
          }, props[key]));
        }
        return acc;
      }, null);
      return merge(base, extended);
    };
    newStyleFunction.propTypes = process.env.NODE_ENV !== "production" ? _extends$2({}, styleFunction.propTypes, {
      xs: PropTypes.object,
      sm: PropTypes.object,
      md: PropTypes.object,
      lg: PropTypes.object,
      xl: PropTypes.object
    }) : {};
    newStyleFunction.filterProps = ["xs", "sm", "md", "lg", "xl", ...styleFunction.filterProps];
    return newStyleFunction;
  }
  function createEmptyBreakpointObject(breakpointsInput = {}) {
    var _breakpointsInput$key;
    const breakpointsInOrder = (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
      const breakpointStyleKey = breakpointsInput.up(key);
      acc[breakpointStyleKey] = {};
      return acc;
    }, {});
    return breakpointsInOrder || {};
  }
  function removeUnusedBreakpoints(breakpointKeys2, style2) {
    return breakpointKeys2.reduce((acc, key) => {
      const breakpointOutput = acc[key];
      const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
      if (isBreakpointUnused) {
        delete acc[key];
      }
      return acc;
    }, style2);
  }
  function mergeBreakpointsInOrder(breakpointsInput, ...styles2) {
    const emptyBreakpoints = createEmptyBreakpointObject(breakpointsInput);
    const mergedOutput = [emptyBreakpoints, ...styles2].reduce((prev2, next2) => deepmerge(prev2, next2), {});
    return removeUnusedBreakpoints(Object.keys(emptyBreakpoints), mergedOutput);
  }
  function computeBreakpointsBase(breakpointValues, themeBreakpoints) {
    if (typeof breakpointValues !== "object") {
      return {};
    }
    const base = {};
    const breakpointsKeys = Object.keys(themeBreakpoints);
    if (Array.isArray(breakpointValues)) {
      breakpointsKeys.forEach((breakpoint, i) => {
        if (i < breakpointValues.length) {
          base[breakpoint] = true;
        }
      });
    } else {
      breakpointsKeys.forEach((breakpoint) => {
        if (breakpointValues[breakpoint] != null) {
          base[breakpoint] = true;
        }
      });
    }
    return base;
  }
  function resolveBreakpointValues({
    values: breakpointValues,
    breakpoints: themeBreakpoints,
    base: customBase
  }) {
    const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);
    const keys = Object.keys(base);
    if (keys.length === 0) {
      return breakpointValues;
    }
    let previous;
    return keys.reduce((acc, breakpoint, i) => {
      if (Array.isArray(breakpointValues)) {
        acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];
        previous = i;
      } else if (typeof breakpointValues === "object") {
        acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];
        previous = breakpoint;
      } else {
        acc[breakpoint] = breakpointValues;
      }
      return acc;
    }, {});
  }
  function getPath(obj, path, checkVars = true) {
    if (!path || typeof path !== "string") {
      return null;
    }
    if (obj && obj.vars && checkVars) {
      const val = `vars.${path}`.split(".").reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
      if (val != null) {
        return val;
      }
    }
    return path.split(".").reduce((acc, item) => {
      if (acc && acc[item] != null) {
        return acc[item];
      }
      return null;
    }, obj);
  }
  function getStyleValue(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
    let value;
    if (typeof themeMapping === "function") {
      value = themeMapping(propValueFinal);
    } else if (Array.isArray(themeMapping)) {
      value = themeMapping[propValueFinal] || userValue;
    } else {
      value = getPath(themeMapping, propValueFinal) || userValue;
    }
    if (transform) {
      value = transform(value, userValue, themeMapping);
    }
    return value;
  }
  function style$3(options) {
    const {
      prop,
      cssProperty = options.prop,
      themeKey,
      transform
    } = options;
    const fn = (props) => {
      if (props[prop] == null) {
        return null;
      }
      const propValue = props[prop];
      const theme = props.theme;
      const themeMapping = getPath(theme, themeKey) || {};
      const styleFromPropValue = (propValueFinal) => {
        let value = getStyleValue(themeMapping, transform, propValueFinal);
        if (propValueFinal === value && typeof propValueFinal === "string") {
          value = getStyleValue(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : capitalize(propValueFinal)}`, propValueFinal);
        }
        if (cssProperty === false) {
          return value;
        }
        return {
          [cssProperty]: value
        };
      };
      return handleBreakpoints(props, propValue, styleFromPropValue);
    };
    fn.propTypes = process.env.NODE_ENV !== "production" ? {
      [prop]: responsivePropType
    } : {};
    fn.filterProps = [prop];
    return fn;
  }
  function memoize(fn) {
    const cache2 = {};
    return (arg) => {
      if (cache2[arg] === void 0) {
        cache2[arg] = fn(arg);
      }
      return cache2[arg];
    };
  }
  const properties = {
    m: "margin",
    p: "padding"
  };
  const directions = {
    t: "Top",
    r: "Right",
    b: "Bottom",
    l: "Left",
    x: ["Left", "Right"],
    y: ["Top", "Bottom"]
  };
  const aliases = {
    marginX: "mx",
    marginY: "my",
    paddingX: "px",
    paddingY: "py"
  };
  const getCssProperties = memoize((prop) => {
    if (prop.length > 2) {
      if (aliases[prop]) {
        prop = aliases[prop];
      } else {
        return [prop];
      }
    }
    const [a, b] = prop.split("");
    const property = properties[a];
    const direction = directions[b] || "";
    return Array.isArray(direction) ? direction.map((dir) => property + dir) : [property + direction];
  });
  const marginKeys = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginInline", "marginInlineStart", "marginInlineEnd", "marginBlock", "marginBlockStart", "marginBlockEnd"];
  const paddingKeys = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "paddingBlock", "paddingBlockStart", "paddingBlockEnd"];
  const spacingKeys = [...marginKeys, ...paddingKeys];
  function createUnaryUnit(theme, themeKey, defaultValue, propName) {
    var _getPath;
    const themeSpacing = (_getPath = getPath(theme, themeKey, false)) != null ? _getPath : defaultValue;
    if (typeof themeSpacing === "number") {
      return (abs2) => {
        if (typeof abs2 === "string") {
          return abs2;
        }
        if (process.env.NODE_ENV !== "production") {
          if (typeof abs2 !== "number") {
            console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${abs2}.`);
          }
        }
        return themeSpacing * abs2;
      };
    }
    if (Array.isArray(themeSpacing)) {
      return (abs2) => {
        if (typeof abs2 === "string") {
          return abs2;
        }
        if (process.env.NODE_ENV !== "production") {
          if (!Number.isInteger(abs2)) {
            console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join("\n"));
          } else if (abs2 > themeSpacing.length - 1) {
            console.error([`MUI: The value provided (${abs2}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs2} > ${themeSpacing.length - 1}, you need to add the missing values.`].join("\n"));
          }
        }
        return themeSpacing[abs2];
      };
    }
    if (typeof themeSpacing === "function") {
      return themeSpacing;
    }
    if (process.env.NODE_ENV !== "production") {
      console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, "It should be a number, an array or a function."].join("\n"));
    }
    return () => void 0;
  }
  function createUnarySpacing(theme) {
    return createUnaryUnit(theme, "spacing", 8, "spacing");
  }
  function getValue(transformer, propValue) {
    if (typeof propValue === "string" || propValue == null) {
      return propValue;
    }
    const abs2 = Math.abs(propValue);
    const transformed = transformer(abs2);
    if (propValue >= 0) {
      return transformed;
    }
    if (typeof transformed === "number") {
      return -transformed;
    }
    return `-${transformed}`;
  }
  function getStyleFromPropValue(cssProperties, transformer) {
    return (propValue) => cssProperties.reduce((acc, cssProperty) => {
      acc[cssProperty] = getValue(transformer, propValue);
      return acc;
    }, {});
  }
  function resolveCssProperty(props, keys, prop, transformer) {
    if (keys.indexOf(prop) === -1) {
      return null;
    }
    const cssProperties = getCssProperties(prop);
    const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
    const propValue = props[prop];
    return handleBreakpoints(props, propValue, styleFromPropValue);
  }
  function style$2(props, keys) {
    const transformer = createUnarySpacing(props.theme);
    return Object.keys(props).map((prop) => resolveCssProperty(props, keys, prop, transformer)).reduce(merge, {});
  }
  function margin(props) {
    return style$2(props, marginKeys);
  }
  margin.propTypes = process.env.NODE_ENV !== "production" ? marginKeys.reduce((obj, key) => {
    obj[key] = responsivePropType;
    return obj;
  }, {}) : {};
  margin.filterProps = marginKeys;
  function padding(props) {
    return style$2(props, paddingKeys);
  }
  padding.propTypes = process.env.NODE_ENV !== "production" ? paddingKeys.reduce((obj, key) => {
    obj[key] = responsivePropType;
    return obj;
  }, {}) : {};
  padding.filterProps = paddingKeys;
  function spacing(props) {
    return style$2(props, spacingKeys);
  }
  spacing.propTypes = process.env.NODE_ENV !== "production" ? spacingKeys.reduce((obj, key) => {
    obj[key] = responsivePropType;
    return obj;
  }, {}) : {};
  spacing.filterProps = spacingKeys;
  function createSpacing(spacingInput = 8) {
    if (spacingInput.mui) {
      return spacingInput;
    }
    const transform = createUnarySpacing({
      spacing: spacingInput
    });
    const spacing2 = (...argsInput) => {
      if (process.env.NODE_ENV !== "production") {
        if (!(argsInput.length <= 4)) {
          console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
        }
      }
      const args = argsInput.length === 0 ? [1] : argsInput;
      return args.map((argument) => {
        const output = transform(argument);
        return typeof output === "number" ? `${output}px` : output;
      }).join(" ");
    };
    spacing2.mui = true;
    return spacing2;
  }
  function compose(...styles2) {
    const handlers = styles2.reduce((acc, style2) => {
      style2.filterProps.forEach((prop) => {
        acc[prop] = style2;
      });
      return acc;
    }, {});
    const fn = (props) => {
      return Object.keys(props).reduce((acc, prop) => {
        if (handlers[prop]) {
          return merge(acc, handlers[prop](props));
        }
        return acc;
      }, {});
    };
    fn.propTypes = process.env.NODE_ENV !== "production" ? styles2.reduce((acc, style2) => Object.assign(acc, style2.propTypes), {}) : {};
    fn.filterProps = styles2.reduce((acc, style2) => acc.concat(style2.filterProps), []);
    return fn;
  }
  function borderTransform(value) {
    if (typeof value !== "number") {
      return value;
    }
    return `${value}px solid`;
  }
  function createBorderStyle(prop, transform) {
    return style$3({
      prop,
      themeKey: "borders",
      transform
    });
  }
  const border = createBorderStyle("border", borderTransform);
  const borderTop = createBorderStyle("borderTop", borderTransform);
  const borderRight = createBorderStyle("borderRight", borderTransform);
  const borderBottom = createBorderStyle("borderBottom", borderTransform);
  const borderLeft = createBorderStyle("borderLeft", borderTransform);
  const borderColor = createBorderStyle("borderColor");
  const borderTopColor = createBorderStyle("borderTopColor");
  const borderRightColor = createBorderStyle("borderRightColor");
  const borderBottomColor = createBorderStyle("borderBottomColor");
  const borderLeftColor = createBorderStyle("borderLeftColor");
  const outline = createBorderStyle("outline", borderTransform);
  const outlineColor = createBorderStyle("outlineColor");
  const borderRadius = (props) => {
    if (props.borderRadius !== void 0 && props.borderRadius !== null) {
      const transformer = createUnaryUnit(props.theme, "shape.borderRadius", 4, "borderRadius");
      const styleFromPropValue = (propValue) => ({
        borderRadius: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.borderRadius, styleFromPropValue);
    }
    return null;
  };
  borderRadius.propTypes = process.env.NODE_ENV !== "production" ? {
    borderRadius: responsivePropType
  } : {};
  borderRadius.filterProps = ["borderRadius"];
  const borders = compose(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius, outline, outlineColor);
  const gap = (props) => {
    if (props.gap !== void 0 && props.gap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "gap");
      const styleFromPropValue = (propValue) => ({
        gap: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.gap, styleFromPropValue);
    }
    return null;
  };
  gap.propTypes = process.env.NODE_ENV !== "production" ? {
    gap: responsivePropType
  } : {};
  gap.filterProps = ["gap"];
  const columnGap = (props) => {
    if (props.columnGap !== void 0 && props.columnGap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "columnGap");
      const styleFromPropValue = (propValue) => ({
        columnGap: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.columnGap, styleFromPropValue);
    }
    return null;
  };
  columnGap.propTypes = process.env.NODE_ENV !== "production" ? {
    columnGap: responsivePropType
  } : {};
  columnGap.filterProps = ["columnGap"];
  const rowGap = (props) => {
    if (props.rowGap !== void 0 && props.rowGap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "rowGap");
      const styleFromPropValue = (propValue) => ({
        rowGap: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.rowGap, styleFromPropValue);
    }
    return null;
  };
  rowGap.propTypes = process.env.NODE_ENV !== "production" ? {
    rowGap: responsivePropType
  } : {};
  rowGap.filterProps = ["rowGap"];
  const gridColumn = style$3({
    prop: "gridColumn"
  });
  const gridRow = style$3({
    prop: "gridRow"
  });
  const gridAutoFlow = style$3({
    prop: "gridAutoFlow"
  });
  const gridAutoColumns = style$3({
    prop: "gridAutoColumns"
  });
  const gridAutoRows = style$3({
    prop: "gridAutoRows"
  });
  const gridTemplateColumns = style$3({
    prop: "gridTemplateColumns"
  });
  const gridTemplateRows = style$3({
    prop: "gridTemplateRows"
  });
  const gridTemplateAreas = style$3({
    prop: "gridTemplateAreas"
  });
  const gridArea = style$3({
    prop: "gridArea"
  });
  const grid = compose(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
  function paletteTransform(value, userValue) {
    if (userValue === "grey") {
      return userValue;
    }
    return value;
  }
  const color = style$3({
    prop: "color",
    themeKey: "palette",
    transform: paletteTransform
  });
  const bgcolor = style$3({
    prop: "bgcolor",
    cssProperty: "backgroundColor",
    themeKey: "palette",
    transform: paletteTransform
  });
  const backgroundColor = style$3({
    prop: "backgroundColor",
    themeKey: "palette",
    transform: paletteTransform
  });
  const palette = compose(color, bgcolor, backgroundColor);
  function sizingTransform(value) {
    return value <= 1 && value !== 0 ? `${value * 100}%` : value;
  }
  const width = style$3({
    prop: "width",
    transform: sizingTransform
  });
  const maxWidth = (props) => {
    if (props.maxWidth !== void 0 && props.maxWidth !== null) {
      const styleFromPropValue = (propValue) => {
        var _props$theme, _props$theme2;
        const breakpoint = ((_props$theme = props.theme) == null || (_props$theme = _props$theme.breakpoints) == null || (_props$theme = _props$theme.values) == null ? void 0 : _props$theme[propValue]) || values$1[propValue];
        if (!breakpoint) {
          return {
            maxWidth: sizingTransform(propValue)
          };
        }
        if (((_props$theme2 = props.theme) == null || (_props$theme2 = _props$theme2.breakpoints) == null ? void 0 : _props$theme2.unit) !== "px") {
          return {
            maxWidth: `${breakpoint}${props.theme.breakpoints.unit}`
          };
        }
        return {
          maxWidth: breakpoint
        };
      };
      return handleBreakpoints(props, props.maxWidth, styleFromPropValue);
    }
    return null;
  };
  maxWidth.filterProps = ["maxWidth"];
  const minWidth = style$3({
    prop: "minWidth",
    transform: sizingTransform
  });
  const height = style$3({
    prop: "height",
    transform: sizingTransform
  });
  const maxHeight = style$3({
    prop: "maxHeight",
    transform: sizingTransform
  });
  const minHeight = style$3({
    prop: "minHeight",
    transform: sizingTransform
  });
  const sizeWidth = style$3({
    prop: "size",
    cssProperty: "width",
    transform: sizingTransform
  });
  const sizeHeight = style$3({
    prop: "size",
    cssProperty: "height",
    transform: sizingTransform
  });
  const boxSizing = style$3({
    prop: "boxSizing"
  });
  const sizing = compose(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
  const defaultSxConfig = {
    // borders
    border: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderTop: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderRight: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderBottom: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderLeft: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderColor: {
      themeKey: "palette"
    },
    borderTopColor: {
      themeKey: "palette"
    },
    borderRightColor: {
      themeKey: "palette"
    },
    borderBottomColor: {
      themeKey: "palette"
    },
    borderLeftColor: {
      themeKey: "palette"
    },
    outline: {
      themeKey: "borders",
      transform: borderTransform
    },
    outlineColor: {
      themeKey: "palette"
    },
    borderRadius: {
      themeKey: "shape.borderRadius",
      style: borderRadius
    },
    // palette
    color: {
      themeKey: "palette",
      transform: paletteTransform
    },
    bgcolor: {
      themeKey: "palette",
      cssProperty: "backgroundColor",
      transform: paletteTransform
    },
    backgroundColor: {
      themeKey: "palette",
      transform: paletteTransform
    },
    // spacing
    p: {
      style: padding
    },
    pt: {
      style: padding
    },
    pr: {
      style: padding
    },
    pb: {
      style: padding
    },
    pl: {
      style: padding
    },
    px: {
      style: padding
    },
    py: {
      style: padding
    },
    padding: {
      style: padding
    },
    paddingTop: {
      style: padding
    },
    paddingRight: {
      style: padding
    },
    paddingBottom: {
      style: padding
    },
    paddingLeft: {
      style: padding
    },
    paddingX: {
      style: padding
    },
    paddingY: {
      style: padding
    },
    paddingInline: {
      style: padding
    },
    paddingInlineStart: {
      style: padding
    },
    paddingInlineEnd: {
      style: padding
    },
    paddingBlock: {
      style: padding
    },
    paddingBlockStart: {
      style: padding
    },
    paddingBlockEnd: {
      style: padding
    },
    m: {
      style: margin
    },
    mt: {
      style: margin
    },
    mr: {
      style: margin
    },
    mb: {
      style: margin
    },
    ml: {
      style: margin
    },
    mx: {
      style: margin
    },
    my: {
      style: margin
    },
    margin: {
      style: margin
    },
    marginTop: {
      style: margin
    },
    marginRight: {
      style: margin
    },
    marginBottom: {
      style: margin
    },
    marginLeft: {
      style: margin
    },
    marginX: {
      style: margin
    },
    marginY: {
      style: margin
    },
    marginInline: {
      style: margin
    },
    marginInlineStart: {
      style: margin
    },
    marginInlineEnd: {
      style: margin
    },
    marginBlock: {
      style: margin
    },
    marginBlockStart: {
      style: margin
    },
    marginBlockEnd: {
      style: margin
    },
    // display
    displayPrint: {
      cssProperty: false,
      transform: (value) => ({
        "@media print": {
          display: value
        }
      })
    },
    display: {},
    overflow: {},
    textOverflow: {},
    visibility: {},
    whiteSpace: {},
    // flexbox
    flexBasis: {},
    flexDirection: {},
    flexWrap: {},
    justifyContent: {},
    alignItems: {},
    alignContent: {},
    order: {},
    flex: {},
    flexGrow: {},
    flexShrink: {},
    alignSelf: {},
    justifyItems: {},
    justifySelf: {},
    // grid
    gap: {
      style: gap
    },
    rowGap: {
      style: rowGap
    },
    columnGap: {
      style: columnGap
    },
    gridColumn: {},
    gridRow: {},
    gridAutoFlow: {},
    gridAutoColumns: {},
    gridAutoRows: {},
    gridTemplateColumns: {},
    gridTemplateRows: {},
    gridTemplateAreas: {},
    gridArea: {},
    // positions
    position: {},
    zIndex: {
      themeKey: "zIndex"
    },
    top: {},
    right: {},
    bottom: {},
    left: {},
    // shadows
    boxShadow: {
      themeKey: "shadows"
    },
    // sizing
    width: {
      transform: sizingTransform
    },
    maxWidth: {
      style: maxWidth
    },
    minWidth: {
      transform: sizingTransform
    },
    height: {
      transform: sizingTransform
    },
    maxHeight: {
      transform: sizingTransform
    },
    minHeight: {
      transform: sizingTransform
    },
    boxSizing: {},
    // typography
    fontFamily: {
      themeKey: "typography"
    },
    fontSize: {
      themeKey: "typography"
    },
    fontStyle: {
      themeKey: "typography"
    },
    fontWeight: {
      themeKey: "typography"
    },
    letterSpacing: {},
    textTransform: {},
    lineHeight: {},
    textAlign: {},
    typography: {
      cssProperty: false,
      themeKey: "typography"
    }
  };
  function objectsHaveSameKeys(...objects) {
    const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
    const union = new Set(allKeys);
    return objects.every((object) => union.size === Object.keys(object).length);
  }
  function callIfFn(maybeFn, arg) {
    return typeof maybeFn === "function" ? maybeFn(arg) : maybeFn;
  }
  function unstable_createStyleFunctionSx() {
    function getThemeValue2(prop, val, theme, config2) {
      const props = {
        [prop]: val,
        theme
      };
      const options = config2[prop];
      if (!options) {
        return {
          [prop]: val
        };
      }
      const {
        cssProperty = prop,
        themeKey,
        transform,
        style: style2
      } = options;
      if (val == null) {
        return null;
      }
      if (themeKey === "typography" && val === "inherit") {
        return {
          [prop]: val
        };
      }
      const themeMapping = getPath(theme, themeKey) || {};
      if (style2) {
        return style2(props);
      }
      const styleFromPropValue = (propValueFinal) => {
        let value = getStyleValue(themeMapping, transform, propValueFinal);
        if (propValueFinal === value && typeof propValueFinal === "string") {
          value = getStyleValue(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : capitalize(propValueFinal)}`, propValueFinal);
        }
        if (cssProperty === false) {
          return value;
        }
        return {
          [cssProperty]: value
        };
      };
      return handleBreakpoints(props, val, styleFromPropValue);
    }
    function styleFunctionSx2(props) {
      var _theme$unstable_sxCon;
      const {
        sx,
        theme = {}
      } = props || {};
      if (!sx) {
        return null;
      }
      const config2 = (_theme$unstable_sxCon = theme.unstable_sxConfig) != null ? _theme$unstable_sxCon : defaultSxConfig;
      function traverse(sxInput) {
        let sxObject = sxInput;
        if (typeof sxInput === "function") {
          sxObject = sxInput(theme);
        } else if (typeof sxInput !== "object") {
          return sxInput;
        }
        if (!sxObject) {
          return null;
        }
        const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);
        const breakpointsKeys = Object.keys(emptyBreakpoints);
        let css = emptyBreakpoints;
        Object.keys(sxObject).forEach((styleKey) => {
          const value = callIfFn(sxObject[styleKey], theme);
          if (value !== null && value !== void 0) {
            if (typeof value === "object") {
              if (config2[styleKey]) {
                css = merge(css, getThemeValue2(styleKey, value, theme, config2));
              } else {
                const breakpointsValues = handleBreakpoints({
                  theme
                }, value, (x) => ({
                  [styleKey]: x
                }));
                if (objectsHaveSameKeys(breakpointsValues, value)) {
                  css[styleKey] = styleFunctionSx2({
                    sx: value,
                    theme
                  });
                } else {
                  css = merge(css, breakpointsValues);
                }
              }
            } else {
              css = merge(css, getThemeValue2(styleKey, value, theme, config2));
            }
          }
        });
        return removeUnusedBreakpoints(breakpointsKeys, css);
      }
      return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
    }
    return styleFunctionSx2;
  }
  const styleFunctionSx = unstable_createStyleFunctionSx();
  styleFunctionSx.filterProps = ["sx"];
  function applyStyles(key, styles2) {
    const theme = this;
    if (theme.vars && typeof theme.getColorSchemeSelector === "function") {
      const selector = theme.getColorSchemeSelector(key).replace(/(\[[^\]]+\])/, "*:where($1)");
      return {
        [selector]: styles2
      };
    }
    if (theme.palette.mode === key) {
      return styles2;
    }
    return {};
  }
  const _excluded$1i = ["breakpoints", "palette", "spacing", "shape"];
  function createTheme$1(options = {}, ...args) {
    const {
      breakpoints: breakpointsInput = {},
      palette: paletteInput = {},
      spacing: spacingInput,
      shape: shapeInput = {}
    } = options, other = _objectWithoutPropertiesLoose(options, _excluded$1i);
    const breakpoints2 = createBreakpoints(breakpointsInput);
    const spacing2 = createSpacing(spacingInput);
    let muiTheme = deepmerge({
      breakpoints: breakpoints2,
      direction: "ltr",
      components: {},
      // Inject component definitions.
      palette: _extends$2({
        mode: "light"
      }, paletteInput),
      spacing: spacing2,
      shape: _extends$2({}, shape, shapeInput)
    }, other);
    muiTheme.applyStyles = applyStyles;
    muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
    muiTheme.unstable_sxConfig = _extends$2({}, defaultSxConfig, other == null ? void 0 : other.unstable_sxConfig);
    muiTheme.unstable_sx = function sx(props) {
      return styleFunctionSx({
        sx: props,
        theme: this
      });
    };
    return muiTheme;
  }
  "use client";
  function isObjectEmpty(obj) {
    return Object.keys(obj).length === 0;
  }
  function useTheme$3(defaultTheme2 = null) {
    const contextTheme = React__namespace.useContext(react.ThemeContext);
    return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme2 : contextTheme;
  }
  "use client";
  const systemDefaultTheme$1 = createTheme$1();
  function useTheme$2(defaultTheme2 = systemDefaultTheme$1) {
    return useTheme$3(defaultTheme2);
  }
  "use client";
  function GlobalStyles$1({
    styles: styles2,
    themeId,
    defaultTheme: defaultTheme2 = {}
  }) {
    const upperTheme = useTheme$2(defaultTheme2);
    const globalStyles = typeof styles2 === "function" ? styles2(themeId ? upperTheme[themeId] || upperTheme : upperTheme) : styles2;
    return /* @__PURE__ */ jsxRuntimeExports.jsx(GlobalStyles$2, {
      styles: globalStyles
    });
  }
  process.env.NODE_ENV !== "production" ? GlobalStyles$1.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    defaultTheme: PropTypes.object,
    /**
     * @ignore
     */
    styles: PropTypes.oneOfType([PropTypes.array, PropTypes.func, PropTypes.number, PropTypes.object, PropTypes.string, PropTypes.bool]),
    /**
     * @ignore
     */
    themeId: PropTypes.string
  } : void 0;
  "use client";
  const displayPrint = style$3({
    prop: "displayPrint",
    cssProperty: false,
    transform: (value) => ({
      "@media print": {
        display: value
      }
    })
  });
  const displayRaw = style$3({
    prop: "display"
  });
  const overflow = style$3({
    prop: "overflow"
  });
  const textOverflow = style$3({
    prop: "textOverflow"
  });
  const visibility = style$3({
    prop: "visibility"
  });
  const whiteSpace = style$3({
    prop: "whiteSpace"
  });
  const display = compose(displayPrint, displayRaw, overflow, textOverflow, visibility, whiteSpace);
  const flexBasis = style$3({
    prop: "flexBasis"
  });
  const flexDirection = style$3({
    prop: "flexDirection"
  });
  const flexWrap = style$3({
    prop: "flexWrap"
  });
  const justifyContent = style$3({
    prop: "justifyContent"
  });
  const alignItems = style$3({
    prop: "alignItems"
  });
  const alignContent = style$3({
    prop: "alignContent"
  });
  const order = style$3({
    prop: "order"
  });
  const flex = style$3({
    prop: "flex"
  });
  const flexGrow = style$3({
    prop: "flexGrow"
  });
  const flexShrink = style$3({
    prop: "flexShrink"
  });
  const alignSelf = style$3({
    prop: "alignSelf"
  });
  const justifyItems = style$3({
    prop: "justifyItems"
  });
  const justifySelf = style$3({
    prop: "justifySelf"
  });
  const flexbox = compose(flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf);
  const position = style$3({
    prop: "position"
  });
  const zIndex$1 = style$3({
    prop: "zIndex",
    themeKey: "zIndex"
  });
  const top = style$3({
    prop: "top"
  });
  const right = style$3({
    prop: "right"
  });
  const bottom = style$3({
    prop: "bottom"
  });
  const left = style$3({
    prop: "left"
  });
  const positions = compose(position, zIndex$1, top, right, bottom, left);
  const boxShadow = style$3({
    prop: "boxShadow",
    themeKey: "shadows"
  });
  const fontFamily = style$3({
    prop: "fontFamily",
    themeKey: "typography"
  });
  const fontSize = style$3({
    prop: "fontSize",
    themeKey: "typography"
  });
  const fontStyle = style$3({
    prop: "fontStyle",
    themeKey: "typography"
  });
  const fontWeight = style$3({
    prop: "fontWeight",
    themeKey: "typography"
  });
  const letterSpacing = style$3({
    prop: "letterSpacing"
  });
  const textTransform = style$3({
    prop: "textTransform"
  });
  const lineHeight = style$3({
    prop: "lineHeight"
  });
  const textAlign = style$3({
    prop: "textAlign"
  });
  const typographyVariant = style$3({
    prop: "typography",
    cssProperty: false,
    themeKey: "typography"
  });
  const typography = compose(typographyVariant, fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign, textTransform);
  const _excluded$1h = ["sx"];
  const splitProps = (props) => {
    var _props$theme$unstable, _props$theme;
    const result = {
      systemProps: {},
      otherProps: {}
    };
    const config2 = (_props$theme$unstable = props == null || (_props$theme = props.theme) == null ? void 0 : _props$theme.unstable_sxConfig) != null ? _props$theme$unstable : defaultSxConfig;
    Object.keys(props).forEach((prop) => {
      if (config2[prop]) {
        result.systemProps[prop] = props[prop];
      } else {
        result.otherProps[prop] = props[prop];
      }
    });
    return result;
  };
  function extendSxProp(props) {
    const {
      sx: inSx
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1h);
    const {
      systemProps,
      otherProps
    } = splitProps(other);
    let finalSx;
    if (Array.isArray(inSx)) {
      finalSx = [systemProps, ...inSx];
    } else if (typeof inSx === "function") {
      finalSx = (...args) => {
        const result = inSx(...args);
        if (!isPlainObject$1(result)) {
          return systemProps;
        }
        return _extends$2({}, systemProps, result);
      };
    } else {
      finalSx = _extends$2({}, systemProps, inSx);
    }
    return _extends$2({}, otherProps, {
      sx: finalSx
    });
  }
  const filterPropsMapping = {
    borders: borders.filterProps,
    display: display.filterProps,
    flexbox: flexbox.filterProps,
    grid: grid.filterProps,
    positions: positions.filterProps,
    palette: palette.filterProps,
    shadows: boxShadow.filterProps,
    sizing: sizing.filterProps,
    spacing: spacing.filterProps,
    typography: typography.filterProps
  };
  const styleFunctionMapping = {
    borders,
    display,
    flexbox,
    grid,
    positions,
    palette,
    shadows: boxShadow,
    sizing,
    spacing,
    typography
  };
  const propToStyleFunction = Object.keys(filterPropsMapping).reduce((acc, styleFnName) => {
    filterPropsMapping[styleFnName].forEach((propName) => {
      acc[propName] = styleFunctionMapping[styleFnName];
    });
    return acc;
  }, {});
  function getThemeValue(prop, value, theme) {
    const inputProps = {
      [prop]: value,
      theme
    };
    const styleFunction = propToStyleFunction[prop];
    return styleFunction ? styleFunction(inputProps) : {
      [prop]: value
    };
  }
  function r(e) {
    var t, f, n = "";
    if ("string" == typeof e || "number" == typeof e)
      n += e;
    else if ("object" == typeof e)
      if (Array.isArray(e)) {
        var o = e.length;
        for (t = 0; t < o; t++)
          e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
      } else
        for (f in e)
          e[f] && (n && (n += " "), n += f);
    return n;
  }
  function clsx() {
    for (var e, t, f = 0, n = "", o = arguments.length; f < o; f++)
      (e = arguments[f]) && (t = r(e)) && (n && (n += " "), n += t);
    return n;
  }
  "use client";
  const _excluded$1g = ["className", "component"];
  function createBox(options = {}) {
    const {
      themeId,
      defaultTheme: defaultTheme2,
      defaultClassName = "MuiBox-root",
      generateClassName
    } = options;
    const BoxRoot = styled$2("div", {
      shouldForwardProp: (prop) => prop !== "theme" && prop !== "sx" && prop !== "as"
    })(styleFunctionSx);
    const Box2 = /* @__PURE__ */ React__namespace.forwardRef(function Box3(inProps, ref) {
      const theme = useTheme$2(defaultTheme2);
      const _extendSxProp = extendSxProp(inProps), {
        className,
        component = "div"
      } = _extendSxProp, other = _objectWithoutPropertiesLoose(_extendSxProp, _excluded$1g);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(BoxRoot, _extends$2({
        as: component,
        ref,
        className: clsx(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),
        theme: themeId ? theme[themeId] || theme : theme
      }, other));
    });
    return Box2;
  }
  const boxClasses = generateUtilityClasses("MuiBox", ["root"]);
  "use client";
  const Box$1 = createBox({
    defaultClassName: boxClasses.root,
    generateClassName: ClassNameGenerator.generate
  });
  process.env.NODE_ENV !== "production" ? Box$1.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  "use client";
  const _excluded$1f = ["ownerState"], _excluded2$6 = ["variants"], _excluded3 = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
  function isEmpty$1(obj) {
    return Object.keys(obj).length === 0;
  }
  function isStringTag(tag) {
    return typeof tag === "string" && // 96 is one less than the char code
    // for "a" so this is checking that
    // it's a lowercase character
    tag.charCodeAt(0) > 96;
  }
  function shouldForwardProp(prop) {
    return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
  }
  const systemDefaultTheme = createTheme$1();
  const lowercaseFirstLetter = (string) => {
    if (!string) {
      return string;
    }
    return string.charAt(0).toLowerCase() + string.slice(1);
  };
  function resolveTheme({
    defaultTheme: defaultTheme2,
    theme,
    themeId
  }) {
    return isEmpty$1(theme) ? defaultTheme2 : theme[themeId] || theme;
  }
  function defaultOverridesResolver(slot) {
    if (!slot) {
      return null;
    }
    return (props, styles2) => styles2[slot];
  }
  function processStyleArg(callableStyle, _ref) {
    let {
      ownerState
    } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded$1f);
    const resolvedStylesArg = typeof callableStyle === "function" ? callableStyle(_extends$2({
      ownerState
    }, props)) : callableStyle;
    if (Array.isArray(resolvedStylesArg)) {
      return resolvedStylesArg.flatMap((resolvedStyle) => processStyleArg(resolvedStyle, _extends$2({
        ownerState
      }, props)));
    }
    if (!!resolvedStylesArg && typeof resolvedStylesArg === "object" && Array.isArray(resolvedStylesArg.variants)) {
      const {
        variants = []
      } = resolvedStylesArg, otherStyles = _objectWithoutPropertiesLoose(resolvedStylesArg, _excluded2$6);
      let result = otherStyles;
      variants.forEach((variant) => {
        let isMatch = true;
        if (typeof variant.props === "function") {
          isMatch = variant.props(_extends$2({
            ownerState
          }, props));
        } else {
          Object.keys(variant.props).forEach((key) => {
            if ((ownerState == null ? void 0 : ownerState[key]) !== variant.props[key] && props[key] !== variant.props[key]) {
              isMatch = false;
            }
          });
        }
        if (isMatch) {
          if (!Array.isArray(result)) {
            result = [result];
          }
          result.push(typeof variant.style === "function" ? variant.style(_extends$2({
            ownerState
          }, props)) : variant.style);
        }
      });
      return result;
    }
    return resolvedStylesArg;
  }
  function createStyled(input = {}) {
    const {
      themeId,
      defaultTheme: defaultTheme2 = systemDefaultTheme,
      rootShouldForwardProp: rootShouldForwardProp2 = shouldForwardProp,
      slotShouldForwardProp: slotShouldForwardProp2 = shouldForwardProp
    } = input;
    const systemSx = (props) => {
      return styleFunctionSx(_extends$2({}, props, {
        theme: resolveTheme(_extends$2({}, props, {
          defaultTheme: defaultTheme2,
          themeId
        }))
      }));
    };
    systemSx.__mui_systemSx = true;
    return (tag, inputOptions = {}) => {
      internal_processStyles(tag, (styles2) => styles2.filter((style2) => !(style2 != null && style2.__mui_systemSx)));
      const {
        name: componentName,
        slot: componentSlot,
        skipVariantsResolver: inputSkipVariantsResolver,
        skipSx: inputSkipSx,
        // TODO v6: remove `lowercaseFirstLetter()` in the next major release
        // For more details: https://github.com/mui/material-ui/pull/37908
        overridesResolver: overridesResolver2 = defaultOverridesResolver(lowercaseFirstLetter(componentSlot))
      } = inputOptions, options = _objectWithoutPropertiesLoose(inputOptions, _excluded3);
      const skipVariantsResolver = inputSkipVariantsResolver !== void 0 ? inputSkipVariantsResolver : (
        // TODO v6: remove `Root` in the next major release
        // For more details: https://github.com/mui/material-ui/pull/37908
        componentSlot && componentSlot !== "Root" && componentSlot !== "root" || false
      );
      const skipSx = inputSkipSx || false;
      let label;
      if (process.env.NODE_ENV !== "production") {
        if (componentName) {
          label = `${componentName}-${lowercaseFirstLetter(componentSlot || "Root")}`;
        }
      }
      let shouldForwardPropOption = shouldForwardProp;
      if (componentSlot === "Root" || componentSlot === "root") {
        shouldForwardPropOption = rootShouldForwardProp2;
      } else if (componentSlot) {
        shouldForwardPropOption = slotShouldForwardProp2;
      } else if (isStringTag(tag)) {
        shouldForwardPropOption = void 0;
      }
      const defaultStyledResolver = styled$2(tag, _extends$2({
        shouldForwardProp: shouldForwardPropOption,
        label
      }, options));
      const transformStyleArg = (stylesArg) => {
        if (typeof stylesArg === "function" && stylesArg.__emotion_real !== stylesArg || isPlainObject$1(stylesArg)) {
          return (props) => processStyleArg(stylesArg, _extends$2({}, props, {
            theme: resolveTheme({
              theme: props.theme,
              defaultTheme: defaultTheme2,
              themeId
            })
          }));
        }
        return stylesArg;
      };
      const muiStyledResolver = (styleArg, ...expressions) => {
        let transformedStyleArg = transformStyleArg(styleArg);
        const expressionsWithDefaultTheme = expressions ? expressions.map(transformStyleArg) : [];
        if (componentName && overridesResolver2) {
          expressionsWithDefaultTheme.push((props) => {
            const theme = resolveTheme(_extends$2({}, props, {
              defaultTheme: defaultTheme2,
              themeId
            }));
            if (!theme.components || !theme.components[componentName] || !theme.components[componentName].styleOverrides) {
              return null;
            }
            const styleOverrides = theme.components[componentName].styleOverrides;
            const resolvedStyleOverrides = {};
            Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
              resolvedStyleOverrides[slotKey] = processStyleArg(slotStyle, _extends$2({}, props, {
                theme
              }));
            });
            return overridesResolver2(props, resolvedStyleOverrides);
          });
        }
        if (componentName && !skipVariantsResolver) {
          expressionsWithDefaultTheme.push((props) => {
            var _theme$components;
            const theme = resolveTheme(_extends$2({}, props, {
              defaultTheme: defaultTheme2,
              themeId
            }));
            const themeVariants = theme == null || (_theme$components = theme.components) == null || (_theme$components = _theme$components[componentName]) == null ? void 0 : _theme$components.variants;
            return processStyleArg({
              variants: themeVariants
            }, _extends$2({}, props, {
              theme
            }));
          });
        }
        if (!skipSx) {
          expressionsWithDefaultTheme.push(systemSx);
        }
        const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
        if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
          const placeholders = new Array(numOfCustomFnsApplied).fill("");
          transformedStyleArg = [...styleArg, ...placeholders];
          transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
        }
        const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
        if (process.env.NODE_ENV !== "production") {
          let displayName;
          if (componentName) {
            displayName = `${componentName}${capitalize(componentSlot || "")}`;
          }
          if (displayName === void 0) {
            displayName = `Styled(${getDisplayName(tag)})`;
          }
          Component.displayName = displayName;
        }
        if (tag.muiName) {
          Component.muiName = tag.muiName;
        }
        return Component;
      };
      if (defaultStyledResolver.withConfig) {
        muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
      }
      return muiStyledResolver;
    };
  }
  const styled$1 = createStyled();
  function getThemeProps(params) {
    const {
      theme,
      name,
      props
    } = params;
    if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {
      return props;
    }
    return resolveProps(theme.components[name].defaultProps, props);
  }
  "use client";
  function useThemeProps$1({
    props,
    name,
    defaultTheme: defaultTheme2,
    themeId
  }) {
    let theme = useTheme$2(defaultTheme2);
    if (themeId) {
      theme = theme[themeId] || theme;
    }
    const mergedProps = getThemeProps({
      theme,
      name,
      props
    });
    return mergedProps;
  }
  "use client";
  function clampWrapper(value, min2 = 0, max2 = 1) {
    if (process.env.NODE_ENV !== "production") {
      if (value < min2 || value > max2) {
        console.error(`MUI: The value provided ${value} is out of range [${min2}, ${max2}].`);
      }
    }
    return clamp$1(value, min2, max2);
  }
  function hexToRgb(color2) {
    color2 = color2.slice(1);
    const re = new RegExp(`.{1,${color2.length >= 6 ? 2 : 1}}`, "g");
    let colors = color2.match(re);
    if (colors && colors[0].length === 1) {
      colors = colors.map((n) => n + n);
    }
    return colors ? `rgb${colors.length === 4 ? "a" : ""}(${colors.map((n, index2) => {
      return index2 < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1e3) / 1e3;
    }).join(", ")})` : "";
  }
  function intToHex(int) {
    const hex = int.toString(16);
    return hex.length === 1 ? `0${hex}` : hex;
  }
  function decomposeColor(color2) {
    if (color2.type) {
      return color2;
    }
    if (color2.charAt(0) === "#") {
      return decomposeColor(hexToRgb(color2));
    }
    const marker = color2.indexOf("(");
    const type = color2.substring(0, marker);
    if (["rgb", "rgba", "hsl", "hsla", "color"].indexOf(type) === -1) {
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: Unsupported \`${color2}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : formatMuiErrorMessage(9, color2));
    }
    let values2 = color2.substring(marker + 1, color2.length - 1);
    let colorSpace;
    if (type === "color") {
      values2 = values2.split(" ");
      colorSpace = values2.shift();
      if (values2.length === 4 && values2[3].charAt(0) === "/") {
        values2[3] = values2[3].slice(1);
      }
      if (["srgb", "display-p3", "a98-rgb", "prophoto-rgb", "rec-2020"].indexOf(colorSpace) === -1) {
        throw new Error(process.env.NODE_ENV !== "production" ? `MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : formatMuiErrorMessage(10, colorSpace));
      }
    } else {
      values2 = values2.split(",");
    }
    values2 = values2.map((value) => parseFloat(value));
    return {
      type,
      values: values2,
      colorSpace
    };
  }
  const colorChannel = (color2) => {
    const decomposedColor = decomposeColor(color2);
    return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.indexOf("hsl") !== -1 && idx !== 0 ? `${val}%` : val).join(" ");
  };
  const private_safeColorChannel = (color2, warning) => {
    try {
      return colorChannel(color2);
    } catch (error) {
      if (warning && process.env.NODE_ENV !== "production") {
        console.warn(warning);
      }
      return color2;
    }
  };
  function recomposeColor(color2) {
    const {
      type,
      colorSpace
    } = color2;
    let {
      values: values2
    } = color2;
    if (type.indexOf("rgb") !== -1) {
      values2 = values2.map((n, i) => i < 3 ? parseInt(n, 10) : n);
    } else if (type.indexOf("hsl") !== -1) {
      values2[1] = `${values2[1]}%`;
      values2[2] = `${values2[2]}%`;
    }
    if (type.indexOf("color") !== -1) {
      values2 = `${colorSpace} ${values2.join(" ")}`;
    } else {
      values2 = `${values2.join(", ")}`;
    }
    return `${type}(${values2})`;
  }
  function rgbToHex(color2) {
    if (color2.indexOf("#") === 0) {
      return color2;
    }
    const {
      values: values2
    } = decomposeColor(color2);
    return `#${values2.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join("")}`;
  }
  function hslToRgb(color2) {
    color2 = decomposeColor(color2);
    const {
      values: values2
    } = color2;
    const h = values2[0];
    const s = values2[1] / 100;
    const l = values2[2] / 100;
    const a = s * Math.min(l, 1 - l);
    const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
    let type = "rgb";
    const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
    if (color2.type === "hsla") {
      type += "a";
      rgb.push(values2[3]);
    }
    return recomposeColor({
      type,
      values: rgb
    });
  }
  function getLuminance(color2) {
    color2 = decomposeColor(color2);
    let rgb = color2.type === "hsl" || color2.type === "hsla" ? decomposeColor(hslToRgb(color2)).values : color2.values;
    rgb = rgb.map((val) => {
      if (color2.type !== "color") {
        val /= 255;
      }
      return val <= 0.03928 ? val / 12.92 : __pow((val + 0.055) / 1.055, 2.4);
    });
    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
  }
  function getContrastRatio(foreground, background) {
    const lumA = getLuminance(foreground);
    const lumB = getLuminance(background);
    return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
  }
  function alpha(color2, value) {
    color2 = decomposeColor(color2);
    value = clampWrapper(value);
    if (color2.type === "rgb" || color2.type === "hsl") {
      color2.type += "a";
    }
    if (color2.type === "color") {
      color2.values[3] = `/${value}`;
    } else {
      color2.values[3] = value;
    }
    return recomposeColor(color2);
  }
  function private_safeAlpha(color2, value, warning) {
    try {
      return alpha(color2, value);
    } catch (error) {
      if (warning && process.env.NODE_ENV !== "production") {
        console.warn(warning);
      }
      return color2;
    }
  }
  function darken(color2, coefficient) {
    color2 = decomposeColor(color2);
    coefficient = clampWrapper(coefficient);
    if (color2.type.indexOf("hsl") !== -1) {
      color2.values[2] *= 1 - coefficient;
    } else if (color2.type.indexOf("rgb") !== -1 || color2.type.indexOf("color") !== -1) {
      for (let i = 0; i < 3; i += 1) {
        color2.values[i] *= 1 - coefficient;
      }
    }
    return recomposeColor(color2);
  }
  function private_safeDarken(color2, coefficient, warning) {
    try {
      return darken(color2, coefficient);
    } catch (error) {
      if (warning && process.env.NODE_ENV !== "production") {
        console.warn(warning);
      }
      return color2;
    }
  }
  function lighten(color2, coefficient) {
    color2 = decomposeColor(color2);
    coefficient = clampWrapper(coefficient);
    if (color2.type.indexOf("hsl") !== -1) {
      color2.values[2] += (100 - color2.values[2]) * coefficient;
    } else if (color2.type.indexOf("rgb") !== -1) {
      for (let i = 0; i < 3; i += 1) {
        color2.values[i] += (255 - color2.values[i]) * coefficient;
      }
    } else if (color2.type.indexOf("color") !== -1) {
      for (let i = 0; i < 3; i += 1) {
        color2.values[i] += (1 - color2.values[i]) * coefficient;
      }
    }
    return recomposeColor(color2);
  }
  function private_safeLighten(color2, coefficient, warning) {
    try {
      return lighten(color2, coefficient);
    } catch (error) {
      if (warning && process.env.NODE_ENV !== "production") {
        console.warn(warning);
      }
      return color2;
    }
  }
  function emphasize(color2, coefficient = 0.15) {
    return getLuminance(color2) > 0.5 ? darken(color2, coefficient) : lighten(color2, coefficient);
  }
  function private_safeEmphasize(color2, coefficient, warning) {
    try {
      return private_safeEmphasize(color2, coefficient);
    } catch (error) {
      if (warning && process.env.NODE_ENV !== "production") {
        console.warn(warning);
      }
      return color2;
    }
  }
  function blend(background, overlay, opacity, gamma = 1) {
    const blendChannel = (b, o) => Math.round(__pow(__pow(b, 1 / gamma) * (1 - opacity) + __pow(o, 1 / gamma) * opacity, gamma));
    const backgroundColor2 = decomposeColor(background);
    const overlayColor = decomposeColor(overlay);
    const rgb = [blendChannel(backgroundColor2.values[0], overlayColor.values[0]), blendChannel(backgroundColor2.values[1], overlayColor.values[1]), blendChannel(backgroundColor2.values[2], overlayColor.values[2])];
    return recomposeColor({
      type: "rgb",
      values: rgb
    });
  }
  const ThemeContext = /* @__PURE__ */ React__namespace.createContext(null);
  if (process.env.NODE_ENV !== "production") {
    ThemeContext.displayName = "ThemeContext";
  }
  function useTheme$1() {
    const theme = React__namespace.useContext(ThemeContext);
    if (process.env.NODE_ENV !== "production") {
      React__namespace.useDebugValue(theme);
    }
    return theme;
  }
  const hasSymbol = typeof Symbol === "function" && Symbol.for;
  const nested = hasSymbol ? Symbol.for("mui.nested") : "__THEME_NESTED__";
  function mergeOuterLocalTheme(outerTheme, localTheme) {
    if (typeof localTheme === "function") {
      const mergedTheme = localTheme(outerTheme);
      if (process.env.NODE_ENV !== "production") {
        if (!mergedTheme) {
          console.error(["MUI: You should return an object from your theme function, i.e.", "<ThemeProvider theme={() => ({})} />"].join("\n"));
        }
      }
      return mergedTheme;
    }
    return _extends$2({}, outerTheme, localTheme);
  }
  function ThemeProvider$1(props) {
    const {
      children,
      theme: localTheme
    } = props;
    const outerTheme = useTheme$1();
    if (process.env.NODE_ENV !== "production") {
      if (outerTheme === null && typeof localTheme === "function") {
        console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));
      }
    }
    const theme = React__namespace.useMemo(() => {
      const output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);
      if (output != null) {
        output[nested] = outerTheme !== null;
      }
      return output;
    }, [localTheme, outerTheme]);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(ThemeContext.Provider, {
      value: theme,
      children
    });
  }
  process.env.NODE_ENV !== "production" ? ThemeProvider$1.propTypes = {
    /**
     * Your component tree.
     */
    children: PropTypes.node,
    /**
     * A theme object. You can provide a function to extend the outer theme.
     */
    theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired
  } : void 0;
  if (process.env.NODE_ENV !== "production") {
    process.env.NODE_ENV !== "production" ? ThemeProvider$1.propTypes = exactProp(ThemeProvider$1.propTypes) : void 0;
  }
  /**
   * @mui/private-theming v5.15.9
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  "use client";
  const EMPTY_THEME = {};
  function useThemeScoping(themeId, upperTheme, localTheme, isPrivate = false) {
    return React__namespace.useMemo(() => {
      const resolvedTheme = themeId ? upperTheme[themeId] || upperTheme : upperTheme;
      if (typeof localTheme === "function") {
        const mergedTheme = localTheme(resolvedTheme);
        const result = themeId ? _extends$2({}, upperTheme, {
          [themeId]: mergedTheme
        }) : mergedTheme;
        if (isPrivate) {
          return () => result;
        }
        return result;
      }
      return themeId ? _extends$2({}, upperTheme, {
        [themeId]: localTheme
      }) : _extends$2({}, upperTheme, localTheme);
    }, [themeId, upperTheme, localTheme, isPrivate]);
  }
  function ThemeProvider(props) {
    const {
      children,
      theme: localTheme,
      themeId
    } = props;
    const upperTheme = useTheme$3(EMPTY_THEME);
    const upperPrivateTheme = useTheme$1() || EMPTY_THEME;
    if (process.env.NODE_ENV !== "production") {
      if (upperTheme === null && typeof localTheme === "function" || themeId && upperTheme && !upperTheme[themeId] && typeof localTheme === "function") {
        console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));
      }
    }
    const engineTheme = useThemeScoping(themeId, upperTheme, localTheme);
    const privateTheme = useThemeScoping(themeId, upperPrivateTheme, localTheme, true);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(ThemeProvider$1, {
      theme: privateTheme,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(react.ThemeContext.Provider, {
        value: engineTheme,
        children
      })
    });
  }
  process.env.NODE_ENV !== "production" ? ThemeProvider.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Your component tree.
     */
    children: PropTypes.node,
    /**
     * A theme object. You can provide a function to extend the outer theme.
     */
    theme: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,
    /**
     * The design system's unique id for getting the corresponded theme when there are multiple design systems.
     */
    themeId: PropTypes.string
  } : void 0;
  if (process.env.NODE_ENV !== "production") {
    process.env.NODE_ENV !== "production" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;
  }
  "use client";
  const DEFAULT_MODE_STORAGE_KEY = "mode";
  const DEFAULT_COLOR_SCHEME_STORAGE_KEY = "color-scheme";
  const DEFAULT_ATTRIBUTE = "data-color-scheme";
  function getInitColorSchemeScript$1(options) {
    const {
      defaultMode = "light",
      defaultLightColorScheme = "light",
      defaultDarkColorScheme = "dark",
      modeStorageKey = DEFAULT_MODE_STORAGE_KEY,
      colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,
      attribute = DEFAULT_ATTRIBUTE,
      colorSchemeNode = "document.documentElement"
    } = options || {};
    return /* @__PURE__ */ jsxRuntimeExports.jsx("script", {
      // eslint-disable-next-line react/no-danger
      dangerouslySetInnerHTML: {
        __html: `(function() {
try {
  var mode = localStorage.getItem('${modeStorageKey}') || '${defaultMode}';
  var colorScheme = '';
  if (mode === 'system') {
    // handle system mode
    var mql = window.matchMedia('(prefers-color-scheme: dark)');
    if (mql.matches) {
      colorScheme = localStorage.getItem('${colorSchemeStorageKey}-dark') || '${defaultDarkColorScheme}';
    } else {
      colorScheme = localStorage.getItem('${colorSchemeStorageKey}-light') || '${defaultLightColorScheme}';
    }
  }
  if (mode === 'light') {
    colorScheme = localStorage.getItem('${colorSchemeStorageKey}-light') || '${defaultLightColorScheme}';
  }
  if (mode === 'dark') {
    colorScheme = localStorage.getItem('${colorSchemeStorageKey}-dark') || '${defaultDarkColorScheme}';
  }
  if (colorScheme) {
    ${colorSchemeNode}.setAttribute('${attribute}', colorScheme);
  }
} catch(e){}})();`
      }
    }, "mui-color-scheme-init");
  }
  "use client";
  function getSystemMode(mode) {
    if (typeof window !== "undefined" && mode === "system") {
      const mql = window.matchMedia("(prefers-color-scheme: dark)");
      if (mql.matches) {
        return "dark";
      }
      return "light";
    }
    return void 0;
  }
  function processState(state, callback) {
    if (state.mode === "light" || state.mode === "system" && state.systemMode === "light") {
      return callback("light");
    }
    if (state.mode === "dark" || state.mode === "system" && state.systemMode === "dark") {
      return callback("dark");
    }
    return void 0;
  }
  function getColorScheme(state) {
    return processState(state, (mode) => {
      if (mode === "light") {
        return state.lightColorScheme;
      }
      if (mode === "dark") {
        return state.darkColorScheme;
      }
      return void 0;
    });
  }
  function initializeValue(key, defaultValue) {
    if (typeof window === "undefined") {
      return void 0;
    }
    let value;
    try {
      value = localStorage.getItem(key) || void 0;
      if (!value) {
        localStorage.setItem(key, defaultValue);
      }
    } catch (e) {
    }
    return value || defaultValue;
  }
  function useCurrentColorScheme(options) {
    const {
      defaultMode = "light",
      defaultLightColorScheme,
      defaultDarkColorScheme,
      supportedColorSchemes = [],
      modeStorageKey = DEFAULT_MODE_STORAGE_KEY,
      colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,
      storageWindow = typeof window === "undefined" ? void 0 : window
    } = options;
    const joinedColorSchemes = supportedColorSchemes.join(",");
    const [state, setState] = React__namespace.useState(() => {
      const initialMode = initializeValue(modeStorageKey, defaultMode);
      const lightColorScheme = initializeValue(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);
      const darkColorScheme = initializeValue(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);
      return {
        mode: initialMode,
        systemMode: getSystemMode(initialMode),
        lightColorScheme,
        darkColorScheme
      };
    });
    const colorScheme = getColorScheme(state);
    const setMode = React__namespace.useCallback((mode) => {
      setState((currentState) => {
        if (mode === currentState.mode) {
          return currentState;
        }
        const newMode = !mode ? defaultMode : mode;
        try {
          localStorage.setItem(modeStorageKey, newMode);
        } catch (e) {
        }
        return _extends$2({}, currentState, {
          mode: newMode,
          systemMode: getSystemMode(newMode)
        });
      });
    }, [modeStorageKey, defaultMode]);
    const setColorScheme = React__namespace.useCallback((value) => {
      if (!value) {
        setState((currentState) => {
          try {
            localStorage.setItem(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);
            localStorage.setItem(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);
          } catch (e) {
          }
          return _extends$2({}, currentState, {
            lightColorScheme: defaultLightColorScheme,
            darkColorScheme: defaultDarkColorScheme
          });
        });
      } else if (typeof value === "string") {
        if (value && !joinedColorSchemes.includes(value)) {
          console.error(`\`${value}\` does not exist in \`theme.colorSchemes\`.`);
        } else {
          setState((currentState) => {
            const newState = _extends$2({}, currentState);
            processState(currentState, (mode) => {
              try {
                localStorage.setItem(`${colorSchemeStorageKey}-${mode}`, value);
              } catch (e) {
              }
              if (mode === "light") {
                newState.lightColorScheme = value;
              }
              if (mode === "dark") {
                newState.darkColorScheme = value;
              }
            });
            return newState;
          });
        }
      } else {
        setState((currentState) => {
          const newState = _extends$2({}, currentState);
          const newLightColorScheme = value.light === null ? defaultLightColorScheme : value.light;
          const newDarkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;
          if (newLightColorScheme) {
            if (!joinedColorSchemes.includes(newLightColorScheme)) {
              console.error(`\`${newLightColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
            } else {
              newState.lightColorScheme = newLightColorScheme;
              try {
                localStorage.setItem(`${colorSchemeStorageKey}-light`, newLightColorScheme);
              } catch (error) {
              }
            }
          }
          if (newDarkColorScheme) {
            if (!joinedColorSchemes.includes(newDarkColorScheme)) {
              console.error(`\`${newDarkColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
            } else {
              newState.darkColorScheme = newDarkColorScheme;
              try {
                localStorage.setItem(`${colorSchemeStorageKey}-dark`, newDarkColorScheme);
              } catch (error) {
              }
            }
          }
          return newState;
        });
      }
    }, [joinedColorSchemes, colorSchemeStorageKey, defaultLightColorScheme, defaultDarkColorScheme]);
    const handleMediaQuery = React__namespace.useCallback((e) => {
      if (state.mode === "system") {
        setState((currentState) => _extends$2({}, currentState, {
          systemMode: e != null && e.matches ? "dark" : "light"
        }));
      }
    }, [state.mode]);
    const mediaListener = React__namespace.useRef(handleMediaQuery);
    mediaListener.current = handleMediaQuery;
    React__namespace.useEffect(() => {
      const handler = (...args) => mediaListener.current(...args);
      const media = window.matchMedia("(prefers-color-scheme: dark)");
      media.addListener(handler);
      handler(media);
      return () => media.removeListener(handler);
    }, []);
    React__namespace.useEffect(() => {
      const handleStorage = (event) => {
        const value = event.newValue;
        if (typeof event.key === "string" && event.key.startsWith(colorSchemeStorageKey) && (!value || joinedColorSchemes.match(value))) {
          if (event.key.endsWith("light")) {
            setColorScheme({
              light: value
            });
          }
          if (event.key.endsWith("dark")) {
            setColorScheme({
              dark: value
            });
          }
        }
        if (event.key === modeStorageKey && (!value || ["light", "dark", "system"].includes(value))) {
          setMode(value || defaultMode);
        }
      };
      if (storageWindow) {
        storageWindow.addEventListener("storage", handleStorage);
        return () => storageWindow.removeEventListener("storage", handleStorage);
      }
      return void 0;
    }, [setColorScheme, setMode, modeStorageKey, colorSchemeStorageKey, joinedColorSchemes, defaultMode, storageWindow]);
    return _extends$2({}, state, {
      colorScheme,
      setMode,
      setColorScheme
    });
  }
  const _excluded$1e = ["colorSchemes", "components", "generateCssVars", "cssVarPrefix"];
  const DISABLE_CSS_TRANSITION = "*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}";
  function createCssVarsProvider(options) {
    const {
      themeId,
      /**
       * This `theme` object needs to follow a certain structure to
       * be used correctly by the finel `CssVarsProvider`. It should have a
       * `colorSchemes` key with the light and dark (and any other) palette.
       * It should also ideally have a vars object created using `prepareCssVars`.
       */
      theme: defaultTheme2 = {},
      attribute: defaultAttribute = DEFAULT_ATTRIBUTE,
      modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,
      colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,
      defaultMode: designSystemMode = "light",
      defaultColorScheme: designSystemColorScheme,
      disableTransitionOnChange: designSystemTransitionOnChange = false,
      resolveTheme: resolveTheme2,
      excludeVariablesFromRoot: excludeVariablesFromRoot2
    } = options;
    if (!defaultTheme2.colorSchemes || typeof designSystemColorScheme === "string" && !defaultTheme2.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === "object" && !defaultTheme2.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === "object" && !defaultTheme2.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {
      console.error(`MUI: \`${designSystemColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
    }
    const ColorSchemeContext = /* @__PURE__ */ React__namespace.createContext(void 0);
    const useColorScheme2 = () => {
      const value = React__namespace.useContext(ColorSchemeContext);
      if (!value) {
        throw new Error(process.env.NODE_ENV !== "production" ? `MUI: \`useColorScheme\` must be called under <CssVarsProvider />` : formatMuiErrorMessage(19));
      }
      return value;
    };
    function CssVarsProvider2({
      children,
      theme: themeProp = defaultTheme2,
      modeStorageKey = defaultModeStorageKey,
      colorSchemeStorageKey = defaultColorSchemeStorageKey,
      attribute = defaultAttribute,
      defaultMode = designSystemMode,
      defaultColorScheme = designSystemColorScheme,
      disableTransitionOnChange = designSystemTransitionOnChange,
      storageWindow = typeof window === "undefined" ? void 0 : window,
      documentNode = typeof document === "undefined" ? void 0 : document,
      colorSchemeNode = typeof document === "undefined" ? void 0 : document.documentElement,
      colorSchemeSelector = ":root",
      disableNestedContext = false,
      disableStyleSheetGeneration = false
    }) {
      const hasMounted = React__namespace.useRef(false);
      const upperTheme = useTheme$1();
      const ctx = React__namespace.useContext(ColorSchemeContext);
      const nested2 = !!ctx && !disableNestedContext;
      const scopedTheme = themeProp[themeId];
      const _ref = scopedTheme || themeProp, {
        colorSchemes = {},
        components = {},
        generateCssVars = () => ({
          vars: {},
          css: {}
        }),
        cssVarPrefix
      } = _ref, restThemeProp = _objectWithoutPropertiesLoose(_ref, _excluded$1e);
      const allColorSchemes = Object.keys(colorSchemes);
      const defaultLightColorScheme2 = typeof defaultColorScheme === "string" ? defaultColorScheme : defaultColorScheme.light;
      const defaultDarkColorScheme2 = typeof defaultColorScheme === "string" ? defaultColorScheme : defaultColorScheme.dark;
      const {
        mode: stateMode,
        setMode,
        systemMode,
        lightColorScheme,
        darkColorScheme,
        colorScheme: stateColorScheme,
        setColorScheme
      } = useCurrentColorScheme({
        supportedColorSchemes: allColorSchemes,
        defaultLightColorScheme: defaultLightColorScheme2,
        defaultDarkColorScheme: defaultDarkColorScheme2,
        modeStorageKey,
        colorSchemeStorageKey,
        defaultMode,
        storageWindow
      });
      let mode = stateMode;
      let colorScheme = stateColorScheme;
      if (nested2) {
        mode = ctx.mode;
        colorScheme = ctx.colorScheme;
      }
      const calculatedMode = (() => {
        if (mode) {
          return mode;
        }
        if (defaultMode === "system") {
          return designSystemMode;
        }
        return defaultMode;
      })();
      const calculatedColorScheme = (() => {
        if (!colorScheme) {
          if (calculatedMode === "dark") {
            return defaultDarkColorScheme2;
          }
          return defaultLightColorScheme2;
        }
        return colorScheme;
      })();
      const {
        css: rootCss,
        vars: rootVars
      } = generateCssVars();
      const theme = _extends$2({}, restThemeProp, {
        components,
        colorSchemes,
        cssVarPrefix,
        vars: rootVars,
        getColorSchemeSelector: (targetColorScheme) => `[${attribute}="${targetColorScheme}"] &`
      });
      const defaultColorSchemeStyleSheet = {};
      const otherColorSchemesStyleSheet = {};
      Object.entries(colorSchemes).forEach(([key, scheme]) => {
        const {
          css,
          vars
        } = generateCssVars(key);
        theme.vars = deepmerge(theme.vars, vars);
        if (key === calculatedColorScheme) {
          Object.keys(scheme).forEach((schemeKey) => {
            if (scheme[schemeKey] && typeof scheme[schemeKey] === "object") {
              theme[schemeKey] = _extends$2({}, theme[schemeKey], scheme[schemeKey]);
            } else {
              theme[schemeKey] = scheme[schemeKey];
            }
          });
          if (theme.palette) {
            theme.palette.colorScheme = key;
          }
        }
        const resolvedDefaultColorScheme = (() => {
          if (typeof defaultColorScheme === "string") {
            return defaultColorScheme;
          }
          if (defaultMode === "dark") {
            return defaultColorScheme.dark;
          }
          return defaultColorScheme.light;
        })();
        if (key === resolvedDefaultColorScheme) {
          if (excludeVariablesFromRoot2) {
            const excludedVariables = {};
            excludeVariablesFromRoot2(cssVarPrefix).forEach((cssVar) => {
              excludedVariables[cssVar] = css[cssVar];
              delete css[cssVar];
            });
            defaultColorSchemeStyleSheet[`[${attribute}="${key}"]`] = excludedVariables;
          }
          defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}="${key}"]`] = css;
        } else {
          otherColorSchemesStyleSheet[`${colorSchemeSelector === ":root" ? "" : colorSchemeSelector}[${attribute}="${key}"]`] = css;
        }
      });
      theme.vars = deepmerge(theme.vars, rootVars);
      React__namespace.useEffect(() => {
        if (colorScheme && colorSchemeNode) {
          colorSchemeNode.setAttribute(attribute, colorScheme);
        }
      }, [colorScheme, attribute, colorSchemeNode]);
      React__namespace.useEffect(() => {
        let timer;
        if (disableTransitionOnChange && hasMounted.current && documentNode) {
          const css = documentNode.createElement("style");
          css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));
          documentNode.head.appendChild(css);
          (() => window.getComputedStyle(documentNode.body))();
          timer = setTimeout(() => {
            documentNode.head.removeChild(css);
          }, 1);
        }
        return () => {
          clearTimeout(timer);
        };
      }, [colorScheme, disableTransitionOnChange, documentNode]);
      React__namespace.useEffect(() => {
        hasMounted.current = true;
        return () => {
          hasMounted.current = false;
        };
      }, []);
      const contextValue = React__namespace.useMemo(() => ({
        mode,
        systemMode,
        setMode,
        lightColorScheme,
        darkColorScheme,
        colorScheme,
        setColorScheme,
        allColorSchemes
      }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);
      let shouldGenerateStyleSheet = true;
      if (disableStyleSheetGeneration || nested2 && (upperTheme == null ? void 0 : upperTheme.cssVarPrefix) === cssVarPrefix) {
        shouldGenerateStyleSheet = false;
      }
      const element = /* @__PURE__ */ jsxRuntimeExports.jsxs(React__namespace.Fragment, {
        children: [shouldGenerateStyleSheet && /* @__PURE__ */ jsxRuntimeExports.jsxs(React__namespace.Fragment, {
          children: [/* @__PURE__ */ jsxRuntimeExports.jsx(GlobalStyles$2, {
            styles: {
              [colorSchemeSelector]: rootCss
            }
          }), /* @__PURE__ */ jsxRuntimeExports.jsx(GlobalStyles$2, {
            styles: defaultColorSchemeStyleSheet
          }), /* @__PURE__ */ jsxRuntimeExports.jsx(GlobalStyles$2, {
            styles: otherColorSchemesStyleSheet
          })]
        }), /* @__PURE__ */ jsxRuntimeExports.jsx(ThemeProvider, {
          themeId: scopedTheme ? themeId : void 0,
          theme: resolveTheme2 ? resolveTheme2(theme) : theme,
          children
        })]
      });
      if (nested2) {
        return element;
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsx(ColorSchemeContext.Provider, {
        value: contextValue,
        children: element
      });
    }
    process.env.NODE_ENV !== "production" ? CssVarsProvider2.propTypes = {
      /**
       * The body attribute name to attach colorScheme.
       */
      attribute: PropTypes.string,
      /**
       * The component tree.
       */
      children: PropTypes.node,
      /**
       * The node used to attach the color-scheme attribute
       */
      colorSchemeNode: PropTypes.any,
      /**
       * The CSS selector for attaching the generated custom properties
       */
      colorSchemeSelector: PropTypes.string,
      /**
       * localStorage key used to store `colorScheme`
       */
      colorSchemeStorageKey: PropTypes.string,
      /**
       * The initial color scheme used.
       */
      defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),
      /**
       * The initial mode used.
       */
      defaultMode: PropTypes.string,
      /**
       * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.
       */
      disableNestedContext: PropTypes.bool,
      /**
       * If `true`, the style sheet won't be generated.
       *
       * This is useful for controlling nested CssVarsProvider behavior.
       */
      disableStyleSheetGeneration: PropTypes.bool,
      /**
       * Disable CSS transitions when switching between modes or color schemes.
       */
      disableTransitionOnChange: PropTypes.bool,
      /**
       * The document to attach the attribute to.
       */
      documentNode: PropTypes.any,
      /**
       * The key in the local storage used to store current color scheme.
       */
      modeStorageKey: PropTypes.string,
      /**
       * The window that attaches the 'storage' event listener.
       * @default window
       */
      storageWindow: PropTypes.any,
      /**
       * The calculated theme object that will be passed through context.
       */
      theme: PropTypes.object
    } : void 0;
    const defaultLightColorScheme = typeof designSystemColorScheme === "string" ? designSystemColorScheme : designSystemColorScheme.light;
    const defaultDarkColorScheme = typeof designSystemColorScheme === "string" ? designSystemColorScheme : designSystemColorScheme.dark;
    const getInitColorSchemeScript2 = (params) => getInitColorSchemeScript$1(_extends$2({
      attribute: defaultAttribute,
      colorSchemeStorageKey: defaultColorSchemeStorageKey,
      defaultMode: designSystemMode,
      defaultLightColorScheme,
      defaultDarkColorScheme,
      modeStorageKey: defaultModeStorageKey
    }, params));
    return {
      CssVarsProvider: CssVarsProvider2,
      useColorScheme: useColorScheme2,
      getInitColorSchemeScript: getInitColorSchemeScript2
    };
  }
  function createGetCssVar$1(prefix2 = "") {
    function appendVar(...vars) {
      if (!vars.length) {
        return "";
      }
      const value = vars[0];
      if (typeof value === "string" && !value.match(/(#|\(|\)|(-?(\d*\.)?\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\d*\.)?\d+)$|(\d+ \d+ \d+)/)) {
        return `, var(--${prefix2 ? `${prefix2}-` : ""}${value}${appendVar(...vars.slice(1))})`;
      }
      return `, ${value}`;
    }
    const getCssVar = (field, ...fallbacks) => {
      return `var(--${prefix2 ? `${prefix2}-` : ""}${field}${appendVar(...fallbacks)})`;
    };
    return getCssVar;
  }
  const assignNestedKeys = (obj, keys, value, arrayKeys = []) => {
    let temp = obj;
    keys.forEach((k, index2) => {
      if (index2 === keys.length - 1) {
        if (Array.isArray(temp)) {
          temp[Number(k)] = value;
        } else if (temp && typeof temp === "object") {
          temp[k] = value;
        }
      } else if (temp && typeof temp === "object") {
        if (!temp[k]) {
          temp[k] = arrayKeys.includes(k) ? [] : {};
        }
        temp = temp[k];
      }
    });
  };
  const walkObjectDeep = (obj, callback, shouldSkipPaths) => {
    function recurse(object, parentKeys = [], arrayKeys = []) {
      Object.entries(object).forEach(([key, value]) => {
        if (!shouldSkipPaths || shouldSkipPaths && !shouldSkipPaths([...parentKeys, key])) {
          if (value !== void 0 && value !== null) {
            if (typeof value === "object" && Object.keys(value).length > 0) {
              recurse(value, [...parentKeys, key], Array.isArray(value) ? [...arrayKeys, key] : arrayKeys);
            } else {
              callback([...parentKeys, key], value, arrayKeys);
            }
          }
        }
      });
    }
    recurse(obj);
  };
  const getCssValue = (keys, value) => {
    if (typeof value === "number") {
      if (["lineHeight", "fontWeight", "opacity", "zIndex"].some((prop) => keys.includes(prop))) {
        return value;
      }
      const lastKey = keys[keys.length - 1];
      if (lastKey.toLowerCase().indexOf("opacity") >= 0) {
        return value;
      }
      return `${value}px`;
    }
    return value;
  };
  function cssVarsParser(theme, options) {
    const {
      prefix: prefix2,
      shouldSkipGeneratingVar: shouldSkipGeneratingVar2
    } = options || {};
    const css = {};
    const vars = {};
    const varsWithDefaults = {};
    walkObjectDeep(
      theme,
      (keys, value, arrayKeys) => {
        if (typeof value === "string" || typeof value === "number") {
          if (!shouldSkipGeneratingVar2 || !shouldSkipGeneratingVar2(keys, value)) {
            const cssVar = `--${prefix2 ? `${prefix2}-` : ""}${keys.join("-")}`;
            Object.assign(css, {
              [cssVar]: getCssValue(keys, value)
            });
            assignNestedKeys(vars, keys, `var(${cssVar})`, arrayKeys);
            assignNestedKeys(varsWithDefaults, keys, `var(${cssVar}, ${value})`, arrayKeys);
          }
        }
      },
      (keys) => keys[0] === "vars"
      // skip 'vars/*' paths
    );
    return {
      css,
      vars,
      varsWithDefaults
    };
  }
  const _excluded$1d = ["colorSchemes", "components"], _excluded2$5 = ["light"];
  function prepareCssVars(theme, parserConfig) {
    const {
      colorSchemes = {}
    } = theme, otherTheme = _objectWithoutPropertiesLoose(theme, _excluded$1d);
    const {
      vars: rootVars,
      css: rootCss,
      varsWithDefaults: rootVarsWithDefaults
    } = cssVarsParser(otherTheme, parserConfig);
    let themeVars = rootVarsWithDefaults;
    const colorSchemesMap = {};
    const {
      light: light2
    } = colorSchemes, otherColorSchemes = _objectWithoutPropertiesLoose(colorSchemes, _excluded2$5);
    Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {
      const {
        vars,
        css,
        varsWithDefaults
      } = cssVarsParser(scheme, parserConfig);
      themeVars = deepmerge(themeVars, varsWithDefaults);
      colorSchemesMap[key] = {
        css,
        vars
      };
    });
    if (light2) {
      const {
        css,
        vars,
        varsWithDefaults
      } = cssVarsParser(light2, parserConfig);
      themeVars = deepmerge(themeVars, varsWithDefaults);
      colorSchemesMap.light = {
        css,
        vars
      };
    }
    const generateCssVars = (colorScheme) => {
      if (!colorScheme) {
        return {
          css: _extends$2({}, rootCss),
          vars: rootVars
        };
      }
      return {
        css: _extends$2({}, colorSchemesMap[colorScheme].css),
        vars: colorSchemesMap[colorScheme].vars
      };
    };
    return {
      vars: themeVars,
      generateCssVars
    };
  }
  const _excluded$1c = ["cssVarPrefix", "shouldSkipGeneratingVar"];
  function createCssVarsTheme(theme) {
    const {
      cssVarPrefix,
      shouldSkipGeneratingVar: shouldSkipGeneratingVar2
    } = theme, otherTheme = _objectWithoutPropertiesLoose(theme, _excluded$1c);
    return _extends$2({}, theme, prepareCssVars(otherTheme, {
      prefix: cssVarPrefix,
      shouldSkipGeneratingVar: shouldSkipGeneratingVar2
    }));
  }
  const _excluded$1b = ["className", "component", "disableGutters", "fixed", "maxWidth", "classes"];
  const defaultTheme$5 = createTheme$1();
  const defaultCreateStyledComponent$2 = styled$1("div", {
    name: "MuiContainer",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, styles2[`maxWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fixed && styles2.fixed, ownerState.disableGutters && styles2.disableGutters];
    }
  });
  const useThemePropsDefault$2 = (inProps) => useThemeProps$1({
    props: inProps,
    name: "MuiContainer",
    defaultTheme: defaultTheme$5
  });
  const useUtilityClasses$V = (ownerState, componentName) => {
    const getContainerUtilityClass2 = (slot) => {
      return generateUtilityClass(componentName, slot);
    };
    const {
      classes,
      fixed,
      disableGutters,
      maxWidth: maxWidth2
    } = ownerState;
    const slots = {
      root: ["root", maxWidth2 && `maxWidth${capitalize(String(maxWidth2))}`, fixed && "fixed", disableGutters && "disableGutters"]
    };
    return composeClasses(slots, getContainerUtilityClass2, classes);
  };
  function createContainer(options = {}) {
    const {
      // This will allow adding custom styled fn (for example for custom sx style function)
      createStyledComponent = defaultCreateStyledComponent$2,
      useThemeProps: useThemeProps2 = useThemePropsDefault$2,
      componentName = "MuiContainer"
    } = options;
    const ContainerRoot = createStyledComponent(({
      theme,
      ownerState
    }) => _extends$2({
      width: "100%",
      marginLeft: "auto",
      boxSizing: "border-box",
      marginRight: "auto",
      display: "block"
    }, !ownerState.disableGutters && {
      paddingLeft: theme.spacing(2),
      paddingRight: theme.spacing(2),
      // @ts-ignore module augmentation fails if custom breakpoints are used
      [theme.breakpoints.up("sm")]: {
        paddingLeft: theme.spacing(3),
        paddingRight: theme.spacing(3)
      }
    }), ({
      theme,
      ownerState
    }) => ownerState.fixed && Object.keys(theme.breakpoints.values).reduce((acc, breakpointValueKey) => {
      const breakpoint = breakpointValueKey;
      const value = theme.breakpoints.values[breakpoint];
      if (value !== 0) {
        acc[theme.breakpoints.up(breakpoint)] = {
          maxWidth: `${value}${theme.breakpoints.unit}`
        };
      }
      return acc;
    }, {}), ({
      theme,
      ownerState
    }) => _extends$2({}, ownerState.maxWidth === "xs" && {
      // @ts-ignore module augmentation fails if custom breakpoints are used
      [theme.breakpoints.up("xs")]: {
        // @ts-ignore module augmentation fails if custom breakpoints are used
        maxWidth: Math.max(theme.breakpoints.values.xs, 444)
      }
    }, ownerState.maxWidth && // @ts-ignore module augmentation fails if custom breakpoints are used
    ownerState.maxWidth !== "xs" && {
      // @ts-ignore module augmentation fails if custom breakpoints are used
      [theme.breakpoints.up(ownerState.maxWidth)]: {
        // @ts-ignore module augmentation fails if custom breakpoints are used
        maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`
      }
    }));
    const Container2 = /* @__PURE__ */ React__namespace.forwardRef(function Container3(inProps, ref) {
      const props = useThemeProps2(inProps);
      const {
        className,
        component = "div",
        disableGutters = false,
        fixed = false,
        maxWidth: maxWidth2 = "lg"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1b);
      const ownerState = _extends$2({}, props, {
        component,
        disableGutters,
        fixed,
        maxWidth: maxWidth2
      });
      const classes = useUtilityClasses$V(ownerState, componentName);
      return (
        // @ts-ignore theme is injected by the styled util
        /* @__PURE__ */ jsxRuntimeExports.jsx(ContainerRoot, _extends$2({
          as: component,
          ownerState,
          className: clsx(classes.root, className),
          ref
        }, other))
      );
    });
    process.env.NODE_ENV !== "production" ? Container2.propTypes = {
      children: PropTypes.node,
      classes: PropTypes.object,
      className: PropTypes.string,
      component: PropTypes.elementType,
      disableGutters: PropTypes.bool,
      fixed: PropTypes.bool,
      maxWidth: PropTypes.oneOfType([PropTypes.oneOf(["xs", "sm", "md", "lg", "xl", false]), PropTypes.string]),
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } : void 0;
    return Container2;
  }
  "use client";
  const Container$1 = createContainer();
  process.env.NODE_ENV !== "production" ? Container$1.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, the left and right padding is removed.
     * @default false
     */
    disableGutters: PropTypes.bool,
    /**
     * Set the max-width to match the min-width of the current breakpoint.
     * This is useful if you'd prefer to design for a fixed set of sizes
     * instead of trying to accommodate a fully fluid viewport.
     * It's fluid by default.
     * @default false
     */
    fixed: PropTypes.bool,
    /**
     * Determine the max-width of the container.
     * The container width grows with the size of the screen.
     * Set to `false` to disable `maxWidth`.
     * @default 'lg'
     */
    maxWidth: PropTypes.oneOfType([PropTypes.oneOf(["xs", "sm", "md", "lg", "xl", false]), PropTypes.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  function getContainerUtilityClass$1(slot) {
    return generateUtilityClass("MuiContainer", slot);
  }
  const containerClasses$1 = generateUtilityClasses("MuiContainer", ["root", "disableGutters", "fixed", "maxWidthXs", "maxWidthSm", "maxWidthMd", "maxWidthLg", "maxWidthXl"]);
  "use client";
  const filterBreakpointKeys = (breakpointsKeys, responsiveKeys) => breakpointsKeys.filter((key) => responsiveKeys.includes(key));
  const traverseBreakpoints = (breakpoints2, responsive, iterator) => {
    const smallestBreakpoint = breakpoints2.keys[0];
    if (Array.isArray(responsive)) {
      responsive.forEach((breakpointValue, index2) => {
        iterator((responsiveStyles, style2) => {
          if (index2 <= breakpoints2.keys.length - 1) {
            if (index2 === 0) {
              Object.assign(responsiveStyles, style2);
            } else {
              responsiveStyles[breakpoints2.up(breakpoints2.keys[index2])] = style2;
            }
          }
        }, breakpointValue);
      });
    } else if (responsive && typeof responsive === "object") {
      const keys = Object.keys(responsive).length > breakpoints2.keys.length ? breakpoints2.keys : filterBreakpointKeys(breakpoints2.keys, Object.keys(responsive));
      keys.forEach((key) => {
        if (breakpoints2.keys.indexOf(key) !== -1) {
          const breakpointValue = responsive[key];
          if (breakpointValue !== void 0) {
            iterator((responsiveStyles, style2) => {
              if (smallestBreakpoint === key) {
                Object.assign(responsiveStyles, style2);
              } else {
                responsiveStyles[breakpoints2.up(key)] = style2;
              }
            }, breakpointValue);
          }
        }
      });
    } else if (typeof responsive === "number" || typeof responsive === "string") {
      iterator((responsiveStyles, style2) => {
        Object.assign(responsiveStyles, style2);
      }, responsive);
    }
  };
  function appendLevel(level) {
    if (!level) {
      return "";
    }
    return `Level${level}`;
  }
  function isNestedContainer(ownerState) {
    return ownerState.unstable_level > 0 && ownerState.container;
  }
  function createGetSelfSpacing(ownerState) {
    return function getSelfSpacing(axis) {
      return `var(--Grid-${axis}Spacing${appendLevel(ownerState.unstable_level)})`;
    };
  }
  function createGetParentSpacing(ownerState) {
    return function getParentSpacing(axis) {
      if (ownerState.unstable_level === 0) {
        return `var(--Grid-${axis}Spacing)`;
      }
      return `var(--Grid-${axis}Spacing${appendLevel(ownerState.unstable_level - 1)})`;
    };
  }
  function getParentColumns(ownerState) {
    if (ownerState.unstable_level === 0) {
      return `var(--Grid-columns)`;
    }
    return `var(--Grid-columns${appendLevel(ownerState.unstable_level - 1)})`;
  }
  const generateGridSizeStyles = ({
    theme,
    ownerState
  }) => {
    const getSelfSpacing = createGetSelfSpacing(ownerState);
    const styles2 = {};
    traverseBreakpoints(theme.breakpoints, ownerState.gridSize, (appendStyle, value) => {
      let style2 = {};
      if (value === true) {
        style2 = {
          flexBasis: 0,
          flexGrow: 1,
          maxWidth: "100%"
        };
      }
      if (value === "auto") {
        style2 = {
          flexBasis: "auto",
          flexGrow: 0,
          flexShrink: 0,
          maxWidth: "none",
          width: "auto"
        };
      }
      if (typeof value === "number") {
        style2 = {
          flexGrow: 0,
          flexBasis: "auto",
          width: `calc(100% * ${value} / ${getParentColumns(ownerState)}${isNestedContainer(ownerState) ? ` + ${getSelfSpacing("column")}` : ""})`
        };
      }
      appendStyle(styles2, style2);
    });
    return styles2;
  };
  const generateGridOffsetStyles = ({
    theme,
    ownerState
  }) => {
    const styles2 = {};
    traverseBreakpoints(theme.breakpoints, ownerState.gridOffset, (appendStyle, value) => {
      let style2 = {};
      if (value === "auto") {
        style2 = {
          marginLeft: "auto"
        };
      }
      if (typeof value === "number") {
        style2 = {
          marginLeft: value === 0 ? "0px" : `calc(100% * ${value} / ${getParentColumns(ownerState)})`
        };
      }
      appendStyle(styles2, style2);
    });
    return styles2;
  };
  const generateGridColumnsStyles = ({
    theme,
    ownerState
  }) => {
    if (!ownerState.container) {
      return {};
    }
    const styles2 = isNestedContainer(ownerState) ? {
      [`--Grid-columns${appendLevel(ownerState.unstable_level)}`]: getParentColumns(ownerState)
    } : {
      "--Grid-columns": 12
    };
    traverseBreakpoints(theme.breakpoints, ownerState.columns, (appendStyle, value) => {
      appendStyle(styles2, {
        [`--Grid-columns${appendLevel(ownerState.unstable_level)}`]: value
      });
    });
    return styles2;
  };
  const generateGridRowSpacingStyles = ({
    theme,
    ownerState
  }) => {
    if (!ownerState.container) {
      return {};
    }
    const getParentSpacing = createGetParentSpacing(ownerState);
    const styles2 = isNestedContainer(ownerState) ? {
      // Set the default spacing as its parent spacing.
      // It will be overridden if spacing props are provided
      [`--Grid-rowSpacing${appendLevel(ownerState.unstable_level)}`]: getParentSpacing("row")
    } : {};
    traverseBreakpoints(theme.breakpoints, ownerState.rowSpacing, (appendStyle, value) => {
      var _theme$spacing;
      appendStyle(styles2, {
        [`--Grid-rowSpacing${appendLevel(ownerState.unstable_level)}`]: typeof value === "string" ? value : (_theme$spacing = theme.spacing) == null ? void 0 : _theme$spacing.call(theme, value)
      });
    });
    return styles2;
  };
  const generateGridColumnSpacingStyles = ({
    theme,
    ownerState
  }) => {
    if (!ownerState.container) {
      return {};
    }
    const getParentSpacing = createGetParentSpacing(ownerState);
    const styles2 = isNestedContainer(ownerState) ? {
      // Set the default spacing as its parent spacing.
      // It will be overridden if spacing props are provided
      [`--Grid-columnSpacing${appendLevel(ownerState.unstable_level)}`]: getParentSpacing("column")
    } : {};
    traverseBreakpoints(theme.breakpoints, ownerState.columnSpacing, (appendStyle, value) => {
      var _theme$spacing2;
      appendStyle(styles2, {
        [`--Grid-columnSpacing${appendLevel(ownerState.unstable_level)}`]: typeof value === "string" ? value : (_theme$spacing2 = theme.spacing) == null ? void 0 : _theme$spacing2.call(theme, value)
      });
    });
    return styles2;
  };
  const generateGridDirectionStyles = ({
    theme,
    ownerState
  }) => {
    if (!ownerState.container) {
      return {};
    }
    const styles2 = {};
    traverseBreakpoints(theme.breakpoints, ownerState.direction, (appendStyle, value) => {
      appendStyle(styles2, {
        flexDirection: value
      });
    });
    return styles2;
  };
  const generateGridStyles = ({
    ownerState
  }) => {
    const getSelfSpacing = createGetSelfSpacing(ownerState);
    const getParentSpacing = createGetParentSpacing(ownerState);
    return _extends$2({
      minWidth: 0,
      boxSizing: "border-box"
    }, ownerState.container && _extends$2({
      display: "flex",
      flexWrap: "wrap"
    }, ownerState.wrap && ownerState.wrap !== "wrap" && {
      flexWrap: ownerState.wrap
    }, {
      margin: `calc(${getSelfSpacing("row")} / -2) calc(${getSelfSpacing("column")} / -2)`
    }, ownerState.disableEqualOverflow && {
      margin: `calc(${getSelfSpacing("row")} * -1) 0px 0px calc(${getSelfSpacing("column")} * -1)`
    }), (!ownerState.container || isNestedContainer(ownerState)) && _extends$2({
      padding: `calc(${getParentSpacing("row")} / 2) calc(${getParentSpacing("column")} / 2)`
    }, (ownerState.disableEqualOverflow || ownerState.parentDisableEqualOverflow) && {
      padding: `${getParentSpacing("row")} 0px 0px ${getParentSpacing("column")}`
    }));
  };
  const generateSizeClassNames = (gridSize) => {
    const classNames = [];
    Object.entries(gridSize).forEach(([key, value]) => {
      if (value !== false && value !== void 0) {
        classNames.push(`grid-${key}-${String(value)}`);
      }
    });
    return classNames;
  };
  const generateSpacingClassNames = (spacing2, smallestBreakpoint = "xs") => {
    function isValidSpacing(val) {
      if (val === void 0) {
        return false;
      }
      return typeof val === "string" && !Number.isNaN(Number(val)) || typeof val === "number" && val > 0;
    }
    if (isValidSpacing(spacing2)) {
      return [`spacing-${smallestBreakpoint}-${String(spacing2)}`];
    }
    if (typeof spacing2 === "object" && !Array.isArray(spacing2)) {
      const classNames = [];
      Object.entries(spacing2).forEach(([key, value]) => {
        if (isValidSpacing(value)) {
          classNames.push(`spacing-${key}-${String(value)}`);
        }
      });
      return classNames;
    }
    return [];
  };
  const generateDirectionClasses = (direction) => {
    if (direction === void 0) {
      return [];
    }
    if (typeof direction === "object") {
      return Object.entries(direction).map(([key, value]) => `direction-${key}-${value}`);
    }
    return [`direction-xs-${String(direction)}`];
  };
  const _excluded$1a = ["className", "children", "columns", "container", "component", "direction", "wrap", "spacing", "rowSpacing", "columnSpacing", "disableEqualOverflow", "unstable_level"];
  const defaultTheme$4 = createTheme$1();
  const defaultCreateStyledComponent$1 = styled$1("div", {
    name: "MuiGrid",
    slot: "Root",
    overridesResolver: (props, styles2) => styles2.root
  });
  function useThemePropsDefault$1(props) {
    return useThemeProps$1({
      props,
      name: "MuiGrid",
      defaultTheme: defaultTheme$4
    });
  }
  function createGrid(options = {}) {
    const {
      // This will allow adding custom styled fn (for example for custom sx style function)
      createStyledComponent = defaultCreateStyledComponent$1,
      useThemeProps: useThemeProps2 = useThemePropsDefault$1,
      componentName = "MuiGrid"
    } = options;
    const OverflowContext = /* @__PURE__ */ React__namespace.createContext(void 0);
    const useUtilityClasses2 = (ownerState, theme) => {
      const {
        container,
        direction,
        spacing: spacing2,
        wrap,
        gridSize
      } = ownerState;
      const slots = {
        root: ["root", container && "container", wrap !== "wrap" && `wrap-xs-${String(wrap)}`, ...generateDirectionClasses(direction), ...generateSizeClassNames(gridSize), ...container ? generateSpacingClassNames(spacing2, theme.breakpoints.keys[0]) : []]
      };
      return composeClasses(slots, (slot) => generateUtilityClass(componentName, slot), {});
    };
    const GridRoot = createStyledComponent(generateGridColumnsStyles, generateGridColumnSpacingStyles, generateGridRowSpacingStyles, generateGridSizeStyles, generateGridDirectionStyles, generateGridStyles, generateGridOffsetStyles);
    const Grid2 = /* @__PURE__ */ React__namespace.forwardRef(function Grid3(inProps, ref) {
      var _inProps$columns, _inProps$spacing, _ref, _inProps$rowSpacing, _ref2, _inProps$columnSpacin, _ref3, _disableEqualOverflow;
      const theme = useTheme$2();
      const themeProps = useThemeProps2(inProps);
      const props = extendSxProp(themeProps);
      const overflow2 = React__namespace.useContext(OverflowContext);
      const {
        className,
        children,
        columns: columnsProp = 12,
        container = false,
        component = "div",
        direction = "row",
        wrap = "wrap",
        spacing: spacingProp = 0,
        rowSpacing: rowSpacingProp = spacingProp,
        columnSpacing: columnSpacingProp = spacingProp,
        disableEqualOverflow: themeDisableEqualOverflow,
        unstable_level: level = 0
      } = props, rest = _objectWithoutPropertiesLoose(props, _excluded$1a);
      let disableEqualOverflow = themeDisableEqualOverflow;
      if (level && themeDisableEqualOverflow !== void 0) {
        disableEqualOverflow = inProps.disableEqualOverflow;
      }
      const gridSize = {};
      const gridOffset = {};
      const other = {};
      Object.entries(rest).forEach(([key, val]) => {
        if (theme.breakpoints.values[key] !== void 0) {
          gridSize[key] = val;
        } else if (theme.breakpoints.values[key.replace("Offset", "")] !== void 0) {
          gridOffset[key.replace("Offset", "")] = val;
        } else {
          other[key] = val;
        }
      });
      const columns = (_inProps$columns = inProps.columns) != null ? _inProps$columns : level ? void 0 : columnsProp;
      const spacing2 = (_inProps$spacing = inProps.spacing) != null ? _inProps$spacing : level ? void 0 : spacingProp;
      const rowSpacing = (_ref = (_inProps$rowSpacing = inProps.rowSpacing) != null ? _inProps$rowSpacing : inProps.spacing) != null ? _ref : level ? void 0 : rowSpacingProp;
      const columnSpacing = (_ref2 = (_inProps$columnSpacin = inProps.columnSpacing) != null ? _inProps$columnSpacin : inProps.spacing) != null ? _ref2 : level ? void 0 : columnSpacingProp;
      const ownerState = _extends$2({}, props, {
        level,
        columns,
        container,
        direction,
        wrap,
        spacing: spacing2,
        rowSpacing,
        columnSpacing,
        gridSize,
        gridOffset,
        disableEqualOverflow: (_ref3 = (_disableEqualOverflow = disableEqualOverflow) != null ? _disableEqualOverflow : overflow2) != null ? _ref3 : false,
        // use context value if exists.
        parentDisableEqualOverflow: overflow2
        // for nested grid
      });
      const classes = useUtilityClasses2(ownerState, theme);
      let result = /* @__PURE__ */ jsxRuntimeExports.jsx(GridRoot, _extends$2({
        ref,
        as: component,
        ownerState,
        className: clsx(classes.root, className)
      }, other, {
        children: React__namespace.Children.map(children, (child) => {
          if (/* @__PURE__ */ React__namespace.isValidElement(child) && isMuiElement(child, ["Grid"])) {
            var _child$props$unstable;
            return /* @__PURE__ */ React__namespace.cloneElement(child, {
              unstable_level: (_child$props$unstable = child.props.unstable_level) != null ? _child$props$unstable : level + 1
            });
          }
          return child;
        })
      }));
      if (disableEqualOverflow !== void 0 && disableEqualOverflow !== (overflow2 != null ? overflow2 : false)) {
        result = /* @__PURE__ */ jsxRuntimeExports.jsx(OverflowContext.Provider, {
          value: disableEqualOverflow,
          children: result
        });
      }
      return result;
    });
    process.env.NODE_ENV !== "production" ? Grid2.propTypes = {
      children: PropTypes.node,
      className: PropTypes.string,
      columns: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number, PropTypes.object]),
      columnSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),
      component: PropTypes.elementType,
      container: PropTypes.bool,
      direction: PropTypes.oneOfType([PropTypes.oneOf(["column-reverse", "column", "row-reverse", "row"]), PropTypes.arrayOf(PropTypes.oneOf(["column-reverse", "column", "row-reverse", "row"])), PropTypes.object]),
      disableEqualOverflow: PropTypes.bool,
      lg: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number, PropTypes.bool]),
      lgOffset: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number]),
      md: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number, PropTypes.bool]),
      mdOffset: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number]),
      rowSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),
      sm: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number, PropTypes.bool]),
      smOffset: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number]),
      spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
      wrap: PropTypes.oneOf(["nowrap", "wrap-reverse", "wrap"]),
      xl: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number, PropTypes.bool]),
      xlOffset: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number]),
      xs: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number, PropTypes.bool]),
      xsOffset: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number])
    } : void 0;
    Grid2.muiName = "Grid";
    return Grid2;
  }
  "use client";
  const Grid = createGrid();
  process.env.NODE_ENV !== "production" ? Grid.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * The number of columns.
     * @default 12
     */
    columns: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number, PropTypes.object]),
    /**
     * Defines the horizontal space between the type `item` components.
     * It overrides the value of the `spacing` prop.
     */
    columnSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),
    /**
     * If `true`, the component will have the flex *container* behavior.
     * You should be wrapping *items* with a *container*.
     * @default false
     */
    container: PropTypes.bool,
    /**
     * Defines the `flex-direction` style property.
     * It is applied for all screen sizes.
     * @default 'row'
     */
    direction: PropTypes.oneOfType([PropTypes.oneOf(["column-reverse", "column", "row-reverse", "row"]), PropTypes.arrayOf(PropTypes.oneOf(["column-reverse", "column", "row-reverse", "row"])), PropTypes.object]),
    /**
     * If `true`, the negative margin and padding are apply only to the top and left sides of the grid.
     */
    disableEqualOverflow: PropTypes.bool,
    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for the `lg` breakpoint and wider screens if not overridden.
     * @default false
     */
    lg: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number, PropTypes.bool]),
    /**
     * If a number, it sets the margin-left equals to the number of columns the grid item uses.
     * If 'auto', the grid item push itself to the right-end of the container.
     * The value is applied for the `lg` breakpoint and wider screens if not overridden.
     */
    lgOffset: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number]),
    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for the `md` breakpoint and wider screens if not overridden.
     * @default false
     */
    md: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number, PropTypes.bool]),
    /**
     * If a number, it sets the margin-left equals to the number of columns the grid item uses.
     * If 'auto', the grid item push itself to the right-end of the container.
     * The value is applied for the `md` breakpoint and wider screens if not overridden.
     */
    mdOffset: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number]),
    /**
     * Defines the vertical space between the type `item` components.
     * It overrides the value of the `spacing` prop.
     */
    rowSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),
    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for the `sm` breakpoint and wider screens if not overridden.
     * @default false
     */
    sm: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number, PropTypes.bool]),
    /**
     * If a number, it sets the margin-left equals to the number of columns the grid item uses.
     * If 'auto', the grid item push itself to the right-end of the container.
     * The value is applied for the `sm` breakpoint and wider screens if not overridden.
     */
    smOffset: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number]),
    /**
     * Defines the space between the type `item` components.
     * It can only be used on a type `container` component.
     * @default 0
     */
    spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),
    /**
     * @ignore
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * @internal
     * The level of the grid starts from `0`
     * and increases when the grid nests inside another grid regardless of container or item.
     *
     * ```js
     * <Grid> // level 0
     *   <Grid> // level 1
     *     <Grid> // level 2
     *   <Grid> // level 1
     * ```
     *
     * Only consecutive grid is considered nesting.
     * A grid container will start at `0` if there are non-Grid element above it.
     *
     * ```js
     * <Grid> // level 0
     *   <div>
     *     <Grid> // level 0
     *       <Grid> // level 1
     * ```
     */
    unstable_level: PropTypes.number,
    /**
     * Defines the `flex-wrap` style property.
     * It's applied for all screen sizes.
     * @default 'wrap'
     */
    wrap: PropTypes.oneOf(["nowrap", "wrap-reverse", "wrap"]),
    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for the `xl` breakpoint and wider screens if not overridden.
     * @default false
     */
    xl: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number, PropTypes.bool]),
    /**
     * If a number, it sets the margin-left equals to the number of columns the grid item uses.
     * If 'auto', the grid item push itself to the right-end of the container.
     * The value is applied for the `xl` breakpoint and wider screens if not overridden.
     */
    xlOffset: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number]),
    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for all the screen sizes with the lowest priority.
     * @default false
     */
    xs: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number, PropTypes.bool]),
    /**
     * If a number, it sets the margin-left equals to the number of columns the grid item uses.
     * If 'auto', the grid item push itself to the right-end of the container.
     * The value is applied for the `xs` breakpoint and wider screens if not overridden.
     */
    xsOffset: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number])
  } : void 0;
  function getGridUtilityClass(slot) {
    return generateUtilityClass("MuiGrid", slot);
  }
  const SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  const DIRECTIONS = ["column-reverse", "column", "row-reverse", "row"];
  const WRAPS = ["nowrap", "wrap-reverse", "wrap"];
  const GRID_SIZES = ["auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
  const gridClasses = generateUtilityClasses("MuiGrid", [
    "root",
    "container",
    "item",
    // spacings
    ...SPACINGS.map((spacing2) => `spacing-xs-${spacing2}`),
    // direction values
    ...DIRECTIONS.map((direction) => `direction-xs-${direction}`),
    // wrap values
    ...WRAPS.map((wrap) => `wrap-xs-${wrap}`),
    // grid sizes for all breakpoints
    ...GRID_SIZES.map((size) => `grid-xs-${size}`),
    ...GRID_SIZES.map((size) => `grid-sm-${size}`),
    ...GRID_SIZES.map((size) => `grid-md-${size}`),
    ...GRID_SIZES.map((size) => `grid-lg-${size}`),
    ...GRID_SIZES.map((size) => `grid-xl-${size}`)
  ]);
  "use client";
  const _excluded$19 = ["component", "direction", "spacing", "divider", "children", "className", "useFlexGap"];
  const defaultTheme$3 = createTheme$1();
  const defaultCreateStyledComponent = styled$1("div", {
    name: "MuiStack",
    slot: "Root",
    overridesResolver: (props, styles2) => styles2.root
  });
  function useThemePropsDefault(props) {
    return useThemeProps$1({
      props,
      name: "MuiStack",
      defaultTheme: defaultTheme$3
    });
  }
  function joinChildren$1(children, separator) {
    const childrenArray = React__namespace.Children.toArray(children).filter(Boolean);
    return childrenArray.reduce((output, child, index2) => {
      output.push(child);
      if (index2 < childrenArray.length - 1) {
        output.push(/* @__PURE__ */ React__namespace.cloneElement(separator, {
          key: `separator-${index2}`
        }));
      }
      return output;
    }, []);
  }
  const getSideFromDirection$1 = (direction) => {
    return {
      row: "Left",
      "row-reverse": "Right",
      column: "Top",
      "column-reverse": "Bottom"
    }[direction];
  };
  const style$1 = ({
    ownerState,
    theme
  }) => {
    let styles2 = _extends$2({
      display: "flex",
      flexDirection: "column"
    }, handleBreakpoints({
      theme
    }, resolveBreakpointValues({
      values: ownerState.direction,
      breakpoints: theme.breakpoints.values
    }), (propValue) => ({
      flexDirection: propValue
    })));
    if (ownerState.spacing) {
      const transformer = createUnarySpacing(theme);
      const base = Object.keys(theme.breakpoints.values).reduce((acc, breakpoint) => {
        if (typeof ownerState.spacing === "object" && ownerState.spacing[breakpoint] != null || typeof ownerState.direction === "object" && ownerState.direction[breakpoint] != null) {
          acc[breakpoint] = true;
        }
        return acc;
      }, {});
      const directionValues = resolveBreakpointValues({
        values: ownerState.direction,
        base
      });
      const spacingValues = resolveBreakpointValues({
        values: ownerState.spacing,
        base
      });
      if (typeof directionValues === "object") {
        Object.keys(directionValues).forEach((breakpoint, index2, breakpoints2) => {
          const directionValue = directionValues[breakpoint];
          if (!directionValue) {
            const previousDirectionValue = index2 > 0 ? directionValues[breakpoints2[index2 - 1]] : "column";
            directionValues[breakpoint] = previousDirectionValue;
          }
        });
      }
      const styleFromPropValue = (propValue, breakpoint) => {
        if (ownerState.useFlexGap) {
          return {
            gap: getValue(transformer, propValue)
          };
        }
        return {
          // The useFlexGap={false} implement relies on each child to give up control of the margin.
          // We need to reset the margin to avoid double spacing.
          "& > :not(style):not(style)": {
            margin: 0
          },
          "& > :not(style) ~ :not(style)": {
            [`margin${getSideFromDirection$1(breakpoint ? directionValues[breakpoint] : ownerState.direction)}`]: getValue(transformer, propValue)
          }
        };
      };
      styles2 = deepmerge(styles2, handleBreakpoints({
        theme
      }, spacingValues, styleFromPropValue));
    }
    styles2 = mergeBreakpointsInOrder(theme.breakpoints, styles2);
    return styles2;
  };
  function createStack(options = {}) {
    const {
      // This will allow adding custom styled fn (for example for custom sx style function)
      createStyledComponent = defaultCreateStyledComponent,
      useThemeProps: useThemeProps2 = useThemePropsDefault,
      componentName = "MuiStack"
    } = options;
    const useUtilityClasses2 = () => {
      const slots = {
        root: ["root"]
      };
      return composeClasses(slots, (slot) => generateUtilityClass(componentName, slot), {});
    };
    const StackRoot2 = createStyledComponent(style$1);
    const Stack2 = /* @__PURE__ */ React__namespace.forwardRef(function Grid2(inProps, ref) {
      const themeProps = useThemeProps2(inProps);
      const props = extendSxProp(themeProps);
      const {
        component = "div",
        direction = "column",
        spacing: spacing2 = 0,
        divider,
        children,
        className,
        useFlexGap = false
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded$19);
      const ownerState = {
        direction,
        spacing: spacing2,
        useFlexGap
      };
      const classes = useUtilityClasses2();
      return /* @__PURE__ */ jsxRuntimeExports.jsx(StackRoot2, _extends$2({
        as: component,
        ownerState,
        ref,
        className: clsx(classes.root, className)
      }, other, {
        children: divider ? joinChildren$1(children, divider) : children
      }));
    });
    process.env.NODE_ENV !== "production" ? Stack2.propTypes = {
      children: PropTypes.node,
      direction: PropTypes.oneOfType([PropTypes.oneOf(["column-reverse", "column", "row-reverse", "row"]), PropTypes.arrayOf(PropTypes.oneOf(["column-reverse", "column", "row-reverse", "row"])), PropTypes.object]),
      divider: PropTypes.node,
      spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),
      sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
    } : void 0;
    return Stack2;
  }
  "use client";
  const Stack$1 = createStack();
  process.env.NODE_ENV !== "production" ? Stack$1.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * Defines the `flex-direction` style property.
     * It is applied for all screen sizes.
     * @default 'column'
     */
    direction: PropTypes.oneOfType([PropTypes.oneOf(["column-reverse", "column", "row-reverse", "row"]), PropTypes.arrayOf(PropTypes.oneOf(["column-reverse", "column", "row-reverse", "row"])), PropTypes.object]),
    /**
     * Add an element between each child.
     */
    divider: PropTypes.node,
    /**
     * Defines the space between immediate children.
     * @default 0
     */
    spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),
    /**
     * The system prop, which allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * If `true`, the CSS flexbox `gap` is used instead of applying `margin` to children.
     *
     * While CSS `gap` removes the [known limitations](https://mui.com/joy-ui/react-stack/#limitations),
     * it is not fully supported in some browsers. We recommend checking https://caniuse.com/?search=flex%20gap before using this flag.
     *
     * To enable this flag globally, follow the theme's default props configuration.
     * @default false
     */
    useFlexGap: PropTypes.bool
  } : void 0;
  function getStackUtilityClass(slot) {
    return generateUtilityClass("MuiStack", slot);
  }
  const stackClasses = generateUtilityClasses("MuiStack", ["root"]);
  "use client";
  function experimental_sx$1() {
    throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The \`experimental_sx\` has been moved to \`theme.unstable_sx\`.For more details, see https://github.com/mui/material-ui/pull/35150.` : formatMuiErrorMessage(20));
  }
  function createMixins(breakpoints2, mixins) {
    return _extends$2({
      toolbar: {
        minHeight: 56,
        [breakpoints2.up("xs")]: {
          "@media (orientation: landscape)": {
            minHeight: 48
          }
        },
        [breakpoints2.up("sm")]: {
          minHeight: 64
        }
      }
    }, mixins);
  }
  const common = {
    black: "#000",
    white: "#fff"
  };
  const grey = {
    50: "#fafafa",
    100: "#f5f5f5",
    200: "#eeeeee",
    300: "#e0e0e0",
    400: "#bdbdbd",
    500: "#9e9e9e",
    600: "#757575",
    700: "#616161",
    800: "#424242",
    900: "#212121",
    A100: "#f5f5f5",
    A200: "#eeeeee",
    A400: "#bdbdbd",
    A700: "#616161"
  };
  const purple = {
    50: "#f3e5f5",
    100: "#e1bee7",
    200: "#ce93d8",
    300: "#ba68c8",
    400: "#ab47bc",
    500: "#9c27b0",
    600: "#8e24aa",
    700: "#7b1fa2",
    800: "#6a1b9a",
    900: "#4a148c",
    A100: "#ea80fc",
    A200: "#e040fb",
    A400: "#d500f9",
    A700: "#aa00ff"
  };
  const red = {
    50: "#ffebee",
    100: "#ffcdd2",
    200: "#ef9a9a",
    300: "#e57373",
    400: "#ef5350",
    500: "#f44336",
    600: "#e53935",
    700: "#d32f2f",
    800: "#c62828",
    900: "#b71c1c",
    A100: "#ff8a80",
    A200: "#ff5252",
    A400: "#ff1744",
    A700: "#d50000"
  };
  const orange = {
    50: "#fff3e0",
    100: "#ffe0b2",
    200: "#ffcc80",
    300: "#ffb74d",
    400: "#ffa726",
    500: "#ff9800",
    600: "#fb8c00",
    700: "#f57c00",
    800: "#ef6c00",
    900: "#e65100",
    A100: "#ffd180",
    A200: "#ffab40",
    A400: "#ff9100",
    A700: "#ff6d00"
  };
  const blue = {
    50: "#e3f2fd",
    100: "#bbdefb",
    200: "#90caf9",
    300: "#64b5f6",
    400: "#42a5f5",
    500: "#2196f3",
    600: "#1e88e5",
    700: "#1976d2",
    800: "#1565c0",
    900: "#0d47a1",
    A100: "#82b1ff",
    A200: "#448aff",
    A400: "#2979ff",
    A700: "#2962ff"
  };
  const lightBlue = {
    50: "#e1f5fe",
    100: "#b3e5fc",
    200: "#81d4fa",
    300: "#4fc3f7",
    400: "#29b6f6",
    500: "#03a9f4",
    600: "#039be5",
    700: "#0288d1",
    800: "#0277bd",
    900: "#01579b",
    A100: "#80d8ff",
    A200: "#40c4ff",
    A400: "#00b0ff",
    A700: "#0091ea"
  };
  const green = {
    50: "#e8f5e9",
    100: "#c8e6c9",
    200: "#a5d6a7",
    300: "#81c784",
    400: "#66bb6a",
    500: "#4caf50",
    600: "#43a047",
    700: "#388e3c",
    800: "#2e7d32",
    900: "#1b5e20",
    A100: "#b9f6ca",
    A200: "#69f0ae",
    A400: "#00e676",
    A700: "#00c853"
  };
  const _excluded$18 = ["mode", "contrastThreshold", "tonalOffset"];
  const light = {
    // The colors used to style the text.
    text: {
      // The most important text.
      primary: "rgba(0, 0, 0, 0.87)",
      // Secondary text.
      secondary: "rgba(0, 0, 0, 0.6)",
      // Disabled text have even lower visual prominence.
      disabled: "rgba(0, 0, 0, 0.38)"
    },
    // The color used to divide different elements.
    divider: "rgba(0, 0, 0, 0.12)",
    // The background colors used to style the surfaces.
    // Consistency between these values is important.
    background: {
      paper: common.white,
      default: common.white
    },
    // The colors used to style the action elements.
    action: {
      // The color of an active action like an icon button.
      active: "rgba(0, 0, 0, 0.54)",
      // The color of an hovered action.
      hover: "rgba(0, 0, 0, 0.04)",
      hoverOpacity: 0.04,
      // The color of a selected action.
      selected: "rgba(0, 0, 0, 0.08)",
      selectedOpacity: 0.08,
      // The color of a disabled action.
      disabled: "rgba(0, 0, 0, 0.26)",
      // The background color of a disabled action.
      disabledBackground: "rgba(0, 0, 0, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(0, 0, 0, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.12
    }
  };
  const dark = {
    text: {
      primary: common.white,
      secondary: "rgba(255, 255, 255, 0.7)",
      disabled: "rgba(255, 255, 255, 0.5)",
      icon: "rgba(255, 255, 255, 0.5)"
    },
    divider: "rgba(255, 255, 255, 0.12)",
    background: {
      paper: "#121212",
      default: "#121212"
    },
    action: {
      active: common.white,
      hover: "rgba(255, 255, 255, 0.08)",
      hoverOpacity: 0.08,
      selected: "rgba(255, 255, 255, 0.16)",
      selectedOpacity: 0.16,
      disabled: "rgba(255, 255, 255, 0.3)",
      disabledBackground: "rgba(255, 255, 255, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(255, 255, 255, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.24
    }
  };
  function addLightOrDark(intent, direction, shade, tonalOffset) {
    const tonalOffsetLight = tonalOffset.light || tonalOffset;
    const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
    if (!intent[direction]) {
      if (intent.hasOwnProperty(shade)) {
        intent[direction] = intent[shade];
      } else if (direction === "light") {
        intent.light = lighten(intent.main, tonalOffsetLight);
      } else if (direction === "dark") {
        intent.dark = darken(intent.main, tonalOffsetDark);
      }
    }
  }
  function getDefaultPrimary(mode = "light") {
    if (mode === "dark") {
      return {
        main: blue[200],
        light: blue[50],
        dark: blue[400]
      };
    }
    return {
      main: blue[700],
      light: blue[400],
      dark: blue[800]
    };
  }
  function getDefaultSecondary(mode = "light") {
    if (mode === "dark") {
      return {
        main: purple[200],
        light: purple[50],
        dark: purple[400]
      };
    }
    return {
      main: purple[500],
      light: purple[300],
      dark: purple[700]
    };
  }
  function getDefaultError(mode = "light") {
    if (mode === "dark") {
      return {
        main: red[500],
        light: red[300],
        dark: red[700]
      };
    }
    return {
      main: red[700],
      light: red[400],
      dark: red[800]
    };
  }
  function getDefaultInfo(mode = "light") {
    if (mode === "dark") {
      return {
        main: lightBlue[400],
        light: lightBlue[300],
        dark: lightBlue[700]
      };
    }
    return {
      main: lightBlue[700],
      light: lightBlue[500],
      dark: lightBlue[900]
    };
  }
  function getDefaultSuccess(mode = "light") {
    if (mode === "dark") {
      return {
        main: green[400],
        light: green[300],
        dark: green[700]
      };
    }
    return {
      main: green[800],
      light: green[500],
      dark: green[900]
    };
  }
  function getDefaultWarning(mode = "light") {
    if (mode === "dark") {
      return {
        main: orange[400],
        light: orange[300],
        dark: orange[700]
      };
    }
    return {
      main: "#ed6c02",
      // closest to orange[800] that pass 3:1.
      light: orange[500],
      dark: orange[900]
    };
  }
  function createPalette(palette2) {
    const {
      mode = "light",
      contrastThreshold = 3,
      tonalOffset = 0.2
    } = palette2, other = _objectWithoutPropertiesLoose(palette2, _excluded$18);
    const primary = palette2.primary || getDefaultPrimary(mode);
    const secondary = palette2.secondary || getDefaultSecondary(mode);
    const error = palette2.error || getDefaultError(mode);
    const info = palette2.info || getDefaultInfo(mode);
    const success = palette2.success || getDefaultSuccess(mode);
    const warning = palette2.warning || getDefaultWarning(mode);
    function getContrastText(background) {
      const contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
      if (process.env.NODE_ENV !== "production") {
        const contrast = getContrastRatio(background, contrastText);
        if (contrast < 3) {
          console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, "falls below the WCAG recommended absolute minimum contrast ratio of 3:1.", "https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join("\n"));
        }
      }
      return contrastText;
    }
    const augmentColor = ({
      color: color2,
      name,
      mainShade = 500,
      lightShade = 300,
      darkShade = 700
    }) => {
      color2 = _extends$2({}, color2);
      if (!color2.main && color2[mainShade]) {
        color2.main = color2[mainShade];
      }
      if (!color2.hasOwnProperty("main")) {
        throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.` : formatMuiErrorMessage(11, name ? ` (${name})` : "", mainShade));
      }
      if (typeof color2.main !== "string") {
        throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color2.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });` : formatMuiErrorMessage(12, name ? ` (${name})` : "", JSON.stringify(color2.main)));
      }
      addLightOrDark(color2, "light", lightShade, tonalOffset);
      addLightOrDark(color2, "dark", darkShade, tonalOffset);
      if (!color2.contrastText) {
        color2.contrastText = getContrastText(color2.main);
      }
      return color2;
    };
    const modes2 = {
      dark,
      light
    };
    if (process.env.NODE_ENV !== "production") {
      if (!modes2[mode]) {
        console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
      }
    }
    const paletteOutput = deepmerge(_extends$2({
      // A collection of common colors.
      common: _extends$2({}, common),
      // prevent mutable object.
      // The palette mode, can be light or dark.
      mode,
      // The colors used to represent primary interface elements for a user.
      primary: augmentColor({
        color: primary,
        name: "primary"
      }),
      // The colors used to represent secondary interface elements for a user.
      secondary: augmentColor({
        color: secondary,
        name: "secondary",
        mainShade: "A400",
        lightShade: "A200",
        darkShade: "A700"
      }),
      // The colors used to represent interface elements that the user should be made aware of.
      error: augmentColor({
        color: error,
        name: "error"
      }),
      // The colors used to represent potentially dangerous actions or important messages.
      warning: augmentColor({
        color: warning,
        name: "warning"
      }),
      // The colors used to present information to the user that is neutral and not necessarily important.
      info: augmentColor({
        color: info,
        name: "info"
      }),
      // The colors used to indicate the successful completion of an action that user triggered.
      success: augmentColor({
        color: success,
        name: "success"
      }),
      // The grey colors.
      grey,
      // Used by `getContrastText()` to maximize the contrast between
      // the background and the text.
      contrastThreshold,
      // Takes a background color and returns the text color that maximizes the contrast.
      getContrastText,
      // Generate a rich color object.
      augmentColor,
      // Used by the functions below to shift a color's luminance by approximately
      // two indexes within its tonal palette.
      // E.g., shift from Red 500 to Red 300 or Red 700.
      tonalOffset
    }, modes2[mode]), other);
    return paletteOutput;
  }
  const _excluded$17 = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];
  function round$1(value) {
    return Math.round(value * 1e5) / 1e5;
  }
  const caseAllCaps = {
    textTransform: "uppercase"
  };
  const defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
  function createTypography(palette2, typography2) {
    const _ref = typeof typography2 === "function" ? typography2(palette2) : typography2, {
      fontFamily: fontFamily2 = defaultFontFamily,
      // The default font size of the Material Specification.
      fontSize: fontSize2 = 14,
      // px
      fontWeightLight = 300,
      fontWeightRegular = 400,
      fontWeightMedium = 500,
      fontWeightBold = 700,
      // Tell MUI what's the font-size on the html element.
      // 16px is the default font-size used by browsers.
      htmlFontSize = 16,
      // Apply the CSS properties to all the variants.
      allVariants,
      pxToRem: pxToRem2
    } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded$17);
    if (process.env.NODE_ENV !== "production") {
      if (typeof fontSize2 !== "number") {
        console.error("MUI: `fontSize` is required to be a number.");
      }
      if (typeof htmlFontSize !== "number") {
        console.error("MUI: `htmlFontSize` is required to be a number.");
      }
    }
    const coef = fontSize2 / 14;
    const pxToRem = pxToRem2 || ((size) => `${size / htmlFontSize * coef}rem`);
    const buildVariant = (fontWeight2, size, lineHeight2, letterSpacing2, casing) => _extends$2({
      fontFamily: fontFamily2,
      fontWeight: fontWeight2,
      fontSize: pxToRem(size),
      // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
      lineHeight: lineHeight2
    }, fontFamily2 === defaultFontFamily ? {
      letterSpacing: `${round$1(letterSpacing2 / size)}em`
    } : {}, casing, allVariants);
    const variants = {
      h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
      h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
      h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
      h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
      h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
      h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
      subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
      subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
      body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
      body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
      button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
      caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
      overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps)
    };
    return deepmerge(_extends$2({
      htmlFontSize,
      pxToRem,
      fontFamily: fontFamily2,
      fontSize: fontSize2,
      fontWeightLight,
      fontWeightRegular,
      fontWeightMedium,
      fontWeightBold
    }, variants), other, {
      clone: false
      // No need to clone deep
    });
  }
  const shadowKeyUmbraOpacity = 0.2;
  const shadowKeyPenumbraOpacity = 0.14;
  const shadowAmbientShadowOpacity = 0.12;
  function createShadow(...px) {
    return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(",");
  }
  const shadows = ["none", createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
  const _excluded$16 = ["duration", "easing", "delay"];
  const easing = {
    // This is the most common easing curve.
    easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
    // Objects enter the screen at full velocity from off-screen and
    // slowly decelerate to a resting point.
    easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
    // Objects leave the screen at full velocity. They do not decelerate when off-screen.
    easeIn: "cubic-bezier(0.4, 0, 1, 1)",
    // The sharp curve is used by objects that may return to the screen at any time.
    sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
  };
  const duration = {
    shortest: 150,
    shorter: 200,
    short: 250,
    // most basic recommended timing
    standard: 300,
    // this is to be used in complex animations
    complex: 375,
    // recommended when something is entering screen
    enteringScreen: 225,
    // recommended when something is leaving screen
    leavingScreen: 195
  };
  function formatMs(milliseconds) {
    return `${Math.round(milliseconds)}ms`;
  }
  function getAutoHeightDuration(height2) {
    if (!height2) {
      return 0;
    }
    const constant = height2 / 36;
    return Math.round((4 + 15 * __pow(constant, 0.25) + constant / 5) * 10);
  }
  function createTransitions(inputTransitions) {
    const mergedEasing = _extends$2({}, easing, inputTransitions.easing);
    const mergedDuration = _extends$2({}, duration, inputTransitions.duration);
    const create = (props = ["all"], options = {}) => {
      const {
        duration: durationOption = mergedDuration.standard,
        easing: easingOption = mergedEasing.easeInOut,
        delay = 0
      } = options, other = _objectWithoutPropertiesLoose(options, _excluded$16);
      if (process.env.NODE_ENV !== "production") {
        const isString2 = (value) => typeof value === "string";
        const isNumber = (value) => !isNaN(parseFloat(value));
        if (!isString2(props) && !Array.isArray(props)) {
          console.error('MUI: Argument "props" must be a string or Array.');
        }
        if (!isNumber(durationOption) && !isString2(durationOption)) {
          console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
        }
        if (!isString2(easingOption)) {
          console.error('MUI: Argument "easing" must be a string.');
        }
        if (!isNumber(delay) && !isString2(delay)) {
          console.error('MUI: Argument "delay" must be a number or a string.');
        }
        if (Object.keys(other).length !== 0) {
          console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(",")}].`);
        }
      }
      return (Array.isArray(props) ? props : [props]).map((animatedProp) => `${animatedProp} ${typeof durationOption === "string" ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === "string" ? delay : formatMs(delay)}`).join(",");
    };
    return _extends$2({
      getAutoHeightDuration,
      create
    }, inputTransitions, {
      easing: mergedEasing,
      duration: mergedDuration
    });
  }
  const zIndex = {
    mobileStepper: 1e3,
    fab: 1050,
    speedDial: 1050,
    appBar: 1100,
    drawer: 1200,
    modal: 1300,
    snackbar: 1400,
    tooltip: 1500
  };
  const _excluded$15 = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];
  function createTheme(options = {}, ...args) {
    const {
      mixins: mixinsInput = {},
      palette: paletteInput = {},
      transitions: transitionsInput = {},
      typography: typographyInput = {}
    } = options, other = _objectWithoutPropertiesLoose(options, _excluded$15);
    if (options.vars) {
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: \`vars\` is a private field used for CSS variables support.
Please use another name.` : formatMuiErrorMessage(18));
    }
    const palette2 = createPalette(paletteInput);
    const systemTheme = createTheme$1(options);
    let muiTheme = deepmerge(systemTheme, {
      mixins: createMixins(systemTheme.breakpoints, mixinsInput),
      palette: palette2,
      // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
      shadows: shadows.slice(),
      typography: createTypography(palette2, typographyInput),
      transitions: createTransitions(transitionsInput),
      zIndex: _extends$2({}, zIndex)
    });
    muiTheme = deepmerge(muiTheme, other);
    muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
    if (process.env.NODE_ENV !== "production") {
      const stateClasses = ["active", "checked", "completed", "disabled", "error", "expanded", "focused", "focusVisible", "required", "selected"];
      const traverse = (node2, component) => {
        let key;
        for (key in node2) {
          const child = node2[key];
          if (stateClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
            if (process.env.NODE_ENV !== "production") {
              const stateClass = generateUtilityClass("", key);
              console.error([`MUI: The \`${component}\` component increases the CSS specificity of the \`${key}\` internal state.`, "You can not override it like this: ", JSON.stringify(node2, null, 2), "", `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
                root: {
                  [`&.${stateClass}`]: child
                }
              }, null, 2), "", "https://mui.com/r/state-classes-guide"].join("\n"));
            }
            node2[key] = {};
          }
        }
      };
      Object.keys(muiTheme.components).forEach((component) => {
        const styleOverrides = muiTheme.components[component].styleOverrides;
        if (styleOverrides && component.indexOf("Mui") === 0) {
          traverse(styleOverrides, component);
        }
      });
    }
    muiTheme.unstable_sxConfig = _extends$2({}, defaultSxConfig, other == null ? void 0 : other.unstable_sxConfig);
    muiTheme.unstable_sx = function sx(props) {
      return styleFunctionSx({
        sx: props,
        theme: this
      });
    };
    return muiTheme;
  }
  let warnedOnce$1 = false;
  function createMuiTheme(...args) {
    if (process.env.NODE_ENV !== "production") {
      if (!warnedOnce$1) {
        warnedOnce$1 = true;
        console.error(["MUI: the createMuiTheme function was renamed to createTheme.", "", "You should use `import { createTheme } from '@mui/material/styles'`"].join("\n"));
      }
    }
    return createTheme(...args);
  }
  const defaultTheme$2 = createTheme();
  function useThemeProps({
    props,
    name
  }) {
    return useThemeProps$1({
      props,
      name,
      defaultTheme: defaultTheme$2
    });
  }
  const rootShouldForwardProp = (prop) => shouldForwardProp(prop) && prop !== "classes";
  const slotShouldForwardProp = shouldForwardProp;
  const styled = createStyled({
    defaultTheme: defaultTheme$2,
    rootShouldForwardProp
  });
  function getSvgIconUtilityClass(slot) {
    return generateUtilityClass("MuiSvgIcon", slot);
  }
  const svgIconClasses = generateUtilityClasses("MuiSvgIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]);
  const _excluded$14 = ["children", "className", "color", "component", "fontSize", "htmlColor", "inheritViewBox", "titleAccess", "viewBox"];
  const useUtilityClasses$U = (ownerState) => {
    const {
      color: color2,
      fontSize: fontSize2,
      classes
    } = ownerState;
    const slots = {
      root: ["root", color2 !== "inherit" && `color${capitalize(color2)}`, `fontSize${capitalize(fontSize2)}`]
    };
    return composeClasses(slots, getSvgIconUtilityClass, classes);
  };
  const SvgIconRoot = styled("svg", {
    name: "MuiSvgIcon",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, ownerState.color !== "inherit" && styles2[`color${capitalize(ownerState.color)}`], styles2[`fontSize${capitalize(ownerState.fontSize)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _theme$transitions, _theme$transitions$cr, _theme$transitions2, _theme$transitions2$d, _theme$typography, _theme$typography$pxT, _theme$typography2, _theme$typography2$px, _theme$typography3, _theme$typography3$px, _palette$ownerState$c, _palette, _palette$ownerState$c2, _palette2, _palette2$action, _palette3, _palette3$action;
    return {
      userSelect: "none",
      width: "1em",
      height: "1em",
      display: "inline-block",
      fill: "currentColor",
      flexShrink: 0,
      transition: (_theme$transitions = theme.transitions) == null ? void 0 : (_theme$transitions$cr = _theme$transitions.create) == null ? void 0 : _theme$transitions$cr.call(_theme$transitions, "fill", {
        duration: (_theme$transitions2 = theme.transitions) == null ? void 0 : (_theme$transitions2$d = _theme$transitions2.duration) == null ? void 0 : _theme$transitions2$d.shorter
      }),
      fontSize: {
        inherit: "inherit",
        small: ((_theme$typography = theme.typography) == null ? void 0 : (_theme$typography$pxT = _theme$typography.pxToRem) == null ? void 0 : _theme$typography$pxT.call(_theme$typography, 20)) || "1.25rem",
        medium: ((_theme$typography2 = theme.typography) == null ? void 0 : (_theme$typography2$px = _theme$typography2.pxToRem) == null ? void 0 : _theme$typography2$px.call(_theme$typography2, 24)) || "1.5rem",
        large: ((_theme$typography3 = theme.typography) == null ? void 0 : (_theme$typography3$px = _theme$typography3.pxToRem) == null ? void 0 : _theme$typography3$px.call(_theme$typography3, 35)) || "2.1875rem"
      }[ownerState.fontSize],
      // TODO v5 deprecate, v6 remove for sx
      color: (_palette$ownerState$c = (_palette = (theme.vars || theme).palette) == null ? void 0 : (_palette$ownerState$c2 = _palette[ownerState.color]) == null ? void 0 : _palette$ownerState$c2.main) != null ? _palette$ownerState$c : {
        action: (_palette2 = (theme.vars || theme).palette) == null ? void 0 : (_palette2$action = _palette2.action) == null ? void 0 : _palette2$action.active,
        disabled: (_palette3 = (theme.vars || theme).palette) == null ? void 0 : (_palette3$action = _palette3.action) == null ? void 0 : _palette3$action.disabled,
        inherit: void 0
      }[ownerState.color]
    };
  });
  const SvgIcon = /* @__PURE__ */ React__namespace.forwardRef(function SvgIcon2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiSvgIcon"
    });
    const {
      children,
      className,
      color: color2 = "inherit",
      component = "svg",
      fontSize: fontSize2 = "medium",
      htmlColor,
      inheritViewBox = false,
      titleAccess,
      viewBox = "0 0 24 24"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$14);
    const ownerState = _extends$2({}, props, {
      color: color2,
      component,
      fontSize: fontSize2,
      instanceFontSize: inProps.fontSize,
      inheritViewBox,
      viewBox
    });
    const more = {};
    if (!inheritViewBox) {
      more.viewBox = viewBox;
    }
    const classes = useUtilityClasses$U(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(SvgIconRoot, _extends$2({
      as: component,
      className: clsx$1(classes.root, className),
      focusable: "false",
      color: htmlColor,
      "aria-hidden": titleAccess ? void 0 : true,
      role: titleAccess ? "img" : void 0,
      ref
    }, more, other, {
      ownerState,
      children: [children, titleAccess ? /* @__PURE__ */ jsxRuntimeExports.jsx("title", {
        children: titleAccess
      }) : null]
    }));
  });
  process.env.NODE_ENV !== "production" ? SvgIcon.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Node passed into the SVG element.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
     * @default 'inherit'
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), PropTypes.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
     * @default 'medium'
     */
    fontSize: PropTypes.oneOfType([PropTypes.oneOf(["inherit", "large", "medium", "small"]), PropTypes.string]),
    /**
     * Applies a color attribute to the SVG element.
     */
    htmlColor: PropTypes.string,
    /**
     * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`
     * prop will be ignored.
     * Useful when you want to reference a custom `component` and have `SvgIcon` pass that
     * `component`'s viewBox to the root node.
     * @default false
     */
    inheritViewBox: PropTypes.bool,
    /**
     * The shape-rendering attribute. The behavior of the different options is described on the
     * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
     * If you are having issues with blurry icons you should investigate this prop.
     */
    shapeRendering: PropTypes.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * Provides a human-readable title for the element that contains it.
     * https://www.w3.org/TR/SVG-access/#Equivalent
     */
    titleAccess: PropTypes.string,
    /**
     * Allows you to redefine what the coordinates without units mean inside an SVG element.
     * For example, if the SVG element is 500 (width) by 200 (height),
     * and you pass viewBox="0 0 50 20",
     * this means that the coordinates inside the SVG will go from the top left corner (0,0)
     * to bottom right (50,20) and each unit will be worth 10px.
     * @default '0 0 24 24'
     */
    viewBox: PropTypes.string
  } : void 0;
  SvgIcon.muiName = "SvgIcon";
  function createSvgIcon(path, displayName) {
    function Component(props, ref) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(SvgIcon, _extends$2({
        "data-testid": `${displayName}Icon`,
        ref
      }, props, {
        children: path
      }));
    }
    if (process.env.NODE_ENV !== "production") {
      Component.displayName = `${displayName}Icon`;
    }
    Component.muiName = SvgIcon.muiName;
    return /* @__PURE__ */ React__namespace.memo(/* @__PURE__ */ React__namespace.forwardRef(Component));
  }
  const unstable_ClassNameGenerator = {
    configure: (generator) => {
      if (process.env.NODE_ENV !== "production") {
        console.warn(["MUI: `ClassNameGenerator` import from `@mui/material/utils` is outdated and might cause unexpected issues.", "", "You should use `import { unstable_ClassNameGenerator } from '@mui/material/className'` instead", "", "The detail of the issue: https://github.com/mui/material-ui/issues/30011#issuecomment-1024993401", "", "The updated documentation: https://mui.com/guides/classname-generator/"].join("\n"));
      }
      ClassNameGenerator.configure(generator);
    }
  };
  const utils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    capitalize,
    createChainedFunction,
    createSvgIcon,
    debounce: debounce$1,
    deprecatedPropType,
    isMuiElement,
    ownerDocument,
    ownerWindow,
    requirePropFactory,
    setRef,
    unstable_ClassNameGenerator,
    unstable_useEnhancedEffect: useEnhancedEffect,
    unstable_useId: useId,
    unsupportedProp,
    useControlled,
    useEventCallback,
    useForkRef,
    useIsFocusVisible
  }, Symbol.toStringTag, { value: "Module" }));
  const require$$0 = /* @__PURE__ */ getAugmentedNamespace(utils);
  var hasRequiredCreateSvgIcon;
  function requireCreateSvgIcon() {
    if (hasRequiredCreateSvgIcon)
      return createSvgIcon$1;
    hasRequiredCreateSvgIcon = 1;
    (function(exports3) {
      "use strict";
      Object.defineProperty(exports3, "__esModule", {
        value: true
      });
      Object.defineProperty(exports3, "default", {
        enumerable: true,
        get: function() {
          return _utils.createSvgIcon;
        }
      });
      var _utils = require$$0;
    })(createSvgIcon$1);
    return createSvgIcon$1;
  }
  "use strict";
  var _interopRequireDefault$t = interopRequireDefaultExports;
  Object.defineProperty(ChevronRight, "__esModule", {
    value: true
  });
  var default_1$t = ChevronRight.default = void 0;
  var _createSvgIcon$t = _interopRequireDefault$t(requireCreateSvgIcon());
  var _jsxRuntime$t = jsxRuntimeExports;
  var _default$t = (0, _createSvgIcon$t.default)(/* @__PURE__ */ (0, _jsxRuntime$t.jsx)("path", {
    d: "M10 6 8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
  }), "ChevronRight");
  default_1$t = ChevronRight.default = _default$t;
  const _excluded$13 = ["defaultProps", "mixins", "overrides", "palette", "props", "styleOverrides"], _excluded2$4 = ["type", "mode"];
  function adaptV4Theme(inputTheme) {
    if (process.env.NODE_ENV !== "production") {
      console.warn(["MUI: adaptV4Theme() is deprecated.", "Follow the upgrade guide on https://mui.com/r/migration-v4#theme."].join("\n"));
    }
    const {
      defaultProps: defaultProps2 = {},
      mixins = {},
      overrides = {},
      palette: palette2 = {},
      props = {},
      styleOverrides = {}
    } = inputTheme, other = _objectWithoutPropertiesLoose(inputTheme, _excluded$13);
    const theme = _extends$2({}, other, {
      components: {}
    });
    Object.keys(defaultProps2).forEach((component) => {
      const componentValue = theme.components[component] || {};
      componentValue.defaultProps = defaultProps2[component];
      theme.components[component] = componentValue;
    });
    Object.keys(props).forEach((component) => {
      const componentValue = theme.components[component] || {};
      componentValue.defaultProps = props[component];
      theme.components[component] = componentValue;
    });
    Object.keys(styleOverrides).forEach((component) => {
      const componentValue = theme.components[component] || {};
      componentValue.styleOverrides = styleOverrides[component];
      theme.components[component] = componentValue;
    });
    Object.keys(overrides).forEach((component) => {
      const componentValue = theme.components[component] || {};
      componentValue.styleOverrides = overrides[component];
      theme.components[component] = componentValue;
    });
    theme.spacing = createSpacing(inputTheme.spacing);
    const breakpoints2 = createBreakpoints(inputTheme.breakpoints || {});
    const spacing2 = theme.spacing;
    theme.mixins = _extends$2({
      gutters: (styles2 = {}) => {
        return _extends$2({
          paddingLeft: spacing2(2),
          paddingRight: spacing2(2)
        }, styles2, {
          [breakpoints2.up("sm")]: _extends$2({
            paddingLeft: spacing2(3),
            paddingRight: spacing2(3)
          }, styles2[breakpoints2.up("sm")])
        });
      }
    }, mixins);
    const {
      type: typeInput,
      mode: modeInput
    } = palette2, paletteRest = _objectWithoutPropertiesLoose(palette2, _excluded2$4);
    const finalMode = modeInput || typeInput || "light";
    theme.palette = _extends$2({
      // theme.palette.text.hint
      text: {
        hint: finalMode === "dark" ? "rgba(255, 255, 255, 0.5)" : "rgba(0, 0, 0, 0.38)"
      },
      mode: finalMode,
      type: finalMode
    }, paletteRest);
    return theme;
  }
  function createMuiStrictModeTheme(options, ...args) {
    return createTheme(deepmerge({
      unstable_strictMode: true
    }, options), ...args);
  }
  let warnedOnce = false;
  function createStyles(styles2) {
    if (!warnedOnce) {
      console.warn(["MUI: createStyles from @mui/material/styles is deprecated.", "Please use @mui/styles/createStyles"].join("\n"));
      warnedOnce = true;
    }
    return styles2;
  }
  function isUnitless(value) {
    return String(parseFloat(value)).length === String(value).length;
  }
  function getUnit(input) {
    return String(input).match(/[\d.\-+]*\s*(.*)/)[1] || "";
  }
  function toUnitless(length2) {
    return parseFloat(length2);
  }
  function convertLength(baseFontSize) {
    return (length2, toUnit) => {
      const fromUnit = getUnit(length2);
      if (fromUnit === toUnit) {
        return length2;
      }
      let pxLength = toUnitless(length2);
      if (fromUnit !== "px") {
        if (fromUnit === "em") {
          pxLength = toUnitless(length2) * toUnitless(baseFontSize);
        } else if (fromUnit === "rem") {
          pxLength = toUnitless(length2) * toUnitless(baseFontSize);
        }
      }
      let outputLength = pxLength;
      if (toUnit !== "px") {
        if (toUnit === "em") {
          outputLength = pxLength / toUnitless(baseFontSize);
        } else if (toUnit === "rem") {
          outputLength = pxLength / toUnitless(baseFontSize);
        } else {
          return length2;
        }
      }
      return parseFloat(outputLength.toFixed(5)) + toUnit;
    };
  }
  function alignProperty({
    size,
    grid: grid2
  }) {
    const sizeBelow = size - size % grid2;
    const sizeAbove = sizeBelow + grid2;
    return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;
  }
  function fontGrid({
    lineHeight: lineHeight2,
    pixels,
    htmlFontSize
  }) {
    return pixels / (lineHeight2 * htmlFontSize);
  }
  function responsiveProperty({
    cssProperty,
    min: min2,
    max: max2,
    unit = "rem",
    breakpoints: breakpoints2 = [600, 900, 1200],
    transform = null
  }) {
    const output = {
      [cssProperty]: `${min2}${unit}`
    };
    const factor = (max2 - min2) / breakpoints2[breakpoints2.length - 1];
    breakpoints2.forEach((breakpoint) => {
      let value = min2 + factor * breakpoint;
      if (transform !== null) {
        value = transform(value);
      }
      output[`@media (min-width:${breakpoint}px)`] = {
        [cssProperty]: `${Math.round(value * 1e4) / 1e4}${unit}`
      };
    });
    return output;
  }
  function responsiveFontSizes(themeInput, options = {}) {
    const {
      breakpoints: breakpoints2 = ["sm", "md", "lg"],
      disableAlign = false,
      factor = 2,
      variants = ["h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "caption", "button", "overline"]
    } = options;
    const theme = _extends$2({}, themeInput);
    theme.typography = _extends$2({}, theme.typography);
    const typography2 = theme.typography;
    const convert = convertLength(typography2.htmlFontSize);
    const breakpointValues = breakpoints2.map((x) => theme.breakpoints.values[x]);
    variants.forEach((variant) => {
      const style2 = typography2[variant];
      const remFontSize = parseFloat(convert(style2.fontSize, "rem"));
      if (remFontSize <= 1) {
        return;
      }
      const maxFontSize = remFontSize;
      const minFontSize = 1 + (maxFontSize - 1) / factor;
      let {
        lineHeight: lineHeight2
      } = style2;
      if (!isUnitless(lineHeight2) && !disableAlign) {
        throw new Error(process.env.NODE_ENV !== "production" ? `MUI: Unsupported non-unitless line height with grid alignment.
Use unitless line heights instead.` : formatMuiErrorMessage(6));
      }
      if (!isUnitless(lineHeight2)) {
        lineHeight2 = parseFloat(convert(lineHeight2, "rem")) / parseFloat(remFontSize);
      }
      let transform = null;
      if (!disableAlign) {
        transform = (value) => alignProperty({
          size: value,
          grid: fontGrid({
            pixels: 4,
            lineHeight: lineHeight2,
            htmlFontSize: typography2.htmlFontSize
          })
        });
      }
      typography2[variant] = _extends$2({}, style2, responsiveProperty({
        cssProperty: "fontSize",
        min: minFontSize,
        max: maxFontSize,
        unit: "rem",
        breakpoints: breakpointValues,
        transform
      }));
    });
    return theme;
  }
  function useTheme() {
    const theme = useTheme$2(defaultTheme$2);
    if (process.env.NODE_ENV !== "production") {
      React__namespace.useDebugValue(theme);
    }
    return theme;
  }
  function makeStyles() {
    throw new Error(process.env.NODE_ENV !== "production" ? `MUI: makeStyles is no longer exported from @mui/material/styles.
You have to import it from @mui/styles.
See https://mui.com/r/migration-v4/#mui-material-styles for more details.` : formatMuiErrorMessage(14));
  }
  function withStyles() {
    throw new Error(process.env.NODE_ENV !== "production" ? `MUI: withStyles is no longer exported from @mui/material/styles.
You have to import it from @mui/styles.
See https://mui.com/r/migration-v4/#mui-material-styles for more details.` : formatMuiErrorMessage(15));
  }
  function withTheme() {
    throw new Error(process.env.NODE_ENV !== "production" ? `MUI: withTheme is no longer exported from @mui/material/styles.
You have to import it from @mui/styles.
See https://mui.com/r/migration-v4/#mui-material-styles for more details.` : formatMuiErrorMessage(16));
  }
  const getOverlayAlpha = (elevation) => {
    let alphaValue;
    if (elevation < 1) {
      alphaValue = 5.11916 * __pow(elevation, 2);
    } else {
      alphaValue = 4.5 * Math.log(elevation + 1) + 2;
    }
    return (alphaValue / 100).toFixed(2);
  };
  const _excluded$12 = ["colorSchemes", "cssVarPrefix"], _excluded2$3 = ["palette"];
  const defaultDarkOverlays = [...Array(25)].map((_2, index2) => {
    if (index2 === 0) {
      return void 0;
    }
    const overlay = getOverlayAlpha(index2);
    return `linear-gradient(rgba(255 255 255 / ${overlay}), rgba(255 255 255 / ${overlay}))`;
  });
  function assignNode(obj, keys) {
    keys.forEach((k) => {
      if (!obj[k]) {
        obj[k] = {};
      }
    });
  }
  function setColor(obj, key, defaultValue) {
    if (!obj[key] && defaultValue) {
      obj[key] = defaultValue;
    }
  }
  function setColorChannel(obj, key) {
    if (!(`${key}Channel` in obj)) {
      obj[`${key}Channel`] = private_safeColorChannel(obj[key], `MUI: Can't create \`palette.${key}Channel\` because \`palette.${key}\` is not one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().
To suppress this warning, you need to explicitly provide the \`palette.${key}Channel\` as a string (in rgb format, e.g. "12 12 12") or undefined if you want to remove the channel token.`);
    }
  }
  const silent = (fn) => {
    try {
      return fn();
    } catch (error) {
    }
    return void 0;
  };
  const createGetCssVar = (cssVarPrefix = "mui") => createGetCssVar$1(cssVarPrefix);
  function extendTheme(options = {}, ...args) {
    var _colorSchemesInput$li, _colorSchemesInput$da, _colorSchemesInput$li2, _colorSchemesInput$li3, _colorSchemesInput$da2, _colorSchemesInput$da3;
    const {
      colorSchemes: colorSchemesInput = {},
      cssVarPrefix = "mui"
    } = options, input = _objectWithoutPropertiesLoose(options, _excluded$12);
    const getCssVar = createGetCssVar(cssVarPrefix);
    const _createThemeWithoutVa = createTheme(_extends$2({}, input, colorSchemesInput.light && {
      palette: (_colorSchemesInput$li = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li.palette
    })), {
      palette: lightPalette
    } = _createThemeWithoutVa, muiTheme = _objectWithoutPropertiesLoose(_createThemeWithoutVa, _excluded2$3);
    const {
      palette: darkPalette
    } = createTheme({
      palette: _extends$2({
        mode: "dark"
      }, (_colorSchemesInput$da = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da.palette)
    });
    let theme = _extends$2({}, muiTheme, {
      cssVarPrefix,
      getCssVar,
      colorSchemes: _extends$2({}, colorSchemesInput, {
        light: _extends$2({}, colorSchemesInput.light, {
          palette: lightPalette,
          opacity: _extends$2({
            inputPlaceholder: 0.42,
            inputUnderline: 0.42,
            switchTrackDisabled: 0.12,
            switchTrack: 0.38
          }, (_colorSchemesInput$li2 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li2.opacity),
          overlays: ((_colorSchemesInput$li3 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li3.overlays) || []
        }),
        dark: _extends$2({}, colorSchemesInput.dark, {
          palette: darkPalette,
          opacity: _extends$2({
            inputPlaceholder: 0.5,
            inputUnderline: 0.7,
            switchTrackDisabled: 0.2,
            switchTrack: 0.3
          }, (_colorSchemesInput$da2 = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da2.opacity),
          overlays: ((_colorSchemesInput$da3 = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da3.overlays) || defaultDarkOverlays
        })
      })
    });
    Object.keys(theme.colorSchemes).forEach((key) => {
      const palette2 = theme.colorSchemes[key].palette;
      if (key === "light") {
        setColor(palette2.common, "background", "#fff");
        setColor(palette2.common, "onBackground", "#000");
      } else {
        setColor(palette2.common, "background", "#000");
        setColor(palette2.common, "onBackground", "#fff");
      }
      assignNode(palette2, ["Alert", "AppBar", "Avatar", "Chip", "FilledInput", "LinearProgress", "Skeleton", "Slider", "SnackbarContent", "SpeedDialAction", "StepConnector", "StepContent", "Switch", "TableCell", "Tooltip"]);
      if (key === "light") {
        setColor(palette2.Alert, "errorColor", private_safeDarken(palette2.error.light, 0.6));
        setColor(palette2.Alert, "infoColor", private_safeDarken(palette2.info.light, 0.6));
        setColor(palette2.Alert, "successColor", private_safeDarken(palette2.success.light, 0.6));
        setColor(palette2.Alert, "warningColor", private_safeDarken(palette2.warning.light, 0.6));
        setColor(palette2.Alert, "errorFilledBg", getCssVar("palette-error-main"));
        setColor(palette2.Alert, "infoFilledBg", getCssVar("palette-info-main"));
        setColor(palette2.Alert, "successFilledBg", getCssVar("palette-success-main"));
        setColor(palette2.Alert, "warningFilledBg", getCssVar("palette-warning-main"));
        setColor(palette2.Alert, "errorFilledColor", silent(() => lightPalette.getContrastText(palette2.error.main)));
        setColor(palette2.Alert, "infoFilledColor", silent(() => lightPalette.getContrastText(palette2.info.main)));
        setColor(palette2.Alert, "successFilledColor", silent(() => lightPalette.getContrastText(palette2.success.main)));
        setColor(palette2.Alert, "warningFilledColor", silent(() => lightPalette.getContrastText(palette2.warning.main)));
        setColor(palette2.Alert, "errorStandardBg", private_safeLighten(palette2.error.light, 0.9));
        setColor(palette2.Alert, "infoStandardBg", private_safeLighten(palette2.info.light, 0.9));
        setColor(palette2.Alert, "successStandardBg", private_safeLighten(palette2.success.light, 0.9));
        setColor(palette2.Alert, "warningStandardBg", private_safeLighten(palette2.warning.light, 0.9));
        setColor(palette2.Alert, "errorIconColor", getCssVar("palette-error-main"));
        setColor(palette2.Alert, "infoIconColor", getCssVar("palette-info-main"));
        setColor(palette2.Alert, "successIconColor", getCssVar("palette-success-main"));
        setColor(palette2.Alert, "warningIconColor", getCssVar("palette-warning-main"));
        setColor(palette2.AppBar, "defaultBg", getCssVar("palette-grey-100"));
        setColor(palette2.Avatar, "defaultBg", getCssVar("palette-grey-400"));
        setColor(palette2.Chip, "defaultBorder", getCssVar("palette-grey-400"));
        setColor(palette2.Chip, "defaultAvatarColor", getCssVar("palette-grey-700"));
        setColor(palette2.Chip, "defaultIconColor", getCssVar("palette-grey-700"));
        setColor(palette2.FilledInput, "bg", "rgba(0, 0, 0, 0.06)");
        setColor(palette2.FilledInput, "hoverBg", "rgba(0, 0, 0, 0.09)");
        setColor(palette2.FilledInput, "disabledBg", "rgba(0, 0, 0, 0.12)");
        setColor(palette2.LinearProgress, "primaryBg", private_safeLighten(palette2.primary.main, 0.62));
        setColor(palette2.LinearProgress, "secondaryBg", private_safeLighten(palette2.secondary.main, 0.62));
        setColor(palette2.LinearProgress, "errorBg", private_safeLighten(palette2.error.main, 0.62));
        setColor(palette2.LinearProgress, "infoBg", private_safeLighten(palette2.info.main, 0.62));
        setColor(palette2.LinearProgress, "successBg", private_safeLighten(palette2.success.main, 0.62));
        setColor(palette2.LinearProgress, "warningBg", private_safeLighten(palette2.warning.main, 0.62));
        setColor(palette2.Skeleton, "bg", `rgba(${getCssVar("palette-text-primaryChannel")} / 0.11)`);
        setColor(palette2.Slider, "primaryTrack", private_safeLighten(palette2.primary.main, 0.62));
        setColor(palette2.Slider, "secondaryTrack", private_safeLighten(palette2.secondary.main, 0.62));
        setColor(palette2.Slider, "errorTrack", private_safeLighten(palette2.error.main, 0.62));
        setColor(palette2.Slider, "infoTrack", private_safeLighten(palette2.info.main, 0.62));
        setColor(palette2.Slider, "successTrack", private_safeLighten(palette2.success.main, 0.62));
        setColor(palette2.Slider, "warningTrack", private_safeLighten(palette2.warning.main, 0.62));
        const snackbarContentBackground = private_safeEmphasize(palette2.background.default, 0.8);
        setColor(palette2.SnackbarContent, "bg", snackbarContentBackground);
        setColor(palette2.SnackbarContent, "color", silent(() => lightPalette.getContrastText(snackbarContentBackground)));
        setColor(palette2.SpeedDialAction, "fabHoverBg", private_safeEmphasize(palette2.background.paper, 0.15));
        setColor(palette2.StepConnector, "border", getCssVar("palette-grey-400"));
        setColor(palette2.StepContent, "border", getCssVar("palette-grey-400"));
        setColor(palette2.Switch, "defaultColor", getCssVar("palette-common-white"));
        setColor(palette2.Switch, "defaultDisabledColor", getCssVar("palette-grey-100"));
        setColor(palette2.Switch, "primaryDisabledColor", private_safeLighten(palette2.primary.main, 0.62));
        setColor(palette2.Switch, "secondaryDisabledColor", private_safeLighten(palette2.secondary.main, 0.62));
        setColor(palette2.Switch, "errorDisabledColor", private_safeLighten(palette2.error.main, 0.62));
        setColor(palette2.Switch, "infoDisabledColor", private_safeLighten(palette2.info.main, 0.62));
        setColor(palette2.Switch, "successDisabledColor", private_safeLighten(palette2.success.main, 0.62));
        setColor(palette2.Switch, "warningDisabledColor", private_safeLighten(palette2.warning.main, 0.62));
        setColor(palette2.TableCell, "border", private_safeLighten(private_safeAlpha(palette2.divider, 1), 0.88));
        setColor(palette2.Tooltip, "bg", private_safeAlpha(palette2.grey[700], 0.92));
      } else {
        setColor(palette2.Alert, "errorColor", private_safeLighten(palette2.error.light, 0.6));
        setColor(palette2.Alert, "infoColor", private_safeLighten(palette2.info.light, 0.6));
        setColor(palette2.Alert, "successColor", private_safeLighten(palette2.success.light, 0.6));
        setColor(palette2.Alert, "warningColor", private_safeLighten(palette2.warning.light, 0.6));
        setColor(palette2.Alert, "errorFilledBg", getCssVar("palette-error-dark"));
        setColor(palette2.Alert, "infoFilledBg", getCssVar("palette-info-dark"));
        setColor(palette2.Alert, "successFilledBg", getCssVar("palette-success-dark"));
        setColor(palette2.Alert, "warningFilledBg", getCssVar("palette-warning-dark"));
        setColor(palette2.Alert, "errorFilledColor", silent(() => darkPalette.getContrastText(palette2.error.dark)));
        setColor(palette2.Alert, "infoFilledColor", silent(() => darkPalette.getContrastText(palette2.info.dark)));
        setColor(palette2.Alert, "successFilledColor", silent(() => darkPalette.getContrastText(palette2.success.dark)));
        setColor(palette2.Alert, "warningFilledColor", silent(() => darkPalette.getContrastText(palette2.warning.dark)));
        setColor(palette2.Alert, "errorStandardBg", private_safeDarken(palette2.error.light, 0.9));
        setColor(palette2.Alert, "infoStandardBg", private_safeDarken(palette2.info.light, 0.9));
        setColor(palette2.Alert, "successStandardBg", private_safeDarken(palette2.success.light, 0.9));
        setColor(palette2.Alert, "warningStandardBg", private_safeDarken(palette2.warning.light, 0.9));
        setColor(palette2.Alert, "errorIconColor", getCssVar("palette-error-main"));
        setColor(palette2.Alert, "infoIconColor", getCssVar("palette-info-main"));
        setColor(palette2.Alert, "successIconColor", getCssVar("palette-success-main"));
        setColor(palette2.Alert, "warningIconColor", getCssVar("palette-warning-main"));
        setColor(palette2.AppBar, "defaultBg", getCssVar("palette-grey-900"));
        setColor(palette2.AppBar, "darkBg", getCssVar("palette-background-paper"));
        setColor(palette2.AppBar, "darkColor", getCssVar("palette-text-primary"));
        setColor(palette2.Avatar, "defaultBg", getCssVar("palette-grey-600"));
        setColor(palette2.Chip, "defaultBorder", getCssVar("palette-grey-700"));
        setColor(palette2.Chip, "defaultAvatarColor", getCssVar("palette-grey-300"));
        setColor(palette2.Chip, "defaultIconColor", getCssVar("palette-grey-300"));
        setColor(palette2.FilledInput, "bg", "rgba(255, 255, 255, 0.09)");
        setColor(palette2.FilledInput, "hoverBg", "rgba(255, 255, 255, 0.13)");
        setColor(palette2.FilledInput, "disabledBg", "rgba(255, 255, 255, 0.12)");
        setColor(palette2.LinearProgress, "primaryBg", private_safeDarken(palette2.primary.main, 0.5));
        setColor(palette2.LinearProgress, "secondaryBg", private_safeDarken(palette2.secondary.main, 0.5));
        setColor(palette2.LinearProgress, "errorBg", private_safeDarken(palette2.error.main, 0.5));
        setColor(palette2.LinearProgress, "infoBg", private_safeDarken(palette2.info.main, 0.5));
        setColor(palette2.LinearProgress, "successBg", private_safeDarken(palette2.success.main, 0.5));
        setColor(palette2.LinearProgress, "warningBg", private_safeDarken(palette2.warning.main, 0.5));
        setColor(palette2.Skeleton, "bg", `rgba(${getCssVar("palette-text-primaryChannel")} / 0.13)`);
        setColor(palette2.Slider, "primaryTrack", private_safeDarken(palette2.primary.main, 0.5));
        setColor(palette2.Slider, "secondaryTrack", private_safeDarken(palette2.secondary.main, 0.5));
        setColor(palette2.Slider, "errorTrack", private_safeDarken(palette2.error.main, 0.5));
        setColor(palette2.Slider, "infoTrack", private_safeDarken(palette2.info.main, 0.5));
        setColor(palette2.Slider, "successTrack", private_safeDarken(palette2.success.main, 0.5));
        setColor(palette2.Slider, "warningTrack", private_safeDarken(palette2.warning.main, 0.5));
        const snackbarContentBackground = private_safeEmphasize(palette2.background.default, 0.98);
        setColor(palette2.SnackbarContent, "bg", snackbarContentBackground);
        setColor(palette2.SnackbarContent, "color", silent(() => darkPalette.getContrastText(snackbarContentBackground)));
        setColor(palette2.SpeedDialAction, "fabHoverBg", private_safeEmphasize(palette2.background.paper, 0.15));
        setColor(palette2.StepConnector, "border", getCssVar("palette-grey-600"));
        setColor(palette2.StepContent, "border", getCssVar("palette-grey-600"));
        setColor(palette2.Switch, "defaultColor", getCssVar("palette-grey-300"));
        setColor(palette2.Switch, "defaultDisabledColor", getCssVar("palette-grey-600"));
        setColor(palette2.Switch, "primaryDisabledColor", private_safeDarken(palette2.primary.main, 0.55));
        setColor(palette2.Switch, "secondaryDisabledColor", private_safeDarken(palette2.secondary.main, 0.55));
        setColor(palette2.Switch, "errorDisabledColor", private_safeDarken(palette2.error.main, 0.55));
        setColor(palette2.Switch, "infoDisabledColor", private_safeDarken(palette2.info.main, 0.55));
        setColor(palette2.Switch, "successDisabledColor", private_safeDarken(palette2.success.main, 0.55));
        setColor(palette2.Switch, "warningDisabledColor", private_safeDarken(palette2.warning.main, 0.55));
        setColor(palette2.TableCell, "border", private_safeDarken(private_safeAlpha(palette2.divider, 1), 0.68));
        setColor(palette2.Tooltip, "bg", private_safeAlpha(palette2.grey[700], 0.92));
      }
      setColorChannel(palette2.background, "default");
      setColorChannel(palette2.common, "background");
      setColorChannel(palette2.common, "onBackground");
      setColorChannel(palette2, "divider");
      Object.keys(palette2).forEach((color2) => {
        const colors = palette2[color2];
        if (colors && typeof colors === "object") {
          if (colors.main) {
            setColor(palette2[color2], "mainChannel", private_safeColorChannel(colors.main));
          }
          if (colors.light) {
            setColor(palette2[color2], "lightChannel", private_safeColorChannel(colors.light));
          }
          if (colors.dark) {
            setColor(palette2[color2], "darkChannel", private_safeColorChannel(colors.dark));
          }
          if (colors.contrastText) {
            setColor(palette2[color2], "contrastTextChannel", private_safeColorChannel(colors.contrastText));
          }
          if (color2 === "text") {
            setColorChannel(palette2[color2], "primary");
            setColorChannel(palette2[color2], "secondary");
          }
          if (color2 === "action") {
            if (colors.active) {
              setColorChannel(palette2[color2], "active");
            }
            if (colors.selected) {
              setColorChannel(palette2[color2], "selected");
            }
          }
        }
      });
    });
    theme = args.reduce((acc, argument) => deepmerge(acc, argument), theme);
    theme.unstable_sxConfig = _extends$2({}, defaultSxConfig, input == null ? void 0 : input.unstable_sxConfig);
    theme.unstable_sx = function sx(props) {
      return styleFunctionSx({
        sx: props,
        theme: this
      });
    };
    return theme;
  }
  const excludeVariablesFromRoot = (cssVarPrefix) => [...[...Array(24)].map((_2, index2) => `--${cssVarPrefix ? `${cssVarPrefix}-` : ""}overlays-${index2 + 1}`), `--${cssVarPrefix ? `${cssVarPrefix}-` : ""}palette-AppBar-darkBg`, `--${cssVarPrefix ? `${cssVarPrefix}-` : ""}palette-AppBar-darkColor`];
  const shouldSkipGeneratingVar = (keys) => {
    var _keys$;
    return !!keys[0].match(/(typography|mixins|breakpoints|direction|transitions)/) || !!keys[0].match(/sxConfig$/) || // ends with sxConfig
    keys[0] === "palette" && !!((_keys$ = keys[1]) != null && _keys$.match(/(mode|contrastThreshold|tonalOffset)/));
  };
  const defaultTheme$1 = extendTheme();
  const {
    CssVarsProvider,
    useColorScheme,
    getInitColorSchemeScript
  } = createCssVarsProvider({
    theme: defaultTheme$1,
    attribute: "data-mui-color-scheme",
    modeStorageKey: "mui-mode",
    colorSchemeStorageKey: "mui-color-scheme",
    defaultColorScheme: {
      light: "light",
      dark: "dark"
    },
    resolveTheme: (theme) => {
      const newTheme = _extends$2({}, theme, {
        typography: createTypography(theme.palette, theme.typography)
      });
      newTheme.unstable_sx = function sx(props) {
        return styleFunctionSx({
          sx: props,
          theme: this
        });
      };
      return newTheme;
    },
    shouldSkipGeneratingVar,
    excludeVariablesFromRoot
  });
  function experimental_sx() {
    throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The \`experimental_sx\` has been moved to \`theme.unstable_sx\`.For more details, see https://github.com/mui/material-ui/pull/35150.` : formatMuiErrorMessage(20));
  }
  const BasicButton = styled(material.Button, {
    shouldForwardProp: (prop) => prop !== "theme"
  })(({ theme }) => ({
    // color: theme.palette.primary.main
    // border: '1px solid ' + theme.palette.primary.main
  }));
  function getPaperUtilityClass(slot) {
    return generateUtilityClass("MuiPaper", slot);
  }
  const paperClasses = generateUtilityClasses("MuiPaper", ["root", "rounded", "outlined", "elevation", "elevation0", "elevation1", "elevation2", "elevation3", "elevation4", "elevation5", "elevation6", "elevation7", "elevation8", "elevation9", "elevation10", "elevation11", "elevation12", "elevation13", "elevation14", "elevation15", "elevation16", "elevation17", "elevation18", "elevation19", "elevation20", "elevation21", "elevation22", "elevation23", "elevation24"]);
  const _excluded$11 = ["className", "component", "elevation", "square", "variant"];
  const useUtilityClasses$T = (ownerState) => {
    const {
      square,
      elevation,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, !square && "rounded", variant === "elevation" && `elevation${elevation}`]
    };
    return composeClasses(slots, getPaperUtilityClass, classes);
  };
  const PaperRoot = styled("div", {
    name: "MuiPaper",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, styles2[ownerState.variant], !ownerState.square && styles2.rounded, ownerState.variant === "elevation" && styles2[`elevation${ownerState.elevation}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _theme$vars$overlays;
    return _extends$2({
      backgroundColor: (theme.vars || theme).palette.background.paper,
      color: (theme.vars || theme).palette.text.primary,
      transition: theme.transitions.create("box-shadow")
    }, !ownerState.square && {
      borderRadius: theme.shape.borderRadius
    }, ownerState.variant === "outlined" && {
      border: `1px solid ${(theme.vars || theme).palette.divider}`
    }, ownerState.variant === "elevation" && _extends$2({
      boxShadow: (theme.vars || theme).shadows[ownerState.elevation]
    }, !theme.vars && theme.palette.mode === "dark" && {
      backgroundImage: `linear-gradient(${alpha("#fff", getOverlayAlpha(ownerState.elevation))}, ${alpha("#fff", getOverlayAlpha(ownerState.elevation))})`
    }, theme.vars && {
      backgroundImage: (_theme$vars$overlays = theme.vars.overlays) == null ? void 0 : _theme$vars$overlays[ownerState.elevation]
    }));
  });
  const Paper = /* @__PURE__ */ React__namespace.forwardRef(function Paper2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiPaper"
    });
    const {
      className,
      component = "div",
      elevation = 1,
      square = false,
      variant = "elevation"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$11);
    const ownerState = _extends$2({}, props, {
      component,
      elevation,
      square,
      variant
    });
    const classes = useUtilityClasses$T(ownerState);
    if (process.env.NODE_ENV !== "production") {
      const theme = useTheme();
      if (theme.shadows[elevation] === void 0) {
        console.error([`MUI: The elevation provided <Paper elevation={${elevation}}> is not available in the theme.`, `Please make sure that \`theme.shadows[${elevation}]\` is defined.`].join("\n"));
      }
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx(PaperRoot, _extends$2({
      as: component,
      ownerState,
      className: clsx$1(classes.root, className),
      ref
    }, other));
  });
  process.env.NODE_ENV !== "production" ? Paper.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * Shadow depth, corresponds to `dp` in the spec.
     * It accepts values between 0 and 24 inclusive.
     * @default 1
     */
    elevation: chainPropTypes(integerPropType, (props) => {
      const {
        elevation,
        variant
      } = props;
      if (elevation > 0 && variant === "outlined") {
        return new Error(`MUI: Combining \`elevation={${elevation}}\` with \`variant="${variant}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`);
      }
      return null;
    }),
    /**
     * If `true`, rounded corners are disabled.
     * @default false
     */
    square: PropTypes.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The variant to use.
     * @default 'elevation'
     */
    variant: PropTypes.oneOfType([PropTypes.oneOf(["elevation", "outlined"]), PropTypes.string])
  } : void 0;
  function getAppBarUtilityClass(slot) {
    return generateUtilityClass("MuiAppBar", slot);
  }
  const appBarClasses = generateUtilityClasses("MuiAppBar", ["root", "positionFixed", "positionAbsolute", "positionSticky", "positionStatic", "positionRelative", "colorDefault", "colorPrimary", "colorSecondary", "colorInherit", "colorTransparent"]);
  const _excluded$10 = ["className", "color", "enableColorOnDark", "position"];
  const useUtilityClasses$S = (ownerState) => {
    const {
      color: color2,
      position: position2,
      classes
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize(color2)}`, `position${capitalize(position2)}`]
    };
    return composeClasses(slots, getAppBarUtilityClass, classes);
  };
  const joinVars = (var1, var2) => var1 ? `${var1 == null ? void 0 : var1.replace(")", "")}, ${var2})` : var2;
  const AppBarRoot = styled(Paper, {
    name: "MuiAppBar",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, styles2[`position${capitalize(ownerState.position)}`], styles2[`color${capitalize(ownerState.color)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    const backgroundColorDefault = theme.palette.mode === "light" ? theme.palette.grey[100] : theme.palette.grey[900];
    return _extends$2({
      display: "flex",
      flexDirection: "column",
      width: "100%",
      boxSizing: "border-box",
      // Prevent padding issue with the Modal and fixed positioned AppBar.
      flexShrink: 0
    }, ownerState.position === "fixed" && {
      position: "fixed",
      zIndex: (theme.vars || theme).zIndex.appBar,
      top: 0,
      left: "auto",
      right: 0,
      "@media print": {
        // Prevent the app bar to be visible on each printed page.
        position: "absolute"
      }
    }, ownerState.position === "absolute" && {
      position: "absolute",
      zIndex: (theme.vars || theme).zIndex.appBar,
      top: 0,
      left: "auto",
      right: 0
    }, ownerState.position === "sticky" && {
      // ⚠️ sticky is not supported by IE11.
      position: "sticky",
      zIndex: (theme.vars || theme).zIndex.appBar,
      top: 0,
      left: "auto",
      right: 0
    }, ownerState.position === "static" && {
      position: "static"
    }, ownerState.position === "relative" && {
      position: "relative"
    }, !theme.vars && _extends$2({}, ownerState.color === "default" && {
      backgroundColor: backgroundColorDefault,
      color: theme.palette.getContrastText(backgroundColorDefault)
    }, ownerState.color && ownerState.color !== "default" && ownerState.color !== "inherit" && ownerState.color !== "transparent" && {
      backgroundColor: theme.palette[ownerState.color].main,
      color: theme.palette[ownerState.color].contrastText
    }, ownerState.color === "inherit" && {
      color: "inherit"
    }, theme.palette.mode === "dark" && !ownerState.enableColorOnDark && {
      backgroundColor: null,
      color: null
    }, ownerState.color === "transparent" && _extends$2({
      backgroundColor: "transparent",
      color: "inherit"
    }, theme.palette.mode === "dark" && {
      backgroundImage: "none"
    })), theme.vars && _extends$2({}, ownerState.color === "default" && {
      "--AppBar-background": ownerState.enableColorOnDark ? theme.vars.palette.AppBar.defaultBg : joinVars(theme.vars.palette.AppBar.darkBg, theme.vars.palette.AppBar.defaultBg),
      "--AppBar-color": ownerState.enableColorOnDark ? theme.vars.palette.text.primary : joinVars(theme.vars.palette.AppBar.darkColor, theme.vars.palette.text.primary)
    }, ownerState.color && !ownerState.color.match(/^(default|inherit|transparent)$/) && {
      "--AppBar-background": ownerState.enableColorOnDark ? theme.vars.palette[ownerState.color].main : joinVars(theme.vars.palette.AppBar.darkBg, theme.vars.palette[ownerState.color].main),
      "--AppBar-color": ownerState.enableColorOnDark ? theme.vars.palette[ownerState.color].contrastText : joinVars(theme.vars.palette.AppBar.darkColor, theme.vars.palette[ownerState.color].contrastText)
    }, {
      backgroundColor: "var(--AppBar-background)",
      color: ownerState.color === "inherit" ? "inherit" : "var(--AppBar-color)"
    }, ownerState.color === "transparent" && {
      backgroundImage: "none",
      backgroundColor: "transparent",
      color: "inherit"
    }));
  });
  const AppBar = /* @__PURE__ */ React__namespace.forwardRef(function AppBar2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiAppBar"
    });
    const {
      className,
      color: color2 = "primary",
      enableColorOnDark = false,
      position: position2 = "fixed"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$10);
    const ownerState = _extends$2({}, props, {
      color: color2,
      position: position2,
      enableColorOnDark
    });
    const classes = useUtilityClasses$S(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(AppBarRoot, _extends$2({
      square: true,
      component: "header",
      ownerState,
      elevation: 4,
      className: clsx$1(classes.root, className, position2 === "fixed" && "mui-fixed"),
      ref
    }, other));
  });
  process.env.NODE_ENV !== "production" ? AppBar.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'primary'
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["default", "inherit", "primary", "secondary", "transparent"]), PropTypes.string]),
    /**
     * If true, the `color` prop is applied in dark mode.
     * @default false
     */
    enableColorOnDark: PropTypes.bool,
    /**
     * The positioning type. The behavior of the different options is described
     * [in the MDN web docs](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning).
     * Note: `sticky` is not universally supported and will fall back to `static` when unavailable.
     * @default 'fixed'
     */
    position: PropTypes.oneOf(["absolute", "fixed", "relative", "static", "sticky"]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  const BasicAppBar = styled(AppBar, {
    shouldForwardProp: (prop) => prop !== "open"
  })(({ theme, open, drawerwidth }) => __spreadValues({
    zIndex: theme.zIndex.drawer + 1,
    transition: theme.transitions.create(["width", "margin"], {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.leavingScreen
    })
  }, open && {
    marginLeft: drawerwidth,
    width: `calc(100% - ${drawerwidth})`,
    transition: theme.transitions.create(["width", "margin"], {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.enteringScreen
    })
  }));
  const BasicAutocompleteShape = gubu_minExports.Gubu({
    tooldef: {
      kind: gubu_minExports.Exact("addbutton", "autocomplete"),
      label: String,
      defaultvalue: String,
      multiple: false,
      forcePopupIcon: false,
      canon: String,
      options: {
        kind: String,
        label: {
          field: String
        },
        ent: String
      },
      name: ""
    }
  });
  function BasicAutocomplete(props) {
    const { ctx } = props;
    const { seneca } = ctx();
    const basicAutocompleteSpec = BasicAutocompleteShape(props.spec);
    const { tooldef } = basicAutocompleteSpec;
    let options = [];
    let selected = [];
    const [value, setValue] = React.useState([]);
    const canon = tooldef.canon;
    const optionState = reactRedux.useSelector(
      (state) => state.main.vxg.ent.meta.main[canon].state
    );
    if ("ent" === tooldef.options.kind) {
      options = reactRedux.useSelector((state) => state.main.vxg.ent.list.main[canon]);
      selected = reactRedux.useSelector(
        (state) => state.main.vxg.cmp.BasicHead.tool[tooldef.name].selected
      );
    }
    React.useEffect(() => {
      if (optionState === "loaded") {
        setValue(options[0]);
      }
    }, [options]);
    const theme = ctx().theme;
    return /* @__PURE__ */ jsxRuntimeExports.jsx(material.ThemeProvider, { theme, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
      material.Autocomplete,
      {
        multiple: tooldef.multiple || false,
        freeSolo: true,
        forcePopupIcon: tooldef.forcePopupIcon || false,
        onChange: (event, newValue) => __async(this, null, function* () {
          console.log("Project switched", newValue);
          setValue(newValue);
          yield seneca.post("aim:app,set:state", {
            section: `vxg.cmp.BasicHead.tool.${tooldef.name}`,
            content: {
              selected: newValue
            }
          });
        }),
        value: value || [],
        options,
        getOptionLabel: (option) => {
          if (option && !Array.isArray(option)) {
            return option[tooldef.options.label.field];
          } else {
            return "undefined";
          }
        },
        size: "small",
        renderInput: (params) => /* @__PURE__ */ jsxRuntimeExports.jsx(material.TextField, __spreadProps(__spreadValues({}, params), { label: tooldef.label || "Autocomplete" }))
      },
      tooldef.label
    ) });
  }
  const pink = {
    50: "#fce4ec",
    100: "#f8bbd0",
    200: "#f48fb1",
    300: "#f06292",
    400: "#ec407a",
    500: "#e91e63",
    600: "#d81b60",
    700: "#c2185b",
    800: "#ad1457",
    900: "#880e4f",
    A100: "#ff80ab",
    A200: "#ff4081",
    A400: "#f50057",
    A700: "#c51162"
  };
  const deepPurple = {
    50: "#ede7f6",
    100: "#d1c4e9",
    200: "#b39ddb",
    300: "#9575cd",
    400: "#7e57c2",
    500: "#673ab7",
    600: "#5e35b1",
    700: "#512da8",
    800: "#4527a0",
    900: "#311b92",
    A100: "#b388ff",
    A200: "#7c4dff",
    A400: "#651fff",
    A700: "#6200ea"
  };
  const indigo = {
    50: "#e8eaf6",
    100: "#c5cae9",
    200: "#9fa8da",
    300: "#7986cb",
    400: "#5c6bc0",
    500: "#3f51b5",
    600: "#3949ab",
    700: "#303f9f",
    800: "#283593",
    900: "#1a237e",
    A100: "#8c9eff",
    A200: "#536dfe",
    A400: "#3d5afe",
    A700: "#304ffe"
  };
  const cyan = {
    50: "#e0f7fa",
    100: "#b2ebf2",
    200: "#80deea",
    300: "#4dd0e1",
    400: "#26c6da",
    500: "#00bcd4",
    600: "#00acc1",
    700: "#0097a7",
    800: "#00838f",
    900: "#006064",
    A100: "#84ffff",
    A200: "#18ffff",
    A400: "#00e5ff",
    A700: "#00b8d4"
  };
  const teal = {
    50: "#e0f2f1",
    100: "#b2dfdb",
    200: "#80cbc4",
    300: "#4db6ac",
    400: "#26a69a",
    500: "#009688",
    600: "#00897b",
    700: "#00796b",
    800: "#00695c",
    900: "#004d40",
    A100: "#a7ffeb",
    A200: "#64ffda",
    A400: "#1de9b6",
    A700: "#00bfa5"
  };
  const lightGreen = {
    50: "#f1f8e9",
    100: "#dcedc8",
    200: "#c5e1a5",
    300: "#aed581",
    400: "#9ccc65",
    500: "#8bc34a",
    600: "#7cb342",
    700: "#689f38",
    800: "#558b2f",
    900: "#33691e",
    A100: "#ccff90",
    A200: "#b2ff59",
    A400: "#76ff03",
    A700: "#64dd17"
  };
  const lime = {
    50: "#f9fbe7",
    100: "#f0f4c3",
    200: "#e6ee9c",
    300: "#dce775",
    400: "#d4e157",
    500: "#cddc39",
    600: "#c0ca33",
    700: "#afb42b",
    800: "#9e9d24",
    900: "#827717",
    A100: "#f4ff81",
    A200: "#eeff41",
    A400: "#c6ff00",
    A700: "#aeea00"
  };
  const yellow = {
    50: "#fffde7",
    100: "#fff9c4",
    200: "#fff59d",
    300: "#fff176",
    400: "#ffee58",
    500: "#ffeb3b",
    600: "#fdd835",
    700: "#fbc02d",
    800: "#f9a825",
    900: "#f57f17",
    A100: "#ffff8d",
    A200: "#ffff00",
    A400: "#ffea00",
    A700: "#ffd600"
  };
  const amber = {
    50: "#fff8e1",
    100: "#ffecb3",
    200: "#ffe082",
    300: "#ffd54f",
    400: "#ffca28",
    500: "#ffc107",
    600: "#ffb300",
    700: "#ffa000",
    800: "#ff8f00",
    900: "#ff6f00",
    A100: "#ffe57f",
    A200: "#ffd740",
    A400: "#ffc400",
    A700: "#ffab00"
  };
  const deepOrange = {
    50: "#fbe9e7",
    100: "#ffccbc",
    200: "#ffab91",
    300: "#ff8a65",
    400: "#ff7043",
    500: "#ff5722",
    600: "#f4511e",
    700: "#e64a19",
    800: "#d84315",
    900: "#bf360c",
    A100: "#ff9e80",
    A200: "#ff6e40",
    A400: "#ff3d00",
    A700: "#dd2c00"
  };
  const brown = {
    50: "#efebe9",
    100: "#d7ccc8",
    200: "#bcaaa4",
    300: "#a1887f",
    400: "#8d6e63",
    500: "#795548",
    600: "#6d4c41",
    700: "#5d4037",
    800: "#4e342e",
    900: "#3e2723",
    A100: "#d7ccc8",
    A200: "#bcaaa4",
    A400: "#8d6e63",
    A700: "#5d4037"
  };
  const blueGrey = {
    50: "#eceff1",
    100: "#cfd8dc",
    200: "#b0bec5",
    300: "#90a4ae",
    400: "#78909c",
    500: "#607d8b",
    600: "#546e7a",
    700: "#455a64",
    800: "#37474f",
    900: "#263238",
    A100: "#cfd8dc",
    A200: "#b0bec5",
    A400: "#78909c",
    A700: "#455a64"
  };
  const { Child: Child$4 } = gubu_minExports.Gubu;
  const BasicHeadSpecShape = gubu_minExports.Gubu({
    head: {
      logo: {
        img: String
      },
      variant: String,
      tool: {
        def: Child$4({
          kind: gubu_minExports.Exact("add", "autocomplete"),
          label: String,
          defaultvalue: String,
          multiple: false,
          forcePopupIcon: false,
          canon: String,
          options: {
            kind: gubu_minExports.Exact("ent"),
            ent: String,
            label: {
              field: String
            }
          },
          name: ""
        })
      },
      app: {},
      cookie: {}
    },
    view: {}
  });
  function BasicHead(props) {
    var _a, _b, _c, _d;
    const location2 = reactRouterDom.useLocation();
    const { ctx } = props;
    const { seneca } = ctx();
    const [initials, setInitials] = React.useState("");
    const [anchorEl, setAnchorEl] = React.useState(null);
    const menuOpen = Boolean(anchorEl);
    const basicHeadSpec = BasicHeadSpecShape(props.spec);
    const user = reactRedux.useSelector((state) => state.main.auth.user);
    const userName = user.name || user.email;
    React.useEffect(() => {
      const name = user.name ? user.name : "A";
      const acronyms = name.match(/\b(\w)/g) || [];
      const initials2 = acronyms.join("");
      setInitials(initials2);
    }, [user]);
    const tooldefs = Object.entries(basicHeadSpec.head.tool.def).map(
      (entry) => (entry[1].name = entry[0], entry[1])
    );
    const vxgState = reactRedux.useSelector((state) => state.main.vxg);
    const open = vxgState.cmp.BasicSide.show;
    let led_add = vxgState.trigger.led.add;
    const viewPath = location2.pathname.split("/")[2];
    let add = ((_c = (_b = (_a = basicHeadSpec.view[viewPath]) == null ? void 0 : _a.content) == null ? void 0 : _b.def) == null ? void 0 : _c.add) || {
      active: false
    };
    const viewName = ((_d = basicHeadSpec.view[viewPath]) == null ? void 0 : _d.name) || "";
    const theme = material.useTheme();
    const handleAvatarClick = (event) => {
      setAnchorEl(event.currentTarget);
    };
    const handleClose = () => {
      setAnchorEl(null);
    };
    function deleteCookie(cookieName) {
      const date = /* @__PURE__ */ new Date();
      date.setTime(date.getTime() - 1);
      const expires = "; expires=" + date.toUTCString();
      document.cookie = cookieName + "=;" + expires + "; path=/";
    }
    const handleLogout = () => __async(this, null, function* () {
      var _a2, _b2;
      const signout = yield seneca.post("aim:web,on:auth,signout:user");
      const cookieName = (_b2 = (_a2 = basicHeadSpec.head) == null ? void 0 : _a2.cookie) == null ? void 0 : _b2.name;
      if (cookieName) {
        deleteCookie(cookieName);
        console.log("signout", signout);
        document.location.href = document.location.origin + "/";
      }
    });
    if (basicHeadSpec.head.variant === "permanent") {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        BasicAppBar,
        {
          open: false,
          sx: {
            backgroundColor: theme.palette.background.paper
          },
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs(material.Toolbar, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: basicHeadSpec.head.logo.img, style: { width: "5rem" } }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { style: { flexGrow: 1 } }),
            tooldefs.map((tooldef) => {
              if ("autocomplete" === tooldef.kind) {
                return /* @__PURE__ */ jsxRuntimeExports.jsx(
                  BasicAutocomplete,
                  {
                    spec: { tooldef },
                    ctx
                  },
                  tooldef.name
                );
              } else if ("add" === tooldef.kind) {
                return /* @__PURE__ */ jsxRuntimeExports.jsx(
                  BasicButton,
                  {
                    variant: "outlined",
                    sx: {
                      display: add.active ? null : "none",
                      textTransform: "capitalize"
                    },
                    size: "large",
                    onClick: () => addItem(seneca, led_add),
                    children: tooldef.label + " " + viewName
                  },
                  tooldef.name
                );
              }
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(BasicButton, { onClick: handleAvatarClick, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              material.Avatar,
              {
                sx: { bgcolor: purple[300], color: "white", fontWeight: 100 },
                children: initials
              }
            ) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              material.Menu,
              {
                id: "basic-menu",
                anchorEl,
                open: menuOpen,
                onClose: handleClose,
                MenuListProps: {
                  "aria-labelledby": "basic-button"
                },
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(material.MenuItem, { onClick: handleLogout, children: "Logout" })
              }
            )
          ] })
        }
      );
    } else {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        BasicAppBar,
        {
          drawerwidth: "16rem",
          open,
          sx: {
            backgroundColor: theme.palette.background.paper
          },
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs(material.Toolbar, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              material.IconButton,
              {
                "aria-label": "open drawer",
                onClick: () => onOpen(seneca),
                edge: "start",
                sx: __spreadValues({
                  marginRight: 2
                }, open && { display: "none" }),
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(default_1$t, {})
              }
            ),
            tooldefs.map((tooldef) => {
              if ("autocomplete" === tooldef.kind) {
                return /* @__PURE__ */ jsxRuntimeExports.jsx(
                  BasicAutocomplete,
                  {
                    spec: { tooldef },
                    ctx
                  },
                  tooldef.name
                );
              } else if ("add" === tooldef.kind) {
                return /* @__PURE__ */ jsxRuntimeExports.jsx(
                  BasicButton,
                  {
                    variant: "outlined",
                    sx: {
                      display: add.active ? null : "none",
                      textTransform: "capitalize"
                    },
                    size: "large",
                    onClick: () => addItem(seneca, led_add),
                    children: tooldef.label + " " + viewName
                  },
                  tooldef.name
                );
              }
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { style: { flexGrow: 1 } }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(material.Typography, { variant: "h6", children: userName })
          ] })
        }
      );
    }
  }
  function onOpen(seneca) {
    seneca.act("aim:app,set:state", {
      section: "vxg.cmp.BasicSide.show",
      content: true
    });
  }
  function addItem(seneca, led_add) {
    seneca.act("aim:app,set:state", {
      section: "vxg.trigger.led.add",
      content: ++led_add
    });
  }
  const iconmap = {
    home: iconsMaterial.HomeOutlined,
    warehouse: iconsMaterial.WarehouseOutlined,
    tune: iconsMaterial.TuneOutlined,
    widget: iconsMaterial.WidgetsOutlined,
    factCheck: iconsMaterial.FactCheckOutlined,
    uploadFile: iconsMaterial.UploadFileOutlined,
    altRoute: iconsMaterial.AltRoute,
    factory: iconsMaterial.FactoryOutlined,
    key: iconsMaterial.KeyOutlined,
    done: iconsMaterial.AssignmentTurnedInOutlined,
    docs: iconsMaterial.TextSnippetOutlined,
    hightlight: iconsMaterial.HighlightAlt,
    map: iconsMaterial.Map,
    account: iconsMaterial.SupervisorAccount,
    tablet: iconsMaterial.Tablet,
    update: iconsMaterial.Update,
    admin: iconsMaterial.Security,
    clipboard: iconsMaterial.ContentPaste,
    fitscreen: iconsMaterial.FitScreen,
    chatBubble: iconsMaterial.ChatBubble,
    event: iconsMaterial.Event,
    logout: iconsMaterial.Logout,
    settings: iconsMaterial.Settings
  };
  const { Child: Child$3 } = gubu_minExports.Gubu;
  const BasicSideMenuItemSpecShape = gubu_minExports.Gubu({
    section: {
      title: String,
      divider: Boolean,
      item: Child$3({
        kind: String,
        label: String,
        icon: String,
        path: String,
        access: Child$3(Boolean, {})
      })
    }
  });
  function BasicSideMenuItem(props) {
    const { sectionKey, onItemSelect } = props;
    const viewPath = location.pathname.split("/")[2];
    const basicSideMenuItemSpec = BasicSideMenuItemSpecShape(props.spec);
    const userRole = reactRedux.useSelector((state) => state.main.auth.user.role) || "user";
    const section = basicSideMenuItemSpec.section;
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(material.List, { children: [
      Object.entries(section.item).map(([itemKey, item]) => {
        return (
          // TODO: Load user role from redux store
          isAuthorized(userRole, item.access) && /* @__PURE__ */ jsxRuntimeExports.jsxs(React.Fragment, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              material.ListItem,
              {
                disablePadding: true,
                onClick: () => onItemSelect(itemKey, item),
                children: /* @__PURE__ */ jsxRuntimeExports.jsxs(material.ListItemButton, { selected: viewPath == itemKey, children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(material.ListItemIcon, { children: makeIcon(item.icon) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(material.ListItemText, { primary: item.label })
                ] })
              },
              itemKey
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(material.Divider, { className: "BasicSideMenuItem-itemDivider" })
          ] }, itemKey)
        );
      }),
      section.divider && /* @__PURE__ */ jsxRuntimeExports.jsx(material.Divider, {})
    ] }, section);
  }
  function makeIcon(name) {
    const Icon = iconmap[name];
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, {});
  }
  function isAuthorized(userRole, authorizedRoles) {
    return authorizedRoles.hasOwnProperty(userRole) && authorizedRoles[userRole] === true;
  }
  const { Child: Child$2 } = gubu_minExports.Gubu;
  const BasicSideMenuSpecShape = gubu_minExports.Gubu({
    section: Child$2({
      title: String,
      divider: Boolean,
      item: Child$2({
        kind: String,
        label: String,
        icon: String,
        path: String,
        access: Child$2(Boolean, {})
      })
    })
  });
  function BasicSideMenu(props) {
    const { onItemSelect } = props;
    const basicSideMenuSpec = BasicSideMenuSpecShape(props.spec);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: Object.entries(basicSideMenuSpec.section).map(
      ([sectionKey, section]) => {
        const basicSideMenuItemSpec = {
          section
        };
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          BasicSideMenuItem,
          {
            spec: basicSideMenuItemSpec,
            onItemSelect
          },
          sectionKey
        );
      }
    ) });
  }
  var ChevronLeft = {};
  "use strict";
  var _interopRequireDefault$s = interopRequireDefaultExports;
  Object.defineProperty(ChevronLeft, "__esModule", {
    value: true
  });
  var default_1$s = ChevronLeft.default = void 0;
  var _createSvgIcon$s = _interopRequireDefault$s(requireCreateSvgIcon());
  var _jsxRuntime$s = jsxRuntimeExports;
  var _default$s = (0, _createSvgIcon$s.default)(/* @__PURE__ */ (0, _jsxRuntime$s.jsx)("path", {
    d: "M15.41 7.41 14 6l-6 6 6 6 1.41-1.41L10.83 12z"
  }), "ChevronLeft");
  default_1$s = ChevronLeft.default = _default$s;
  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf(o, p);
  }
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
  }
  function hasClass(element, className) {
    if (element.classList)
      return !!className && element.classList.contains(className);
    return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
  }
  function addClass(element, className) {
    if (element.classList)
      element.classList.add(className);
    else if (!hasClass(element, className))
      if (typeof element.className === "string")
        element.className = element.className + " " + className;
      else
        element.setAttribute("class", (element.className && element.className.baseVal || "") + " " + className);
  }
  function replaceClassName(origClass, classToRemove) {
    return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
  }
  function removeClass$1(element, className) {
    if (element.classList) {
      element.classList.remove(className);
    } else if (typeof element.className === "string") {
      element.className = replaceClassName(element.className, className);
    } else {
      element.setAttribute("class", replaceClassName(element.className && element.className.baseVal || "", className));
    }
  }
  const config = {
    disabled: false
  };
  var timeoutsShape = process.env.NODE_ENV !== "production" ? PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
    enter: PropTypes.number,
    exit: PropTypes.number,
    appear: PropTypes.number
  }).isRequired]) : null;
  var classNamesShape = process.env.NODE_ENV !== "production" ? PropTypes.oneOfType([PropTypes.string, PropTypes.shape({
    enter: PropTypes.string,
    exit: PropTypes.string,
    active: PropTypes.string
  }), PropTypes.shape({
    enter: PropTypes.string,
    enterDone: PropTypes.string,
    enterActive: PropTypes.string,
    exit: PropTypes.string,
    exitDone: PropTypes.string,
    exitActive: PropTypes.string
  })]) : null;
  const TransitionGroupContext = React.createContext(null);
  var forceReflow = function forceReflow2(node2) {
    return node2.scrollTop;
  };
  var UNMOUNTED = "unmounted";
  var EXITED = "exited";
  var ENTERING = "entering";
  var ENTERED = "entered";
  var EXITING = "exiting";
  var Transition = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(Transition2, _React$Component);
    function Transition2(props, context) {
      var _this;
      _this = _React$Component.call(this, props, context) || this;
      var parentGroup = context;
      var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
      var initialStatus;
      _this.appearStatus = null;
      if (props.in) {
        if (appear) {
          initialStatus = EXITED;
          _this.appearStatus = ENTERING;
        } else {
          initialStatus = ENTERED;
        }
      } else {
        if (props.unmountOnExit || props.mountOnEnter) {
          initialStatus = UNMOUNTED;
        } else {
          initialStatus = EXITED;
        }
      }
      _this.state = {
        status: initialStatus
      };
      _this.nextCallback = null;
      return _this;
    }
    Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
      var nextIn = _ref.in;
      if (nextIn && prevState.status === UNMOUNTED) {
        return {
          status: EXITED
        };
      }
      return null;
    };
    var _proto = Transition2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.updateStatus(true, this.appearStatus);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      var nextStatus = null;
      if (prevProps !== this.props) {
        var status = this.state.status;
        if (this.props.in) {
          if (status !== ENTERING && status !== ENTERED) {
            nextStatus = ENTERING;
          }
        } else {
          if (status === ENTERING || status === ENTERED) {
            nextStatus = EXITING;
          }
        }
      }
      this.updateStatus(false, nextStatus);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.cancelNextCallback();
    };
    _proto.getTimeouts = function getTimeouts() {
      var timeout = this.props.timeout;
      var exit, enter, appear;
      exit = enter = appear = timeout;
      if (timeout != null && typeof timeout !== "number") {
        exit = timeout.exit;
        enter = timeout.enter;
        appear = timeout.appear !== void 0 ? timeout.appear : enter;
      }
      return {
        exit,
        enter,
        appear
      };
    };
    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
      if (mounting === void 0) {
        mounting = false;
      }
      if (nextStatus !== null) {
        this.cancelNextCallback();
        if (nextStatus === ENTERING) {
          if (this.props.unmountOnExit || this.props.mountOnEnter) {
            var node2 = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);
            if (node2)
              forceReflow(node2);
          }
          this.performEnter(mounting);
        } else {
          this.performExit();
        }
      } else if (this.props.unmountOnExit && this.state.status === EXITED) {
        this.setState({
          status: UNMOUNTED
        });
      }
    };
    _proto.performEnter = function performEnter(mounting) {
      var _this2 = this;
      var enter = this.props.enter;
      var appearing = this.context ? this.context.isMounting : mounting;
      var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
      var timeouts = this.getTimeouts();
      var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
      if (!mounting && !enter || config.disabled) {
        this.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode);
        });
        return;
      }
      this.props.onEnter(maybeNode, maybeAppearing);
      this.safeSetState({
        status: ENTERING
      }, function() {
        _this2.props.onEntering(maybeNode, maybeAppearing);
        _this2.onTransitionEnd(enterTimeout, function() {
          _this2.safeSetState({
            status: ENTERED
          }, function() {
            _this2.props.onEntered(maybeNode, maybeAppearing);
          });
        });
      });
    };
    _proto.performExit = function performExit() {
      var _this3 = this;
      var exit = this.props.exit;
      var timeouts = this.getTimeouts();
      var maybeNode = this.props.nodeRef ? void 0 : ReactDOM.findDOMNode(this);
      if (!exit || config.disabled) {
        this.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
        return;
      }
      this.props.onExit(maybeNode);
      this.safeSetState({
        status: EXITING
      }, function() {
        _this3.props.onExiting(maybeNode);
        _this3.onTransitionEnd(timeouts.exit, function() {
          _this3.safeSetState({
            status: EXITED
          }, function() {
            _this3.props.onExited(maybeNode);
          });
        });
      });
    };
    _proto.cancelNextCallback = function cancelNextCallback() {
      if (this.nextCallback !== null) {
        this.nextCallback.cancel();
        this.nextCallback = null;
      }
    };
    _proto.safeSetState = function safeSetState(nextState, callback) {
      callback = this.setNextCallback(callback);
      this.setState(nextState, callback);
    };
    _proto.setNextCallback = function setNextCallback(callback) {
      var _this4 = this;
      var active = true;
      this.nextCallback = function(event) {
        if (active) {
          active = false;
          _this4.nextCallback = null;
          callback(event);
        }
      };
      this.nextCallback.cancel = function() {
        active = false;
      };
      return this.nextCallback;
    };
    _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
      this.setNextCallback(handler);
      var node2 = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);
      var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;
      if (!node2 || doesNotHaveTimeoutOrListener) {
        setTimeout(this.nextCallback, 0);
        return;
      }
      if (this.props.addEndListener) {
        var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node2, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
        this.props.addEndListener(maybeNode, maybeNextCallback);
      }
      if (timeout != null) {
        setTimeout(this.nextCallback, timeout);
      }
    };
    _proto.render = function render() {
      var status = this.state.status;
      if (status === UNMOUNTED) {
        return null;
      }
      var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
      return (
        // allows for nested Transitions
        /* @__PURE__ */ React.createElement(TransitionGroupContext.Provider, {
          value: null
        }, typeof children === "function" ? children(status, childProps) : React.cloneElement(React.Children.only(children), childProps))
      );
    };
    return Transition2;
  }(React.Component);
  Transition.contextType = TransitionGroupContext;
  Transition.propTypes = process.env.NODE_ENV !== "production" ? {
    /**
     * A React reference to DOM element that need to transition:
     * https://stackoverflow.com/a/51127130/4671932
     *
     *   - When `nodeRef` prop is used, `node` is not passed to callback functions
     *      (e.g. `onEnter`) because user already has direct access to the node.
     *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
     *     `nodeRef` need to be provided to `Transition` with changed `key` prop
     *     (see
     *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
     */
    nodeRef: PropTypes.shape({
      current: typeof Element === "undefined" ? PropTypes.any : function(propValue, key, componentName, location2, propFullName, secret) {
        var value = propValue[key];
        return PropTypes.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location2, propFullName, secret);
      }
    }),
    /**
     * A `function` child can be used instead of a React element. This function is
     * called with the current transition status (`'entering'`, `'entered'`,
     * `'exiting'`, `'exited'`), which can be used to apply context
     * specific props to a component.
     *
     * ```jsx
     * <Transition in={this.state.in} timeout={150}>
     *   {state => (
     *     <MyComponent className={`fade fade-${state}`} />
     *   )}
     * </Transition>
     * ```
     */
    children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,
    /**
     * Show the component; triggers the enter or exit states
     */
    in: PropTypes.bool,
    /**
     * By default the child component is mounted immediately along with
     * the parent `Transition` component. If you want to "lazy mount" the component on the
     * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
     * mounted, even on "exited", unless you also specify `unmountOnExit`.
     */
    mountOnEnter: PropTypes.bool,
    /**
     * By default the child component stays mounted after it reaches the `'exited'` state.
     * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
     */
    unmountOnExit: PropTypes.bool,
    /**
     * By default the child component does not perform the enter transition when
     * it first mounts, regardless of the value of `in`. If you want this
     * behavior, set both `appear` and `in` to `true`.
     *
     * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
     * > only adds an additional enter transition. However, in the
     * > `<CSSTransition>` component that first enter transition does result in
     * > additional `.appear-*` classes, that way you can choose to style it
     * > differently.
     */
    appear: PropTypes.bool,
    /**
     * Enable or disable enter transitions.
     */
    enter: PropTypes.bool,
    /**
     * Enable or disable exit transitions.
     */
    exit: PropTypes.bool,
    /**
     * The duration of the transition, in milliseconds.
     * Required unless `addEndListener` is provided.
     *
     * You may specify a single timeout for all transitions:
     *
     * ```jsx
     * timeout={500}
     * ```
     *
     * or individually:
     *
     * ```jsx
     * timeout={{
     *  appear: 500,
     *  enter: 300,
     *  exit: 500,
     * }}
     * ```
     *
     * - `appear` defaults to the value of `enter`
     * - `enter` defaults to `0`
     * - `exit` defaults to `0`
     *
     * @type {number | { enter?: number, exit?: number, appear?: number }}
     */
    timeout: function timeout(props) {
      var pt = timeoutsShape;
      if (!props.addEndListener)
        pt = pt.isRequired;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return pt.apply(void 0, [props].concat(args));
    },
    /**
     * Add a custom transition end trigger. Called with the transitioning
     * DOM node and a `done` callback. Allows for more fine grained transition end
     * logic. Timeouts are still used as a fallback if provided.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * ```jsx
     * addEndListener={(node, done) => {
     *   // use the css transitionend event to mark the finish of a transition
     *   node.addEventListener('transitionend', done, false);
     * }}
     * ```
     */
    addEndListener: PropTypes.func,
    /**
     * Callback fired before the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEnter: PropTypes.func,
    /**
     * Callback fired after the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntering: PropTypes.func,
    /**
     * Callback fired after the "entered" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEntered: PropTypes.func,
    /**
     * Callback fired before the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExit: PropTypes.func,
    /**
     * Callback fired after the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExiting: PropTypes.func,
    /**
     * Callback fired after the "exited" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExited: PropTypes.func
  } : {};
  function noop$1() {
  }
  Transition.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop$1,
    onEntering: noop$1,
    onEntered: noop$1,
    onExit: noop$1,
    onExiting: noop$1,
    onExited: noop$1
  };
  Transition.UNMOUNTED = UNMOUNTED;
  Transition.EXITED = EXITED;
  Transition.ENTERING = ENTERING;
  Transition.ENTERED = ENTERED;
  Transition.EXITING = EXITING;
  var _addClass = function addClass$1(node2, classes) {
    return node2 && classes && classes.split(" ").forEach(function(c) {
      return addClass(node2, c);
    });
  };
  var removeClass = function removeClass2(node2, classes) {
    return node2 && classes && classes.split(" ").forEach(function(c) {
      return removeClass$1(node2, c);
    });
  };
  var CSSTransition = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(CSSTransition2, _React$Component);
    function CSSTransition2() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.appliedClasses = {
        appear: {},
        enter: {},
        exit: {}
      };
      _this.onEnter = function(maybeNode, maybeAppearing) {
        var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing), node2 = _this$resolveArgument[0], appearing = _this$resolveArgument[1];
        _this.removeClasses(node2, "exit");
        _this.addClass(node2, appearing ? "appear" : "enter", "base");
        if (_this.props.onEnter) {
          _this.props.onEnter(maybeNode, maybeAppearing);
        }
      };
      _this.onEntering = function(maybeNode, maybeAppearing) {
        var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing), node2 = _this$resolveArgument2[0], appearing = _this$resolveArgument2[1];
        var type = appearing ? "appear" : "enter";
        _this.addClass(node2, type, "active");
        if (_this.props.onEntering) {
          _this.props.onEntering(maybeNode, maybeAppearing);
        }
      };
      _this.onEntered = function(maybeNode, maybeAppearing) {
        var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing), node2 = _this$resolveArgument3[0], appearing = _this$resolveArgument3[1];
        var type = appearing ? "appear" : "enter";
        _this.removeClasses(node2, type);
        _this.addClass(node2, type, "done");
        if (_this.props.onEntered) {
          _this.props.onEntered(maybeNode, maybeAppearing);
        }
      };
      _this.onExit = function(maybeNode) {
        var _this$resolveArgument4 = _this.resolveArguments(maybeNode), node2 = _this$resolveArgument4[0];
        _this.removeClasses(node2, "appear");
        _this.removeClasses(node2, "enter");
        _this.addClass(node2, "exit", "base");
        if (_this.props.onExit) {
          _this.props.onExit(maybeNode);
        }
      };
      _this.onExiting = function(maybeNode) {
        var _this$resolveArgument5 = _this.resolveArguments(maybeNode), node2 = _this$resolveArgument5[0];
        _this.addClass(node2, "exit", "active");
        if (_this.props.onExiting) {
          _this.props.onExiting(maybeNode);
        }
      };
      _this.onExited = function(maybeNode) {
        var _this$resolveArgument6 = _this.resolveArguments(maybeNode), node2 = _this$resolveArgument6[0];
        _this.removeClasses(node2, "exit");
        _this.addClass(node2, "exit", "done");
        if (_this.props.onExited) {
          _this.props.onExited(maybeNode);
        }
      };
      _this.resolveArguments = function(maybeNode, maybeAppearing) {
        return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] : [maybeNode, maybeAppearing];
      };
      _this.getClassNames = function(type) {
        var classNames = _this.props.classNames;
        var isStringClassNames = typeof classNames === "string";
        var prefix2 = isStringClassNames && classNames ? classNames + "-" : "";
        var baseClassName = isStringClassNames ? "" + prefix2 + type : classNames[type];
        var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames[type + "Active"];
        var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames[type + "Done"];
        return {
          baseClassName,
          activeClassName,
          doneClassName
        };
      };
      return _this;
    }
    var _proto = CSSTransition2.prototype;
    _proto.addClass = function addClass2(node2, type, phase) {
      var className = this.getClassNames(type)[phase + "ClassName"];
      var _this$getClassNames = this.getClassNames("enter"), doneClassName = _this$getClassNames.doneClassName;
      if (type === "appear" && phase === "done" && doneClassName) {
        className += " " + doneClassName;
      }
      if (phase === "active") {
        if (node2)
          forceReflow(node2);
      }
      if (className) {
        this.appliedClasses[type][phase] = className;
        _addClass(node2, className);
      }
    };
    _proto.removeClasses = function removeClasses(node2, type) {
      var _this$appliedClasses$ = this.appliedClasses[type], baseClassName = _this$appliedClasses$.base, activeClassName = _this$appliedClasses$.active, doneClassName = _this$appliedClasses$.done;
      this.appliedClasses[type] = {};
      if (baseClassName) {
        removeClass(node2, baseClassName);
      }
      if (activeClassName) {
        removeClass(node2, activeClassName);
      }
      if (doneClassName) {
        removeClass(node2, doneClassName);
      }
    };
    _proto.render = function render() {
      var _this$props = this.props, _2 = _this$props.classNames, props = _objectWithoutPropertiesLoose(_this$props, ["classNames"]);
      return /* @__PURE__ */ React.createElement(Transition, _extends$2({}, props, {
        onEnter: this.onEnter,
        onEntered: this.onEntered,
        onEntering: this.onEntering,
        onExit: this.onExit,
        onExiting: this.onExiting,
        onExited: this.onExited
      }));
    };
    return CSSTransition2;
  }(React.Component);
  CSSTransition.defaultProps = {
    classNames: ""
  };
  CSSTransition.propTypes = process.env.NODE_ENV !== "production" ? _extends$2({}, Transition.propTypes, {
    /**
     * The animation classNames applied to the component as it appears, enters,
     * exits or has finished the transition. A single name can be provided, which
     * will be suffixed for each stage, e.g. `classNames="fade"` applies:
     *
     * - `fade-appear`, `fade-appear-active`, `fade-appear-done`
     * - `fade-enter`, `fade-enter-active`, `fade-enter-done`
     * - `fade-exit`, `fade-exit-active`, `fade-exit-done`
     *
     * A few details to note about how these classes are applied:
     *
     * 1. They are _joined_ with the ones that are already defined on the child
     *    component, so if you want to add some base styles, you can use
     *    `className` without worrying that it will be overridden.
     *
     * 2. If the transition component mounts with `in={false}`, no classes are
     *    applied yet. You might be expecting `*-exit-done`, but if you think
     *    about it, a component cannot finish exiting if it hasn't entered yet.
     *
     * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This
     *    allows you to define different behavior for when appearing is done and
     *    when regular entering is done, using selectors like
     *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply
     *    an epic entrance animation when element first appears in the DOM using
     *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
     *    simply use `fade-enter-done` for defining both cases.
     *
     * Each individual classNames can also be specified independently like:
     *
     * ```js
     * classNames={{
     *  appear: 'my-appear',
     *  appearActive: 'my-active-appear',
     *  appearDone: 'my-done-appear',
     *  enter: 'my-enter',
     *  enterActive: 'my-active-enter',
     *  enterDone: 'my-done-enter',
     *  exit: 'my-exit',
     *  exitActive: 'my-active-exit',
     *  exitDone: 'my-done-exit',
     * }}
     * ```
     *
     * If you want to set these classes using CSS Modules:
     *
     * ```js
     * import styles from './styles.css';
     * ```
     *
     * you might want to use camelCase in your CSS file, that way could simply
     * spread them instead of listing them one by one:
     *
     * ```js
     * classNames={{ ...styles }}
     * ```
     *
     * @type {string | {
     *  appear?: string,
     *  appearActive?: string,
     *  appearDone?: string,
     *  enter?: string,
     *  enterActive?: string,
     *  enterDone?: string,
     *  exit?: string,
     *  exitActive?: string,
     *  exitDone?: string,
     * }}
     */
    classNames: classNamesShape,
    /**
     * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
     * applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEnter: PropTypes.func,
    /**
     * A `<Transition>` callback fired immediately after the 'enter-active' or
     * 'appear-active' class is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntering: PropTypes.func,
    /**
     * A `<Transition>` callback fired immediately after the 'enter' or
     * 'appear' classes are **removed** and the `done` class is added to the DOM node.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntered: PropTypes.func,
    /**
     * A `<Transition>` callback fired immediately after the 'exit' class is
     * applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement)
     */
    onExit: PropTypes.func,
    /**
     * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement)
     */
    onExiting: PropTypes.func,
    /**
     * A `<Transition>` callback fired immediately after the 'exit' classes
     * are **removed** and the `exit-done` class is added to the DOM node.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement)
     */
    onExited: PropTypes.func
  }) : {};
  function _assertThisInitialized(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function getChildMapping(children, mapFn) {
    var mapper = function mapper2(child) {
      return mapFn && React.isValidElement(child) ? mapFn(child) : child;
    };
    var result = /* @__PURE__ */ Object.create(null);
    if (children)
      React.Children.map(children, function(c) {
        return c;
      }).forEach(function(child) {
        result[child.key] = mapper(child);
      });
    return result;
  }
  function mergeChildMappings(prev2, next2) {
    prev2 = prev2 || {};
    next2 = next2 || {};
    function getValueForKey(key) {
      return key in next2 ? next2[key] : prev2[key];
    }
    var nextKeysPending = /* @__PURE__ */ Object.create(null);
    var pendingKeys = [];
    for (var prevKey in prev2) {
      if (prevKey in next2) {
        if (pendingKeys.length) {
          nextKeysPending[prevKey] = pendingKeys;
          pendingKeys = [];
        }
      } else {
        pendingKeys.push(prevKey);
      }
    }
    var i;
    var childMapping = {};
    for (var nextKey in next2) {
      if (nextKeysPending[nextKey]) {
        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
          var pendingNextKey = nextKeysPending[nextKey][i];
          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
        }
      }
      childMapping[nextKey] = getValueForKey(nextKey);
    }
    for (i = 0; i < pendingKeys.length; i++) {
      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
    }
    return childMapping;
  }
  function getProp(child, prop, props) {
    return props[prop] != null ? props[prop] : child.props[prop];
  }
  function getInitialChildMapping(props, onExited) {
    return getChildMapping(props.children, function(child) {
      return React.cloneElement(child, {
        onExited: onExited.bind(null, child),
        in: true,
        appear: getProp(child, "appear", props),
        enter: getProp(child, "enter", props),
        exit: getProp(child, "exit", props)
      });
    });
  }
  function getNextChildMapping(nextProps, prevChildMapping, onExited) {
    var nextChildMapping = getChildMapping(nextProps.children);
    var children = mergeChildMappings(prevChildMapping, nextChildMapping);
    Object.keys(children).forEach(function(key) {
      var child = children[key];
      if (!React.isValidElement(child))
        return;
      var hasPrev = key in prevChildMapping;
      var hasNext = key in nextChildMapping;
      var prevChild = prevChildMapping[key];
      var isLeaving = React.isValidElement(prevChild) && !prevChild.props.in;
      if (hasNext && (!hasPrev || isLeaving)) {
        children[key] = React.cloneElement(child, {
          onExited: onExited.bind(null, child),
          in: true,
          exit: getProp(child, "exit", nextProps),
          enter: getProp(child, "enter", nextProps)
        });
      } else if (!hasNext && hasPrev && !isLeaving) {
        children[key] = React.cloneElement(child, {
          in: false
        });
      } else if (hasNext && hasPrev && React.isValidElement(prevChild)) {
        children[key] = React.cloneElement(child, {
          onExited: onExited.bind(null, child),
          in: prevChild.props.in,
          exit: getProp(child, "exit", nextProps),
          enter: getProp(child, "enter", nextProps)
        });
      }
    });
    return children;
  }
  var values = Object.values || function(obj) {
    return Object.keys(obj).map(function(k) {
      return obj[k];
    });
  };
  var defaultProps = {
    component: "div",
    childFactory: function childFactory(child) {
      return child;
    }
  };
  var TransitionGroup = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(TransitionGroup2, _React$Component);
    function TransitionGroup2(props, context) {
      var _this;
      _this = _React$Component.call(this, props, context) || this;
      var handleExited = _this.handleExited.bind(_assertThisInitialized(_this));
      _this.state = {
        contextValue: {
          isMounting: true
        },
        handleExited,
        firstRender: true
      };
      return _this;
    }
    var _proto = TransitionGroup2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.mounted = true;
      this.setState({
        contextValue: {
          isMounting: false
        }
      });
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.mounted = false;
    };
    TransitionGroup2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
      var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
      return {
        children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
        firstRender: false
      };
    };
    _proto.handleExited = function handleExited(child, node2) {
      var currentChildMapping = getChildMapping(this.props.children);
      if (child.key in currentChildMapping)
        return;
      if (child.props.onExited) {
        child.props.onExited(node2);
      }
      if (this.mounted) {
        this.setState(function(state) {
          var children = _extends$2({}, state.children);
          delete children[child.key];
          return {
            children
          };
        });
      }
    };
    _proto.render = function render() {
      var _this$props = this.props, Component = _this$props.component, childFactory = _this$props.childFactory, props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);
      var contextValue = this.state.contextValue;
      var children = values(this.state.children).map(childFactory);
      delete props.appear;
      delete props.enter;
      delete props.exit;
      if (Component === null) {
        return /* @__PURE__ */ React.createElement(TransitionGroupContext.Provider, {
          value: contextValue
        }, children);
      }
      return /* @__PURE__ */ React.createElement(TransitionGroupContext.Provider, {
        value: contextValue
      }, /* @__PURE__ */ React.createElement(Component, props, children));
    };
    return TransitionGroup2;
  }(React.Component);
  TransitionGroup.propTypes = process.env.NODE_ENV !== "production" ? {
    /**
     * `<TransitionGroup>` renders a `<div>` by default. You can change this
     * behavior by providing a `component` prop.
     * If you use React v16+ and would like to avoid a wrapping `<div>` element
     * you can pass in `component={null}`. This is useful if the wrapping div
     * borks your css styles.
     */
    component: PropTypes.any,
    /**
     * A set of `<Transition>` components, that are toggled `in` and out as they
     * leave. the `<TransitionGroup>` will inject specific transition props, so
     * remember to spread them through if you are wrapping the `<Transition>` as
     * with our `<Fade>` example.
     *
     * While this component is meant for multiple `Transition` or `CSSTransition`
     * children, sometimes you may want to have a single transition child with
     * content that you want to be transitioned out and in when you change it
     * (e.g. routes, images etc.) In that case you can change the `key` prop of
     * the transition child as you change its content, this will cause
     * `TransitionGroup` to transition the child out and back in.
     */
    children: PropTypes.node,
    /**
     * A convenience prop that enables or disables appear animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    appear: PropTypes.bool,
    /**
     * A convenience prop that enables or disables enter animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    enter: PropTypes.bool,
    /**
     * A convenience prop that enables or disables exit animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    exit: PropTypes.bool,
    /**
     * You may need to apply reactive updates to a child as it is exiting.
     * This is generally done by using `cloneElement` however in the case of an exiting
     * child the element has already been removed and not accessible to the consumer.
     *
     * If you do need to update a child as it leaves you can provide a `childFactory`
     * to wrap every child, even the ones that are leaving.
     *
     * @type Function(child: ReactElement) -> ReactElement
     */
    childFactory: PropTypes.func
  } : {};
  TransitionGroup.defaultProps = defaultProps;
  var ReplaceTransition = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(ReplaceTransition2, _React$Component);
    function ReplaceTransition2() {
      var _this;
      for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
        _args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;
      _this.handleEnter = function() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        return _this.handleLifecycle("onEnter", 0, args);
      };
      _this.handleEntering = function() {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }
        return _this.handleLifecycle("onEntering", 0, args);
      };
      _this.handleEntered = function() {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }
        return _this.handleLifecycle("onEntered", 0, args);
      };
      _this.handleExit = function() {
        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          args[_key5] = arguments[_key5];
        }
        return _this.handleLifecycle("onExit", 1, args);
      };
      _this.handleExiting = function() {
        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
          args[_key6] = arguments[_key6];
        }
        return _this.handleLifecycle("onExiting", 1, args);
      };
      _this.handleExited = function() {
        for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
          args[_key7] = arguments[_key7];
        }
        return _this.handleLifecycle("onExited", 1, args);
      };
      return _this;
    }
    var _proto = ReplaceTransition2.prototype;
    _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
      var _child$props;
      var children = this.props.children;
      var child = React.Children.toArray(children)[idx];
      if (child.props[handler])
        (_child$props = child.props)[handler].apply(_child$props, originalArgs);
      if (this.props[handler]) {
        var maybeNode = child.props.nodeRef ? void 0 : ReactDOM.findDOMNode(this);
        this.props[handler](maybeNode);
      }
    };
    _proto.render = function render() {
      var _this$props = this.props, children = _this$props.children, inProp = _this$props.in, props = _objectWithoutPropertiesLoose(_this$props, ["children", "in"]);
      var _React$Children$toArr = React.Children.toArray(children), first = _React$Children$toArr[0], second = _React$Children$toArr[1];
      delete props.onEnter;
      delete props.onEntering;
      delete props.onEntered;
      delete props.onExit;
      delete props.onExiting;
      delete props.onExited;
      return /* @__PURE__ */ React.createElement(TransitionGroup, props, inProp ? React.cloneElement(first, {
        key: "first",
        onEnter: this.handleEnter,
        onEntering: this.handleEntering,
        onEntered: this.handleEntered
      }) : React.cloneElement(second, {
        key: "second",
        onEnter: this.handleExit,
        onEntering: this.handleExiting,
        onEntered: this.handleExited
      }));
    };
    return ReplaceTransition2;
  }(React.Component);
  ReplaceTransition.propTypes = process.env.NODE_ENV !== "production" ? {
    in: PropTypes.bool.isRequired,
    children: function children(props, propName) {
      if (React.Children.count(props[propName]) !== 2)
        return new Error('"' + propName + '" must be exactly two transition components.');
      return null;
    }
  } : {};
  var _leaveRenders, _enterRenders;
  function areChildrenDifferent(oldChildren, newChildren) {
    if (oldChildren === newChildren)
      return false;
    if (React.isValidElement(oldChildren) && React.isValidElement(newChildren) && oldChildren.key != null && oldChildren.key === newChildren.key) {
      return false;
    }
    return true;
  }
  var modes = {
    out: "out-in",
    in: "in-out"
  };
  var callHook = function callHook2(element, name, cb) {
    return function() {
      var _element$props;
      element.props[name] && (_element$props = element.props)[name].apply(_element$props, arguments);
      cb();
    };
  };
  var leaveRenders = (_leaveRenders = {}, _leaveRenders[modes.out] = function(_ref) {
    var current = _ref.current, changeState = _ref.changeState;
    return React.cloneElement(current, {
      in: false,
      onExited: callHook(current, "onExited", function() {
        changeState(ENTERING, null);
      })
    });
  }, _leaveRenders[modes.in] = function(_ref2) {
    var current = _ref2.current, changeState = _ref2.changeState, children = _ref2.children;
    return [current, React.cloneElement(children, {
      in: true,
      onEntered: callHook(children, "onEntered", function() {
        changeState(ENTERING);
      })
    })];
  }, _leaveRenders);
  var enterRenders = (_enterRenders = {}, _enterRenders[modes.out] = function(_ref3) {
    var children = _ref3.children, changeState = _ref3.changeState;
    return React.cloneElement(children, {
      in: true,
      onEntered: callHook(children, "onEntered", function() {
        changeState(ENTERED, React.cloneElement(children, {
          in: true
        }));
      })
    });
  }, _enterRenders[modes.in] = function(_ref4) {
    var current = _ref4.current, children = _ref4.children, changeState = _ref4.changeState;
    return [React.cloneElement(current, {
      in: false,
      onExited: callHook(current, "onExited", function() {
        changeState(ENTERED, React.cloneElement(children, {
          in: true
        }));
      })
    }), React.cloneElement(children, {
      in: true
    })];
  }, _enterRenders);
  var SwitchTransition = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(SwitchTransition2, _React$Component);
    function SwitchTransition2() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.state = {
        status: ENTERED,
        current: null
      };
      _this.appeared = false;
      _this.changeState = function(status, current) {
        if (current === void 0) {
          current = _this.state.current;
        }
        _this.setState({
          status,
          current
        });
      };
      return _this;
    }
    var _proto = SwitchTransition2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.appeared = true;
    };
    SwitchTransition2.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
      if (props.children == null) {
        return {
          current: null
        };
      }
      if (state.status === ENTERING && props.mode === modes.in) {
        return {
          status: ENTERING
        };
      }
      if (state.current && areChildrenDifferent(state.current, props.children)) {
        return {
          status: EXITING
        };
      }
      return {
        current: React.cloneElement(props.children, {
          in: true
        })
      };
    };
    _proto.render = function render() {
      var _this$props = this.props, children = _this$props.children, mode = _this$props.mode, _this$state = this.state, status = _this$state.status, current = _this$state.current;
      var data = {
        children,
        current,
        changeState: this.changeState,
        status
      };
      var component;
      switch (status) {
        case ENTERING:
          component = enterRenders[mode](data);
          break;
        case EXITING:
          component = leaveRenders[mode](data);
          break;
        case ENTERED:
          component = current;
      }
      return /* @__PURE__ */ React.createElement(TransitionGroupContext.Provider, {
        value: {
          isMounting: !this.appeared
        }
      }, component);
    };
    return SwitchTransition2;
  }(React.Component);
  SwitchTransition.propTypes = process.env.NODE_ENV !== "production" ? {
    /**
     * Transition modes.
     * `out-in`: Current element transitions out first, then when complete, the new element transitions in.
     * `in-out`: New element transitions in first, then when complete, the current element transitions out.
     *
     * @type {'out-in'|'in-out'}
     */
    mode: PropTypes.oneOf([modes.in, modes.out]),
    /**
     * Any `Transition` or `CSSTransition` component.
     */
    children: PropTypes.oneOfType([PropTypes.element.isRequired])
  } : {};
  SwitchTransition.defaultProps = {
    mode: modes.out
  };
  const reflow = (node2) => node2.scrollTop;
  function getTransitionProps(props, options) {
    var _style$transitionDura, _style$transitionTimi;
    const {
      timeout,
      easing: easing2,
      style: style2 = {}
    } = props;
    return {
      duration: (_style$transitionDura = style2.transitionDuration) != null ? _style$transitionDura : typeof timeout === "number" ? timeout : timeout[options.mode] || 0,
      easing: (_style$transitionTimi = style2.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing2 === "object" ? easing2[options.mode] : easing2,
      delay: style2.transitionDelay
    };
  }
  const _excluded$$ = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  const styles$2 = {
    entering: {
      opacity: 1
    },
    entered: {
      opacity: 1
    }
  };
  const Fade = /* @__PURE__ */ React__namespace.forwardRef(function Fade2(props, ref) {
    const theme = useTheme();
    const defaultTimeout = {
      enter: theme.transitions.duration.enteringScreen,
      exit: theme.transitions.duration.leavingScreen
    };
    const {
      addEndListener,
      appear = true,
      children,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style: style2,
      timeout = defaultTimeout,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$$);
    const enableStrictModeCompat = true;
    const nodeRef = React__namespace.useRef(null);
    const handleRef = useForkRef(nodeRef, children.ref, ref);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node2 = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node2);
        } else {
          callback(node2, maybeIsAppearing);
        }
      }
    };
    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      reflow(node2);
      const transitionProps = getTransitionProps({
        style: style2,
        timeout,
        easing: easing2
      }, {
        mode: "enter"
      });
      node2.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
      node2.style.transition = theme.transitions.create("opacity", transitionProps);
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node2) => {
      const transitionProps = getTransitionProps({
        style: style2,
        timeout,
        easing: easing2
      }, {
        mode: "exit"
      });
      node2.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
      node2.style.transition = theme.transitions.create("opacity", transitionProps);
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleAddEndListener = (next2) => {
      if (addEndListener) {
        addEndListener(nodeRef.current, next2);
      }
    };
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionComponent, _extends$2({
      appear,
      in: inProp,
      nodeRef: enableStrictModeCompat ? nodeRef : void 0,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout
    }, other, {
      children: (state, childProps) => {
        return /* @__PURE__ */ React__namespace.cloneElement(children, _extends$2({
          style: _extends$2({
            opacity: 0,
            visibility: state === "exited" && !inProp ? "hidden" : void 0
          }, styles$2[state], style2, children.props.style),
          ref: handleRef
        }, childProps));
      }
    }));
  });
  process.env.NODE_ENV !== "production" ? Fade.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: PropTypes.func,
    /**
     * Perform the enter transition when it first mounts if `in` is also `true`.
     * Set this to `false` to disable this behavior.
     * @default true
     */
    appear: PropTypes.bool,
    /**
     * A single child content element.
     */
    children: elementAcceptingRef.isRequired,
    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     */
    easing: PropTypes.oneOfType([PropTypes.shape({
      enter: PropTypes.string,
      exit: PropTypes.string
    }), PropTypes.string]),
    /**
     * If `true`, the component will transition in.
     */
    in: PropTypes.bool,
    /**
     * @ignore
     */
    onEnter: PropTypes.func,
    /**
     * @ignore
     */
    onEntered: PropTypes.func,
    /**
     * @ignore
     */
    onEntering: PropTypes.func,
    /**
     * @ignore
     */
    onExit: PropTypes.func,
    /**
     * @ignore
     */
    onExited: PropTypes.func,
    /**
     * @ignore
     */
    onExiting: PropTypes.func,
    /**
     * @ignore
     */
    style: PropTypes.object,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    timeout: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
      appear: PropTypes.number,
      enter: PropTypes.number,
      exit: PropTypes.number
    })])
  } : void 0;
  function getBackdropUtilityClass(slot) {
    return generateUtilityClass("MuiBackdrop", slot);
  }
  const backdropClasses = generateUtilityClasses("MuiBackdrop", ["root", "invisible"]);
  const _excluded$_ = ["children", "className", "component", "components", "componentsProps", "invisible", "open", "slotProps", "slots", "TransitionComponent", "transitionDuration"];
  const useUtilityClasses$R = (ownerState) => {
    const {
      classes,
      invisible
    } = ownerState;
    const slots = {
      root: ["root", invisible && "invisible"]
    };
    return composeClasses(slots, getBackdropUtilityClass, classes);
  };
  const BackdropRoot = styled("div", {
    name: "MuiBackdrop",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, ownerState.invisible && styles2.invisible];
    }
  })(({
    ownerState
  }) => _extends$2({
    position: "fixed",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    right: 0,
    bottom: 0,
    top: 0,
    left: 0,
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    WebkitTapHighlightColor: "transparent"
  }, ownerState.invisible && {
    backgroundColor: "transparent"
  }));
  const Backdrop = /* @__PURE__ */ React__namespace.forwardRef(function Backdrop2(inProps, ref) {
    var _slotProps$root, _ref, _slots$root;
    const props = useThemeProps({
      props: inProps,
      name: "MuiBackdrop"
    });
    const {
      children,
      className,
      component = "div",
      components = {},
      componentsProps = {},
      invisible = false,
      open,
      slotProps = {},
      slots = {},
      TransitionComponent = Fade,
      transitionDuration
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$_);
    const ownerState = _extends$2({}, props, {
      component,
      invisible
    });
    const classes = useUtilityClasses$R(ownerState);
    const rootSlotProps = (_slotProps$root = slotProps.root) != null ? _slotProps$root : componentsProps.root;
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionComponent, _extends$2({
      in: open,
      timeout: transitionDuration
    }, other, {
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(BackdropRoot, _extends$2({
        "aria-hidden": true
      }, rootSlotProps, {
        as: (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : component,
        className: clsx$1(classes.root, className, rootSlotProps == null ? void 0 : rootSlotProps.className),
        ownerState: _extends$2({}, ownerState, rootSlotProps == null ? void 0 : rootSlotProps.ownerState),
        classes,
        ref,
        children
      }))
    }));
  });
  process.env.NODE_ENV !== "production" ? Backdrop.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: PropTypes.shape({
      Root: PropTypes.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: PropTypes.shape({
      root: PropTypes.object
    }),
    /**
     * If `true`, the backdrop is invisible.
     * It can be used when rendering a popover or a custom select component.
     * @default false
     */
    invisible: PropTypes.bool,
    /**
     * If `true`, the component is shown.
     */
    open: PropTypes.bool.isRequired,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: PropTypes.shape({
      root: PropTypes.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: PropTypes.shape({
      root: PropTypes.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Fade
     */
    TransitionComponent: PropTypes.elementType,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     */
    transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
      appear: PropTypes.number,
      enter: PropTypes.number,
      exit: PropTypes.number
    })])
  } : void 0;
  const _excluded$Z = ["BackdropComponent", "BackdropProps", "closeAfterTransition", "children", "component", "components", "componentsProps", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "slotProps", "slots", "theme"];
  const modalClasses = modalUnstyledClasses;
  const extendUtilityClasses = (ownerState) => {
    return ownerState.classes;
  };
  const ModalRoot = styled("div", {
    name: "MuiModal",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, !ownerState.open && ownerState.exited && styles2.hidden];
    }
  })(({
    theme,
    ownerState
  }) => _extends$2({
    position: "fixed",
    zIndex: (theme.vars || theme).zIndex.modal,
    right: 0,
    bottom: 0,
    top: 0,
    left: 0
  }, !ownerState.open && ownerState.exited && {
    visibility: "hidden"
  }));
  const ModalBackdrop = styled(Backdrop, {
    name: "MuiModal",
    slot: "Backdrop",
    overridesResolver: (props, styles2) => {
      return styles2.backdrop;
    }
  })({
    zIndex: -1
  });
  const Modal = /* @__PURE__ */ React__namespace.forwardRef(function Modal2(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$backdrop, _slotProps$root, _slotProps$backdrop;
    const props = useThemeProps({
      name: "MuiModal",
      props: inProps
    });
    const {
      BackdropComponent = ModalBackdrop,
      BackdropProps,
      closeAfterTransition = false,
      children,
      component,
      components = {},
      componentsProps = {},
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableEscapeKeyDown = false,
      disablePortal = false,
      disableRestoreFocus = false,
      disableScrollLock = false,
      hideBackdrop = false,
      keepMounted = false,
      slotProps,
      slots,
      // eslint-disable-next-line react/prop-types
      theme
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$Z);
    const [exited, setExited] = React__namespace.useState(true);
    const commonProps = {
      closeAfterTransition,
      disableAutoFocus,
      disableEnforceFocus,
      disableEscapeKeyDown,
      disablePortal,
      disableRestoreFocus,
      disableScrollLock,
      hideBackdrop,
      keepMounted
    };
    const ownerState = _extends$2({}, props, commonProps, {
      exited
    });
    const classes = extendUtilityClasses(ownerState);
    const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : ModalRoot;
    const BackdropSlot = (_ref2 = (_slots$backdrop = slots == null ? void 0 : slots.backdrop) != null ? _slots$backdrop : components.Backdrop) != null ? _ref2 : BackdropComponent;
    const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
    const backdropSlotProps = (_slotProps$backdrop = slotProps == null ? void 0 : slotProps.backdrop) != null ? _slotProps$backdrop : componentsProps.backdrop;
    return /* @__PURE__ */ jsxRuntimeExports.jsx(ModalUnstyled, _extends$2({
      slots: {
        root: RootSlot,
        backdrop: BackdropSlot
      },
      slotProps: {
        root: () => _extends$2({}, resolveComponentProps(rootSlotProps, ownerState), !isHostComponent(RootSlot) && {
          as: component,
          theme
        }),
        backdrop: () => _extends$2({}, BackdropProps, resolveComponentProps(backdropSlotProps, ownerState))
      },
      onTransitionEnter: () => setExited(false),
      onTransitionExited: () => setExited(true),
      ref
    }, other, {
      classes
    }, commonProps, {
      children
    }));
  });
  process.env.NODE_ENV !== "production" ? Modal.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * A backdrop component. This prop enables custom backdrop rendering.
     * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
     * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.
     * @default styled(Backdrop, {
     *   name: 'MuiModal',
     *   slot: 'Backdrop',
     *   overridesResolver: (props, styles) => {
     *     return styles.backdrop;
     *   },
     * })({
     *   zIndex: -1,
     * })
     */
    BackdropComponent: PropTypes.elementType,
    /**
     * Props applied to the [`Backdrop`](/material-ui/api/backdrop/) element.
     * @deprecated Use `slotProps.backdrop` instead.
     */
    BackdropProps: PropTypes.object,
    /**
     * A single child content element.
     */
    children: elementAcceptingRef.isRequired,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * When set to true the Modal waits until a nested Transition is completed before closing.
     * @default false
     */
    closeAfterTransition: PropTypes.bool,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: PropTypes.shape({
      Backdrop: PropTypes.elementType,
      Root: PropTypes.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: PropTypes.shape({
      backdrop: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: PropTypes.oneOfType([HTMLElementType, PropTypes.func]),
    /**
     * If `true`, the modal will not automatically shift focus to itself when it opens, and
     * replace it to the last focused element when it closes.
     * This also works correctly with any modal children that have the `disableAutoFocus` prop.
     *
     * Generally this should never be set to `true` as it makes the modal less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableAutoFocus: PropTypes.bool,
    /**
     * If `true`, the modal will not prevent focus from leaving the modal while open.
     *
     * Generally this should never be set to `true` as it makes the modal less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableEnforceFocus: PropTypes.bool,
    /**
     * If `true`, hitting escape will not fire the `onClose` callback.
     * @default false
     */
    disableEscapeKeyDown: PropTypes.bool,
    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: PropTypes.bool,
    /**
     * If `true`, the modal will not restore focus to previously focused element once
     * modal is hidden or unmounted.
     * @default false
     */
    disableRestoreFocus: PropTypes.bool,
    /**
     * Disable the scroll lock behavior.
     * @default false
     */
    disableScrollLock: PropTypes.bool,
    /**
     * If `true`, the backdrop is not rendered.
     * @default false
     */
    hideBackdrop: PropTypes.bool,
    /**
     * Always keep the children in the DOM.
     * This prop can be useful in SEO situation or
     * when you want to maximize the responsiveness of the Modal.
     * @default false
     */
    keepMounted: PropTypes.bool,
    /**
     * Callback fired when the backdrop is clicked.
     * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
     */
    onBackdropClick: PropTypes.func,
    /**
     * Callback fired when the component requests to be closed.
     * The `reason` parameter can optionally be used to control the response to `onClose`.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
     */
    onClose: PropTypes.func,
    /**
     * If `true`, the component is shown.
     */
    open: PropTypes.bool.isRequired,
    /**
     * The props used for each slot inside the Modal.
     * @default {}
     */
    slotProps: PropTypes.shape({
      backdrop: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the Modal.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      backdrop: PropTypes.elementType,
      root: PropTypes.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  const _excluded$Y = ["addEndListener", "appear", "children", "container", "direction", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  function getTranslateValue(direction, node2, resolvedContainer) {
    const rect = node2.getBoundingClientRect();
    const containerRect = resolvedContainer && resolvedContainer.getBoundingClientRect();
    const containerWindow = ownerWindow(node2);
    let transform;
    if (node2.fakeTransform) {
      transform = node2.fakeTransform;
    } else {
      const computedStyle = containerWindow.getComputedStyle(node2);
      transform = computedStyle.getPropertyValue("-webkit-transform") || computedStyle.getPropertyValue("transform");
    }
    let offsetX = 0;
    let offsetY = 0;
    if (transform && transform !== "none" && typeof transform === "string") {
      const transformValues = transform.split("(")[1].split(")")[0].split(",");
      offsetX = parseInt(transformValues[4], 10);
      offsetY = parseInt(transformValues[5], 10);
    }
    if (direction === "left") {
      if (containerRect) {
        return `translateX(${containerRect.right + offsetX - rect.left}px)`;
      }
      return `translateX(${containerWindow.innerWidth + offsetX - rect.left}px)`;
    }
    if (direction === "right") {
      if (containerRect) {
        return `translateX(-${rect.right - containerRect.left - offsetX}px)`;
      }
      return `translateX(-${rect.left + rect.width - offsetX}px)`;
    }
    if (direction === "up") {
      if (containerRect) {
        return `translateY(${containerRect.bottom + offsetY - rect.top}px)`;
      }
      return `translateY(${containerWindow.innerHeight + offsetY - rect.top}px)`;
    }
    if (containerRect) {
      return `translateY(-${rect.top - containerRect.top + rect.height - offsetY}px)`;
    }
    return `translateY(-${rect.top + rect.height - offsetY}px)`;
  }
  function resolveContainer(containerPropProp) {
    return typeof containerPropProp === "function" ? containerPropProp() : containerPropProp;
  }
  function setTranslateValue(direction, node2, containerProp) {
    const resolvedContainer = resolveContainer(containerProp);
    const transform = getTranslateValue(direction, node2, resolvedContainer);
    if (transform) {
      node2.style.webkitTransform = transform;
      node2.style.transform = transform;
    }
  }
  const Slide = /* @__PURE__ */ React__namespace.forwardRef(function Slide2(props, ref) {
    const theme = useTheme();
    const defaultEasing = {
      enter: theme.transitions.easing.easeOut,
      exit: theme.transitions.easing.sharp
    };
    const defaultTimeout = {
      enter: theme.transitions.duration.enteringScreen,
      exit: theme.transitions.duration.leavingScreen
    };
    const {
      addEndListener,
      appear = true,
      children,
      container: containerProp,
      direction = "down",
      easing: easingProp = defaultEasing,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style: style2,
      timeout = defaultTimeout,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$Y);
    const childrenRef = React__namespace.useRef(null);
    const handleRef = useForkRef(children.ref, childrenRef, ref);
    const normalizedTransitionCallback = (callback) => (isAppearing) => {
      if (callback) {
        if (isAppearing === void 0) {
          callback(childrenRef.current);
        } else {
          callback(childrenRef.current, isAppearing);
        }
      }
    };
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      setTranslateValue(direction, node2, containerProp);
      reflow(node2);
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntering = normalizedTransitionCallback((node2, isAppearing) => {
      const transitionProps = getTransitionProps({
        timeout,
        style: style2,
        easing: easingProp
      }, {
        mode: "enter"
      });
      node2.style.webkitTransition = theme.transitions.create("-webkit-transform", _extends$2({}, transitionProps));
      node2.style.transition = theme.transitions.create("transform", _extends$2({}, transitionProps));
      node2.style.webkitTransform = "none";
      node2.style.transform = "none";
      if (onEntering) {
        onEntering(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node2) => {
      const transitionProps = getTransitionProps({
        timeout,
        style: style2,
        easing: easingProp
      }, {
        mode: "exit"
      });
      node2.style.webkitTransition = theme.transitions.create("-webkit-transform", transitionProps);
      node2.style.transition = theme.transitions.create("transform", transitionProps);
      setTranslateValue(direction, node2, containerProp);
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback((node2) => {
      node2.style.webkitTransition = "";
      node2.style.transition = "";
      if (onExited) {
        onExited(node2);
      }
    });
    const handleAddEndListener = (next2) => {
      if (addEndListener) {
        addEndListener(childrenRef.current, next2);
      }
    };
    const updatePosition = React__namespace.useCallback(() => {
      if (childrenRef.current) {
        setTranslateValue(direction, childrenRef.current, containerProp);
      }
    }, [direction, containerProp]);
    React__namespace.useEffect(() => {
      if (inProp || direction === "down" || direction === "right") {
        return void 0;
      }
      const handleResize = debounce$1(() => {
        if (childrenRef.current) {
          setTranslateValue(direction, childrenRef.current, containerProp);
        }
      });
      const containerWindow = ownerWindow(childrenRef.current);
      containerWindow.addEventListener("resize", handleResize);
      return () => {
        handleResize.clear();
        containerWindow.removeEventListener("resize", handleResize);
      };
    }, [direction, inProp, containerProp]);
    React__namespace.useEffect(() => {
      if (!inProp) {
        updatePosition();
      }
    }, [inProp, updatePosition]);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionComponent, _extends$2({
      nodeRef: childrenRef,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      appear,
      in: inProp,
      timeout
    }, other, {
      children: (state, childProps) => {
        return /* @__PURE__ */ React__namespace.cloneElement(children, _extends$2({
          ref: handleRef,
          style: _extends$2({
            visibility: state === "exited" && !inProp ? "hidden" : void 0
          }, style2, children.props.style)
        }, childProps));
      }
    }));
  });
  process.env.NODE_ENV !== "production" ? Slide.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: PropTypes.func,
    /**
     * Perform the enter transition when it first mounts if `in` is also `true`.
     * Set this to `false` to disable this behavior.
     * @default true
     */
    appear: PropTypes.bool,
    /**
     * A single child content element.
     */
    children: elementAcceptingRef.isRequired,
    /**
     * An HTML element, or a function that returns one.
     * It's used to set the container the Slide is transitioning from.
     */
    container: chainPropTypes(PropTypes.oneOfType([HTMLElementType, PropTypes.func]), (props) => {
      if (props.open) {
        const resolvedContainer = resolveContainer(props.container);
        if (resolvedContainer && resolvedContainer.nodeType === 1) {
          const box = resolvedContainer.getBoundingClientRect();
          if (process.env.NODE_ENV !== "test" && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(["MUI: The `container` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        } else if (!resolvedContainer || typeof resolvedContainer.getBoundingClientRect !== "function" || resolvedContainer.contextElement != null && resolvedContainer.contextElement.nodeType !== 1) {
          return new Error(["MUI: The `container` prop provided to the component is invalid.", "It should be an HTML element instance."].join("\n"));
        }
      }
      return null;
    }),
    /**
     * Direction the child node will enter from.
     * @default 'down'
     */
    direction: PropTypes.oneOf(["down", "left", "right", "up"]),
    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     * @default {
     *   enter: theme.transitions.easing.easeOut,
     *   exit: theme.transitions.easing.sharp,
     * }
     */
    easing: PropTypes.oneOfType([PropTypes.shape({
      enter: PropTypes.string,
      exit: PropTypes.string
    }), PropTypes.string]),
    /**
     * If `true`, the component will transition in.
     */
    in: PropTypes.bool,
    /**
     * @ignore
     */
    onEnter: PropTypes.func,
    /**
     * @ignore
     */
    onEntered: PropTypes.func,
    /**
     * @ignore
     */
    onEntering: PropTypes.func,
    /**
     * @ignore
     */
    onExit: PropTypes.func,
    /**
     * @ignore
     */
    onExited: PropTypes.func,
    /**
     * @ignore
     */
    onExiting: PropTypes.func,
    /**
     * @ignore
     */
    style: PropTypes.object,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    timeout: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
      appear: PropTypes.number,
      enter: PropTypes.number,
      exit: PropTypes.number
    })])
  } : void 0;
  function getDrawerUtilityClass(slot) {
    return generateUtilityClass("MuiDrawer", slot);
  }
  const drawerClasses = generateUtilityClasses("MuiDrawer", ["root", "docked", "paper", "paperAnchorLeft", "paperAnchorRight", "paperAnchorTop", "paperAnchorBottom", "paperAnchorDockedLeft", "paperAnchorDockedRight", "paperAnchorDockedTop", "paperAnchorDockedBottom", "modal"]);
  const _excluded$X = ["BackdropProps"], _excluded2$2 = ["anchor", "BackdropProps", "children", "className", "elevation", "hideBackdrop", "ModalProps", "onClose", "open", "PaperProps", "SlideProps", "TransitionComponent", "transitionDuration", "variant"];
  const overridesResolver$2 = (props, styles2) => {
    const {
      ownerState
    } = props;
    return [styles2.root, (ownerState.variant === "permanent" || ownerState.variant === "persistent") && styles2.docked, styles2.modal];
  };
  const useUtilityClasses$Q = (ownerState) => {
    const {
      classes,
      anchor,
      variant
    } = ownerState;
    const slots = {
      root: ["root"],
      docked: [(variant === "permanent" || variant === "persistent") && "docked"],
      modal: ["modal"],
      paper: ["paper", `paperAnchor${capitalize(anchor)}`, variant !== "temporary" && `paperAnchorDocked${capitalize(anchor)}`]
    };
    return composeClasses(slots, getDrawerUtilityClass, classes);
  };
  const DrawerRoot = styled(Modal, {
    name: "MuiDrawer",
    slot: "Root",
    overridesResolver: overridesResolver$2
  })(({
    theme
  }) => ({
    zIndex: (theme.vars || theme).zIndex.drawer
  }));
  const DrawerDockedRoot = styled("div", {
    shouldForwardProp: rootShouldForwardProp,
    name: "MuiDrawer",
    slot: "Docked",
    skipVariantsResolver: false,
    overridesResolver: overridesResolver$2
  })({
    flex: "0 0 auto"
  });
  const DrawerPaper = styled(Paper, {
    name: "MuiDrawer",
    slot: "Paper",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.paper, styles2[`paperAnchor${capitalize(ownerState.anchor)}`], ownerState.variant !== "temporary" && styles2[`paperAnchorDocked${capitalize(ownerState.anchor)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends$2({
    overflowY: "auto",
    display: "flex",
    flexDirection: "column",
    height: "100%",
    flex: "1 0 auto",
    zIndex: (theme.vars || theme).zIndex.drawer,
    // Add iOS momentum scrolling for iOS < 13.0
    WebkitOverflowScrolling: "touch",
    // temporary style
    position: "fixed",
    top: 0,
    // We disable the focus ring for mouse, touch and keyboard users.
    // At some point, it would be better to keep it for keyboard users.
    // :focus-ring CSS pseudo-class will help.
    outline: 0
  }, ownerState.anchor === "left" && {
    left: 0
  }, ownerState.anchor === "top" && {
    top: 0,
    left: 0,
    right: 0,
    height: "auto",
    maxHeight: "100%"
  }, ownerState.anchor === "right" && {
    right: 0
  }, ownerState.anchor === "bottom" && {
    top: "auto",
    left: 0,
    bottom: 0,
    right: 0,
    height: "auto",
    maxHeight: "100%"
  }, ownerState.anchor === "left" && ownerState.variant !== "temporary" && {
    borderRight: `1px solid ${(theme.vars || theme).palette.divider}`
  }, ownerState.anchor === "top" && ownerState.variant !== "temporary" && {
    borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`
  }, ownerState.anchor === "right" && ownerState.variant !== "temporary" && {
    borderLeft: `1px solid ${(theme.vars || theme).palette.divider}`
  }, ownerState.anchor === "bottom" && ownerState.variant !== "temporary" && {
    borderTop: `1px solid ${(theme.vars || theme).palette.divider}`
  }));
  const oppositeDirection = {
    left: "right",
    right: "left",
    top: "down",
    bottom: "up"
  };
  function isHorizontal(anchor) {
    return ["left", "right"].indexOf(anchor) !== -1;
  }
  function getAnchor(theme, anchor) {
    return theme.direction === "rtl" && isHorizontal(anchor) ? oppositeDirection[anchor] : anchor;
  }
  const Drawer = /* @__PURE__ */ React__namespace.forwardRef(function Drawer2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiDrawer"
    });
    const theme = useTheme();
    const defaultTransitionDuration = {
      enter: theme.transitions.duration.enteringScreen,
      exit: theme.transitions.duration.leavingScreen
    };
    const {
      anchor: anchorProp = "left",
      BackdropProps,
      children,
      className,
      elevation = 16,
      hideBackdrop = false,
      ModalProps: {
        BackdropProps: BackdropPropsProp
      } = {},
      onClose: onClose2,
      open = false,
      PaperProps = {},
      SlideProps,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Slide,
      transitionDuration = defaultTransitionDuration,
      variant = "temporary"
    } = props, ModalProps = _objectWithoutPropertiesLoose(props.ModalProps, _excluded$X), other = _objectWithoutPropertiesLoose(props, _excluded2$2);
    const mounted = React__namespace.useRef(false);
    React__namespace.useEffect(() => {
      mounted.current = true;
    }, []);
    const anchorInvariant = getAnchor(theme, anchorProp);
    const anchor = anchorProp;
    const ownerState = _extends$2({}, props, {
      anchor,
      elevation,
      open,
      variant
    }, other);
    const classes = useUtilityClasses$Q(ownerState);
    const drawer = /* @__PURE__ */ jsxRuntimeExports.jsx(DrawerPaper, _extends$2({
      elevation: variant === "temporary" ? elevation : 0,
      square: true
    }, PaperProps, {
      className: clsx$1(classes.paper, PaperProps.className),
      ownerState,
      children
    }));
    if (variant === "permanent") {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(DrawerDockedRoot, _extends$2({
        className: clsx$1(classes.root, classes.docked, className),
        ownerState,
        ref
      }, other, {
        children: drawer
      }));
    }
    const slidingDrawer = /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionComponent, _extends$2({
      in: open,
      direction: oppositeDirection[anchorInvariant],
      timeout: transitionDuration,
      appear: mounted.current
    }, SlideProps, {
      children: drawer
    }));
    if (variant === "persistent") {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(DrawerDockedRoot, _extends$2({
        className: clsx$1(classes.root, classes.docked, className),
        ownerState,
        ref
      }, other, {
        children: slidingDrawer
      }));
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx(DrawerRoot, _extends$2({
      BackdropProps: _extends$2({}, BackdropProps, BackdropPropsProp, {
        transitionDuration
      }),
      className: clsx$1(classes.root, classes.modal, className),
      open,
      ownerState,
      onClose: onClose2,
      hideBackdrop,
      ref
    }, other, ModalProps, {
      children: slidingDrawer
    }));
  });
  process.env.NODE_ENV !== "production" ? Drawer.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Side from which the drawer will appear.
     * @default 'left'
     */
    anchor: PropTypes.oneOf(["bottom", "left", "right", "top"]),
    /**
     * @ignore
     */
    BackdropProps: PropTypes.object,
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The elevation of the drawer.
     * @default 16
     */
    elevation: integerPropType,
    /**
     * If `true`, the backdrop is not rendered.
     * @default false
     */
    hideBackdrop: PropTypes.bool,
    /**
     * Props applied to the [`Modal`](/material-ui/api/modal/) element.
     * @default {}
     */
    ModalProps: PropTypes.object,
    /**
     * Callback fired when the component requests to be closed.
     *
     * @param {object} event The event source of the callback.
     */
    onClose: PropTypes.func,
    /**
     * If `true`, the component is shown.
     * @default false
     */
    open: PropTypes.bool,
    /**
     * Props applied to the [`Paper`](/material-ui/api/paper/) element.
     * @default {}
     */
    PaperProps: PropTypes.object,
    /**
     * Props applied to the [`Slide`](/material-ui/api/slide/) element.
     */
    SlideProps: PropTypes.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
      appear: PropTypes.number,
      enter: PropTypes.number,
      exit: PropTypes.number
    })]),
    /**
     * The variant to use.
     * @default 'temporary'
     */
    variant: PropTypes.oneOf(["permanent", "persistent", "temporary"])
  } : void 0;
  const BasicDrawerHeader = styled("div")(({ theme }) => __spreadValues({
    display: "flex",
    alignItems: "center",
    justifyContent: "space-between",
    padding: theme.spacing(0, 1),
    minHeight: "43px"
  }, theme.mixins.toolbar));
  const BasicDrawer = styled(Drawer, { shouldForwardProp: (prop) => prop !== "open" })(
    ({ theme, open, drawerwidth }) => __spreadValues(__spreadValues({
      width: drawerwidth,
      flexShrink: 0,
      whiteSpace: "nowrap",
      boxSizing: "border-box"
    }, open && __spreadProps(__spreadValues({}, openedMixin(theme, drawerwidth)), {
      "& .MuiDrawer-paper": openedMixin(theme, drawerwidth)
    })), !open && __spreadProps(__spreadValues({}, closedMixin(theme)), {
      "& .MuiDrawer-paper": closedMixin(theme)
    }))
  );
  const openedMixin = (theme, drawerwidth) => ({
    // backgroundColor: theme.palette.primary.main,
    width: drawerwidth,
    transition: theme.transitions.create("width", {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.enteringScreen
    }),
    overflowX: "hidden"
  });
  const closedMixin = (theme) => ({
    transition: theme.transitions.create("width", {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.leavingScreen
    }),
    overflowX: "hidden",
    display: "none",
    width: `calc(${theme.spacing(7)} + 1px)`,
    [theme.breakpoints.up("sm")]: {
      width: `calc(${theme.spacing(8)} + 1px)`
    }
  });
  const { Child: Child$1 } = gubu_minExports.Gubu;
  const BasicSideSpecShape = gubu_minExports.Gubu({
    side: {
      logo: {
        img: String
      },
      variant: String,
      section: Child$1({
        title: String,
        divider: Boolean,
        item: Child$1({
          kind: String,
          label: String,
          icon: String,
          path: String,
          access: Child$1(Boolean, {})
        })
      })
    },
    view: {}
  });
  function onClose(seneca) {
    seneca.act("aim:app,set:state", {
      section: "vxg.cmp.BasicSide.show",
      content: false
    });
  }
  function BasicSide(props) {
    const { vxg, ctx } = props;
    const { seneca } = ctx();
    const theme = material.useTheme();
    const vxgState = reactRedux.useSelector((state) => state.main.vxg);
    const open = vxgState.cmp.BasicSide.show;
    const navigate = reactRouterDom.useNavigate();
    const basicSideSpec = BasicSideSpecShape(props.spec);
    function handleItemSelect(key, item) {
      if (item.kind === "resource") {
        navigate(item.path);
      }
    }
    const basicSideMenuSpec = {
      section: basicSideSpec.side.section
    };
    const drawerVariant = basicSideSpec.side.variant;
    if (drawerVariant === "permanent") {
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(material.Drawer, { open, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(material.Toolbar, {}),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          material.Box,
          {
            className: "DrawerContainer",
            sx: {
              backgroundColor: "#2a2d49",
              overflow: "auto",
              marginLeft: "23px",
              marginBottom: "20px",
              marginTop: "15px",
              width: "189px",
              height: "100%",
              borderRadius: "4px"
            },
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              BasicSideMenu,
              {
                spec: basicSideMenuSpec,
                onItemSelect: handleItemSelect
              }
            )
          }
        )
      ] });
    } else {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(material.Drawer, { open, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(material.Box, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(BasicDrawerHeader, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: basicSideSpec.side.logo.img, style: { width: "5rem" } }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(material.IconButton, { onClick: () => onClose(seneca), children: /* @__PURE__ */ jsxRuntimeExports.jsx(default_1$s, { sx: { color: theme.palette.primary.main } }) })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(material.Divider, {}),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          BasicSideMenu,
          {
            spec: basicSideMenuSpec,
            onItemSelect: handleItemSelect
          }
        )
      ] }) });
    }
  }
  /**
   * table-core
   *
   * Copyright (c) TanStack
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   */
  function functionalUpdate(updater, input) {
    return typeof updater === "function" ? updater(input) : updater;
  }
  function noop() {
  }
  function makeStateUpdater(key, instance) {
    return (updater) => {
      instance.setState((old) => {
        return __spreadProps(__spreadValues({}, old), {
          [key]: functionalUpdate(updater, old[key])
        });
      });
    };
  }
  function isFunction$1(d) {
    return d instanceof Function;
  }
  function isNumberArray(d) {
    return Array.isArray(d) && d.every((val) => typeof val === "number");
  }
  function flattenBy(arr, getChildren) {
    const flat = [];
    const recurse = (subArr) => {
      subArr.forEach((item) => {
        flat.push(item);
        const children = getChildren(item);
        if (children != null && children.length) {
          recurse(children);
        }
      });
    };
    recurse(arr);
    return flat;
  }
  function memo$1(getDeps, fn, opts) {
    let deps = [];
    let result;
    return () => {
      let depTime;
      if (opts.key && opts.debug)
        depTime = Date.now();
      const newDeps = getDeps();
      const depsChanged = newDeps.length !== deps.length || newDeps.some((dep, index2) => deps[index2] !== dep);
      if (!depsChanged) {
        return result;
      }
      deps = newDeps;
      let resultTime;
      if (opts.key && opts.debug)
        resultTime = Date.now();
      result = fn(...newDeps);
      opts == null || opts.onChange == null || opts.onChange(result);
      if (opts.key && opts.debug) {
        if (opts != null && opts.debug()) {
          const depEndTime = Math.round((Date.now() - depTime) * 100) / 100;
          const resultEndTime = Math.round((Date.now() - resultTime) * 100) / 100;
          const resultFpsPercentage = resultEndTime / 16;
          const pad = (str, num) => {
            str = String(str);
            while (str.length < num) {
              str = " " + str;
            }
            return str;
          };
          console.info(`%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`, `
            font-size: .6rem;
            font-weight: bold;
            color: hsl(${Math.max(0, Math.min(120 - 120 * resultFpsPercentage, 120))}deg 100% 31%);`, opts == null ? void 0 : opts.key);
        }
      }
      return result;
    };
  }
  function createColumn(table, columnDef, depth, parent) {
    var _ref, _resolvedColumnDef$id;
    const defaultColumn = table._getDefaultColumnDef();
    const resolvedColumnDef = __spreadValues(__spreadValues({}, defaultColumn), columnDef);
    const accessorKey = resolvedColumnDef.accessorKey;
    let id = (_ref = (_resolvedColumnDef$id = resolvedColumnDef.id) != null ? _resolvedColumnDef$id : accessorKey ? accessorKey.replace(".", "_") : void 0) != null ? _ref : typeof resolvedColumnDef.header === "string" ? resolvedColumnDef.header : void 0;
    let accessorFn;
    if (resolvedColumnDef.accessorFn) {
      accessorFn = resolvedColumnDef.accessorFn;
    } else if (accessorKey) {
      if (accessorKey.includes(".")) {
        accessorFn = (originalRow) => {
          let result = originalRow;
          for (const key of accessorKey.split(".")) {
            var _result;
            result = (_result = result) == null ? void 0 : _result[key];
            if (process.env.NODE_ENV !== "production" && result === void 0) {
              console.warn(`"${key}" in deeply nested key "${accessorKey}" returned undefined.`);
            }
          }
          return result;
        };
      } else {
        accessorFn = (originalRow) => originalRow[resolvedColumnDef.accessorKey];
      }
    }
    if (!id) {
      if (process.env.NODE_ENV !== "production") {
        throw new Error(resolvedColumnDef.accessorFn ? `Columns require an id when using an accessorFn` : `Columns require an id when using a non-string header`);
      }
      throw new Error();
    }
    let column2 = {
      id: `${String(id)}`,
      accessorFn,
      parent,
      depth,
      columnDef: resolvedColumnDef,
      columns: [],
      getFlatColumns: memo$1(() => [true], () => {
        var _column$columns;
        return [column2, ...(_column$columns = column2.columns) == null ? void 0 : _column$columns.flatMap((d) => d.getFlatColumns())];
      }, {
        key: process.env.NODE_ENV === "production" && "column.getFlatColumns",
        debug: () => {
          var _table$options$debugA;
          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugColumns;
        }
      }),
      getLeafColumns: memo$1(() => [table._getOrderColumnsFn()], (orderColumns2) => {
        var _column$columns2;
        if ((_column$columns2 = column2.columns) != null && _column$columns2.length) {
          let leafColumns = column2.columns.flatMap((column3) => column3.getLeafColumns());
          return orderColumns2(leafColumns);
        }
        return [column2];
      }, {
        key: process.env.NODE_ENV === "production" && "column.getLeafColumns",
        debug: () => {
          var _table$options$debugA2;
          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugColumns;
        }
      })
    };
    for (const feature of table._features) {
      feature.createColumn == null || feature.createColumn(column2, table);
    }
    return column2;
  }
  function createHeader(table, column2, options) {
    var _options$id;
    const id = (_options$id = options.id) != null ? _options$id : column2.id;
    let header = {
      id,
      column: column2,
      index: options.index,
      isPlaceholder: !!options.isPlaceholder,
      placeholderId: options.placeholderId,
      depth: options.depth,
      subHeaders: [],
      colSpan: 0,
      rowSpan: 0,
      headerGroup: null,
      getLeafHeaders: () => {
        const leafHeaders = [];
        const recurseHeader = (h) => {
          if (h.subHeaders && h.subHeaders.length) {
            h.subHeaders.map(recurseHeader);
          }
          leafHeaders.push(h);
        };
        recurseHeader(header);
        return leafHeaders;
      },
      getContext: () => ({
        table,
        header,
        column: column2
      })
    };
    table._features.forEach((feature) => {
      feature.createHeader == null || feature.createHeader(header, table);
    });
    return header;
  }
  const Headers = {
    createTable: (table) => {
      table.getHeaderGroups = memo$1(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left2, right2) => {
        var _left$map$filter, _right$map$filter;
        const leftColumns = (_left$map$filter = left2 == null ? void 0 : left2.map((columnId) => leafColumns.find((d) => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter : [];
        const rightColumns = (_right$map$filter = right2 == null ? void 0 : right2.map((columnId) => leafColumns.find((d) => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter : [];
        const centerColumns = leafColumns.filter((column2) => !(left2 != null && left2.includes(column2.id)) && !(right2 != null && right2.includes(column2.id)));
        const headerGroups = buildHeaderGroups(allColumns, [...leftColumns, ...centerColumns, ...rightColumns], table);
        return headerGroups;
      }, {
        key: process.env.NODE_ENV === "development" && "getHeaderGroups",
        debug: () => {
          var _table$options$debugA;
          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugHeaders;
        }
      });
      table.getCenterHeaderGroups = memo$1(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left2, right2) => {
        leafColumns = leafColumns.filter((column2) => !(left2 != null && left2.includes(column2.id)) && !(right2 != null && right2.includes(column2.id)));
        return buildHeaderGroups(allColumns, leafColumns, table, "center");
      }, {
        key: process.env.NODE_ENV === "development" && "getCenterHeaderGroups",
        debug: () => {
          var _table$options$debugA2;
          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugHeaders;
        }
      });
      table.getLeftHeaderGroups = memo$1(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left], (allColumns, leafColumns, left2) => {
        var _left$map$filter2;
        const orderedLeafColumns = (_left$map$filter2 = left2 == null ? void 0 : left2.map((columnId) => leafColumns.find((d) => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter2 : [];
        return buildHeaderGroups(allColumns, orderedLeafColumns, table, "left");
      }, {
        key: process.env.NODE_ENV === "development" && "getLeftHeaderGroups",
        debug: () => {
          var _table$options$debugA3;
          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugHeaders;
        }
      });
      table.getRightHeaderGroups = memo$1(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.right], (allColumns, leafColumns, right2) => {
        var _right$map$filter2;
        const orderedLeafColumns = (_right$map$filter2 = right2 == null ? void 0 : right2.map((columnId) => leafColumns.find((d) => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter2 : [];
        return buildHeaderGroups(allColumns, orderedLeafColumns, table, "right");
      }, {
        key: process.env.NODE_ENV === "development" && "getRightHeaderGroups",
        debug: () => {
          var _table$options$debugA4;
          return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugHeaders;
        }
      });
      table.getFooterGroups = memo$1(() => [table.getHeaderGroups()], (headerGroups) => {
        return [...headerGroups].reverse();
      }, {
        key: process.env.NODE_ENV === "development" && "getFooterGroups",
        debug: () => {
          var _table$options$debugA5;
          return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugHeaders;
        }
      });
      table.getLeftFooterGroups = memo$1(() => [table.getLeftHeaderGroups()], (headerGroups) => {
        return [...headerGroups].reverse();
      }, {
        key: process.env.NODE_ENV === "development" && "getLeftFooterGroups",
        debug: () => {
          var _table$options$debugA6;
          return (_table$options$debugA6 = table.options.debugAll) != null ? _table$options$debugA6 : table.options.debugHeaders;
        }
      });
      table.getCenterFooterGroups = memo$1(() => [table.getCenterHeaderGroups()], (headerGroups) => {
        return [...headerGroups].reverse();
      }, {
        key: process.env.NODE_ENV === "development" && "getCenterFooterGroups",
        debug: () => {
          var _table$options$debugA7;
          return (_table$options$debugA7 = table.options.debugAll) != null ? _table$options$debugA7 : table.options.debugHeaders;
        }
      });
      table.getRightFooterGroups = memo$1(() => [table.getRightHeaderGroups()], (headerGroups) => {
        return [...headerGroups].reverse();
      }, {
        key: process.env.NODE_ENV === "development" && "getRightFooterGroups",
        debug: () => {
          var _table$options$debugA8;
          return (_table$options$debugA8 = table.options.debugAll) != null ? _table$options$debugA8 : table.options.debugHeaders;
        }
      });
      table.getFlatHeaders = memo$1(() => [table.getHeaderGroups()], (headerGroups) => {
        return headerGroups.map((headerGroup) => {
          return headerGroup.headers;
        }).flat();
      }, {
        key: process.env.NODE_ENV === "development" && "getFlatHeaders",
        debug: () => {
          var _table$options$debugA9;
          return (_table$options$debugA9 = table.options.debugAll) != null ? _table$options$debugA9 : table.options.debugHeaders;
        }
      });
      table.getLeftFlatHeaders = memo$1(() => [table.getLeftHeaderGroups()], (left2) => {
        return left2.map((headerGroup) => {
          return headerGroup.headers;
        }).flat();
      }, {
        key: process.env.NODE_ENV === "development" && "getLeftFlatHeaders",
        debug: () => {
          var _table$options$debugA10;
          return (_table$options$debugA10 = table.options.debugAll) != null ? _table$options$debugA10 : table.options.debugHeaders;
        }
      });
      table.getCenterFlatHeaders = memo$1(() => [table.getCenterHeaderGroups()], (left2) => {
        return left2.map((headerGroup) => {
          return headerGroup.headers;
        }).flat();
      }, {
        key: process.env.NODE_ENV === "development" && "getCenterFlatHeaders",
        debug: () => {
          var _table$options$debugA11;
          return (_table$options$debugA11 = table.options.debugAll) != null ? _table$options$debugA11 : table.options.debugHeaders;
        }
      });
      table.getRightFlatHeaders = memo$1(() => [table.getRightHeaderGroups()], (left2) => {
        return left2.map((headerGroup) => {
          return headerGroup.headers;
        }).flat();
      }, {
        key: process.env.NODE_ENV === "development" && "getRightFlatHeaders",
        debug: () => {
          var _table$options$debugA12;
          return (_table$options$debugA12 = table.options.debugAll) != null ? _table$options$debugA12 : table.options.debugHeaders;
        }
      });
      table.getCenterLeafHeaders = memo$1(() => [table.getCenterFlatHeaders()], (flatHeaders) => {
        return flatHeaders.filter((header) => {
          var _header$subHeaders;
          return !((_header$subHeaders = header.subHeaders) != null && _header$subHeaders.length);
        });
      }, {
        key: process.env.NODE_ENV === "development" && "getCenterLeafHeaders",
        debug: () => {
          var _table$options$debugA13;
          return (_table$options$debugA13 = table.options.debugAll) != null ? _table$options$debugA13 : table.options.debugHeaders;
        }
      });
      table.getLeftLeafHeaders = memo$1(() => [table.getLeftFlatHeaders()], (flatHeaders) => {
        return flatHeaders.filter((header) => {
          var _header$subHeaders2;
          return !((_header$subHeaders2 = header.subHeaders) != null && _header$subHeaders2.length);
        });
      }, {
        key: process.env.NODE_ENV === "development" && "getLeftLeafHeaders",
        debug: () => {
          var _table$options$debugA14;
          return (_table$options$debugA14 = table.options.debugAll) != null ? _table$options$debugA14 : table.options.debugHeaders;
        }
      });
      table.getRightLeafHeaders = memo$1(() => [table.getRightFlatHeaders()], (flatHeaders) => {
        return flatHeaders.filter((header) => {
          var _header$subHeaders3;
          return !((_header$subHeaders3 = header.subHeaders) != null && _header$subHeaders3.length);
        });
      }, {
        key: process.env.NODE_ENV === "development" && "getRightLeafHeaders",
        debug: () => {
          var _table$options$debugA15;
          return (_table$options$debugA15 = table.options.debugAll) != null ? _table$options$debugA15 : table.options.debugHeaders;
        }
      });
      table.getLeafHeaders = memo$1(() => [table.getLeftHeaderGroups(), table.getCenterHeaderGroups(), table.getRightHeaderGroups()], (left2, center, right2) => {
        var _left$0$headers, _left$, _center$0$headers, _center$, _right$0$headers, _right$;
        return [...(_left$0$headers = (_left$ = left2[0]) == null ? void 0 : _left$.headers) != null ? _left$0$headers : [], ...(_center$0$headers = (_center$ = center[0]) == null ? void 0 : _center$.headers) != null ? _center$0$headers : [], ...(_right$0$headers = (_right$ = right2[0]) == null ? void 0 : _right$.headers) != null ? _right$0$headers : []].map((header) => {
          return header.getLeafHeaders();
        }).flat();
      }, {
        key: process.env.NODE_ENV === "development" && "getLeafHeaders",
        debug: () => {
          var _table$options$debugA16;
          return (_table$options$debugA16 = table.options.debugAll) != null ? _table$options$debugA16 : table.options.debugHeaders;
        }
      });
    }
  };
  function buildHeaderGroups(allColumns, columnsToGroup, table, headerFamily) {
    var _headerGroups$0$heade, _headerGroups$;
    let maxDepth = 0;
    const findMaxDepth = function(columns, depth) {
      if (depth === void 0) {
        depth = 1;
      }
      maxDepth = Math.max(maxDepth, depth);
      columns.filter((column2) => column2.getIsVisible()).forEach((column2) => {
        var _column$columns;
        if ((_column$columns = column2.columns) != null && _column$columns.length) {
          findMaxDepth(column2.columns, depth + 1);
        }
      }, 0);
    };
    findMaxDepth(allColumns);
    let headerGroups = [];
    const createHeaderGroup = (headersToGroup, depth) => {
      const headerGroup = {
        depth,
        id: [headerFamily, `${depth}`].filter(Boolean).join("_"),
        headers: []
      };
      const pendingParentHeaders = [];
      headersToGroup.forEach((headerToGroup) => {
        const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0];
        const isLeafHeader = headerToGroup.column.depth === headerGroup.depth;
        let column2;
        let isPlaceholder = false;
        if (isLeafHeader && headerToGroup.column.parent) {
          column2 = headerToGroup.column.parent;
        } else {
          column2 = headerToGroup.column;
          isPlaceholder = true;
        }
        if (latestPendingParentHeader && (latestPendingParentHeader == null ? void 0 : latestPendingParentHeader.column) === column2) {
          latestPendingParentHeader.subHeaders.push(headerToGroup);
        } else {
          const header = createHeader(table, column2, {
            id: [headerFamily, depth, column2.id, headerToGroup == null ? void 0 : headerToGroup.id].filter(Boolean).join("_"),
            isPlaceholder,
            placeholderId: isPlaceholder ? `${pendingParentHeaders.filter((d) => d.column === column2).length}` : void 0,
            depth,
            index: pendingParentHeaders.length
          });
          header.subHeaders.push(headerToGroup);
          pendingParentHeaders.push(header);
        }
        headerGroup.headers.push(headerToGroup);
        headerToGroup.headerGroup = headerGroup;
      });
      headerGroups.push(headerGroup);
      if (depth > 0) {
        createHeaderGroup(pendingParentHeaders, depth - 1);
      }
    };
    const bottomHeaders = columnsToGroup.map((column2, index2) => createHeader(table, column2, {
      depth: maxDepth,
      index: index2
    }));
    createHeaderGroup(bottomHeaders, maxDepth - 1);
    headerGroups.reverse();
    const recurseHeadersForSpans = (headers) => {
      const filteredHeaders = headers.filter((header) => header.column.getIsVisible());
      return filteredHeaders.map((header) => {
        let colSpan = 0;
        let rowSpan = 0;
        let childRowSpans = [0];
        if (header.subHeaders && header.subHeaders.length) {
          childRowSpans = [];
          recurseHeadersForSpans(header.subHeaders).forEach((_ref) => {
            let {
              colSpan: childColSpan,
              rowSpan: childRowSpan
            } = _ref;
            colSpan += childColSpan;
            childRowSpans.push(childRowSpan);
          });
        } else {
          colSpan = 1;
        }
        const minChildRowSpan = Math.min(...childRowSpans);
        rowSpan = rowSpan + minChildRowSpan;
        header.colSpan = colSpan;
        header.rowSpan = rowSpan;
        return {
          colSpan,
          rowSpan
        };
      });
    };
    recurseHeadersForSpans((_headerGroups$0$heade = (_headerGroups$ = headerGroups[0]) == null ? void 0 : _headerGroups$.headers) != null ? _headerGroups$0$heade : []);
    return headerGroups;
  }
  const defaultColumnSizing = {
    size: 150,
    minSize: 20,
    maxSize: Number.MAX_SAFE_INTEGER
  };
  const getDefaultColumnSizingInfoState = () => ({
    startOffset: null,
    startSize: null,
    deltaOffset: null,
    deltaPercentage: null,
    isResizingColumn: false,
    columnSizingStart: []
  });
  const ColumnSizing = {
    getDefaultColumnDef: () => {
      return defaultColumnSizing;
    },
    getInitialState: (state) => {
      return __spreadValues({
        columnSizing: {},
        columnSizingInfo: getDefaultColumnSizingInfoState()
      }, state);
    },
    getDefaultOptions: (table) => {
      return {
        columnResizeMode: "onEnd",
        onColumnSizingChange: makeStateUpdater("columnSizing", table),
        onColumnSizingInfoChange: makeStateUpdater("columnSizingInfo", table)
      };
    },
    createColumn: (column2, table) => {
      column2.getSize = () => {
        var _column$columnDef$min, _ref, _column$columnDef$max;
        const columnSize = table.getState().columnSizing[column2.id];
        return Math.min(Math.max((_column$columnDef$min = column2.columnDef.minSize) != null ? _column$columnDef$min : defaultColumnSizing.minSize, (_ref = columnSize != null ? columnSize : column2.columnDef.size) != null ? _ref : defaultColumnSizing.size), (_column$columnDef$max = column2.columnDef.maxSize) != null ? _column$columnDef$max : defaultColumnSizing.maxSize);
      };
      column2.getStart = (position2) => {
        const columns = !position2 ? table.getVisibleLeafColumns() : position2 === "left" ? table.getLeftVisibleLeafColumns() : table.getRightVisibleLeafColumns();
        const index2 = columns.findIndex((d) => d.id === column2.id);
        if (index2 > 0) {
          const prevSiblingColumn = columns[index2 - 1];
          return prevSiblingColumn.getStart(position2) + prevSiblingColumn.getSize();
        }
        return 0;
      };
      column2.resetSize = () => {
        table.setColumnSizing((_ref2) => {
          var _a;
          let _b = _ref2, {
            [_a = column2.id]: _2
          } = _b, rest = __objRest(_b, [
            __restKey(_a)
          ]);
          return rest;
        });
      };
      column2.getCanResize = () => {
        var _column$columnDef$ena, _table$options$enable;
        return ((_column$columnDef$ena = column2.columnDef.enableResizing) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnResizing) != null ? _table$options$enable : true);
      };
      column2.getIsResizing = () => {
        return table.getState().columnSizingInfo.isResizingColumn === column2.id;
      };
    },
    createHeader: (header, table) => {
      header.getSize = () => {
        let sum2 = 0;
        const recurse = (header2) => {
          if (header2.subHeaders.length) {
            header2.subHeaders.forEach(recurse);
          } else {
            var _header$column$getSiz;
            sum2 += (_header$column$getSiz = header2.column.getSize()) != null ? _header$column$getSiz : 0;
          }
        };
        recurse(header);
        return sum2;
      };
      header.getStart = () => {
        if (header.index > 0) {
          const prevSiblingHeader = header.headerGroup.headers[header.index - 1];
          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize();
        }
        return 0;
      };
      header.getResizeHandler = () => {
        const column2 = table.getColumn(header.column.id);
        const canResize = column2 == null ? void 0 : column2.getCanResize();
        return (e) => {
          if (!column2 || !canResize) {
            return;
          }
          e.persist == null || e.persist();
          if (isTouchStartEvent(e)) {
            if (e.touches && e.touches.length > 1) {
              return;
            }
          }
          const startSize = header.getSize();
          const columnSizingStart = header ? header.getLeafHeaders().map((d) => [d.column.id, d.column.getSize()]) : [[column2.id, column2.getSize()]];
          const clientX = isTouchStartEvent(e) ? Math.round(e.touches[0].clientX) : e.clientX;
          const newColumnSizing = {};
          const updateOffset = (eventType, clientXPos) => {
            if (typeof clientXPos !== "number") {
              return;
            }
            table.setColumnSizingInfo((old) => {
              var _old$startOffset, _old$startSize;
              const deltaOffset = clientXPos - ((_old$startOffset = old == null ? void 0 : old.startOffset) != null ? _old$startOffset : 0);
              const deltaPercentage = Math.max(deltaOffset / ((_old$startSize = old == null ? void 0 : old.startSize) != null ? _old$startSize : 0), -0.999999);
              old.columnSizingStart.forEach((_ref3) => {
                let [columnId, headerSize] = _ref3;
                newColumnSizing[columnId] = Math.round(Math.max(headerSize + headerSize * deltaPercentage, 0) * 100) / 100;
              });
              return __spreadProps(__spreadValues({}, old), {
                deltaOffset,
                deltaPercentage
              });
            });
            if (table.options.columnResizeMode === "onChange" || eventType === "end") {
              table.setColumnSizing((old) => __spreadValues(__spreadValues({}, old), newColumnSizing));
            }
          };
          const onMove = (clientXPos) => updateOffset("move", clientXPos);
          const onEnd = (clientXPos) => {
            updateOffset("end", clientXPos);
            table.setColumnSizingInfo((old) => __spreadProps(__spreadValues({}, old), {
              isResizingColumn: false,
              startOffset: null,
              startSize: null,
              deltaOffset: null,
              deltaPercentage: null,
              columnSizingStart: []
            }));
          };
          const mouseEvents = {
            moveHandler: (e2) => onMove(e2.clientX),
            upHandler: (e2) => {
              document.removeEventListener("mousemove", mouseEvents.moveHandler);
              document.removeEventListener("mouseup", mouseEvents.upHandler);
              onEnd(e2.clientX);
            }
          };
          const touchEvents = {
            moveHandler: (e2) => {
              if (e2.cancelable) {
                e2.preventDefault();
                e2.stopPropagation();
              }
              onMove(e2.touches[0].clientX);
              return false;
            },
            upHandler: (e2) => {
              var _e$touches$;
              document.removeEventListener("touchmove", touchEvents.moveHandler);
              document.removeEventListener("touchend", touchEvents.upHandler);
              if (e2.cancelable) {
                e2.preventDefault();
                e2.stopPropagation();
              }
              onEnd((_e$touches$ = e2.touches[0]) == null ? void 0 : _e$touches$.clientX);
            }
          };
          const passiveIfSupported = passiveEventSupported() ? {
            passive: false
          } : false;
          if (isTouchStartEvent(e)) {
            document.addEventListener("touchmove", touchEvents.moveHandler, passiveIfSupported);
            document.addEventListener("touchend", touchEvents.upHandler, passiveIfSupported);
          } else {
            document.addEventListener("mousemove", mouseEvents.moveHandler, passiveIfSupported);
            document.addEventListener("mouseup", mouseEvents.upHandler, passiveIfSupported);
          }
          table.setColumnSizingInfo((old) => __spreadProps(__spreadValues({}, old), {
            startOffset: clientX,
            startSize,
            deltaOffset: 0,
            deltaPercentage: 0,
            columnSizingStart,
            isResizingColumn: column2.id
          }));
        };
      };
    },
    createTable: (table) => {
      table.setColumnSizing = (updater) => table.options.onColumnSizingChange == null ? void 0 : table.options.onColumnSizingChange(updater);
      table.setColumnSizingInfo = (updater) => table.options.onColumnSizingInfoChange == null ? void 0 : table.options.onColumnSizingInfoChange(updater);
      table.resetColumnSizing = (defaultState) => {
        var _table$initialState$c;
        table.setColumnSizing(defaultState ? {} : (_table$initialState$c = table.initialState.columnSizing) != null ? _table$initialState$c : {});
      };
      table.resetHeaderSizeInfo = (defaultState) => {
        var _table$initialState$c2;
        table.setColumnSizingInfo(defaultState ? getDefaultColumnSizingInfoState() : (_table$initialState$c2 = table.initialState.columnSizingInfo) != null ? _table$initialState$c2 : getDefaultColumnSizingInfoState());
      };
      table.getTotalSize = () => {
        var _table$getHeaderGroup, _table$getHeaderGroup2;
        return (_table$getHeaderGroup = (_table$getHeaderGroup2 = table.getHeaderGroups()[0]) == null ? void 0 : _table$getHeaderGroup2.headers.reduce((sum2, header) => {
          return sum2 + header.getSize();
        }, 0)) != null ? _table$getHeaderGroup : 0;
      };
      table.getLeftTotalSize = () => {
        var _table$getLeftHeaderG, _table$getLeftHeaderG2;
        return (_table$getLeftHeaderG = (_table$getLeftHeaderG2 = table.getLeftHeaderGroups()[0]) == null ? void 0 : _table$getLeftHeaderG2.headers.reduce((sum2, header) => {
          return sum2 + header.getSize();
        }, 0)) != null ? _table$getLeftHeaderG : 0;
      };
      table.getCenterTotalSize = () => {
        var _table$getCenterHeade, _table$getCenterHeade2;
        return (_table$getCenterHeade = (_table$getCenterHeade2 = table.getCenterHeaderGroups()[0]) == null ? void 0 : _table$getCenterHeade2.headers.reduce((sum2, header) => {
          return sum2 + header.getSize();
        }, 0)) != null ? _table$getCenterHeade : 0;
      };
      table.getRightTotalSize = () => {
        var _table$getRightHeader, _table$getRightHeader2;
        return (_table$getRightHeader = (_table$getRightHeader2 = table.getRightHeaderGroups()[0]) == null ? void 0 : _table$getRightHeader2.headers.reduce((sum2, header) => {
          return sum2 + header.getSize();
        }, 0)) != null ? _table$getRightHeader : 0;
      };
    }
  };
  let passiveSupported = null;
  function passiveEventSupported() {
    if (typeof passiveSupported === "boolean")
      return passiveSupported;
    let supported = false;
    try {
      const options = {
        get passive() {
          supported = true;
          return false;
        }
      };
      const noop2 = () => {
      };
      window.addEventListener("test", noop2, options);
      window.removeEventListener("test", noop2);
    } catch (err) {
      supported = false;
    }
    passiveSupported = supported;
    return passiveSupported;
  }
  function isTouchStartEvent(e) {
    return e.type === "touchstart";
  }
  const Expanding = {
    getInitialState: (state) => {
      return __spreadValues({
        expanded: {}
      }, state);
    },
    getDefaultOptions: (table) => {
      return {
        onExpandedChange: makeStateUpdater("expanded", table),
        paginateExpandedRows: true
      };
    },
    createTable: (table) => {
      let registered = false;
      let queued = false;
      table._autoResetExpanded = () => {
        var _ref, _table$options$autoRe;
        if (!registered) {
          table._queue(() => {
            registered = true;
          });
          return;
        }
        if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetExpanded) != null ? _ref : !table.options.manualExpanding) {
          if (queued)
            return;
          queued = true;
          table._queue(() => {
            table.resetExpanded();
            queued = false;
          });
        }
      };
      table.setExpanded = (updater) => table.options.onExpandedChange == null ? void 0 : table.options.onExpandedChange(updater);
      table.toggleAllRowsExpanded = (expanded) => {
        if (expanded != null ? expanded : !table.getIsAllRowsExpanded()) {
          table.setExpanded(true);
        } else {
          table.setExpanded({});
        }
      };
      table.resetExpanded = (defaultState) => {
        var _table$initialState$e, _table$initialState;
        table.setExpanded(defaultState ? {} : (_table$initialState$e = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.expanded) != null ? _table$initialState$e : {});
      };
      table.getCanSomeRowsExpand = () => {
        return table.getPrePaginationRowModel().flatRows.some((row) => row.getCanExpand());
      };
      table.getToggleAllRowsExpandedHandler = () => {
        return (e) => {
          e.persist == null || e.persist();
          table.toggleAllRowsExpanded();
        };
      };
      table.getIsSomeRowsExpanded = () => {
        const expanded = table.getState().expanded;
        return expanded === true || Object.values(expanded).some(Boolean);
      };
      table.getIsAllRowsExpanded = () => {
        const expanded = table.getState().expanded;
        if (typeof expanded === "boolean") {
          return expanded === true;
        }
        if (!Object.keys(expanded).length) {
          return false;
        }
        if (table.getRowModel().flatRows.some((row) => !row.getIsExpanded())) {
          return false;
        }
        return true;
      };
      table.getExpandedDepth = () => {
        let maxDepth = 0;
        const rowIds = table.getState().expanded === true ? Object.keys(table.getRowModel().rowsById) : Object.keys(table.getState().expanded);
        rowIds.forEach((id) => {
          const splitId = id.split(".");
          maxDepth = Math.max(maxDepth, splitId.length);
        });
        return maxDepth;
      };
      table.getPreExpandedRowModel = () => table.getSortedRowModel();
      table.getExpandedRowModel = () => {
        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {
          table._getExpandedRowModel = table.options.getExpandedRowModel(table);
        }
        if (table.options.manualExpanding || !table._getExpandedRowModel) {
          return table.getPreExpandedRowModel();
        }
        return table._getExpandedRowModel();
      };
    },
    createRow: (row, table) => {
      row.toggleExpanded = (expanded) => {
        table.setExpanded((old) => {
          var _a;
          var _expanded;
          const exists = old === true ? true : !!(old != null && old[row.id]);
          let oldExpanded = {};
          if (old === true) {
            Object.keys(table.getRowModel().rowsById).forEach((rowId) => {
              oldExpanded[rowId] = true;
            });
          } else {
            oldExpanded = old;
          }
          expanded = (_expanded = expanded) != null ? _expanded : !exists;
          if (!exists && expanded) {
            return __spreadProps(__spreadValues({}, oldExpanded), {
              [row.id]: true
            });
          }
          if (exists && !expanded) {
            const _b = oldExpanded, {
              [_a = row.id]: _2
            } = _b, rest = __objRest(_b, [
              __restKey(_a)
            ]);
            return rest;
          }
          return old;
        });
      };
      row.getIsExpanded = () => {
        var _table$options$getIsR;
        const expanded = table.getState().expanded;
        return !!((_table$options$getIsR = table.options.getIsRowExpanded == null ? void 0 : table.options.getIsRowExpanded(row)) != null ? _table$options$getIsR : expanded === true || (expanded == null ? void 0 : expanded[row.id]));
      };
      row.getCanExpand = () => {
        var _table$options$getRow, _table$options$enable, _row$subRows;
        return (_table$options$getRow = table.options.getRowCanExpand == null ? void 0 : table.options.getRowCanExpand(row)) != null ? _table$options$getRow : ((_table$options$enable = table.options.enableExpanding) != null ? _table$options$enable : true) && !!((_row$subRows = row.subRows) != null && _row$subRows.length);
      };
      row.getIsAllParentsExpanded = () => {
        let isFullyExpanded = true;
        let currentRow = row;
        while (isFullyExpanded && currentRow.parentId) {
          currentRow = table.getRow(currentRow.parentId, true);
          isFullyExpanded = currentRow.getIsExpanded();
        }
        return isFullyExpanded;
      };
      row.getToggleExpandedHandler = () => {
        const canExpand = row.getCanExpand();
        return () => {
          if (!canExpand)
            return;
          row.toggleExpanded();
        };
      };
    }
  };
  const includesString = (row, columnId, filterValue) => {
    var _row$getValue;
    const search = filterValue.toLowerCase();
    return Boolean((_row$getValue = row.getValue(columnId)) == null || (_row$getValue = _row$getValue.toString()) == null || (_row$getValue = _row$getValue.toLowerCase()) == null ? void 0 : _row$getValue.includes(search));
  };
  includesString.autoRemove = (val) => testFalsey(val);
  const includesStringSensitive = (row, columnId, filterValue) => {
    var _row$getValue2;
    return Boolean((_row$getValue2 = row.getValue(columnId)) == null || (_row$getValue2 = _row$getValue2.toString()) == null ? void 0 : _row$getValue2.includes(filterValue));
  };
  includesStringSensitive.autoRemove = (val) => testFalsey(val);
  const equalsString = (row, columnId, filterValue) => {
    var _row$getValue3;
    return ((_row$getValue3 = row.getValue(columnId)) == null || (_row$getValue3 = _row$getValue3.toString()) == null ? void 0 : _row$getValue3.toLowerCase()) === (filterValue == null ? void 0 : filterValue.toLowerCase());
  };
  equalsString.autoRemove = (val) => testFalsey(val);
  const arrIncludes = (row, columnId, filterValue) => {
    var _row$getValue4;
    return (_row$getValue4 = row.getValue(columnId)) == null ? void 0 : _row$getValue4.includes(filterValue);
  };
  arrIncludes.autoRemove = (val) => testFalsey(val) || !(val != null && val.length);
  const arrIncludesAll = (row, columnId, filterValue) => {
    return !filterValue.some((val) => {
      var _row$getValue5;
      return !((_row$getValue5 = row.getValue(columnId)) != null && _row$getValue5.includes(val));
    });
  };
  arrIncludesAll.autoRemove = (val) => testFalsey(val) || !(val != null && val.length);
  const arrIncludesSome = (row, columnId, filterValue) => {
    return filterValue.some((val) => {
      var _row$getValue6;
      return (_row$getValue6 = row.getValue(columnId)) == null ? void 0 : _row$getValue6.includes(val);
    });
  };
  arrIncludesSome.autoRemove = (val) => testFalsey(val) || !(val != null && val.length);
  const equals$1 = (row, columnId, filterValue) => {
    return row.getValue(columnId) === filterValue;
  };
  equals$1.autoRemove = (val) => testFalsey(val);
  const weakEquals = (row, columnId, filterValue) => {
    return row.getValue(columnId) == filterValue;
  };
  weakEquals.autoRemove = (val) => testFalsey(val);
  const inNumberRange = (row, columnId, filterValue) => {
    let [min2, max2] = filterValue;
    const rowValue = row.getValue(columnId);
    return rowValue >= min2 && rowValue <= max2;
  };
  inNumberRange.resolveFilterValue = (val) => {
    let [unsafeMin, unsafeMax] = val;
    let parsedMin = typeof unsafeMin !== "number" ? parseFloat(unsafeMin) : unsafeMin;
    let parsedMax = typeof unsafeMax !== "number" ? parseFloat(unsafeMax) : unsafeMax;
    let min2 = unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin;
    let max2 = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax;
    if (min2 > max2) {
      const temp = min2;
      min2 = max2;
      max2 = temp;
    }
    return [min2, max2];
  };
  inNumberRange.autoRemove = (val) => testFalsey(val) || testFalsey(val[0]) && testFalsey(val[1]);
  const filterFns = {
    includesString,
    includesStringSensitive,
    equalsString,
    arrIncludes,
    arrIncludesAll,
    arrIncludesSome,
    equals: equals$1,
    weakEquals,
    inNumberRange
  };
  function testFalsey(val) {
    return val === void 0 || val === null || val === "";
  }
  const Filters = {
    getDefaultColumnDef: () => {
      return {
        filterFn: "auto"
      };
    },
    getInitialState: (state) => {
      return __spreadValues({
        columnFilters: [],
        globalFilter: void 0
      }, state);
    },
    getDefaultOptions: (table) => {
      return {
        onColumnFiltersChange: makeStateUpdater("columnFilters", table),
        onGlobalFilterChange: makeStateUpdater("globalFilter", table),
        filterFromLeafRows: false,
        maxLeafRowFilterDepth: 100,
        globalFilterFn: "auto",
        getColumnCanGlobalFilter: (column2) => {
          var _table$getCoreRowMode;
          const value = (_table$getCoreRowMode = table.getCoreRowModel().flatRows[0]) == null || (_table$getCoreRowMode = _table$getCoreRowMode._getAllCellsByColumnId()[column2.id]) == null ? void 0 : _table$getCoreRowMode.getValue();
          return typeof value === "string" || typeof value === "number";
        }
      };
    },
    createColumn: (column2, table) => {
      column2.getAutoFilterFn = () => {
        const firstRow = table.getCoreRowModel().flatRows[0];
        const value = firstRow == null ? void 0 : firstRow.getValue(column2.id);
        if (typeof value === "string") {
          return filterFns.includesString;
        }
        if (typeof value === "number") {
          return filterFns.inNumberRange;
        }
        if (typeof value === "boolean") {
          return filterFns.equals;
        }
        if (value !== null && typeof value === "object") {
          return filterFns.equals;
        }
        if (Array.isArray(value)) {
          return filterFns.arrIncludes;
        }
        return filterFns.weakEquals;
      };
      column2.getFilterFn = () => {
        var _table$options$filter, _table$options$filter2;
        return isFunction$1(column2.columnDef.filterFn) ? column2.columnDef.filterFn : column2.columnDef.filterFn === "auto" ? column2.getAutoFilterFn() : (
          // @ts-ignore
          (_table$options$filter = (_table$options$filter2 = table.options.filterFns) == null ? void 0 : _table$options$filter2[column2.columnDef.filterFn]) != null ? _table$options$filter : filterFns[column2.columnDef.filterFn]
        );
      };
      column2.getCanFilter = () => {
        var _column$columnDef$ena, _table$options$enable, _table$options$enable2;
        return ((_column$columnDef$ena = column2.columnDef.enableColumnFilter) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnFilters) != null ? _table$options$enable : true) && ((_table$options$enable2 = table.options.enableFilters) != null ? _table$options$enable2 : true) && !!column2.accessorFn;
      };
      column2.getCanGlobalFilter = () => {
        var _column$columnDef$ena2, _table$options$enable3, _table$options$enable4, _table$options$getCol;
        return ((_column$columnDef$ena2 = column2.columnDef.enableGlobalFilter) != null ? _column$columnDef$ena2 : true) && ((_table$options$enable3 = table.options.enableGlobalFilter) != null ? _table$options$enable3 : true) && ((_table$options$enable4 = table.options.enableFilters) != null ? _table$options$enable4 : true) && ((_table$options$getCol = table.options.getColumnCanGlobalFilter == null ? void 0 : table.options.getColumnCanGlobalFilter(column2)) != null ? _table$options$getCol : true) && !!column2.accessorFn;
      };
      column2.getIsFiltered = () => column2.getFilterIndex() > -1;
      column2.getFilterValue = () => {
        var _table$getState$colum;
        return (_table$getState$colum = table.getState().columnFilters) == null || (_table$getState$colum = _table$getState$colum.find((d) => d.id === column2.id)) == null ? void 0 : _table$getState$colum.value;
      };
      column2.getFilterIndex = () => {
        var _table$getState$colum2, _table$getState$colum3;
        return (_table$getState$colum2 = (_table$getState$colum3 = table.getState().columnFilters) == null ? void 0 : _table$getState$colum3.findIndex((d) => d.id === column2.id)) != null ? _table$getState$colum2 : -1;
      };
      column2.setFilterValue = (value) => {
        table.setColumnFilters((old) => {
          const filterFn = column2.getFilterFn();
          const previousfilter = old == null ? void 0 : old.find((d) => d.id === column2.id);
          const newFilter = functionalUpdate(value, previousfilter ? previousfilter.value : void 0);
          if (shouldAutoRemoveFilter(filterFn, newFilter, column2)) {
            var _old$filter;
            return (_old$filter = old == null ? void 0 : old.filter((d) => d.id !== column2.id)) != null ? _old$filter : [];
          }
          const newFilterObj = {
            id: column2.id,
            value: newFilter
          };
          if (previousfilter) {
            var _old$map;
            return (_old$map = old == null ? void 0 : old.map((d) => {
              if (d.id === column2.id) {
                return newFilterObj;
              }
              return d;
            })) != null ? _old$map : [];
          }
          if (old != null && old.length) {
            return [...old, newFilterObj];
          }
          return [newFilterObj];
        });
      };
      column2._getFacetedRowModel = table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, column2.id);
      column2.getFacetedRowModel = () => {
        if (!column2._getFacetedRowModel) {
          return table.getPreFilteredRowModel();
        }
        return column2._getFacetedRowModel();
      };
      column2._getFacetedUniqueValues = table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, column2.id);
      column2.getFacetedUniqueValues = () => {
        if (!column2._getFacetedUniqueValues) {
          return /* @__PURE__ */ new Map();
        }
        return column2._getFacetedUniqueValues();
      };
      column2._getFacetedMinMaxValues = table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, column2.id);
      column2.getFacetedMinMaxValues = () => {
        if (!column2._getFacetedMinMaxValues) {
          return void 0;
        }
        return column2._getFacetedMinMaxValues();
      };
    },
    createRow: (row, table) => {
      row.columnFilters = {};
      row.columnFiltersMeta = {};
    },
    createTable: (table) => {
      table.getGlobalAutoFilterFn = () => {
        return filterFns.includesString;
      };
      table.getGlobalFilterFn = () => {
        var _table$options$filter3, _table$options$filter4;
        const {
          globalFilterFn
        } = table.options;
        return isFunction$1(globalFilterFn) ? globalFilterFn : globalFilterFn === "auto" ? table.getGlobalAutoFilterFn() : (
          // @ts-ignore
          (_table$options$filter3 = (_table$options$filter4 = table.options.filterFns) == null ? void 0 : _table$options$filter4[globalFilterFn]) != null ? _table$options$filter3 : filterFns[globalFilterFn]
        );
      };
      table.setColumnFilters = (updater) => {
        const leafColumns = table.getAllLeafColumns();
        const updateFn = (old) => {
          var _functionalUpdate;
          return (_functionalUpdate = functionalUpdate(updater, old)) == null ? void 0 : _functionalUpdate.filter((filter2) => {
            const column2 = leafColumns.find((d) => d.id === filter2.id);
            if (column2) {
              const filterFn = column2.getFilterFn();
              if (shouldAutoRemoveFilter(filterFn, filter2.value, column2)) {
                return false;
              }
            }
            return true;
          });
        };
        table.options.onColumnFiltersChange == null || table.options.onColumnFiltersChange(updateFn);
      };
      table.setGlobalFilter = (updater) => {
        table.options.onGlobalFilterChange == null || table.options.onGlobalFilterChange(updater);
      };
      table.resetGlobalFilter = (defaultState) => {
        table.setGlobalFilter(defaultState ? void 0 : table.initialState.globalFilter);
      };
      table.resetColumnFilters = (defaultState) => {
        var _table$initialState$c, _table$initialState;
        table.setColumnFilters(defaultState ? [] : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnFilters) != null ? _table$initialState$c : []);
      };
      table.getPreFilteredRowModel = () => table.getCoreRowModel();
      table.getFilteredRowModel = () => {
        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {
          table._getFilteredRowModel = table.options.getFilteredRowModel(table);
        }
        if (table.options.manualFiltering || !table._getFilteredRowModel) {
          return table.getPreFilteredRowModel();
        }
        return table._getFilteredRowModel();
      };
      table._getGlobalFacetedRowModel = table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, "__global__");
      table.getGlobalFacetedRowModel = () => {
        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {
          return table.getPreFilteredRowModel();
        }
        return table._getGlobalFacetedRowModel();
      };
      table._getGlobalFacetedUniqueValues = table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, "__global__");
      table.getGlobalFacetedUniqueValues = () => {
        if (!table._getGlobalFacetedUniqueValues) {
          return /* @__PURE__ */ new Map();
        }
        return table._getGlobalFacetedUniqueValues();
      };
      table._getGlobalFacetedMinMaxValues = table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, "__global__");
      table.getGlobalFacetedMinMaxValues = () => {
        if (!table._getGlobalFacetedMinMaxValues) {
          return;
        }
        return table._getGlobalFacetedMinMaxValues();
      };
    }
  };
  function shouldAutoRemoveFilter(filterFn, value, column2) {
    return (filterFn && filterFn.autoRemove ? filterFn.autoRemove(value, column2) : false) || typeof value === "undefined" || typeof value === "string" && !value;
  }
  const sum = (columnId, _leafRows, childRows) => {
    return childRows.reduce((sum2, next2) => {
      const nextValue = next2.getValue(columnId);
      return sum2 + (typeof nextValue === "number" ? nextValue : 0);
    }, 0);
  };
  const min = (columnId, _leafRows, childRows) => {
    let min2;
    childRows.forEach((row) => {
      const value = row.getValue(columnId);
      if (value != null && (min2 > value || min2 === void 0 && value >= value)) {
        min2 = value;
      }
    });
    return min2;
  };
  const max = (columnId, _leafRows, childRows) => {
    let max2;
    childRows.forEach((row) => {
      const value = row.getValue(columnId);
      if (value != null && (max2 < value || max2 === void 0 && value >= value)) {
        max2 = value;
      }
    });
    return max2;
  };
  const extent = (columnId, _leafRows, childRows) => {
    let min2;
    let max2;
    childRows.forEach((row) => {
      const value = row.getValue(columnId);
      if (value != null) {
        if (min2 === void 0) {
          if (value >= value)
            min2 = max2 = value;
        } else {
          if (min2 > value)
            min2 = value;
          if (max2 < value)
            max2 = value;
        }
      }
    });
    return [min2, max2];
  };
  const mean = (columnId, leafRows) => {
    let count2 = 0;
    let sum2 = 0;
    leafRows.forEach((row) => {
      let value = row.getValue(columnId);
      if (value != null && (value = +value) >= value) {
        ++count2, sum2 += value;
      }
    });
    if (count2)
      return sum2 / count2;
    return;
  };
  const median = (columnId, leafRows) => {
    if (!leafRows.length) {
      return;
    }
    const values2 = leafRows.map((row) => row.getValue(columnId));
    if (!isNumberArray(values2)) {
      return;
    }
    if (values2.length === 1) {
      return values2[0];
    }
    const mid = Math.floor(values2.length / 2);
    const nums = values2.sort((a, b) => a - b);
    return values2.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;
  };
  const unique = (columnId, leafRows) => {
    return Array.from(new Set(leafRows.map((d) => d.getValue(columnId))).values());
  };
  const uniqueCount = (columnId, leafRows) => {
    return new Set(leafRows.map((d) => d.getValue(columnId))).size;
  };
  const count = (_columnId, leafRows) => {
    return leafRows.length;
  };
  const aggregationFns = {
    sum,
    min,
    max,
    extent,
    mean,
    median,
    unique,
    uniqueCount,
    count
  };
  const Grouping = {
    getDefaultColumnDef: () => {
      return {
        aggregatedCell: (props) => {
          var _toString, _props$getValue;
          return (_toString = (_props$getValue = props.getValue()) == null || _props$getValue.toString == null ? void 0 : _props$getValue.toString()) != null ? _toString : null;
        },
        aggregationFn: "auto"
      };
    },
    getInitialState: (state) => {
      return __spreadValues({
        grouping: []
      }, state);
    },
    getDefaultOptions: (table) => {
      return {
        onGroupingChange: makeStateUpdater("grouping", table),
        groupedColumnMode: "reorder"
      };
    },
    createColumn: (column2, table) => {
      column2.toggleGrouping = () => {
        table.setGrouping((old) => {
          if (old != null && old.includes(column2.id)) {
            return old.filter((d) => d !== column2.id);
          }
          return [...old != null ? old : [], column2.id];
        });
      };
      column2.getCanGroup = () => {
        var _ref, _ref2, _ref3, _column$columnDef$ena;
        return (_ref = (_ref2 = (_ref3 = (_column$columnDef$ena = column2.columnDef.enableGrouping) != null ? _column$columnDef$ena : true) != null ? _ref3 : table.options.enableGrouping) != null ? _ref2 : true) != null ? _ref : !!column2.accessorFn;
      };
      column2.getIsGrouped = () => {
        var _table$getState$group;
        return (_table$getState$group = table.getState().grouping) == null ? void 0 : _table$getState$group.includes(column2.id);
      };
      column2.getGroupedIndex = () => {
        var _table$getState$group2;
        return (_table$getState$group2 = table.getState().grouping) == null ? void 0 : _table$getState$group2.indexOf(column2.id);
      };
      column2.getToggleGroupingHandler = () => {
        const canGroup = column2.getCanGroup();
        return () => {
          if (!canGroup)
            return;
          column2.toggleGrouping();
        };
      };
      column2.getAutoAggregationFn = () => {
        const firstRow = table.getCoreRowModel().flatRows[0];
        const value = firstRow == null ? void 0 : firstRow.getValue(column2.id);
        if (typeof value === "number") {
          return aggregationFns.sum;
        }
        if (Object.prototype.toString.call(value) === "[object Date]") {
          return aggregationFns.extent;
        }
      };
      column2.getAggregationFn = () => {
        var _table$options$aggreg, _table$options$aggreg2;
        if (!column2) {
          throw new Error();
        }
        return isFunction$1(column2.columnDef.aggregationFn) ? column2.columnDef.aggregationFn : column2.columnDef.aggregationFn === "auto" ? column2.getAutoAggregationFn() : (_table$options$aggreg = (_table$options$aggreg2 = table.options.aggregationFns) == null ? void 0 : _table$options$aggreg2[column2.columnDef.aggregationFn]) != null ? _table$options$aggreg : aggregationFns[column2.columnDef.aggregationFn];
      };
    },
    createTable: (table) => {
      table.setGrouping = (updater) => table.options.onGroupingChange == null ? void 0 : table.options.onGroupingChange(updater);
      table.resetGrouping = (defaultState) => {
        var _table$initialState$g, _table$initialState;
        table.setGrouping(defaultState ? [] : (_table$initialState$g = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.grouping) != null ? _table$initialState$g : []);
      };
      table.getPreGroupedRowModel = () => table.getFilteredRowModel();
      table.getGroupedRowModel = () => {
        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {
          table._getGroupedRowModel = table.options.getGroupedRowModel(table);
        }
        if (table.options.manualGrouping || !table._getGroupedRowModel) {
          return table.getPreGroupedRowModel();
        }
        return table._getGroupedRowModel();
      };
    },
    createRow: (row, table) => {
      row.getIsGrouped = () => !!row.groupingColumnId;
      row.getGroupingValue = (columnId) => {
        if (row._groupingValuesCache.hasOwnProperty(columnId)) {
          return row._groupingValuesCache[columnId];
        }
        const column2 = table.getColumn(columnId);
        if (!(column2 != null && column2.columnDef.getGroupingValue)) {
          return row.getValue(columnId);
        }
        row._groupingValuesCache[columnId] = column2.columnDef.getGroupingValue(row.original);
        return row._groupingValuesCache[columnId];
      };
      row._groupingValuesCache = {};
    },
    createCell: (cell, column2, row, table) => {
      cell.getIsGrouped = () => column2.getIsGrouped() && column2.id === row.groupingColumnId;
      cell.getIsPlaceholder = () => !cell.getIsGrouped() && column2.getIsGrouped();
      cell.getIsAggregated = () => {
        var _row$subRows;
        return !cell.getIsGrouped() && !cell.getIsPlaceholder() && !!((_row$subRows = row.subRows) != null && _row$subRows.length);
      };
    }
  };
  function orderColumns(leafColumns, grouping, groupedColumnMode) {
    if (!(grouping != null && grouping.length) || !groupedColumnMode) {
      return leafColumns;
    }
    const nonGroupingColumns = leafColumns.filter((col) => !grouping.includes(col.id));
    if (groupedColumnMode === "remove") {
      return nonGroupingColumns;
    }
    const groupingColumns = grouping.map((g) => leafColumns.find((col) => col.id === g)).filter(Boolean);
    return [...groupingColumns, ...nonGroupingColumns];
  }
  const Ordering = {
    getInitialState: (state) => {
      return __spreadValues({
        columnOrder: []
      }, state);
    },
    getDefaultOptions: (table) => {
      return {
        onColumnOrderChange: makeStateUpdater("columnOrder", table)
      };
    },
    createTable: (table) => {
      table.setColumnOrder = (updater) => table.options.onColumnOrderChange == null ? void 0 : table.options.onColumnOrderChange(updater);
      table.resetColumnOrder = (defaultState) => {
        var _table$initialState$c;
        table.setColumnOrder(defaultState ? [] : (_table$initialState$c = table.initialState.columnOrder) != null ? _table$initialState$c : []);
      };
      table._getOrderColumnsFn = memo$1(() => [table.getState().columnOrder, table.getState().grouping, table.options.groupedColumnMode], (columnOrder, grouping, groupedColumnMode) => (columns) => {
        let orderedColumns = [];
        if (!(columnOrder != null && columnOrder.length)) {
          orderedColumns = columns;
        } else {
          const columnOrderCopy = [...columnOrder];
          const columnsCopy = [...columns];
          while (columnsCopy.length && columnOrderCopy.length) {
            const targetColumnId = columnOrderCopy.shift();
            const foundIndex = columnsCopy.findIndex((d) => d.id === targetColumnId);
            if (foundIndex > -1) {
              orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]);
            }
          }
          orderedColumns = [...orderedColumns, ...columnsCopy];
        }
        return orderColumns(orderedColumns, grouping, groupedColumnMode);
      }, {
        key: process.env.NODE_ENV === "development" && "getOrderColumnsFn"
        // debug: () => table.options.debugAll ?? table.options.debugTable,
      });
    }
  };
  const defaultPageIndex = 0;
  const defaultPageSize = 10;
  const getDefaultPaginationState = () => ({
    pageIndex: defaultPageIndex,
    pageSize: defaultPageSize
  });
  const Pagination = {
    getInitialState: (state) => {
      return __spreadProps(__spreadValues({}, state), {
        pagination: __spreadValues(__spreadValues({}, getDefaultPaginationState()), state == null ? void 0 : state.pagination)
      });
    },
    getDefaultOptions: (table) => {
      return {
        onPaginationChange: makeStateUpdater("pagination", table)
      };
    },
    createTable: (table) => {
      let registered = false;
      let queued = false;
      table._autoResetPageIndex = () => {
        var _ref, _table$options$autoRe;
        if (!registered) {
          table._queue(() => {
            registered = true;
          });
          return;
        }
        if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetPageIndex) != null ? _ref : !table.options.manualPagination) {
          if (queued)
            return;
          queued = true;
          table._queue(() => {
            table.resetPageIndex();
            queued = false;
          });
        }
      };
      table.setPagination = (updater) => {
        const safeUpdater = (old) => {
          let newState = functionalUpdate(updater, old);
          return newState;
        };
        return table.options.onPaginationChange == null ? void 0 : table.options.onPaginationChange(safeUpdater);
      };
      table.resetPagination = (defaultState) => {
        var _table$initialState$p;
        table.setPagination(defaultState ? getDefaultPaginationState() : (_table$initialState$p = table.initialState.pagination) != null ? _table$initialState$p : getDefaultPaginationState());
      };
      table.setPageIndex = (updater) => {
        table.setPagination((old) => {
          let pageIndex = functionalUpdate(updater, old.pageIndex);
          const maxPageIndex = typeof table.options.pageCount === "undefined" || table.options.pageCount === -1 ? Number.MAX_SAFE_INTEGER : table.options.pageCount - 1;
          pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex));
          return __spreadProps(__spreadValues({}, old), {
            pageIndex
          });
        });
      };
      table.resetPageIndex = (defaultState) => {
        var _table$initialState$p2, _table$initialState;
        table.setPageIndex(defaultState ? defaultPageIndex : (_table$initialState$p2 = (_table$initialState = table.initialState) == null || (_table$initialState = _table$initialState.pagination) == null ? void 0 : _table$initialState.pageIndex) != null ? _table$initialState$p2 : defaultPageIndex);
      };
      table.resetPageSize = (defaultState) => {
        var _table$initialState$p3, _table$initialState2;
        table.setPageSize(defaultState ? defaultPageSize : (_table$initialState$p3 = (_table$initialState2 = table.initialState) == null || (_table$initialState2 = _table$initialState2.pagination) == null ? void 0 : _table$initialState2.pageSize) != null ? _table$initialState$p3 : defaultPageSize);
      };
      table.setPageSize = (updater) => {
        table.setPagination((old) => {
          const pageSize2 = Math.max(1, functionalUpdate(updater, old.pageSize));
          const topRowIndex = old.pageSize * old.pageIndex;
          const pageIndex = Math.floor(topRowIndex / pageSize2);
          return __spreadProps(__spreadValues({}, old), {
            pageIndex,
            pageSize: pageSize2
          });
        });
      };
      table.setPageCount = (updater) => table.setPagination((old) => {
        var _table$options$pageCo;
        let newPageCount = functionalUpdate(updater, (_table$options$pageCo = table.options.pageCount) != null ? _table$options$pageCo : -1);
        if (typeof newPageCount === "number") {
          newPageCount = Math.max(-1, newPageCount);
        }
        return __spreadProps(__spreadValues({}, old), {
          pageCount: newPageCount
        });
      });
      table.getPageOptions = memo$1(() => [table.getPageCount()], (pageCount) => {
        let pageOptions = [];
        if (pageCount && pageCount > 0) {
          pageOptions = [...new Array(pageCount)].fill(null).map((_2, i) => i);
        }
        return pageOptions;
      }, {
        key: process.env.NODE_ENV === "development" && "getPageOptions",
        debug: () => {
          var _table$options$debugA;
          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;
        }
      });
      table.getCanPreviousPage = () => table.getState().pagination.pageIndex > 0;
      table.getCanNextPage = () => {
        const {
          pageIndex
        } = table.getState().pagination;
        const pageCount = table.getPageCount();
        if (pageCount === -1) {
          return true;
        }
        if (pageCount === 0) {
          return false;
        }
        return pageIndex < pageCount - 1;
      };
      table.previousPage = () => {
        return table.setPageIndex((old) => old - 1);
      };
      table.nextPage = () => {
        return table.setPageIndex((old) => {
          return old + 1;
        });
      };
      table.getPrePaginationRowModel = () => table.getExpandedRowModel();
      table.getPaginationRowModel = () => {
        if (!table._getPaginationRowModel && table.options.getPaginationRowModel) {
          table._getPaginationRowModel = table.options.getPaginationRowModel(table);
        }
        if (table.options.manualPagination || !table._getPaginationRowModel) {
          return table.getPrePaginationRowModel();
        }
        return table._getPaginationRowModel();
      };
      table.getPageCount = () => {
        var _table$options$pageCo2;
        return (_table$options$pageCo2 = table.options.pageCount) != null ? _table$options$pageCo2 : Math.ceil(table.getPrePaginationRowModel().rows.length / table.getState().pagination.pageSize);
      };
    }
  };
  const getDefaultColumnPinningState = () => ({
    left: [],
    right: []
  });
  const getDefaultRowPinningState = () => ({
    top: [],
    bottom: []
  });
  const Pinning = {
    getInitialState: (state) => {
      return __spreadValues({
        columnPinning: getDefaultColumnPinningState(),
        rowPinning: getDefaultRowPinningState()
      }, state);
    },
    getDefaultOptions: (table) => {
      return {
        onColumnPinningChange: makeStateUpdater("columnPinning", table),
        onRowPinningChange: makeStateUpdater("rowPinning", table)
      };
    },
    createColumn: (column2, table) => {
      column2.pin = (position2) => {
        const columnIds = column2.getLeafColumns().map((d) => d.id).filter(Boolean);
        table.setColumnPinning((old) => {
          var _old$left3, _old$right3;
          if (position2 === "right") {
            var _old$left, _old$right;
            return {
              left: ((_old$left = old == null ? void 0 : old.left) != null ? _old$left : []).filter((d) => !(columnIds != null && columnIds.includes(d))),
              right: [...((_old$right = old == null ? void 0 : old.right) != null ? _old$right : []).filter((d) => !(columnIds != null && columnIds.includes(d))), ...columnIds]
            };
          }
          if (position2 === "left") {
            var _old$left2, _old$right2;
            return {
              left: [...((_old$left2 = old == null ? void 0 : old.left) != null ? _old$left2 : []).filter((d) => !(columnIds != null && columnIds.includes(d))), ...columnIds],
              right: ((_old$right2 = old == null ? void 0 : old.right) != null ? _old$right2 : []).filter((d) => !(columnIds != null && columnIds.includes(d)))
            };
          }
          return {
            left: ((_old$left3 = old == null ? void 0 : old.left) != null ? _old$left3 : []).filter((d) => !(columnIds != null && columnIds.includes(d))),
            right: ((_old$right3 = old == null ? void 0 : old.right) != null ? _old$right3 : []).filter((d) => !(columnIds != null && columnIds.includes(d)))
          };
        });
      };
      column2.getCanPin = () => {
        const leafColumns = column2.getLeafColumns();
        return leafColumns.some((d) => {
          var _d$columnDef$enablePi, _ref, _table$options$enable;
          return ((_d$columnDef$enablePi = d.columnDef.enablePinning) != null ? _d$columnDef$enablePi : true) && ((_ref = (_table$options$enable = table.options.enableColumnPinning) != null ? _table$options$enable : table.options.enablePinning) != null ? _ref : true);
        });
      };
      column2.getIsPinned = () => {
        const leafColumnIds = column2.getLeafColumns().map((d) => d.id);
        const {
          left: left2,
          right: right2
        } = table.getState().columnPinning;
        const isLeft = leafColumnIds.some((d) => left2 == null ? void 0 : left2.includes(d));
        const isRight = leafColumnIds.some((d) => right2 == null ? void 0 : right2.includes(d));
        return isLeft ? "left" : isRight ? "right" : false;
      };
      column2.getPinnedIndex = () => {
        var _table$getState$colum, _table$getState$colum2;
        const position2 = column2.getIsPinned();
        return position2 ? (_table$getState$colum = (_table$getState$colum2 = table.getState().columnPinning) == null || (_table$getState$colum2 = _table$getState$colum2[position2]) == null ? void 0 : _table$getState$colum2.indexOf(column2.id)) != null ? _table$getState$colum : -1 : 0;
      };
    },
    createRow: (row, table) => {
      row.pin = (position2, includeLeafRows, includeParentRows) => {
        const leafRowIds = includeLeafRows ? row.getLeafRows().map((_ref2) => {
          let {
            id
          } = _ref2;
          return id;
        }) : [];
        const parentRowIds = includeParentRows ? row.getParentRows().map((_ref3) => {
          let {
            id
          } = _ref3;
          return id;
        }) : [];
        const rowIds = /* @__PURE__ */ new Set([...parentRowIds, row.id, ...leafRowIds]);
        table.setRowPinning((old) => {
          var _old$top3, _old$bottom3;
          if (position2 === "bottom") {
            var _old$top, _old$bottom;
            return {
              top: ((_old$top = old == null ? void 0 : old.top) != null ? _old$top : []).filter((d) => !(rowIds != null && rowIds.has(d))),
              bottom: [...((_old$bottom = old == null ? void 0 : old.bottom) != null ? _old$bottom : []).filter((d) => !(rowIds != null && rowIds.has(d))), ...Array.from(rowIds)]
            };
          }
          if (position2 === "top") {
            var _old$top2, _old$bottom2;
            return {
              top: [...((_old$top2 = old == null ? void 0 : old.top) != null ? _old$top2 : []).filter((d) => !(rowIds != null && rowIds.has(d))), ...Array.from(rowIds)],
              bottom: ((_old$bottom2 = old == null ? void 0 : old.bottom) != null ? _old$bottom2 : []).filter((d) => !(rowIds != null && rowIds.has(d)))
            };
          }
          return {
            top: ((_old$top3 = old == null ? void 0 : old.top) != null ? _old$top3 : []).filter((d) => !(rowIds != null && rowIds.has(d))),
            bottom: ((_old$bottom3 = old == null ? void 0 : old.bottom) != null ? _old$bottom3 : []).filter((d) => !(rowIds != null && rowIds.has(d)))
          };
        });
      };
      row.getCanPin = () => {
        var _ref4;
        const {
          enableRowPinning,
          enablePinning
        } = table.options;
        if (typeof enableRowPinning === "function") {
          return enableRowPinning(row);
        }
        return (_ref4 = enableRowPinning != null ? enableRowPinning : enablePinning) != null ? _ref4 : true;
      };
      row.getIsPinned = () => {
        const rowIds = [row.id];
        const {
          top: top2,
          bottom: bottom2
        } = table.getState().rowPinning;
        const isTop = rowIds.some((d) => top2 == null ? void 0 : top2.includes(d));
        const isBottom = rowIds.some((d) => bottom2 == null ? void 0 : bottom2.includes(d));
        return isTop ? "top" : isBottom ? "bottom" : false;
      };
      row.getPinnedIndex = () => {
        var _table$_getPinnedRows, _visiblePinnedRowIds$;
        const position2 = row.getIsPinned();
        if (!position2)
          return -1;
        const visiblePinnedRowIds = (_table$_getPinnedRows = table._getPinnedRows(position2)) == null ? void 0 : _table$_getPinnedRows.map((_ref5) => {
          let {
            id
          } = _ref5;
          return id;
        });
        return (_visiblePinnedRowIds$ = visiblePinnedRowIds == null ? void 0 : visiblePinnedRowIds.indexOf(row.id)) != null ? _visiblePinnedRowIds$ : -1;
      };
      row.getCenterVisibleCells = memo$1(() => [row._getAllVisibleCells(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allCells, left2, right2) => {
        const leftAndRight = [...left2 != null ? left2 : [], ...right2 != null ? right2 : []];
        return allCells.filter((d) => !leftAndRight.includes(d.column.id));
      }, {
        key: process.env.NODE_ENV === "development" && "row.getCenterVisibleCells",
        debug: () => {
          var _table$options$debugA;
          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;
        }
      });
      row.getLeftVisibleCells = memo$1(() => [row._getAllVisibleCells(), table.getState().columnPinning.left, ,], (allCells, left2) => {
        const cells = (left2 != null ? left2 : []).map((columnId) => allCells.find((cell) => cell.column.id === columnId)).filter(Boolean).map((d) => __spreadProps(__spreadValues({}, d), {
          position: "left"
        }));
        return cells;
      }, {
        key: process.env.NODE_ENV === "development" && "row.getLeftVisibleCells",
        debug: () => {
          var _table$options$debugA2;
          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;
        }
      });
      row.getRightVisibleCells = memo$1(() => [row._getAllVisibleCells(), table.getState().columnPinning.right], (allCells, right2) => {
        const cells = (right2 != null ? right2 : []).map((columnId) => allCells.find((cell) => cell.column.id === columnId)).filter(Boolean).map((d) => __spreadProps(__spreadValues({}, d), {
          position: "right"
        }));
        return cells;
      }, {
        key: process.env.NODE_ENV === "development" && "row.getRightVisibleCells",
        debug: () => {
          var _table$options$debugA3;
          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugRows;
        }
      });
    },
    createTable: (table) => {
      table.setColumnPinning = (updater) => table.options.onColumnPinningChange == null ? void 0 : table.options.onColumnPinningChange(updater);
      table.resetColumnPinning = (defaultState) => {
        var _table$initialState$c, _table$initialState;
        return table.setColumnPinning(defaultState ? getDefaultColumnPinningState() : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnPinning) != null ? _table$initialState$c : getDefaultColumnPinningState());
      };
      table.getIsSomeColumnsPinned = (position2) => {
        var _pinningState$positio;
        const pinningState = table.getState().columnPinning;
        if (!position2) {
          var _pinningState$left, _pinningState$right;
          return Boolean(((_pinningState$left = pinningState.left) == null ? void 0 : _pinningState$left.length) || ((_pinningState$right = pinningState.right) == null ? void 0 : _pinningState$right.length));
        }
        return Boolean((_pinningState$positio = pinningState[position2]) == null ? void 0 : _pinningState$positio.length);
      };
      table.getLeftLeafColumns = memo$1(() => [table.getAllLeafColumns(), table.getState().columnPinning.left], (allColumns, left2) => {
        return (left2 != null ? left2 : []).map((columnId) => allColumns.find((column2) => column2.id === columnId)).filter(Boolean);
      }, {
        key: process.env.NODE_ENV === "development" && "getLeftLeafColumns",
        debug: () => {
          var _table$options$debugA4;
          return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugColumns;
        }
      });
      table.getRightLeafColumns = memo$1(() => [table.getAllLeafColumns(), table.getState().columnPinning.right], (allColumns, right2) => {
        return (right2 != null ? right2 : []).map((columnId) => allColumns.find((column2) => column2.id === columnId)).filter(Boolean);
      }, {
        key: process.env.NODE_ENV === "development" && "getRightLeafColumns",
        debug: () => {
          var _table$options$debugA5;
          return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugColumns;
        }
      });
      table.getCenterLeafColumns = memo$1(() => [table.getAllLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, left2, right2) => {
        const leftAndRight = [...left2 != null ? left2 : [], ...right2 != null ? right2 : []];
        return allColumns.filter((d) => !leftAndRight.includes(d.id));
      }, {
        key: process.env.NODE_ENV === "development" && "getCenterLeafColumns",
        debug: () => {
          var _table$options$debugA6;
          return (_table$options$debugA6 = table.options.debugAll) != null ? _table$options$debugA6 : table.options.debugColumns;
        }
      });
      table.setRowPinning = (updater) => table.options.onRowPinningChange == null ? void 0 : table.options.onRowPinningChange(updater);
      table.resetRowPinning = (defaultState) => {
        var _table$initialState$r, _table$initialState2;
        return table.setRowPinning(defaultState ? getDefaultRowPinningState() : (_table$initialState$r = (_table$initialState2 = table.initialState) == null ? void 0 : _table$initialState2.rowPinning) != null ? _table$initialState$r : getDefaultRowPinningState());
      };
      table.getIsSomeRowsPinned = (position2) => {
        var _pinningState$positio2;
        const pinningState = table.getState().rowPinning;
        if (!position2) {
          var _pinningState$top, _pinningState$bottom;
          return Boolean(((_pinningState$top = pinningState.top) == null ? void 0 : _pinningState$top.length) || ((_pinningState$bottom = pinningState.bottom) == null ? void 0 : _pinningState$bottom.length));
        }
        return Boolean((_pinningState$positio2 = pinningState[position2]) == null ? void 0 : _pinningState$positio2.length);
      };
      table._getPinnedRows = (position2) => memo$1(() => [table.getRowModel().rows, table.getState().rowPinning[position2]], (visibleRows, pinnedRowIds) => {
        var _table$options$keepPi;
        const rows = ((_table$options$keepPi = table.options.keepPinnedRows) != null ? _table$options$keepPi : true) ? (
          //get all rows that are pinned even if they would not be otherwise visible
          //account for expanded parent rows, but not pagination or filtering
          (pinnedRowIds != null ? pinnedRowIds : []).map((rowId) => {
            const row = table.getRow(rowId, true);
            return row.getIsAllParentsExpanded() ? row : null;
          })
        ) : (
          //else get only visible rows that are pinned
          (pinnedRowIds != null ? pinnedRowIds : []).map((rowId) => visibleRows.find((row) => row.id === rowId))
        );
        return rows.filter(Boolean).map((d) => __spreadProps(__spreadValues({}, d), {
          position: position2
        }));
      }, {
        key: process.env.NODE_ENV === "development" && `row.get${position2 === "top" ? "Top" : "Bottom"}Rows`,
        debug: () => {
          var _table$options$debugA7;
          return (_table$options$debugA7 = table.options.debugAll) != null ? _table$options$debugA7 : table.options.debugRows;
        }
      })();
      table.getTopRows = () => table._getPinnedRows("top");
      table.getBottomRows = () => table._getPinnedRows("bottom");
      table.getCenterRows = memo$1(() => [table.getRowModel().rows, table.getState().rowPinning.top, table.getState().rowPinning.bottom], (allRows, top2, bottom2) => {
        const topAndBottom = /* @__PURE__ */ new Set([...top2 != null ? top2 : [], ...bottom2 != null ? bottom2 : []]);
        return allRows.filter((d) => !topAndBottom.has(d.id));
      }, {
        key: process.env.NODE_ENV === "development" && "row.getCenterRows",
        debug: () => {
          var _table$options$debugA8;
          return (_table$options$debugA8 = table.options.debugAll) != null ? _table$options$debugA8 : table.options.debugRows;
        }
      });
    }
  };
  const RowSelection = {
    getInitialState: (state) => {
      return __spreadValues({
        rowSelection: {}
      }, state);
    },
    getDefaultOptions: (table) => {
      return {
        onRowSelectionChange: makeStateUpdater("rowSelection", table),
        enableRowSelection: true,
        enableMultiRowSelection: true,
        enableSubRowSelection: true
        // enableGroupingRowSelection: false,
        // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,
        // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,
      };
    },
    createTable: (table) => {
      table.setRowSelection = (updater) => table.options.onRowSelectionChange == null ? void 0 : table.options.onRowSelectionChange(updater);
      table.resetRowSelection = (defaultState) => {
        var _table$initialState$r;
        return table.setRowSelection(defaultState ? {} : (_table$initialState$r = table.initialState.rowSelection) != null ? _table$initialState$r : {});
      };
      table.toggleAllRowsSelected = (value) => {
        table.setRowSelection((old) => {
          value = typeof value !== "undefined" ? value : !table.getIsAllRowsSelected();
          const rowSelection = __spreadValues({}, old);
          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows;
          if (value) {
            preGroupedFlatRows.forEach((row) => {
              if (!row.getCanSelect()) {
                return;
              }
              rowSelection[row.id] = true;
            });
          } else {
            preGroupedFlatRows.forEach((row) => {
              delete rowSelection[row.id];
            });
          }
          return rowSelection;
        });
      };
      table.toggleAllPageRowsSelected = (value) => table.setRowSelection((old) => {
        const resolvedValue = typeof value !== "undefined" ? value : !table.getIsAllPageRowsSelected();
        const rowSelection = __spreadValues({}, old);
        table.getRowModel().rows.forEach((row) => {
          mutateRowIsSelected(rowSelection, row.id, resolvedValue, true, table);
        });
        return rowSelection;
      });
      table.getPreSelectedRowModel = () => table.getCoreRowModel();
      table.getSelectedRowModel = memo$1(() => [table.getState().rowSelection, table.getCoreRowModel()], (rowSelection, rowModel) => {
        if (!Object.keys(rowSelection).length) {
          return {
            rows: [],
            flatRows: [],
            rowsById: {}
          };
        }
        return selectRowsFn(table, rowModel);
      }, {
        key: process.env.NODE_ENV === "development" && "getSelectedRowModel",
        debug: () => {
          var _table$options$debugA;
          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;
        }
      });
      table.getFilteredSelectedRowModel = memo$1(() => [table.getState().rowSelection, table.getFilteredRowModel()], (rowSelection, rowModel) => {
        if (!Object.keys(rowSelection).length) {
          return {
            rows: [],
            flatRows: [],
            rowsById: {}
          };
        }
        return selectRowsFn(table, rowModel);
      }, {
        key: process.env.NODE_ENV === "production" && "getFilteredSelectedRowModel",
        debug: () => {
          var _table$options$debugA2;
          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugTable;
        }
      });
      table.getGroupedSelectedRowModel = memo$1(() => [table.getState().rowSelection, table.getSortedRowModel()], (rowSelection, rowModel) => {
        if (!Object.keys(rowSelection).length) {
          return {
            rows: [],
            flatRows: [],
            rowsById: {}
          };
        }
        return selectRowsFn(table, rowModel);
      }, {
        key: process.env.NODE_ENV === "production" && "getGroupedSelectedRowModel",
        debug: () => {
          var _table$options$debugA3;
          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugTable;
        }
      });
      table.getIsAllRowsSelected = () => {
        const preGroupedFlatRows = table.getFilteredRowModel().flatRows;
        const {
          rowSelection
        } = table.getState();
        let isAllRowsSelected = Boolean(preGroupedFlatRows.length && Object.keys(rowSelection).length);
        if (isAllRowsSelected) {
          if (preGroupedFlatRows.some((row) => row.getCanSelect() && !rowSelection[row.id])) {
            isAllRowsSelected = false;
          }
        }
        return isAllRowsSelected;
      };
      table.getIsAllPageRowsSelected = () => {
        const paginationFlatRows = table.getPaginationRowModel().flatRows.filter((row) => row.getCanSelect());
        const {
          rowSelection
        } = table.getState();
        let isAllPageRowsSelected = !!paginationFlatRows.length;
        if (isAllPageRowsSelected && paginationFlatRows.some((row) => !rowSelection[row.id])) {
          isAllPageRowsSelected = false;
        }
        return isAllPageRowsSelected;
      };
      table.getIsSomeRowsSelected = () => {
        var _table$getState$rowSe;
        const totalSelected = Object.keys((_table$getState$rowSe = table.getState().rowSelection) != null ? _table$getState$rowSe : {}).length;
        return totalSelected > 0 && totalSelected < table.getFilteredRowModel().flatRows.length;
      };
      table.getIsSomePageRowsSelected = () => {
        const paginationFlatRows = table.getPaginationRowModel().flatRows;
        return table.getIsAllPageRowsSelected() ? false : paginationFlatRows.filter((row) => row.getCanSelect()).some((d) => d.getIsSelected() || d.getIsSomeSelected());
      };
      table.getToggleAllRowsSelectedHandler = () => {
        return (e) => {
          table.toggleAllRowsSelected(e.target.checked);
        };
      };
      table.getToggleAllPageRowsSelectedHandler = () => {
        return (e) => {
          table.toggleAllPageRowsSelected(e.target.checked);
        };
      };
    },
    createRow: (row, table) => {
      row.toggleSelected = (value, opts) => {
        const isSelected = row.getIsSelected();
        table.setRowSelection((old) => {
          var _opts$selectChildren;
          value = typeof value !== "undefined" ? value : !isSelected;
          if (row.getCanSelect() && isSelected === value) {
            return old;
          }
          const selectedRowIds = __spreadValues({}, old);
          mutateRowIsSelected(selectedRowIds, row.id, value, (_opts$selectChildren = opts == null ? void 0 : opts.selectChildren) != null ? _opts$selectChildren : true, table);
          return selectedRowIds;
        });
      };
      row.getIsSelected = () => {
        const {
          rowSelection
        } = table.getState();
        return isRowSelected(row, rowSelection);
      };
      row.getIsSomeSelected = () => {
        const {
          rowSelection
        } = table.getState();
        return isSubRowSelected(row, rowSelection) === "some";
      };
      row.getIsAllSubRowsSelected = () => {
        const {
          rowSelection
        } = table.getState();
        return isSubRowSelected(row, rowSelection) === "all";
      };
      row.getCanSelect = () => {
        var _table$options$enable;
        if (typeof table.options.enableRowSelection === "function") {
          return table.options.enableRowSelection(row);
        }
        return (_table$options$enable = table.options.enableRowSelection) != null ? _table$options$enable : true;
      };
      row.getCanSelectSubRows = () => {
        var _table$options$enable2;
        if (typeof table.options.enableSubRowSelection === "function") {
          return table.options.enableSubRowSelection(row);
        }
        return (_table$options$enable2 = table.options.enableSubRowSelection) != null ? _table$options$enable2 : true;
      };
      row.getCanMultiSelect = () => {
        var _table$options$enable3;
        if (typeof table.options.enableMultiRowSelection === "function") {
          return table.options.enableMultiRowSelection(row);
        }
        return (_table$options$enable3 = table.options.enableMultiRowSelection) != null ? _table$options$enable3 : true;
      };
      row.getToggleSelectedHandler = () => {
        const canSelect = row.getCanSelect();
        return (e) => {
          var _target;
          if (!canSelect)
            return;
          row.toggleSelected((_target = e.target) == null ? void 0 : _target.checked);
        };
      };
    }
  };
  const mutateRowIsSelected = (selectedRowIds, id, value, includeChildren, table) => {
    var _row$subRows;
    const row = table.getRow(id);
    if (value) {
      if (!row.getCanMultiSelect()) {
        Object.keys(selectedRowIds).forEach((key) => delete selectedRowIds[key]);
      }
      if (row.getCanSelect()) {
        selectedRowIds[id] = true;
      }
    } else {
      delete selectedRowIds[id];
    }
    if (includeChildren && (_row$subRows = row.subRows) != null && _row$subRows.length && row.getCanSelectSubRows()) {
      row.subRows.forEach((row2) => mutateRowIsSelected(selectedRowIds, row2.id, value, includeChildren, table));
    }
  };
  function selectRowsFn(table, rowModel) {
    const rowSelection = table.getState().rowSelection;
    const newSelectedFlatRows = [];
    const newSelectedRowsById = {};
    const recurseRows = function(rows, depth) {
      return rows.map((row) => {
        var _row$subRows2;
        const isSelected = isRowSelected(row, rowSelection);
        if (isSelected) {
          newSelectedFlatRows.push(row);
          newSelectedRowsById[row.id] = row;
        }
        if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length) {
          row = __spreadProps(__spreadValues({}, row), {
            subRows: recurseRows(row.subRows)
          });
        }
        if (isSelected) {
          return row;
        }
      }).filter(Boolean);
    };
    return {
      rows: recurseRows(rowModel.rows),
      flatRows: newSelectedFlatRows,
      rowsById: newSelectedRowsById
    };
  }
  function isRowSelected(row, selection) {
    var _selection$row$id;
    return (_selection$row$id = selection[row.id]) != null ? _selection$row$id : false;
  }
  function isSubRowSelected(row, selection, table) {
    var _row$subRows3;
    if (!((_row$subRows3 = row.subRows) != null && _row$subRows3.length))
      return false;
    let allChildrenSelected = true;
    let someSelected = false;
    row.subRows.forEach((subRow) => {
      if (someSelected && !allChildrenSelected) {
        return;
      }
      if (subRow.getCanSelect()) {
        if (isRowSelected(subRow, selection)) {
          someSelected = true;
        } else {
          allChildrenSelected = false;
        }
      }
      if (subRow.subRows && subRow.subRows.length) {
        const subRowChildrenSelected = isSubRowSelected(subRow, selection);
        if (subRowChildrenSelected === "all") {
          someSelected = true;
        } else if (subRowChildrenSelected === "some") {
          someSelected = true;
          allChildrenSelected = false;
        } else {
          allChildrenSelected = false;
        }
      }
    });
    return allChildrenSelected ? "all" : someSelected ? "some" : false;
  }
  const reSplitAlphaNumeric = /([0-9]+)/gm;
  const alphanumeric = (rowA, rowB, columnId) => {
    return compareAlphanumeric(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());
  };
  const alphanumericCaseSensitive = (rowA, rowB, columnId) => {
    return compareAlphanumeric(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));
  };
  const text = (rowA, rowB, columnId) => {
    return compareBasic(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());
  };
  const textCaseSensitive = (rowA, rowB, columnId) => {
    return compareBasic(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));
  };
  const datetime = (rowA, rowB, columnId) => {
    const a = rowA.getValue(columnId);
    const b = rowB.getValue(columnId);
    return a > b ? 1 : a < b ? -1 : 0;
  };
  const basic = (rowA, rowB, columnId) => {
    return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId));
  };
  function compareBasic(a, b) {
    return a === b ? 0 : a > b ? 1 : -1;
  }
  function toString(a) {
    if (typeof a === "number") {
      if (isNaN(a) || a === Infinity || a === -Infinity) {
        return "";
      }
      return String(a);
    }
    if (typeof a === "string") {
      return a;
    }
    return "";
  }
  function compareAlphanumeric(aStr, bStr) {
    const a = aStr.split(reSplitAlphaNumeric).filter(Boolean);
    const b = bStr.split(reSplitAlphaNumeric).filter(Boolean);
    while (a.length && b.length) {
      const aa = a.shift();
      const bb = b.shift();
      const an = parseInt(aa, 10);
      const bn = parseInt(bb, 10);
      const combo = [an, bn].sort();
      if (isNaN(combo[0])) {
        if (aa > bb) {
          return 1;
        }
        if (bb > aa) {
          return -1;
        }
        continue;
      }
      if (isNaN(combo[1])) {
        return isNaN(an) ? -1 : 1;
      }
      if (an > bn) {
        return 1;
      }
      if (bn > an) {
        return -1;
      }
    }
    return a.length - b.length;
  }
  const sortingFns = {
    alphanumeric,
    alphanumericCaseSensitive,
    text,
    textCaseSensitive,
    datetime,
    basic
  };
  const Sorting = {
    getInitialState: (state) => {
      return __spreadValues({
        sorting: []
      }, state);
    },
    getDefaultColumnDef: () => {
      return {
        sortingFn: "auto",
        sortUndefined: 1
      };
    },
    getDefaultOptions: (table) => {
      return {
        onSortingChange: makeStateUpdater("sorting", table),
        isMultiSortEvent: (e) => {
          return e.shiftKey;
        }
      };
    },
    createColumn: (column2, table) => {
      column2.getAutoSortingFn = () => {
        const firstRows = table.getFilteredRowModel().flatRows.slice(10);
        let isString2 = false;
        for (const row of firstRows) {
          const value = row == null ? void 0 : row.getValue(column2.id);
          if (Object.prototype.toString.call(value) === "[object Date]") {
            return sortingFns.datetime;
          }
          if (typeof value === "string") {
            isString2 = true;
            if (value.split(reSplitAlphaNumeric).length > 1) {
              return sortingFns.alphanumeric;
            }
          }
        }
        if (isString2) {
          return sortingFns.text;
        }
        return sortingFns.basic;
      };
      column2.getAutoSortDir = () => {
        const firstRow = table.getFilteredRowModel().flatRows[0];
        const value = firstRow == null ? void 0 : firstRow.getValue(column2.id);
        if (typeof value === "string") {
          return "asc";
        }
        return "desc";
      };
      column2.getSortingFn = () => {
        var _table$options$sortin, _table$options$sortin2;
        if (!column2) {
          throw new Error();
        }
        return isFunction$1(column2.columnDef.sortingFn) ? column2.columnDef.sortingFn : column2.columnDef.sortingFn === "auto" ? column2.getAutoSortingFn() : (_table$options$sortin = (_table$options$sortin2 = table.options.sortingFns) == null ? void 0 : _table$options$sortin2[column2.columnDef.sortingFn]) != null ? _table$options$sortin : sortingFns[column2.columnDef.sortingFn];
      };
      column2.toggleSorting = (desc, multi) => {
        const nextSortingOrder = column2.getNextSortingOrder();
        const hasManualValue = typeof desc !== "undefined" && desc !== null;
        table.setSorting((old) => {
          const existingSorting = old == null ? void 0 : old.find((d) => d.id === column2.id);
          const existingIndex = old == null ? void 0 : old.findIndex((d) => d.id === column2.id);
          let newSorting = [];
          let sortAction;
          let nextDesc = hasManualValue ? desc : nextSortingOrder === "desc";
          if (old != null && old.length && column2.getCanMultiSort() && multi) {
            if (existingSorting) {
              sortAction = "toggle";
            } else {
              sortAction = "add";
            }
          } else {
            if (old != null && old.length && existingIndex !== old.length - 1) {
              sortAction = "replace";
            } else if (existingSorting) {
              sortAction = "toggle";
            } else {
              sortAction = "replace";
            }
          }
          if (sortAction === "toggle") {
            if (!hasManualValue) {
              if (!nextSortingOrder) {
                sortAction = "remove";
              }
            }
          }
          if (sortAction === "add") {
            var _table$options$maxMul;
            newSorting = [...old, {
              id: column2.id,
              desc: nextDesc
            }];
            newSorting.splice(0, newSorting.length - ((_table$options$maxMul = table.options.maxMultiSortColCount) != null ? _table$options$maxMul : Number.MAX_SAFE_INTEGER));
          } else if (sortAction === "toggle") {
            newSorting = old.map((d) => {
              if (d.id === column2.id) {
                return __spreadProps(__spreadValues({}, d), {
                  desc: nextDesc
                });
              }
              return d;
            });
          } else if (sortAction === "remove") {
            newSorting = old.filter((d) => d.id !== column2.id);
          } else {
            newSorting = [{
              id: column2.id,
              desc: nextDesc
            }];
          }
          return newSorting;
        });
      };
      column2.getFirstSortDir = () => {
        var _ref, _column$columnDef$sor;
        const sortDescFirst = (_ref = (_column$columnDef$sor = column2.columnDef.sortDescFirst) != null ? _column$columnDef$sor : table.options.sortDescFirst) != null ? _ref : column2.getAutoSortDir() === "desc";
        return sortDescFirst ? "desc" : "asc";
      };
      column2.getNextSortingOrder = (multi) => {
        var _table$options$enable, _table$options$enable2;
        const firstSortDirection = column2.getFirstSortDir();
        const isSorted = column2.getIsSorted();
        if (!isSorted) {
          return firstSortDirection;
        }
        if (isSorted !== firstSortDirection && ((_table$options$enable = table.options.enableSortingRemoval) != null ? _table$options$enable : true) && // If enableSortRemove, enable in general
        (multi ? (_table$options$enable2 = table.options.enableMultiRemove) != null ? _table$options$enable2 : true : true)) {
          return false;
        }
        return isSorted === "desc" ? "asc" : "desc";
      };
      column2.getCanSort = () => {
        var _column$columnDef$ena, _table$options$enable3;
        return ((_column$columnDef$ena = column2.columnDef.enableSorting) != null ? _column$columnDef$ena : true) && ((_table$options$enable3 = table.options.enableSorting) != null ? _table$options$enable3 : true) && !!column2.accessorFn;
      };
      column2.getCanMultiSort = () => {
        var _ref2, _column$columnDef$ena2;
        return (_ref2 = (_column$columnDef$ena2 = column2.columnDef.enableMultiSort) != null ? _column$columnDef$ena2 : table.options.enableMultiSort) != null ? _ref2 : !!column2.accessorFn;
      };
      column2.getIsSorted = () => {
        var _table$getState$sorti;
        const columnSort = (_table$getState$sorti = table.getState().sorting) == null ? void 0 : _table$getState$sorti.find((d) => d.id === column2.id);
        return !columnSort ? false : columnSort.desc ? "desc" : "asc";
      };
      column2.getSortIndex = () => {
        var _table$getState$sorti2, _table$getState$sorti3;
        return (_table$getState$sorti2 = (_table$getState$sorti3 = table.getState().sorting) == null ? void 0 : _table$getState$sorti3.findIndex((d) => d.id === column2.id)) != null ? _table$getState$sorti2 : -1;
      };
      column2.clearSorting = () => {
        table.setSorting((old) => old != null && old.length ? old.filter((d) => d.id !== column2.id) : []);
      };
      column2.getToggleSortingHandler = () => {
        const canSort = column2.getCanSort();
        return (e) => {
          if (!canSort)
            return;
          e.persist == null || e.persist();
          column2.toggleSorting == null || column2.toggleSorting(void 0, column2.getCanMultiSort() ? table.options.isMultiSortEvent == null ? void 0 : table.options.isMultiSortEvent(e) : false);
        };
      };
    },
    createTable: (table) => {
      table.setSorting = (updater) => table.options.onSortingChange == null ? void 0 : table.options.onSortingChange(updater);
      table.resetSorting = (defaultState) => {
        var _table$initialState$s, _table$initialState;
        table.setSorting(defaultState ? [] : (_table$initialState$s = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.sorting) != null ? _table$initialState$s : []);
      };
      table.getPreSortedRowModel = () => table.getGroupedRowModel();
      table.getSortedRowModel = () => {
        if (!table._getSortedRowModel && table.options.getSortedRowModel) {
          table._getSortedRowModel = table.options.getSortedRowModel(table);
        }
        if (table.options.manualSorting || !table._getSortedRowModel) {
          return table.getPreSortedRowModel();
        }
        return table._getSortedRowModel();
      };
    }
  };
  const Visibility = {
    getInitialState: (state) => {
      return __spreadValues({
        columnVisibility: {}
      }, state);
    },
    getDefaultOptions: (table) => {
      return {
        onColumnVisibilityChange: makeStateUpdater("columnVisibility", table)
      };
    },
    createColumn: (column2, table) => {
      column2.toggleVisibility = (value) => {
        if (column2.getCanHide()) {
          table.setColumnVisibility((old) => __spreadProps(__spreadValues({}, old), {
            [column2.id]: value != null ? value : !column2.getIsVisible()
          }));
        }
      };
      column2.getIsVisible = () => {
        var _table$getState$colum, _table$getState$colum2;
        return (_table$getState$colum = (_table$getState$colum2 = table.getState().columnVisibility) == null ? void 0 : _table$getState$colum2[column2.id]) != null ? _table$getState$colum : true;
      };
      column2.getCanHide = () => {
        var _column$columnDef$ena, _table$options$enable;
        return ((_column$columnDef$ena = column2.columnDef.enableHiding) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableHiding) != null ? _table$options$enable : true);
      };
      column2.getToggleVisibilityHandler = () => {
        return (e) => {
          column2.toggleVisibility == null || column2.toggleVisibility(e.target.checked);
        };
      };
    },
    createRow: (row, table) => {
      row._getAllVisibleCells = memo$1(() => [row.getAllCells(), table.getState().columnVisibility], (cells) => {
        return cells.filter((cell) => cell.column.getIsVisible());
      }, {
        key: process.env.NODE_ENV === "production" && "row._getAllVisibleCells",
        debug: () => {
          var _table$options$debugA;
          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;
        }
      });
      row.getVisibleCells = memo$1(() => [row.getLeftVisibleCells(), row.getCenterVisibleCells(), row.getRightVisibleCells()], (left2, center, right2) => [...left2, ...center, ...right2], {
        key: process.env.NODE_ENV === "development" && "row.getVisibleCells",
        debug: () => {
          var _table$options$debugA2;
          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;
        }
      });
    },
    createTable: (table) => {
      const makeVisibleColumnsMethod = (key, getColumns) => {
        return memo$1(() => [getColumns(), getColumns().filter((d) => d.getIsVisible()).map((d) => d.id).join("_")], (columns) => {
          return columns.filter((d) => d.getIsVisible == null ? void 0 : d.getIsVisible());
        }, {
          key,
          debug: () => {
            var _table$options$debugA3;
            return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugColumns;
          }
        });
      };
      table.getVisibleFlatColumns = makeVisibleColumnsMethod("getVisibleFlatColumns", () => table.getAllFlatColumns());
      table.getVisibleLeafColumns = makeVisibleColumnsMethod("getVisibleLeafColumns", () => table.getAllLeafColumns());
      table.getLeftVisibleLeafColumns = makeVisibleColumnsMethod("getLeftVisibleLeafColumns", () => table.getLeftLeafColumns());
      table.getRightVisibleLeafColumns = makeVisibleColumnsMethod("getRightVisibleLeafColumns", () => table.getRightLeafColumns());
      table.getCenterVisibleLeafColumns = makeVisibleColumnsMethod("getCenterVisibleLeafColumns", () => table.getCenterLeafColumns());
      table.setColumnVisibility = (updater) => table.options.onColumnVisibilityChange == null ? void 0 : table.options.onColumnVisibilityChange(updater);
      table.resetColumnVisibility = (defaultState) => {
        var _table$initialState$c;
        table.setColumnVisibility(defaultState ? {} : (_table$initialState$c = table.initialState.columnVisibility) != null ? _table$initialState$c : {});
      };
      table.toggleAllColumnsVisible = (value) => {
        var _value;
        value = (_value = value) != null ? _value : !table.getIsAllColumnsVisible();
        table.setColumnVisibility(table.getAllLeafColumns().reduce((obj, column2) => __spreadProps(__spreadValues({}, obj), {
          [column2.id]: !value ? !(column2.getCanHide != null && column2.getCanHide()) : value
        }), {}));
      };
      table.getIsAllColumnsVisible = () => !table.getAllLeafColumns().some((column2) => !(column2.getIsVisible != null && column2.getIsVisible()));
      table.getIsSomeColumnsVisible = () => table.getAllLeafColumns().some((column2) => column2.getIsVisible == null ? void 0 : column2.getIsVisible());
      table.getToggleAllColumnsVisibilityHandler = () => {
        return (e) => {
          var _target;
          table.toggleAllColumnsVisible((_target = e.target) == null ? void 0 : _target.checked);
        };
      };
    }
  };
  const features = [Headers, Visibility, Ordering, Pinning, Filters, Sorting, Grouping, Expanding, Pagination, RowSelection, ColumnSizing];
  function createTable(options) {
    var _options$initialState;
    if (options.debugAll || options.debugTable) {
      console.info("Creating Table Instance...");
    }
    let table = {
      _features: features
    };
    const defaultOptions2 = table._features.reduce((obj, feature) => {
      return Object.assign(obj, feature.getDefaultOptions == null ? void 0 : feature.getDefaultOptions(table));
    }, {});
    const mergeOptions = (options2) => {
      if (table.options.mergeOptions) {
        return table.options.mergeOptions(defaultOptions2, options2);
      }
      return __spreadValues(__spreadValues({}, defaultOptions2), options2);
    };
    const coreInitialState = {};
    let initialState = __spreadValues(__spreadValues({}, coreInitialState), (_options$initialState = options.initialState) != null ? _options$initialState : {});
    table._features.forEach((feature) => {
      var _feature$getInitialSt;
      initialState = (_feature$getInitialSt = feature.getInitialState == null ? void 0 : feature.getInitialState(initialState)) != null ? _feature$getInitialSt : initialState;
    });
    const queued = [];
    let queuedTimeout = false;
    const coreInstance = {
      _features: features,
      options: __spreadValues(__spreadValues({}, defaultOptions2), options),
      initialState,
      _queue: (cb) => {
        queued.push(cb);
        if (!queuedTimeout) {
          queuedTimeout = true;
          Promise.resolve().then(() => {
            while (queued.length) {
              queued.shift()();
            }
            queuedTimeout = false;
          }).catch((error) => setTimeout(() => {
            throw error;
          }));
        }
      },
      reset: () => {
        table.setState(table.initialState);
      },
      setOptions: (updater) => {
        const newOptions = functionalUpdate(updater, table.options);
        table.options = mergeOptions(newOptions);
      },
      getState: () => {
        return table.options.state;
      },
      setState: (updater) => {
        table.options.onStateChange == null || table.options.onStateChange(updater);
      },
      _getRowId: (row, index2, parent) => {
        var _table$options$getRow;
        return (_table$options$getRow = table.options.getRowId == null ? void 0 : table.options.getRowId(row, index2, parent)) != null ? _table$options$getRow : `${parent ? [parent.id, index2].join(".") : index2}`;
      },
      getCoreRowModel: () => {
        if (!table._getCoreRowModel) {
          table._getCoreRowModel = table.options.getCoreRowModel(table);
        }
        return table._getCoreRowModel();
      },
      // The final calls start at the bottom of the model,
      // expanded rows, which then work their way up
      getRowModel: () => {
        return table.getPaginationRowModel();
      },
      getRow: (id, searchAll) => {
        const row = (searchAll ? table.getCoreRowModel() : table.getRowModel()).rowsById[id];
        if (!row) {
          if (process.env.NODE_ENV !== "production") {
            throw new Error(`getRow expected an ID, but got ${id}`);
          }
          throw new Error();
        }
        return row;
      },
      _getDefaultColumnDef: memo$1(() => [table.options.defaultColumn], (defaultColumn) => {
        var _defaultColumn;
        defaultColumn = (_defaultColumn = defaultColumn) != null ? _defaultColumn : {};
        return __spreadValues(__spreadValues({
          header: (props) => {
            const resolvedColumnDef = props.header.column.columnDef;
            if (resolvedColumnDef.accessorKey) {
              return resolvedColumnDef.accessorKey;
            }
            if (resolvedColumnDef.accessorFn) {
              return resolvedColumnDef.id;
            }
            return null;
          },
          // footer: props => props.header.column.id,
          cell: (props) => {
            var _props$renderValue$to, _props$renderValue;
            return (_props$renderValue$to = (_props$renderValue = props.renderValue()) == null || _props$renderValue.toString == null ? void 0 : _props$renderValue.toString()) != null ? _props$renderValue$to : null;
          }
        }, table._features.reduce((obj, feature) => {
          return Object.assign(obj, feature.getDefaultColumnDef == null ? void 0 : feature.getDefaultColumnDef());
        }, {})), defaultColumn);
      }, {
        debug: () => {
          var _table$options$debugA;
          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugColumns;
        },
        key: process.env.NODE_ENV === "development" && "getDefaultColumnDef"
      }),
      _getColumnDefs: () => table.options.columns,
      getAllColumns: memo$1(() => [table._getColumnDefs()], (columnDefs) => {
        const recurseColumns = function(columnDefs2, parent, depth) {
          if (depth === void 0) {
            depth = 0;
          }
          return columnDefs2.map((columnDef) => {
            const column2 = createColumn(table, columnDef, depth, parent);
            const groupingColumnDef = columnDef;
            column2.columns = groupingColumnDef.columns ? recurseColumns(groupingColumnDef.columns, column2, depth + 1) : [];
            return column2;
          });
        };
        return recurseColumns(columnDefs);
      }, {
        key: process.env.NODE_ENV === "development" && "getAllColumns",
        debug: () => {
          var _table$options$debugA2;
          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugColumns;
        }
      }),
      getAllFlatColumns: memo$1(() => [table.getAllColumns()], (allColumns) => {
        return allColumns.flatMap((column2) => {
          return column2.getFlatColumns();
        });
      }, {
        key: process.env.NODE_ENV === "development" && "getAllFlatColumns",
        debug: () => {
          var _table$options$debugA3;
          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugColumns;
        }
      }),
      _getAllFlatColumnsById: memo$1(() => [table.getAllFlatColumns()], (flatColumns) => {
        return flatColumns.reduce((acc, column2) => {
          acc[column2.id] = column2;
          return acc;
        }, {});
      }, {
        key: process.env.NODE_ENV === "development" && "getAllFlatColumnsById",
        debug: () => {
          var _table$options$debugA4;
          return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugColumns;
        }
      }),
      getAllLeafColumns: memo$1(() => [table.getAllColumns(), table._getOrderColumnsFn()], (allColumns, orderColumns2) => {
        let leafColumns = allColumns.flatMap((column2) => column2.getLeafColumns());
        return orderColumns2(leafColumns);
      }, {
        key: process.env.NODE_ENV === "development" && "getAllLeafColumns",
        debug: () => {
          var _table$options$debugA5;
          return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugColumns;
        }
      }),
      getColumn: (columnId) => {
        const column2 = table._getAllFlatColumnsById()[columnId];
        if (process.env.NODE_ENV !== "production" && !column2) {
          console.error(`[Table] Column with id '${columnId}' does not exist.`);
        }
        return column2;
      }
    };
    Object.assign(table, coreInstance);
    for (let index2 = 0; index2 < table._features.length; index2++) {
      const feature = table._features[index2];
      feature == null || feature.createTable == null || feature.createTable(table);
    }
    return table;
  }
  function createCell(table, row, column2, columnId) {
    const getRenderValue = () => {
      var _cell$getValue;
      return (_cell$getValue = cell.getValue()) != null ? _cell$getValue : table.options.renderFallbackValue;
    };
    const cell = {
      id: `${row.id}_${column2.id}`,
      row,
      column: column2,
      getValue: () => row.getValue(columnId),
      renderValue: getRenderValue,
      getContext: memo$1(() => [table, column2, row, cell], (table2, column3, row2, cell2) => ({
        table: table2,
        column: column3,
        row: row2,
        cell: cell2,
        getValue: cell2.getValue,
        renderValue: cell2.renderValue
      }), {
        key: process.env.NODE_ENV === "development" && "cell.getContext",
        debug: () => table.options.debugAll
      })
    };
    table._features.forEach((feature) => {
      feature.createCell == null || feature.createCell(cell, column2, row, table);
    }, {});
    return cell;
  }
  const createRow = (table, id, original, rowIndex, depth, subRows, parentId) => {
    let row = {
      id,
      index: rowIndex,
      original,
      depth,
      parentId,
      _valuesCache: {},
      _uniqueValuesCache: {},
      getValue: (columnId) => {
        if (row._valuesCache.hasOwnProperty(columnId)) {
          return row._valuesCache[columnId];
        }
        const column2 = table.getColumn(columnId);
        if (!(column2 != null && column2.accessorFn)) {
          return void 0;
        }
        row._valuesCache[columnId] = column2.accessorFn(row.original, rowIndex);
        return row._valuesCache[columnId];
      },
      getUniqueValues: (columnId) => {
        if (row._uniqueValuesCache.hasOwnProperty(columnId)) {
          return row._uniqueValuesCache[columnId];
        }
        const column2 = table.getColumn(columnId);
        if (!(column2 != null && column2.accessorFn)) {
          return void 0;
        }
        if (!column2.columnDef.getUniqueValues) {
          row._uniqueValuesCache[columnId] = [row.getValue(columnId)];
          return row._uniqueValuesCache[columnId];
        }
        row._uniqueValuesCache[columnId] = column2.columnDef.getUniqueValues(row.original, rowIndex);
        return row._uniqueValuesCache[columnId];
      },
      renderValue: (columnId) => {
        var _row$getValue;
        return (_row$getValue = row.getValue(columnId)) != null ? _row$getValue : table.options.renderFallbackValue;
      },
      subRows: subRows != null ? subRows : [],
      getLeafRows: () => flattenBy(row.subRows, (d) => d.subRows),
      getParentRow: () => row.parentId ? table.getRow(row.parentId, true) : void 0,
      getParentRows: () => {
        let parentRows = [];
        let currentRow = row;
        while (true) {
          const parentRow = currentRow.getParentRow();
          if (!parentRow)
            break;
          parentRows.push(parentRow);
          currentRow = parentRow;
        }
        return parentRows.reverse();
      },
      getAllCells: memo$1(() => [table.getAllLeafColumns()], (leafColumns) => {
        return leafColumns.map((column2) => {
          return createCell(table, row, column2, column2.id);
        });
      }, {
        key: process.env.NODE_ENV === "development" && "row.getAllCells",
        debug: () => {
          var _table$options$debugA;
          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;
        }
      }),
      _getAllCellsByColumnId: memo$1(() => [row.getAllCells()], (allCells) => {
        return allCells.reduce((acc, cell) => {
          acc[cell.column.id] = cell;
          return acc;
        }, {});
      }, {
        key: process.env.NODE_ENV === "production" && "row.getAllCellsByColumnId",
        debug: () => {
          var _table$options$debugA2;
          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;
        }
      })
    };
    for (let i = 0; i < table._features.length; i++) {
      const feature = table._features[i];
      feature == null || feature.createRow == null || feature.createRow(row, table);
    }
    return row;
  };
  function createColumnHelper() {
    return {
      accessor: (accessor, column2) => {
        return typeof accessor === "function" ? __spreadProps(__spreadValues({}, column2), {
          accessorFn: accessor
        }) : __spreadProps(__spreadValues({}, column2), {
          accessorKey: accessor
        });
      },
      display: (column2) => column2,
      group: (column2) => column2
    };
  }
  function getCoreRowModel() {
    return (table) => memo$1(() => [table.options.data], (data) => {
      const rowModel = {
        rows: [],
        flatRows: [],
        rowsById: {}
      };
      const accessRows = function(originalRows, depth, parentRow) {
        if (depth === void 0) {
          depth = 0;
        }
        const rows = [];
        for (let i = 0; i < originalRows.length; i++) {
          const row = createRow(table, table._getRowId(originalRows[i], i, parentRow), originalRows[i], i, depth, void 0, parentRow == null ? void 0 : parentRow.id);
          rowModel.flatRows.push(row);
          rowModel.rowsById[row.id] = row;
          rows.push(row);
          if (table.options.getSubRows) {
            var _row$originalSubRows;
            row.originalSubRows = table.options.getSubRows(originalRows[i], i);
            if ((_row$originalSubRows = row.originalSubRows) != null && _row$originalSubRows.length) {
              row.subRows = accessRows(row.originalSubRows, depth + 1, row);
            }
          }
        }
        return rows;
      };
      rowModel.rows = accessRows(data);
      return rowModel;
    }, {
      key: process.env.NODE_ENV === "development" && "getRowModel",
      debug: () => {
        var _table$options$debugA;
        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;
      },
      onChange: () => {
        table._autoResetPageIndex();
      }
    });
  }
  function filterRows(rows, filterRowImpl, table) {
    if (table.options.filterFromLeafRows) {
      return filterRowModelFromLeafs(rows, filterRowImpl, table);
    }
    return filterRowModelFromRoot(rows, filterRowImpl, table);
  }
  function filterRowModelFromLeafs(rowsToFilter, filterRow, table) {
    var _table$options$maxLea;
    const newFilteredFlatRows = [];
    const newFilteredRowsById = {};
    const maxDepth = (_table$options$maxLea = table.options.maxLeafRowFilterDepth) != null ? _table$options$maxLea : 100;
    const recurseFilterRows = function(rowsToFilter2, depth) {
      if (depth === void 0) {
        depth = 0;
      }
      const rows = [];
      for (let i = 0; i < rowsToFilter2.length; i++) {
        var _row$subRows;
        let row = rowsToFilter2[i];
        const newRow = createRow(table, row.id, row.original, row.index, row.depth, void 0, row.parentId);
        newRow.columnFilters = row.columnFilters;
        if ((_row$subRows = row.subRows) != null && _row$subRows.length && depth < maxDepth) {
          newRow.subRows = recurseFilterRows(row.subRows, depth + 1);
          row = newRow;
          if (filterRow(row) && !newRow.subRows.length) {
            rows.push(row);
            newFilteredRowsById[row.id] = row;
            newFilteredFlatRows.push(row);
            continue;
          }
          if (filterRow(row) || newRow.subRows.length) {
            rows.push(row);
            newFilteredRowsById[row.id] = row;
            newFilteredFlatRows.push(row);
            continue;
          }
        } else {
          row = newRow;
          if (filterRow(row)) {
            rows.push(row);
            newFilteredRowsById[row.id] = row;
            newFilteredFlatRows.push(row);
          }
        }
      }
      return rows;
    };
    return {
      rows: recurseFilterRows(rowsToFilter),
      flatRows: newFilteredFlatRows,
      rowsById: newFilteredRowsById
    };
  }
  function filterRowModelFromRoot(rowsToFilter, filterRow, table) {
    var _table$options$maxLea2;
    const newFilteredFlatRows = [];
    const newFilteredRowsById = {};
    const maxDepth = (_table$options$maxLea2 = table.options.maxLeafRowFilterDepth) != null ? _table$options$maxLea2 : 100;
    const recurseFilterRows = function(rowsToFilter2, depth) {
      if (depth === void 0) {
        depth = 0;
      }
      const rows = [];
      for (let i = 0; i < rowsToFilter2.length; i++) {
        let row = rowsToFilter2[i];
        const pass = filterRow(row);
        if (pass) {
          var _row$subRows2;
          if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length && depth < maxDepth) {
            const newRow = createRow(table, row.id, row.original, row.index, row.depth, void 0, row.parentId);
            newRow.subRows = recurseFilterRows(row.subRows, depth + 1);
            row = newRow;
          }
          rows.push(row);
          newFilteredFlatRows.push(row);
          newFilteredRowsById[row.id] = row;
        }
      }
      return rows;
    };
    return {
      rows: recurseFilterRows(rowsToFilter),
      flatRows: newFilteredFlatRows,
      rowsById: newFilteredRowsById
    };
  }
  function getFilteredRowModel() {
    return (table) => memo$1(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter], (rowModel, columnFilters, globalFilter) => {
      if (!rowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {
        for (let i = 0; i < rowModel.flatRows.length; i++) {
          rowModel.flatRows[i].columnFilters = {};
          rowModel.flatRows[i].columnFiltersMeta = {};
        }
        return rowModel;
      }
      const resolvedColumnFilters = [];
      const resolvedGlobalFilters = [];
      (columnFilters != null ? columnFilters : []).forEach((d) => {
        var _filterFn$resolveFilt;
        const column2 = table.getColumn(d.id);
        if (!column2) {
          return;
        }
        const filterFn = column2.getFilterFn();
        if (!filterFn) {
          if (process.env.NODE_ENV !== "production") {
            console.warn(`Could not find a valid 'column.filterFn' for column with the ID: ${column2.id}.`);
          }
          return;
        }
        resolvedColumnFilters.push({
          id: d.id,
          filterFn,
          resolvedValue: (_filterFn$resolveFilt = filterFn.resolveFilterValue == null ? void 0 : filterFn.resolveFilterValue(d.value)) != null ? _filterFn$resolveFilt : d.value
        });
      });
      const filterableIds = columnFilters.map((d) => d.id);
      const globalFilterFn = table.getGlobalFilterFn();
      const globallyFilterableColumns = table.getAllLeafColumns().filter((column2) => column2.getCanGlobalFilter());
      if (globalFilter && globalFilterFn && globallyFilterableColumns.length) {
        filterableIds.push("__global__");
        globallyFilterableColumns.forEach((column2) => {
          var _globalFilterFn$resol;
          resolvedGlobalFilters.push({
            id: column2.id,
            filterFn: globalFilterFn,
            resolvedValue: (_globalFilterFn$resol = globalFilterFn.resolveFilterValue == null ? void 0 : globalFilterFn.resolveFilterValue(globalFilter)) != null ? _globalFilterFn$resol : globalFilter
          });
        });
      }
      let currentColumnFilter;
      let currentGlobalFilter;
      for (let j = 0; j < rowModel.flatRows.length; j++) {
        const row = rowModel.flatRows[j];
        row.columnFilters = {};
        if (resolvedColumnFilters.length) {
          for (let i = 0; i < resolvedColumnFilters.length; i++) {
            currentColumnFilter = resolvedColumnFilters[i];
            const id = currentColumnFilter.id;
            row.columnFilters[id] = currentColumnFilter.filterFn(row, id, currentColumnFilter.resolvedValue, (filterMeta) => {
              row.columnFiltersMeta[id] = filterMeta;
            });
          }
        }
        if (resolvedGlobalFilters.length) {
          for (let i = 0; i < resolvedGlobalFilters.length; i++) {
            currentGlobalFilter = resolvedGlobalFilters[i];
            const id = currentGlobalFilter.id;
            if (currentGlobalFilter.filterFn(row, id, currentGlobalFilter.resolvedValue, (filterMeta) => {
              row.columnFiltersMeta[id] = filterMeta;
            })) {
              row.columnFilters.__global__ = true;
              break;
            }
          }
          if (row.columnFilters.__global__ !== true) {
            row.columnFilters.__global__ = false;
          }
        }
      }
      const filterRowsImpl = (row) => {
        for (let i = 0; i < filterableIds.length; i++) {
          if (row.columnFilters[filterableIds[i]] === false) {
            return false;
          }
        }
        return true;
      };
      return filterRows(rowModel.rows, filterRowsImpl, table);
    }, {
      key: process.env.NODE_ENV === "development" && "getFilteredRowModel",
      debug: () => {
        var _table$options$debugA;
        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;
      },
      onChange: () => {
        table._autoResetPageIndex();
      }
    });
  }
  function getFacetedRowModel() {
    return (table, columnId) => memo$1(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter, table.getFilteredRowModel()], (preRowModel, columnFilters, globalFilter) => {
      if (!preRowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {
        return preRowModel;
      }
      const filterableIds = [...columnFilters.map((d) => d.id).filter((d) => d !== columnId), globalFilter ? "__global__" : void 0].filter(Boolean);
      const filterRowsImpl = (row) => {
        for (let i = 0; i < filterableIds.length; i++) {
          if (row.columnFilters[filterableIds[i]] === false) {
            return false;
          }
        }
        return true;
      };
      return filterRows(preRowModel.rows, filterRowsImpl, table);
    }, {
      key: process.env.NODE_ENV === "development" && "getFacetedRowModel_" + columnId,
      debug: () => {
        var _table$options$debugA;
        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;
      },
      onChange: () => {
      }
    });
  }
  function getFacetedUniqueValues() {
    return (table, columnId) => memo$1(() => {
      var _table$getColumn;
      return [(_table$getColumn = table.getColumn(columnId)) == null ? void 0 : _table$getColumn.getFacetedRowModel()];
    }, (facetedRowModel) => {
      if (!facetedRowModel)
        return /* @__PURE__ */ new Map();
      let facetedUniqueValues = /* @__PURE__ */ new Map();
      for (let i = 0; i < facetedRowModel.flatRows.length; i++) {
        const values2 = facetedRowModel.flatRows[i].getUniqueValues(columnId);
        for (let j = 0; j < values2.length; j++) {
          const value = values2[j];
          if (facetedUniqueValues.has(value)) {
            var _facetedUniqueValues$;
            facetedUniqueValues.set(value, ((_facetedUniqueValues$ = facetedUniqueValues.get(value)) != null ? _facetedUniqueValues$ : 0) + 1);
          } else {
            facetedUniqueValues.set(value, 1);
          }
        }
      }
      return facetedUniqueValues;
    }, {
      key: process.env.NODE_ENV === "development" && "getFacetedUniqueValues_" + columnId,
      debug: () => {
        var _table$options$debugA;
        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;
      },
      onChange: () => {
      }
    });
  }
  function getFacetedMinMaxValues() {
    return (table, columnId) => memo$1(() => {
      var _table$getColumn;
      return [(_table$getColumn = table.getColumn(columnId)) == null ? void 0 : _table$getColumn.getFacetedRowModel()];
    }, (facetedRowModel) => {
      var _facetedRowModel$flat;
      if (!facetedRowModel)
        return void 0;
      const firstValue = (_facetedRowModel$flat = facetedRowModel.flatRows[0]) == null ? void 0 : _facetedRowModel$flat.getUniqueValues(columnId);
      if (typeof firstValue === "undefined") {
        return void 0;
      }
      let facetedMinMaxValues = [firstValue, firstValue];
      for (let i = 0; i < facetedRowModel.flatRows.length; i++) {
        const values2 = facetedRowModel.flatRows[i].getUniqueValues(columnId);
        for (let j = 0; j < values2.length; j++) {
          const value = values2[j];
          if (value < facetedMinMaxValues[0]) {
            facetedMinMaxValues[0] = value;
          } else if (value > facetedMinMaxValues[1]) {
            facetedMinMaxValues[1] = value;
          }
        }
      }
      return facetedMinMaxValues;
    }, {
      key: process.env.NODE_ENV === "development" && "getFacetedMinMaxValues_" + columnId,
      debug: () => {
        var _table$options$debugA;
        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;
      },
      onChange: () => {
      }
    });
  }
  function getSortedRowModel() {
    return (table) => memo$1(() => [table.getState().sorting, table.getPreSortedRowModel()], (sorting, rowModel) => {
      if (!rowModel.rows.length || !(sorting != null && sorting.length)) {
        return rowModel;
      }
      const sortingState = table.getState().sorting;
      const sortedFlatRows = [];
      const availableSorting = sortingState.filter((sort) => {
        var _table$getColumn;
        return (_table$getColumn = table.getColumn(sort.id)) == null ? void 0 : _table$getColumn.getCanSort();
      });
      const columnInfoById = {};
      availableSorting.forEach((sortEntry) => {
        const column2 = table.getColumn(sortEntry.id);
        if (!column2)
          return;
        columnInfoById[sortEntry.id] = {
          sortUndefined: column2.columnDef.sortUndefined,
          invertSorting: column2.columnDef.invertSorting,
          sortingFn: column2.getSortingFn()
        };
      });
      const sortData = (rows) => {
        const sortedData = rows.map((row) => __spreadValues({}, row));
        sortedData.sort((rowA, rowB) => {
          for (let i = 0; i < availableSorting.length; i += 1) {
            var _sortEntry$desc;
            const sortEntry = availableSorting[i];
            const columnInfo = columnInfoById[sortEntry.id];
            const isDesc = (_sortEntry$desc = sortEntry == null ? void 0 : sortEntry.desc) != null ? _sortEntry$desc : false;
            let sortInt = 0;
            if (columnInfo.sortUndefined) {
              const aValue = rowA.getValue(sortEntry.id);
              const bValue = rowB.getValue(sortEntry.id);
              const aUndefined = aValue === void 0;
              const bUndefined = bValue === void 0;
              if (aUndefined || bUndefined) {
                sortInt = aUndefined && bUndefined ? 0 : aUndefined ? columnInfo.sortUndefined : -columnInfo.sortUndefined;
              }
            }
            if (sortInt === 0) {
              sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id);
            }
            if (sortInt !== 0) {
              if (isDesc) {
                sortInt *= -1;
              }
              if (columnInfo.invertSorting) {
                sortInt *= -1;
              }
              return sortInt;
            }
          }
          return rowA.index - rowB.index;
        });
        sortedData.forEach((row) => {
          var _row$subRows;
          sortedFlatRows.push(row);
          if ((_row$subRows = row.subRows) != null && _row$subRows.length) {
            row.subRows = sortData(row.subRows);
          }
        });
        return sortedData;
      };
      return {
        rows: sortData(rowModel.rows),
        flatRows: sortedFlatRows,
        rowsById: rowModel.rowsById
      };
    }, {
      key: process.env.NODE_ENV === "development" && "getSortedRowModel",
      debug: () => {
        var _table$options$debugA;
        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;
      },
      onChange: () => {
        table._autoResetPageIndex();
      }
    });
  }
  function getGroupedRowModel() {
    return (table) => memo$1(() => [table.getState().grouping, table.getPreGroupedRowModel()], (grouping, rowModel) => {
      if (!rowModel.rows.length || !grouping.length) {
        return rowModel;
      }
      const existingGrouping = grouping.filter((columnId) => table.getColumn(columnId));
      const groupedFlatRows = [];
      const groupedRowsById = {};
      const groupUpRecursively = function(rows, depth, parentId) {
        if (depth === void 0) {
          depth = 0;
        }
        if (depth >= existingGrouping.length) {
          return rows.map((row) => {
            row.depth = depth;
            groupedFlatRows.push(row);
            groupedRowsById[row.id] = row;
            if (row.subRows) {
              row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id);
            }
            return row;
          });
        }
        const columnId = existingGrouping[depth];
        const rowGroupsMap = groupBy(rows, columnId);
        const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map((_ref, index2) => {
          let [groupingValue, groupedRows2] = _ref;
          let id = `${columnId}:${groupingValue}`;
          id = parentId ? `${parentId}>${id}` : id;
          const subRows = groupUpRecursively(groupedRows2, depth + 1, id);
          const leafRows = depth ? flattenBy(groupedRows2, (row2) => row2.subRows) : groupedRows2;
          const row = createRow(table, id, leafRows[0].original, index2, depth, void 0, parentId);
          Object.assign(row, {
            groupingColumnId: columnId,
            groupingValue,
            subRows,
            leafRows,
            getValue: (columnId2) => {
              if (existingGrouping.includes(columnId2)) {
                if (row._valuesCache.hasOwnProperty(columnId2)) {
                  return row._valuesCache[columnId2];
                }
                if (groupedRows2[0]) {
                  var _groupedRows$0$getVal;
                  row._valuesCache[columnId2] = (_groupedRows$0$getVal = groupedRows2[0].getValue(columnId2)) != null ? _groupedRows$0$getVal : void 0;
                }
                return row._valuesCache[columnId2];
              }
              if (row._groupingValuesCache.hasOwnProperty(columnId2)) {
                return row._groupingValuesCache[columnId2];
              }
              const column2 = table.getColumn(columnId2);
              const aggregateFn = column2 == null ? void 0 : column2.getAggregationFn();
              if (aggregateFn) {
                row._groupingValuesCache[columnId2] = aggregateFn(columnId2, leafRows, groupedRows2);
                return row._groupingValuesCache[columnId2];
              }
            }
          });
          subRows.forEach((subRow) => {
            groupedFlatRows.push(subRow);
            groupedRowsById[subRow.id] = subRow;
          });
          return row;
        });
        return aggregatedGroupedRows;
      };
      const groupedRows = groupUpRecursively(rowModel.rows, 0);
      groupedRows.forEach((subRow) => {
        groupedFlatRows.push(subRow);
        groupedRowsById[subRow.id] = subRow;
      });
      return {
        rows: groupedRows,
        flatRows: groupedFlatRows,
        rowsById: groupedRowsById
      };
    }, {
      key: process.env.NODE_ENV === "development" && "getGroupedRowModel",
      debug: () => {
        var _table$options$debugA;
        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;
      },
      onChange: () => {
        table._queue(() => {
          table._autoResetExpanded();
          table._autoResetPageIndex();
        });
      }
    });
  }
  function groupBy(rows, columnId) {
    const groupMap = /* @__PURE__ */ new Map();
    return rows.reduce((map, row) => {
      const resKey = `${row.getGroupingValue(columnId)}`;
      const previous = map.get(resKey);
      if (!previous) {
        map.set(resKey, [row]);
      } else {
        previous.push(row);
      }
      return map;
    }, groupMap);
  }
  function getExpandedRowModel() {
    return (table) => memo$1(() => [table.getState().expanded, table.getPreExpandedRowModel(), table.options.paginateExpandedRows], (expanded, rowModel, paginateExpandedRows) => {
      if (!rowModel.rows.length || expanded !== true && !Object.keys(expanded != null ? expanded : {}).length) {
        return rowModel;
      }
      if (!paginateExpandedRows) {
        return rowModel;
      }
      return expandRows(rowModel);
    }, {
      key: process.env.NODE_ENV === "development" && "getExpandedRowModel",
      debug: () => {
        var _table$options$debugA;
        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;
      }
    });
  }
  function expandRows(rowModel) {
    const expandedRows = [];
    const handleRow = (row) => {
      var _row$subRows;
      expandedRows.push(row);
      if ((_row$subRows = row.subRows) != null && _row$subRows.length && row.getIsExpanded()) {
        row.subRows.forEach(handleRow);
      }
    };
    rowModel.rows.forEach(handleRow);
    return {
      rows: expandedRows,
      flatRows: rowModel.flatRows,
      rowsById: rowModel.rowsById
    };
  }
  function getPaginationRowModel(opts) {
    return (table) => memo$1(() => [table.getState().pagination, table.getPrePaginationRowModel(), table.options.paginateExpandedRows ? void 0 : table.getState().expanded], (pagination, rowModel) => {
      if (!rowModel.rows.length) {
        return rowModel;
      }
      const {
        pageSize: pageSize2,
        pageIndex
      } = pagination;
      let {
        rows,
        flatRows,
        rowsById
      } = rowModel;
      const pageStart = pageSize2 * pageIndex;
      const pageEnd = pageStart + pageSize2;
      rows = rows.slice(pageStart, pageEnd);
      let paginatedRowModel;
      if (!table.options.paginateExpandedRows) {
        paginatedRowModel = expandRows({
          rows,
          flatRows,
          rowsById
        });
      } else {
        paginatedRowModel = {
          rows,
          flatRows,
          rowsById
        };
      }
      paginatedRowModel.flatRows = [];
      const handleRow = (row) => {
        paginatedRowModel.flatRows.push(row);
        if (row.subRows.length) {
          row.subRows.forEach(handleRow);
        }
      };
      paginatedRowModel.rows.forEach(handleRow);
      return paginatedRowModel;
    }, {
      key: process.env.NODE_ENV === "development" && "getPaginationRowModel",
      debug: () => {
        var _table$options$debugA;
        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;
      }
    });
  }
  /**
   * react-table
   *
   * Copyright (c) TanStack
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   */
  function flexRender(Comp, props) {
    return !Comp ? null : isReactComponent(Comp) ? /* @__PURE__ */ React__namespace.createElement(Comp, props) : Comp;
  }
  function isReactComponent(component) {
    return isClassComponent(component) || typeof component === "function" || isExoticComponent(component);
  }
  function isClassComponent(component) {
    return typeof component === "function" && (() => {
      const proto = Object.getPrototypeOf(component);
      return proto.prototype && proto.prototype.isReactComponent;
    })();
  }
  function isExoticComponent(component) {
    return typeof component === "object" && typeof component.$$typeof === "symbol" && ["react.memo", "react.forward_ref"].includes(component.$$typeof.description);
  }
  function useReactTable(options) {
    const resolvedOptions = __spreadValues({
      state: {},
      // Dummy state
      onStateChange: () => {
      },
      // noop
      renderFallbackValue: null
    }, options);
    const [tableRef] = React__namespace.useState(() => ({
      current: createTable(resolvedOptions)
    }));
    const [state, setState] = React__namespace.useState(() => tableRef.current.initialState);
    tableRef.current.setOptions((prev2) => __spreadProps(__spreadValues(__spreadValues({}, prev2), options), {
      state: __spreadValues(__spreadValues({}, state), options.state),
      // Similarly, we'll maintain both our internal state and any user-provided
      // state.
      onStateChange: (updater) => {
        setState(updater);
        options.onStateChange == null || options.onStateChange(updater);
      }
    }));
    return tableRef.current;
  }
  /**
   * match-sorter-utils
   *
   * Copyright (c) TanStack
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   */
  const characterMap = {
    À: "A",
    Á: "A",
    Â: "A",
    Ã: "A",
    Ä: "A",
    Å: "A",
    Ấ: "A",
    Ắ: "A",
    Ẳ: "A",
    Ẵ: "A",
    Ặ: "A",
    Æ: "AE",
    Ầ: "A",
    Ằ: "A",
    Ȃ: "A",
    Ç: "C",
    Ḉ: "C",
    È: "E",
    É: "E",
    Ê: "E",
    Ë: "E",
    Ế: "E",
    Ḗ: "E",
    Ề: "E",
    Ḕ: "E",
    Ḝ: "E",
    Ȇ: "E",
    Ì: "I",
    Í: "I",
    Î: "I",
    Ï: "I",
    Ḯ: "I",
    Ȋ: "I",
    Ð: "D",
    Ñ: "N",
    Ò: "O",
    Ó: "O",
    Ô: "O",
    Õ: "O",
    Ö: "O",
    Ø: "O",
    Ố: "O",
    Ṍ: "O",
    Ṓ: "O",
    Ȏ: "O",
    Ù: "U",
    Ú: "U",
    Û: "U",
    Ü: "U",
    Ý: "Y",
    à: "a",
    á: "a",
    â: "a",
    ã: "a",
    ä: "a",
    å: "a",
    ấ: "a",
    ắ: "a",
    ẳ: "a",
    ẵ: "a",
    ặ: "a",
    æ: "ae",
    ầ: "a",
    ằ: "a",
    ȃ: "a",
    ç: "c",
    ḉ: "c",
    è: "e",
    é: "e",
    ê: "e",
    ë: "e",
    ế: "e",
    ḗ: "e",
    ề: "e",
    ḕ: "e",
    ḝ: "e",
    ȇ: "e",
    ì: "i",
    í: "i",
    î: "i",
    ï: "i",
    ḯ: "i",
    ȋ: "i",
    ð: "d",
    ñ: "n",
    ò: "o",
    ó: "o",
    ô: "o",
    õ: "o",
    ö: "o",
    ø: "o",
    ố: "o",
    ṍ: "o",
    ṓ: "o",
    ȏ: "o",
    ù: "u",
    ú: "u",
    û: "u",
    ü: "u",
    ý: "y",
    ÿ: "y",
    Ā: "A",
    ā: "a",
    Ă: "A",
    ă: "a",
    Ą: "A",
    ą: "a",
    Ć: "C",
    ć: "c",
    Ĉ: "C",
    ĉ: "c",
    Ċ: "C",
    ċ: "c",
    Č: "C",
    č: "c",
    C̆: "C",
    c̆: "c",
    Ď: "D",
    ď: "d",
    Đ: "D",
    đ: "d",
    Ē: "E",
    ē: "e",
    Ĕ: "E",
    ĕ: "e",
    Ė: "E",
    ė: "e",
    Ę: "E",
    ę: "e",
    Ě: "E",
    ě: "e",
    Ĝ: "G",
    Ǵ: "G",
    ĝ: "g",
    ǵ: "g",
    Ğ: "G",
    ğ: "g",
    Ġ: "G",
    ġ: "g",
    Ģ: "G",
    ģ: "g",
    Ĥ: "H",
    ĥ: "h",
    Ħ: "H",
    ħ: "h",
    Ḫ: "H",
    ḫ: "h",
    Ĩ: "I",
    ĩ: "i",
    Ī: "I",
    ī: "i",
    Ĭ: "I",
    ĭ: "i",
    Į: "I",
    į: "i",
    İ: "I",
    ı: "i",
    Ĳ: "IJ",
    ĳ: "ij",
    Ĵ: "J",
    ĵ: "j",
    Ķ: "K",
    ķ: "k",
    Ḱ: "K",
    ḱ: "k",
    K̆: "K",
    k̆: "k",
    Ĺ: "L",
    ĺ: "l",
    Ļ: "L",
    ļ: "l",
    Ľ: "L",
    ľ: "l",
    Ŀ: "L",
    ŀ: "l",
    Ł: "l",
    ł: "l",
    Ḿ: "M",
    ḿ: "m",
    M̆: "M",
    m̆: "m",
    Ń: "N",
    ń: "n",
    Ņ: "N",
    ņ: "n",
    Ň: "N",
    ň: "n",
    ŉ: "n",
    N̆: "N",
    n̆: "n",
    Ō: "O",
    ō: "o",
    Ŏ: "O",
    ŏ: "o",
    Ő: "O",
    ő: "o",
    Œ: "OE",
    œ: "oe",
    P̆: "P",
    p̆: "p",
    Ŕ: "R",
    ŕ: "r",
    Ŗ: "R",
    ŗ: "r",
    Ř: "R",
    ř: "r",
    R̆: "R",
    r̆: "r",
    Ȓ: "R",
    ȓ: "r",
    Ś: "S",
    ś: "s",
    Ŝ: "S",
    ŝ: "s",
    Ş: "S",
    Ș: "S",
    ș: "s",
    ş: "s",
    Š: "S",
    š: "s",
    Ţ: "T",
    ţ: "t",
    ț: "t",
    Ț: "T",
    Ť: "T",
    ť: "t",
    Ŧ: "T",
    ŧ: "t",
    T̆: "T",
    t̆: "t",
    Ũ: "U",
    ũ: "u",
    Ū: "U",
    ū: "u",
    Ŭ: "U",
    ŭ: "u",
    Ů: "U",
    ů: "u",
    Ű: "U",
    ű: "u",
    Ų: "U",
    ų: "u",
    Ȗ: "U",
    ȗ: "u",
    V̆: "V",
    v̆: "v",
    Ŵ: "W",
    ŵ: "w",
    Ẃ: "W",
    ẃ: "w",
    X̆: "X",
    x̆: "x",
    Ŷ: "Y",
    ŷ: "y",
    Ÿ: "Y",
    Y̆: "Y",
    y̆: "y",
    Ź: "Z",
    ź: "z",
    Ż: "Z",
    ż: "z",
    Ž: "Z",
    ž: "z",
    ſ: "s",
    ƒ: "f",
    Ơ: "O",
    ơ: "o",
    Ư: "U",
    ư: "u",
    Ǎ: "A",
    ǎ: "a",
    Ǐ: "I",
    ǐ: "i",
    Ǒ: "O",
    ǒ: "o",
    Ǔ: "U",
    ǔ: "u",
    Ǖ: "U",
    ǖ: "u",
    Ǘ: "U",
    ǘ: "u",
    Ǚ: "U",
    ǚ: "u",
    Ǜ: "U",
    ǜ: "u",
    Ứ: "U",
    ứ: "u",
    Ṹ: "U",
    ṹ: "u",
    Ǻ: "A",
    ǻ: "a",
    Ǽ: "AE",
    ǽ: "ae",
    Ǿ: "O",
    ǿ: "o",
    Þ: "TH",
    þ: "th",
    Ṕ: "P",
    ṕ: "p",
    Ṥ: "S",
    ṥ: "s",
    X́: "X",
    x́: "x",
    Ѓ: "Г",
    ѓ: "г",
    Ќ: "К",
    ќ: "к",
    A̋: "A",
    a̋: "a",
    E̋: "E",
    e̋: "e",
    I̋: "I",
    i̋: "i",
    Ǹ: "N",
    ǹ: "n",
    Ồ: "O",
    ồ: "o",
    Ṑ: "O",
    ṑ: "o",
    Ừ: "U",
    ừ: "u",
    Ẁ: "W",
    ẁ: "w",
    Ỳ: "Y",
    ỳ: "y",
    Ȁ: "A",
    ȁ: "a",
    Ȅ: "E",
    ȅ: "e",
    Ȉ: "I",
    ȉ: "i",
    Ȍ: "O",
    ȍ: "o",
    Ȑ: "R",
    ȑ: "r",
    Ȕ: "U",
    ȕ: "u",
    B̌: "B",
    b̌: "b",
    Č̣: "C",
    č̣: "c",
    Ê̌: "E",
    ê̌: "e",
    F̌: "F",
    f̌: "f",
    Ǧ: "G",
    ǧ: "g",
    Ȟ: "H",
    ȟ: "h",
    J̌: "J",
    ǰ: "j",
    Ǩ: "K",
    ǩ: "k",
    M̌: "M",
    m̌: "m",
    P̌: "P",
    p̌: "p",
    Q̌: "Q",
    q̌: "q",
    Ř̩: "R",
    ř̩: "r",
    Ṧ: "S",
    ṧ: "s",
    V̌: "V",
    v̌: "v",
    W̌: "W",
    w̌: "w",
    X̌: "X",
    x̌: "x",
    Y̌: "Y",
    y̌: "y",
    A̧: "A",
    a̧: "a",
    B̧: "B",
    b̧: "b",
    Ḑ: "D",
    ḑ: "d",
    Ȩ: "E",
    ȩ: "e",
    Ɛ̧: "E",
    ɛ̧: "e",
    Ḩ: "H",
    ḩ: "h",
    I̧: "I",
    i̧: "i",
    Ɨ̧: "I",
    ɨ̧: "i",
    M̧: "M",
    m̧: "m",
    O̧: "O",
    o̧: "o",
    Q̧: "Q",
    q̧: "q",
    U̧: "U",
    u̧: "u",
    X̧: "X",
    x̧: "x",
    Z̧: "Z",
    z̧: "z"
  };
  const chars = Object.keys(characterMap).join("|");
  const allAccents = new RegExp(chars, "g");
  function removeAccents(str) {
    return str.replace(allAccents, (match2) => {
      return characterMap[match2];
    });
  }
  /**
   * @name match-sorter
   * @license MIT license.
   * @copyright (c) 2099 Kent C. Dodds
   * @author Kent C. Dodds <me@kentcdodds.com> (https://kentcdodds.com)
   */
  const rankings = {
    CASE_SENSITIVE_EQUAL: 7,
    EQUAL: 6,
    STARTS_WITH: 5,
    WORD_STARTS_WITH: 4,
    CONTAINS: 3,
    ACRONYM: 2,
    MATCHES: 1,
    NO_MATCH: 0
  };
  function rankItem(item, value, options) {
    var _options$threshold;
    options = options || {};
    options.threshold = (_options$threshold = options.threshold) != null ? _options$threshold : rankings.MATCHES;
    if (!options.accessors) {
      const rank = getMatchRanking(item, value, options);
      return {
        // ends up being duplicate of 'item' in matches but consistent
        rankedValue: item,
        rank,
        accessorIndex: -1,
        accessorThreshold: options.threshold,
        passed: rank >= options.threshold
      };
    }
    const valuesToRank = getAllValuesToRank(item, options.accessors);
    const rankingInfo = {
      rankedValue: item,
      rank: rankings.NO_MATCH,
      accessorIndex: -1,
      accessorThreshold: options.threshold,
      passed: false
    };
    for (let i = 0; i < valuesToRank.length; i++) {
      const rankValue = valuesToRank[i];
      let newRank = getMatchRanking(rankValue.itemValue, value, options);
      const {
        minRanking,
        maxRanking,
        threshold = options.threshold
      } = rankValue.attributes;
      if (newRank < minRanking && newRank >= rankings.MATCHES) {
        newRank = minRanking;
      } else if (newRank > maxRanking) {
        newRank = maxRanking;
      }
      newRank = Math.min(newRank, maxRanking);
      if (newRank >= threshold && newRank > rankingInfo.rank) {
        rankingInfo.rank = newRank;
        rankingInfo.passed = true;
        rankingInfo.accessorIndex = i;
        rankingInfo.accessorThreshold = threshold;
        rankingInfo.rankedValue = rankValue.itemValue;
      }
    }
    return rankingInfo;
  }
  function getMatchRanking(testString, stringToRank, options) {
    testString = prepareValueForComparison(testString, options);
    stringToRank = prepareValueForComparison(stringToRank, options);
    if (stringToRank.length > testString.length) {
      return rankings.NO_MATCH;
    }
    if (testString === stringToRank) {
      return rankings.CASE_SENSITIVE_EQUAL;
    }
    testString = testString.toLowerCase();
    stringToRank = stringToRank.toLowerCase();
    if (testString === stringToRank) {
      return rankings.EQUAL;
    }
    if (testString.startsWith(stringToRank)) {
      return rankings.STARTS_WITH;
    }
    if (testString.includes(` ${stringToRank}`)) {
      return rankings.WORD_STARTS_WITH;
    }
    if (testString.includes(stringToRank)) {
      return rankings.CONTAINS;
    } else if (stringToRank.length === 1) {
      return rankings.NO_MATCH;
    }
    if (getAcronym(testString).includes(stringToRank)) {
      return rankings.ACRONYM;
    }
    return getClosenessRanking(testString, stringToRank);
  }
  function getAcronym(string) {
    let acronym = "";
    const wordsInString = string.split(" ");
    wordsInString.forEach((wordInString) => {
      const splitByHyphenWords = wordInString.split("-");
      splitByHyphenWords.forEach((splitByHyphenWord) => {
        acronym += splitByHyphenWord.substr(0, 1);
      });
    });
    return acronym;
  }
  function getClosenessRanking(testString, stringToRank) {
    let matchingInOrderCharCount = 0;
    let charNumber = 0;
    function findMatchingCharacter(matchChar, string, index2) {
      for (let j = index2, J = string.length; j < J; j++) {
        const stringChar = string[j];
        if (stringChar === matchChar) {
          matchingInOrderCharCount += 1;
          return j + 1;
        }
      }
      return -1;
    }
    function getRanking(spread2) {
      const spreadPercentage = 1 / spread2;
      const inOrderPercentage = matchingInOrderCharCount / stringToRank.length;
      const ranking = rankings.MATCHES + inOrderPercentage * spreadPercentage;
      return ranking;
    }
    const firstIndex = findMatchingCharacter(stringToRank[0], testString, 0);
    if (firstIndex < 0) {
      return rankings.NO_MATCH;
    }
    charNumber = firstIndex;
    for (let i = 1, I = stringToRank.length; i < I; i++) {
      const matchChar = stringToRank[i];
      charNumber = findMatchingCharacter(matchChar, testString, charNumber);
      const found = charNumber > -1;
      if (!found) {
        return rankings.NO_MATCH;
      }
    }
    const spread = charNumber - firstIndex;
    return getRanking(spread);
  }
  function compareItems(a, b) {
    return a.rank === b.rank ? 0 : a.rank > b.rank ? -1 : 1;
  }
  function prepareValueForComparison(value, _ref) {
    let {
      keepDiacritics
    } = _ref;
    value = `${value}`;
    if (!keepDiacritics) {
      value = removeAccents(value);
    }
    return value;
  }
  function getItemValues(item, accessor) {
    let accessorFn = accessor;
    if (typeof accessor === "object") {
      accessorFn = accessor.accessor;
    }
    const value = accessorFn(item);
    if (value == null) {
      return [];
    }
    if (Array.isArray(value)) {
      return value;
    }
    return [String(value)];
  }
  function getAllValuesToRank(item, accessors) {
    const allValues = [];
    for (let j = 0, J = accessors.length; j < J; j++) {
      const accessor = accessors[j];
      const attributes = getAccessorAttributes(accessor);
      const itemValues = getItemValues(item, accessor);
      for (let i = 0, I = itemValues.length; i < I; i++) {
        allValues.push({
          itemValue: itemValues[i],
          attributes
        });
      }
    }
    return allValues;
  }
  const defaultKeyAttributes = {
    maxRanking: Infinity,
    minRanking: -Infinity
  };
  function getAccessorAttributes(accessor) {
    if (typeof accessor === "function") {
      return defaultKeyAttributes;
    }
    return __spreadValues(__spreadValues({}, defaultKeyAttributes), accessor);
  }
  var ArrowDownward = {};
  "use strict";
  var _interopRequireDefault$r = interopRequireDefaultExports;
  Object.defineProperty(ArrowDownward, "__esModule", {
    value: true
  });
  var default_1$r = ArrowDownward.default = void 0;
  var _createSvgIcon$r = _interopRequireDefault$r(requireCreateSvgIcon());
  var _jsxRuntime$r = jsxRuntimeExports;
  var _default$r = (0, _createSvgIcon$r.default)(/* @__PURE__ */ (0, _jsxRuntime$r.jsx)("path", {
    d: "m20 12-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"
  }), "ArrowDownward");
  default_1$r = ArrowDownward.default = _default$r;
  var ArrowRight = {};
  "use strict";
  var _interopRequireDefault$q = interopRequireDefaultExports;
  Object.defineProperty(ArrowRight, "__esModule", {
    value: true
  });
  var default_1$q = ArrowRight.default = void 0;
  var _createSvgIcon$q = _interopRequireDefault$q(requireCreateSvgIcon());
  var _jsxRuntime$q = jsxRuntimeExports;
  var _default$q = (0, _createSvgIcon$q.default)(/* @__PURE__ */ (0, _jsxRuntime$q.jsx)("path", {
    d: "m10 17 5-5-5-5v10z"
  }), "ArrowRight");
  default_1$q = ArrowRight.default = _default$q;
  var Cancel = {};
  "use strict";
  var _interopRequireDefault$p = interopRequireDefaultExports;
  Object.defineProperty(Cancel, "__esModule", {
    value: true
  });
  var default_1$p = Cancel.default = void 0;
  var _createSvgIcon$p = _interopRequireDefault$p(requireCreateSvgIcon());
  var _jsxRuntime$p = jsxRuntimeExports;
  var _default$p = (0, _createSvgIcon$p.default)(/* @__PURE__ */ (0, _jsxRuntime$p.jsx)("path", {
    d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
  }), "Cancel");
  default_1$p = Cancel.default = _default$p;
  var ClearAll = {};
  "use strict";
  var _interopRequireDefault$o = interopRequireDefaultExports;
  Object.defineProperty(ClearAll, "__esModule", {
    value: true
  });
  var default_1$o = ClearAll.default = void 0;
  var _createSvgIcon$o = _interopRequireDefault$o(requireCreateSvgIcon());
  var _jsxRuntime$o = jsxRuntimeExports;
  var _default$o = (0, _createSvgIcon$o.default)(/* @__PURE__ */ (0, _jsxRuntime$o.jsx)("path", {
    d: "M5 13h14v-2H5v2zm-2 4h14v-2H3v2zM7 7v2h14V7H7z"
  }), "ClearAll");
  default_1$o = ClearAll.default = _default$o;
  var Close = {};
  "use strict";
  var _interopRequireDefault$n = interopRequireDefaultExports;
  Object.defineProperty(Close, "__esModule", {
    value: true
  });
  var default_1$n = Close.default = void 0;
  var _createSvgIcon$n = _interopRequireDefault$n(requireCreateSvgIcon());
  var _jsxRuntime$n = jsxRuntimeExports;
  var _default$n = (0, _createSvgIcon$n.default)(/* @__PURE__ */ (0, _jsxRuntime$n.jsx)("path", {
    d: "M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
  }), "Close");
  default_1$n = Close.default = _default$n;
  var DensityLarge = {};
  "use strict";
  var _interopRequireDefault$m = interopRequireDefaultExports;
  Object.defineProperty(DensityLarge, "__esModule", {
    value: true
  });
  var default_1$m = DensityLarge.default = void 0;
  var _createSvgIcon$m = _interopRequireDefault$m(requireCreateSvgIcon());
  var _jsxRuntime$m = jsxRuntimeExports;
  var _default$m = (0, _createSvgIcon$m.default)(/* @__PURE__ */ (0, _jsxRuntime$m.jsx)("path", {
    d: "M3 3h18v2H3zm0 16h18v2H3z"
  }), "DensityLarge");
  default_1$m = DensityLarge.default = _default$m;
  var DensityMedium = {};
  "use strict";
  var _interopRequireDefault$l = interopRequireDefaultExports;
  Object.defineProperty(DensityMedium, "__esModule", {
    value: true
  });
  var default_1$l = DensityMedium.default = void 0;
  var _createSvgIcon$l = _interopRequireDefault$l(requireCreateSvgIcon());
  var _jsxRuntime$l = jsxRuntimeExports;
  var _default$l = (0, _createSvgIcon$l.default)(/* @__PURE__ */ (0, _jsxRuntime$l.jsx)("path", {
    d: "M3 3h18v2H3zm0 16h18v2H3zm0-8h18v2H3z"
  }), "DensityMedium");
  default_1$l = DensityMedium.default = _default$l;
  var DensitySmall = {};
  "use strict";
  var _interopRequireDefault$k = interopRequireDefaultExports;
  Object.defineProperty(DensitySmall, "__esModule", {
    value: true
  });
  var default_1$k = DensitySmall.default = void 0;
  var _createSvgIcon$k = _interopRequireDefault$k(requireCreateSvgIcon());
  var _jsxRuntime$k = jsxRuntimeExports;
  var _default$k = (0, _createSvgIcon$k.default)(/* @__PURE__ */ (0, _jsxRuntime$k.jsx)("path", {
    d: "M3 2h18v2H3zm0 18h18v2H3zm0-6h18v2H3zm0-6h18v2H3z"
  }), "DensitySmall");
  default_1$k = DensitySmall.default = _default$k;
  var DragHandle = {};
  "use strict";
  var _interopRequireDefault$j = interopRequireDefaultExports;
  Object.defineProperty(DragHandle, "__esModule", {
    value: true
  });
  var default_1$j = DragHandle.default = void 0;
  var _createSvgIcon$j = _interopRequireDefault$j(requireCreateSvgIcon());
  var _jsxRuntime$j = jsxRuntimeExports;
  var _default$j = (0, _createSvgIcon$j.default)(/* @__PURE__ */ (0, _jsxRuntime$j.jsx)("path", {
    d: "M20 9H4v2h16V9zM4 15h16v-2H4v2z"
  }), "DragHandle");
  default_1$j = DragHandle.default = _default$j;
  var DynamicFeed = {};
  "use strict";
  var _interopRequireDefault$i = interopRequireDefaultExports;
  Object.defineProperty(DynamicFeed, "__esModule", {
    value: true
  });
  var default_1$i = DynamicFeed.default = void 0;
  var _createSvgIcon$i = _interopRequireDefault$i(requireCreateSvgIcon());
  var _jsxRuntime$i = jsxRuntimeExports;
  var _default$i = (0, _createSvgIcon$i.default)([/* @__PURE__ */ (0, _jsxRuntime$i.jsx)("path", {
    d: "M8 8H6v7c0 1.1.9 2 2 2h9v-2H8V8z"
  }, "0"), /* @__PURE__ */ (0, _jsxRuntime$i.jsx)("path", {
    d: "M20 3h-8c-1.1 0-2 .9-2 2v6c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 8h-8V7h8v4zM4 12H2v7c0 1.1.9 2 2 2h9v-2H4v-7z"
  }, "1")], "DynamicFeed");
  default_1$i = DynamicFeed.default = _default$i;
  var Edit = {};
  "use strict";
  var _interopRequireDefault$h = interopRequireDefaultExports;
  Object.defineProperty(Edit, "__esModule", {
    value: true
  });
  var default_1$h = Edit.default = void 0;
  var _createSvgIcon$h = _interopRequireDefault$h(requireCreateSvgIcon());
  var _jsxRuntime$h = jsxRuntimeExports;
  var _default$h = (0, _createSvgIcon$h.default)(/* @__PURE__ */ (0, _jsxRuntime$h.jsx)("path", {
    d: "M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"
  }), "Edit");
  default_1$h = Edit.default = _default$h;
  var ExpandMore = {};
  "use strict";
  var _interopRequireDefault$g = interopRequireDefaultExports;
  Object.defineProperty(ExpandMore, "__esModule", {
    value: true
  });
  var default_1$g = ExpandMore.default = void 0;
  var _createSvgIcon$g = _interopRequireDefault$g(requireCreateSvgIcon());
  var _jsxRuntime$g = jsxRuntimeExports;
  var _default$g = (0, _createSvgIcon$g.default)(/* @__PURE__ */ (0, _jsxRuntime$g.jsx)("path", {
    d: "M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6z"
  }), "ExpandMore");
  default_1$g = ExpandMore.default = _default$g;
  var FilterAlt = {};
  "use strict";
  var _interopRequireDefault$f = interopRequireDefaultExports;
  Object.defineProperty(FilterAlt, "__esModule", {
    value: true
  });
  var default_1$f = FilterAlt.default = void 0;
  var _createSvgIcon$f = _interopRequireDefault$f(requireCreateSvgIcon());
  var _jsxRuntime$f = jsxRuntimeExports;
  var _default$f = (0, _createSvgIcon$f.default)(/* @__PURE__ */ (0, _jsxRuntime$f.jsx)("path", {
    d: "M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61z"
  }), "FilterAlt");
  default_1$f = FilterAlt.default = _default$f;
  var FilterList = {};
  "use strict";
  var _interopRequireDefault$e = interopRequireDefaultExports;
  Object.defineProperty(FilterList, "__esModule", {
    value: true
  });
  var default_1$e = FilterList.default = void 0;
  var _createSvgIcon$e = _interopRequireDefault$e(requireCreateSvgIcon());
  var _jsxRuntime$e = jsxRuntimeExports;
  var _default$e = (0, _createSvgIcon$e.default)(/* @__PURE__ */ (0, _jsxRuntime$e.jsx)("path", {
    d: "M10 18h4v-2h-4v2zM3 6v2h18V6H3zm3 7h12v-2H6v2z"
  }), "FilterList");
  default_1$e = FilterList.default = _default$e;
  var FilterListOff = {};
  "use strict";
  var _interopRequireDefault$d = interopRequireDefaultExports;
  Object.defineProperty(FilterListOff, "__esModule", {
    value: true
  });
  var default_1$d = FilterListOff.default = void 0;
  var _createSvgIcon$d = _interopRequireDefault$d(requireCreateSvgIcon());
  var _jsxRuntime$d = jsxRuntimeExports;
  var _default$d = (0, _createSvgIcon$d.default)(/* @__PURE__ */ (0, _jsxRuntime$d.jsx)("path", {
    d: "M10.83 8H21V6H8.83l2 2zm5 5H18v-2h-4.17l2 2zM14 16.83V18h-4v-2h3.17l-3-3H6v-2h2.17l-3-3H3V6h.17L1.39 4.22 2.8 2.81l18.38 18.38-1.41 1.41L14 16.83z"
  }), "FilterListOff");
  default_1$d = FilterListOff.default = _default$d;
  var FullscreenExit = {};
  "use strict";
  var _interopRequireDefault$c = interopRequireDefaultExports;
  Object.defineProperty(FullscreenExit, "__esModule", {
    value: true
  });
  var default_1$c = FullscreenExit.default = void 0;
  var _createSvgIcon$c = _interopRequireDefault$c(requireCreateSvgIcon());
  var _jsxRuntime$c = jsxRuntimeExports;
  var _default$c = (0, _createSvgIcon$c.default)(/* @__PURE__ */ (0, _jsxRuntime$c.jsx)("path", {
    d: "M5 16h3v3h2v-5H5v2zm3-8H5v2h5V5H8v3zm6 11h2v-3h3v-2h-5v5zm2-11V5h-2v5h5V8h-3z"
  }), "FullscreenExit");
  default_1$c = FullscreenExit.default = _default$c;
  var Fullscreen = {};
  "use strict";
  var _interopRequireDefault$b = interopRequireDefaultExports;
  Object.defineProperty(Fullscreen, "__esModule", {
    value: true
  });
  var default_1$b = Fullscreen.default = void 0;
  var _createSvgIcon$b = _interopRequireDefault$b(requireCreateSvgIcon());
  var _jsxRuntime$b = jsxRuntimeExports;
  var _default$b = (0, _createSvgIcon$b.default)(/* @__PURE__ */ (0, _jsxRuntime$b.jsx)("path", {
    d: "M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"
  }), "Fullscreen");
  default_1$b = Fullscreen.default = _default$b;
  var KeyboardDoubleArrowDown = {};
  "use strict";
  var _interopRequireDefault$a = interopRequireDefaultExports;
  Object.defineProperty(KeyboardDoubleArrowDown, "__esModule", {
    value: true
  });
  var default_1$a = KeyboardDoubleArrowDown.default = void 0;
  var _createSvgIcon$a = _interopRequireDefault$a(requireCreateSvgIcon());
  var _jsxRuntime$a = jsxRuntimeExports;
  var _default$a = (0, _createSvgIcon$a.default)([/* @__PURE__ */ (0, _jsxRuntime$a.jsx)("path", {
    d: "M18 6.41 16.59 5 12 9.58 7.41 5 6 6.41l6 6z"
  }, "0"), /* @__PURE__ */ (0, _jsxRuntime$a.jsx)("path", {
    d: "m18 13-1.41-1.41L12 16.17l-4.59-4.58L6 13l6 6z"
  }, "1")], "KeyboardDoubleArrowDown");
  default_1$a = KeyboardDoubleArrowDown.default = _default$a;
  var MoreHoriz = {};
  "use strict";
  var _interopRequireDefault$9 = interopRequireDefaultExports;
  Object.defineProperty(MoreHoriz, "__esModule", {
    value: true
  });
  var default_1$9 = MoreHoriz.default = void 0;
  var _createSvgIcon$9 = _interopRequireDefault$9(requireCreateSvgIcon());
  var _jsxRuntime$9 = jsxRuntimeExports;
  var _default$9 = (0, _createSvgIcon$9.default)(/* @__PURE__ */ (0, _jsxRuntime$9.jsx)("path", {
    d: "M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
  }), "MoreHoriz");
  default_1$9 = MoreHoriz.default = _default$9;
  var MoreVert = {};
  "use strict";
  var _interopRequireDefault$8 = interopRequireDefaultExports;
  Object.defineProperty(MoreVert, "__esModule", {
    value: true
  });
  var default_1$8 = MoreVert.default = void 0;
  var _createSvgIcon$8 = _interopRequireDefault$8(requireCreateSvgIcon());
  var _jsxRuntime$8 = jsxRuntimeExports;
  var _default$8 = (0, _createSvgIcon$8.default)(/* @__PURE__ */ (0, _jsxRuntime$8.jsx)("path", {
    d: "M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
  }), "MoreVert");
  default_1$8 = MoreVert.default = _default$8;
  var PushPin = {};
  "use strict";
  var _interopRequireDefault$7 = interopRequireDefaultExports;
  Object.defineProperty(PushPin, "__esModule", {
    value: true
  });
  var default_1$7 = PushPin.default = void 0;
  var _createSvgIcon$7 = _interopRequireDefault$7(requireCreateSvgIcon());
  var _jsxRuntime$7 = jsxRuntimeExports;
  var _default$7 = (0, _createSvgIcon$7.default)(/* @__PURE__ */ (0, _jsxRuntime$7.jsx)("path", {
    fillRule: "evenodd",
    d: "M16 9V4h1c.55 0 1-.45 1-1s-.45-1-1-1H7c-.55 0-1 .45-1 1s.45 1 1 1h1v5c0 1.66-1.34 3-3 3v2h5.97v7l1 1 1-1v-7H19v-2c-1.66 0-3-1.34-3-3z"
  }), "PushPin");
  default_1$7 = PushPin.default = _default$7;
  var RestartAlt = {};
  "use strict";
  var _interopRequireDefault$6 = interopRequireDefaultExports;
  Object.defineProperty(RestartAlt, "__esModule", {
    value: true
  });
  var default_1$6 = RestartAlt.default = void 0;
  var _createSvgIcon$6 = _interopRequireDefault$6(requireCreateSvgIcon());
  var _jsxRuntime$6 = jsxRuntimeExports;
  var _default$6 = (0, _createSvgIcon$6.default)(/* @__PURE__ */ (0, _jsxRuntime$6.jsx)("path", {
    d: "M12 5V2L8 6l4 4V7c3.31 0 6 2.69 6 6 0 2.97-2.17 5.43-5 5.91v2.02c3.95-.49 7-3.85 7-7.93 0-4.42-3.58-8-8-8zm-6 8c0-1.65.67-3.15 1.76-4.24L6.34 7.34C4.9 8.79 4 10.79 4 13c0 4.08 3.05 7.44 7 7.93v-2.02c-2.83-.48-5-2.94-5-5.91z"
  }), "RestartAlt");
  default_1$6 = RestartAlt.default = _default$6;
  var Save = {};
  "use strict";
  var _interopRequireDefault$5 = interopRequireDefaultExports;
  Object.defineProperty(Save, "__esModule", {
    value: true
  });
  var default_1$5 = Save.default = void 0;
  var _createSvgIcon$5 = _interopRequireDefault$5(requireCreateSvgIcon());
  var _jsxRuntime$5 = jsxRuntimeExports;
  var _default$5 = (0, _createSvgIcon$5.default)(/* @__PURE__ */ (0, _jsxRuntime$5.jsx)("path", {
    d: "M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z"
  }), "Save");
  default_1$5 = Save.default = _default$5;
  var Search = {};
  "use strict";
  var _interopRequireDefault$4 = interopRequireDefaultExports;
  Object.defineProperty(Search, "__esModule", {
    value: true
  });
  var default_1$4 = Search.default = void 0;
  var _createSvgIcon$4 = _interopRequireDefault$4(requireCreateSvgIcon());
  var _jsxRuntime$4 = jsxRuntimeExports;
  var _default$4 = (0, _createSvgIcon$4.default)(/* @__PURE__ */ (0, _jsxRuntime$4.jsx)("path", {
    d: "M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"
  }), "Search");
  default_1$4 = Search.default = _default$4;
  var SearchOff = {};
  "use strict";
  var _interopRequireDefault$3 = interopRequireDefaultExports;
  Object.defineProperty(SearchOff, "__esModule", {
    value: true
  });
  var default_1$3 = SearchOff.default = void 0;
  var _createSvgIcon$3 = _interopRequireDefault$3(requireCreateSvgIcon());
  var _jsxRuntime$3 = jsxRuntimeExports;
  var _default$3 = (0, _createSvgIcon$3.default)([/* @__PURE__ */ (0, _jsxRuntime$3.jsx)("path", {
    d: "M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3 6.08 3 3.28 5.64 3.03 9h2.02C5.3 6.75 7.18 5 9.5 5 11.99 5 14 7.01 14 9.5S11.99 14 9.5 14c-.17 0-.33-.03-.5-.05v2.02c.17.02.33.03.5.03 1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5z"
  }, "0"), /* @__PURE__ */ (0, _jsxRuntime$3.jsx)("path", {
    d: "M6.47 10.82 4 13.29l-2.47-2.47-.71.71L3.29 14 .82 16.47l.71.71L4 14.71l2.47 2.47.71-.71L4.71 14l2.47-2.47z"
  }, "1")], "SearchOff");
  default_1$3 = SearchOff.default = _default$3;
  var Sort = {};
  "use strict";
  var _interopRequireDefault$2 = interopRequireDefaultExports;
  Object.defineProperty(Sort, "__esModule", {
    value: true
  });
  var default_1$2 = Sort.default = void 0;
  var _createSvgIcon$2 = _interopRequireDefault$2(requireCreateSvgIcon());
  var _jsxRuntime$2 = jsxRuntimeExports;
  var _default$2 = (0, _createSvgIcon$2.default)(/* @__PURE__ */ (0, _jsxRuntime$2.jsx)("path", {
    d: "M3 18h6v-2H3v2zM3 6v2h18V6H3zm0 7h12v-2H3v2z"
  }), "Sort");
  default_1$2 = Sort.default = _default$2;
  var ViewColumn = {};
  "use strict";
  var _interopRequireDefault$1 = interopRequireDefaultExports;
  Object.defineProperty(ViewColumn, "__esModule", {
    value: true
  });
  var default_1$1 = ViewColumn.default = void 0;
  var _createSvgIcon$1 = _interopRequireDefault$1(requireCreateSvgIcon());
  var _jsxRuntime$1 = jsxRuntimeExports;
  var _default$1 = (0, _createSvgIcon$1.default)(/* @__PURE__ */ (0, _jsxRuntime$1.jsx)("path", {
    d: "M14.67 5v14H9.33V5h5.34zm1 14H21V5h-5.33v14zm-7.34 0V5H3v14h5.33z"
  }), "ViewColumn");
  default_1$1 = ViewColumn.default = _default$1;
  var VisibilityOff = {};
  "use strict";
  var _interopRequireDefault = interopRequireDefaultExports;
  Object.defineProperty(VisibilityOff, "__esModule", {
    value: true
  });
  var default_1 = VisibilityOff.default = void 0;
  var _createSvgIcon = _interopRequireDefault(requireCreateSvgIcon());
  var _jsxRuntime = jsxRuntimeExports;
  var _default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
    d: "M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78 3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z"
  }), "VisibilityOff");
  default_1 = VisibilityOff.default = _default;
  const defaultTheme = createTheme();
  const Box = createBox({
    defaultTheme,
    defaultClassName: "MuiBox-root",
    generateClassName: ClassNameGenerator.generate
  });
  process.env.NODE_ENV !== "production" ? Box.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  function getDialogUtilityClass(slot) {
    return generateUtilityClass("MuiDialog", slot);
  }
  const dialogClasses = generateUtilityClasses("MuiDialog", ["root", "scrollPaper", "scrollBody", "container", "paper", "paperScrollPaper", "paperScrollBody", "paperWidthFalse", "paperWidthXs", "paperWidthSm", "paperWidthMd", "paperWidthLg", "paperWidthXl", "paperFullWidth", "paperFullScreen"]);
  const DialogContext = /* @__PURE__ */ React__namespace.createContext({});
  if (process.env.NODE_ENV !== "production") {
    DialogContext.displayName = "DialogContext";
  }
  const _excluded$W = ["aria-describedby", "aria-labelledby", "BackdropComponent", "BackdropProps", "children", "className", "disableEscapeKeyDown", "fullScreen", "fullWidth", "maxWidth", "onBackdropClick", "onClose", "open", "PaperComponent", "PaperProps", "scroll", "TransitionComponent", "transitionDuration", "TransitionProps"];
  const DialogBackdrop = styled(Backdrop, {
    name: "MuiDialog",
    slot: "Backdrop",
    overrides: (props, styles2) => styles2.backdrop
  })({
    // Improve scrollable dialog support.
    zIndex: -1
  });
  const useUtilityClasses$P = (ownerState) => {
    const {
      classes,
      scroll,
      maxWidth: maxWidth2,
      fullWidth,
      fullScreen
    } = ownerState;
    const slots = {
      root: ["root"],
      container: ["container", `scroll${capitalize(scroll)}`],
      paper: ["paper", `paperScroll${capitalize(scroll)}`, `paperWidth${capitalize(String(maxWidth2))}`, fullWidth && "paperFullWidth", fullScreen && "paperFullScreen"]
    };
    return composeClasses(slots, getDialogUtilityClass, classes);
  };
  const DialogRoot = styled(Modal, {
    name: "MuiDialog",
    slot: "Root",
    overridesResolver: (props, styles2) => styles2.root
  })({
    "@media print": {
      // Use !important to override the Modal inline-style.
      position: "absolute !important"
    }
  });
  const DialogContainer = styled("div", {
    name: "MuiDialog",
    slot: "Container",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.container, styles2[`scroll${capitalize(ownerState.scroll)}`]];
    }
  })(({
    ownerState
  }) => _extends$2({
    height: "100%",
    "@media print": {
      height: "auto"
    },
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0
  }, ownerState.scroll === "paper" && {
    display: "flex",
    justifyContent: "center",
    alignItems: "center"
  }, ownerState.scroll === "body" && {
    overflowY: "auto",
    overflowX: "hidden",
    textAlign: "center",
    "&:after": {
      content: '""',
      display: "inline-block",
      verticalAlign: "middle",
      height: "100%",
      width: "0"
    }
  }));
  const DialogPaper = styled(Paper, {
    name: "MuiDialog",
    slot: "Paper",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.paper, styles2[`scrollPaper${capitalize(ownerState.scroll)}`], styles2[`paperWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fullWidth && styles2.paperFullWidth, ownerState.fullScreen && styles2.paperFullScreen];
    }
  })(({
    theme,
    ownerState
  }) => _extends$2({
    margin: 32,
    position: "relative",
    overflowY: "auto",
    // Fix IE11 issue, to remove at some point.
    "@media print": {
      overflowY: "visible",
      boxShadow: "none"
    }
  }, ownerState.scroll === "paper" && {
    display: "flex",
    flexDirection: "column",
    maxHeight: "calc(100% - 64px)"
  }, ownerState.scroll === "body" && {
    display: "inline-block",
    verticalAlign: "middle",
    textAlign: "left"
    // 'initial' doesn't work on IE11
  }, !ownerState.maxWidth && {
    maxWidth: "calc(100% - 64px)"
  }, ownerState.maxWidth === "xs" && {
    maxWidth: theme.breakpoints.unit === "px" ? Math.max(theme.breakpoints.values.xs, 444) : `${theme.breakpoints.values.xs}${theme.breakpoints.unit}`,
    [`&.${dialogClasses.paperScrollBody}`]: {
      [theme.breakpoints.down(Math.max(theme.breakpoints.values.xs, 444) + 32 * 2)]: {
        maxWidth: "calc(100% - 64px)"
      }
    }
  }, ownerState.maxWidth && ownerState.maxWidth !== "xs" && {
    maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`,
    [`&.${dialogClasses.paperScrollBody}`]: {
      [theme.breakpoints.down(theme.breakpoints.values[ownerState.maxWidth] + 32 * 2)]: {
        maxWidth: "calc(100% - 64px)"
      }
    }
  }, ownerState.fullWidth && {
    width: "calc(100% - 64px)"
  }, ownerState.fullScreen && {
    margin: 0,
    width: "100%",
    maxWidth: "100%",
    height: "100%",
    maxHeight: "none",
    borderRadius: 0,
    [`&.${dialogClasses.paperScrollBody}`]: {
      margin: 0,
      maxWidth: "100%"
    }
  }));
  const Dialog = /* @__PURE__ */ React__namespace.forwardRef(function Dialog2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiDialog"
    });
    const theme = useTheme();
    const defaultTransitionDuration = {
      enter: theme.transitions.duration.enteringScreen,
      exit: theme.transitions.duration.leavingScreen
    };
    const {
      "aria-describedby": ariaDescribedby,
      "aria-labelledby": ariaLabelledbyProp,
      BackdropComponent,
      BackdropProps,
      children,
      className,
      disableEscapeKeyDown = false,
      fullScreen = false,
      fullWidth = false,
      maxWidth: maxWidth2 = "sm",
      onBackdropClick,
      onClose: onClose2,
      open,
      PaperComponent = Paper,
      PaperProps = {},
      scroll = "paper",
      TransitionComponent = Fade,
      transitionDuration = defaultTransitionDuration,
      TransitionProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$W);
    const ownerState = _extends$2({}, props, {
      disableEscapeKeyDown,
      fullScreen,
      fullWidth,
      maxWidth: maxWidth2,
      scroll
    });
    const classes = useUtilityClasses$P(ownerState);
    const backdropClick = React__namespace.useRef();
    const handleMouseDown = (event) => {
      backdropClick.current = event.target === event.currentTarget;
    };
    const handleBackdropClick = (event) => {
      if (!backdropClick.current) {
        return;
      }
      backdropClick.current = null;
      if (onBackdropClick) {
        onBackdropClick(event);
      }
      if (onClose2) {
        onClose2(event, "backdropClick");
      }
    };
    const ariaLabelledby = useId(ariaLabelledbyProp);
    const dialogContextValue = React__namespace.useMemo(() => {
      return {
        titleId: ariaLabelledby
      };
    }, [ariaLabelledby]);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(DialogRoot, _extends$2({
      className: clsx$1(classes.root, className),
      closeAfterTransition: true,
      components: {
        Backdrop: DialogBackdrop
      },
      componentsProps: {
        backdrop: _extends$2({
          transitionDuration,
          as: BackdropComponent
        }, BackdropProps)
      },
      disableEscapeKeyDown,
      onClose: onClose2,
      open,
      ref,
      onClick: handleBackdropClick,
      ownerState
    }, other, {
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionComponent, _extends$2({
        appear: true,
        in: open,
        timeout: transitionDuration,
        role: "presentation"
      }, TransitionProps, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(DialogContainer, {
          className: clsx$1(classes.container),
          onMouseDown: handleMouseDown,
          ownerState,
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(DialogPaper, _extends$2({
            as: PaperComponent,
            elevation: 24,
            role: "dialog",
            "aria-describedby": ariaDescribedby,
            "aria-labelledby": ariaLabelledby
          }, PaperProps, {
            className: clsx$1(classes.paper, PaperProps.className),
            ownerState,
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(DialogContext.Provider, {
              value: dialogContextValue,
              children
            })
          }))
        })
      }))
    }));
  });
  process.env.NODE_ENV !== "production" ? Dialog.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The id(s) of the element(s) that describe the dialog.
     */
    "aria-describedby": PropTypes.string,
    /**
     * The id(s) of the element(s) that label the dialog.
     */
    "aria-labelledby": PropTypes.string,
    /**
     * A backdrop component. This prop enables custom backdrop rendering.
     * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
     * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.
     * @default styled(Backdrop, {
     *   name: 'MuiModal',
     *   slot: 'Backdrop',
     *   overridesResolver: (props, styles) => {
     *     return styles.backdrop;
     *   },
     * })({
     *   zIndex: -1,
     * })
     */
    BackdropComponent: PropTypes.elementType,
    /**
     * @ignore
     */
    BackdropProps: PropTypes.object,
    /**
     * Dialog children, usually the included sub-components.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * If `true`, hitting escape will not fire the `onClose` callback.
     * @default false
     */
    disableEscapeKeyDown: PropTypes.bool,
    /**
     * If `true`, the dialog is full-screen.
     * @default false
     */
    fullScreen: PropTypes.bool,
    /**
     * If `true`, the dialog stretches to `maxWidth`.
     *
     * Notice that the dialog width grow is limited by the default margin.
     * @default false
     */
    fullWidth: PropTypes.bool,
    /**
     * Determine the max-width of the dialog.
     * The dialog width grows with the size of the screen.
     * Set to `false` to disable `maxWidth`.
     * @default 'sm'
     */
    maxWidth: PropTypes.oneOfType([PropTypes.oneOf(["xs", "sm", "md", "lg", "xl", false]), PropTypes.string]),
    /**
     * Callback fired when the backdrop is clicked.
     * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
     */
    onBackdropClick: PropTypes.func,
    /**
     * Callback fired when the component requests to be closed.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
     */
    onClose: PropTypes.func,
    /**
     * If `true`, the component is shown.
     */
    open: PropTypes.bool.isRequired,
    /**
     * The component used to render the body of the dialog.
     * @default Paper
     */
    PaperComponent: PropTypes.elementType,
    /**
     * Props applied to the [`Paper`](/material-ui/api/paper/) element.
     * @default {}
     */
    PaperProps: PropTypes.object,
    /**
     * Determine the container for scrolling the dialog.
     * @default 'paper'
     */
    scroll: PropTypes.oneOf(["body", "paper"]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Fade
     */
    TransitionComponent: PropTypes.elementType,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
      appear: PropTypes.number,
      enter: PropTypes.number,
      exit: PropTypes.number
    })]),
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
     */
    TransitionProps: PropTypes.object
  } : void 0;
  const _excluded$V = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  function getScale(value) {
    return `scale(${value}, ${__pow(value, 2)})`;
  }
  const styles$1 = {
    entering: {
      opacity: 1,
      transform: getScale(1)
    },
    entered: {
      opacity: 1,
      transform: "none"
    }
  };
  const isWebKit154 = typeof navigator !== "undefined" && /^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent) && /(os |version\/)15(.|_)4/i.test(navigator.userAgent);
  const Grow = /* @__PURE__ */ React__namespace.forwardRef(function Grow2(props, ref) {
    const {
      addEndListener,
      appear = true,
      children,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style: style2,
      timeout = "auto",
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$V);
    const timer = React__namespace.useRef();
    const autoTimeout = React__namespace.useRef();
    const theme = useTheme();
    const nodeRef = React__namespace.useRef(null);
    const handleRef = useForkRef(nodeRef, children.ref, ref);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node2 = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node2);
        } else {
          callback(node2, maybeIsAppearing);
        }
      }
    };
    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      reflow(node2);
      const {
        duration: transitionDuration,
        delay,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style: style2,
        timeout,
        easing: easing2
      }, {
        mode: "enter"
      });
      let duration2;
      if (timeout === "auto") {
        duration2 = theme.transitions.getAutoHeightDuration(node2.clientHeight);
        autoTimeout.current = duration2;
      } else {
        duration2 = transitionDuration;
      }
      node2.style.transition = [theme.transitions.create("opacity", {
        duration: duration2,
        delay
      }), theme.transitions.create("transform", {
        duration: isWebKit154 ? duration2 : duration2 * 0.666,
        delay,
        easing: transitionTimingFunction
      })].join(",");
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node2) => {
      const {
        duration: transitionDuration,
        delay,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style: style2,
        timeout,
        easing: easing2
      }, {
        mode: "exit"
      });
      let duration2;
      if (timeout === "auto") {
        duration2 = theme.transitions.getAutoHeightDuration(node2.clientHeight);
        autoTimeout.current = duration2;
      } else {
        duration2 = transitionDuration;
      }
      node2.style.transition = [theme.transitions.create("opacity", {
        duration: duration2,
        delay
      }), theme.transitions.create("transform", {
        duration: isWebKit154 ? duration2 : duration2 * 0.666,
        delay: isWebKit154 ? delay : delay || duration2 * 0.333,
        easing: transitionTimingFunction
      })].join(",");
      node2.style.opacity = 0;
      node2.style.transform = getScale(0.75);
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleAddEndListener = (next2) => {
      if (timeout === "auto") {
        timer.current = setTimeout(next2, autoTimeout.current || 0);
      }
      if (addEndListener) {
        addEndListener(nodeRef.current, next2);
      }
    };
    React__namespace.useEffect(() => {
      return () => {
        clearTimeout(timer.current);
      };
    }, []);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionComponent, _extends$2({
      appear,
      in: inProp,
      nodeRef,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout: timeout === "auto" ? null : timeout
    }, other, {
      children: (state, childProps) => {
        return /* @__PURE__ */ React__namespace.cloneElement(children, _extends$2({
          style: _extends$2({
            opacity: 0,
            transform: getScale(0.75),
            visibility: state === "exited" && !inProp ? "hidden" : void 0
          }, styles$1[state], style2, children.props.style),
          ref: handleRef
        }, childProps));
      }
    }));
  });
  process.env.NODE_ENV !== "production" ? Grow.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: PropTypes.func,
    /**
     * Perform the enter transition when it first mounts if `in` is also `true`.
     * Set this to `false` to disable this behavior.
     * @default true
     */
    appear: PropTypes.bool,
    /**
     * A single child content element.
     */
    children: elementAcceptingRef.isRequired,
    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     */
    easing: PropTypes.oneOfType([PropTypes.shape({
      enter: PropTypes.string,
      exit: PropTypes.string
    }), PropTypes.string]),
    /**
     * If `true`, the component will transition in.
     */
    in: PropTypes.bool,
    /**
     * @ignore
     */
    onEnter: PropTypes.func,
    /**
     * @ignore
     */
    onEntered: PropTypes.func,
    /**
     * @ignore
     */
    onEntering: PropTypes.func,
    /**
     * @ignore
     */
    onExit: PropTypes.func,
    /**
     * @ignore
     */
    onExited: PropTypes.func,
    /**
     * @ignore
     */
    onExiting: PropTypes.func,
    /**
     * @ignore
     */
    style: PropTypes.object,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     *
     * Set to 'auto' to automatically calculate transition time based on height.
     * @default 'auto'
     */
    timeout: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number, PropTypes.shape({
      appear: PropTypes.number,
      enter: PropTypes.number,
      exit: PropTypes.number
    })])
  } : void 0;
  Grow.muiSupportAuto = true;
  function Ripple(props) {
    const {
      className,
      classes,
      pulsate = false,
      rippleX,
      rippleY,
      rippleSize,
      in: inProp,
      onExited,
      timeout
    } = props;
    const [leaving, setLeaving] = React__namespace.useState(false);
    const rippleClassName = clsx$1(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
    const rippleStyles = {
      width: rippleSize,
      height: rippleSize,
      top: -(rippleSize / 2) + rippleY,
      left: -(rippleSize / 2) + rippleX
    };
    const childClassName = clsx$1(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
    if (!inProp && !leaving) {
      setLeaving(true);
    }
    React__namespace.useEffect(() => {
      if (!inProp && onExited != null) {
        const timeoutId = setTimeout(onExited, timeout);
        return () => {
          clearTimeout(timeoutId);
        };
      }
      return void 0;
    }, [onExited, inProp, timeout]);
    return /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
      className: rippleClassName,
      style: rippleStyles,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
        className: childClassName
      })
    });
  }
  process.env.NODE_ENV !== "production" ? Ripple.propTypes = {
    /**
     * Override or extend the styles applied to the component.
     * See [CSS API](#css) below for more details.
     */
    classes: PropTypes.object.isRequired,
    className: PropTypes.string,
    /**
     * @ignore - injected from TransitionGroup
     */
    in: PropTypes.bool,
    /**
     * @ignore - injected from TransitionGroup
     */
    onExited: PropTypes.func,
    /**
     * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
     */
    pulsate: PropTypes.bool,
    /**
     * Diameter of the ripple.
     */
    rippleSize: PropTypes.number,
    /**
     * Horizontal position of the ripple center.
     */
    rippleX: PropTypes.number,
    /**
     * Vertical position of the ripple center.
     */
    rippleY: PropTypes.number,
    /**
     * exit delay
     */
    timeout: PropTypes.number.isRequired
  } : void 0;
  function getTouchRippleUtilityClass(slot) {
    return generateUtilityClass("MuiTouchRipple", slot);
  }
  const touchRippleClasses = generateUtilityClasses("MuiTouchRipple", ["root", "ripple", "rippleVisible", "ripplePulsate", "child", "childLeaving", "childPulsate"]);
  const _excluded$U = ["center", "classes", "className"];
  let _$2 = (t) => t, _t$2, _t2$2, _t3$2, _t4$2;
  const DURATION = 550;
  const DELAY_RIPPLE = 80;
  const enterKeyframe = react.keyframes(_t$2 || (_t$2 = _$2`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`));
  const exitKeyframe = react.keyframes(_t2$2 || (_t2$2 = _$2`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`));
  const pulsateKeyframe = react.keyframes(_t3$2 || (_t3$2 = _$2`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`));
  const TouchRippleRoot = styled("span", {
    name: "MuiTouchRipple",
    slot: "Root"
  })({
    overflow: "hidden",
    pointerEvents: "none",
    position: "absolute",
    zIndex: 0,
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    borderRadius: "inherit"
  });
  const TouchRippleRipple = styled(Ripple, {
    name: "MuiTouchRipple",
    slot: "Ripple"
  })(_t4$2 || (_t4$2 = _$2`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`), touchRippleClasses.rippleVisible, enterKeyframe, DURATION, ({
    theme
  }) => theme.transitions.easing.easeInOut, touchRippleClasses.ripplePulsate, ({
    theme
  }) => theme.transitions.duration.shorter, touchRippleClasses.child, touchRippleClasses.childLeaving, exitKeyframe, DURATION, ({
    theme
  }) => theme.transitions.easing.easeInOut, touchRippleClasses.childPulsate, pulsateKeyframe, ({
    theme
  }) => theme.transitions.easing.easeInOut);
  const TouchRipple = /* @__PURE__ */ React__namespace.forwardRef(function TouchRipple2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiTouchRipple"
    });
    const {
      center: centerProp = false,
      classes = {},
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$U);
    const [ripples, setRipples] = React__namespace.useState([]);
    const nextKey = React__namespace.useRef(0);
    const rippleCallback = React__namespace.useRef(null);
    React__namespace.useEffect(() => {
      if (rippleCallback.current) {
        rippleCallback.current();
        rippleCallback.current = null;
      }
    }, [ripples]);
    const ignoringMouseDown = React__namespace.useRef(false);
    const startTimer = React__namespace.useRef(null);
    const startTimerCommit = React__namespace.useRef(null);
    const container = React__namespace.useRef(null);
    React__namespace.useEffect(() => {
      return () => {
        clearTimeout(startTimer.current);
      };
    }, []);
    const startCommit = React__namespace.useCallback((params) => {
      const {
        pulsate: pulsate2,
        rippleX,
        rippleY,
        rippleSize,
        cb
      } = params;
      setRipples((oldRipples) => [...oldRipples, /* @__PURE__ */ jsxRuntimeExports.jsx(TouchRippleRipple, {
        classes: {
          ripple: clsx$1(classes.ripple, touchRippleClasses.ripple),
          rippleVisible: clsx$1(classes.rippleVisible, touchRippleClasses.rippleVisible),
          ripplePulsate: clsx$1(classes.ripplePulsate, touchRippleClasses.ripplePulsate),
          child: clsx$1(classes.child, touchRippleClasses.child),
          childLeaving: clsx$1(classes.childLeaving, touchRippleClasses.childLeaving),
          childPulsate: clsx$1(classes.childPulsate, touchRippleClasses.childPulsate)
        },
        timeout: DURATION,
        pulsate: pulsate2,
        rippleX,
        rippleY,
        rippleSize
      }, nextKey.current)]);
      nextKey.current += 1;
      rippleCallback.current = cb;
    }, [classes]);
    const start2 = React__namespace.useCallback((event = {}, options = {}, cb = () => {
    }) => {
      const {
        pulsate: pulsate2 = false,
        center = centerProp || options.pulsate,
        fakeElement = false
        // For test purposes
      } = options;
      if ((event == null ? void 0 : event.type) === "mousedown" && ignoringMouseDown.current) {
        ignoringMouseDown.current = false;
        return;
      }
      if ((event == null ? void 0 : event.type) === "touchstart") {
        ignoringMouseDown.current = true;
      }
      const element = fakeElement ? null : container.current;
      const rect = element ? element.getBoundingClientRect() : {
        width: 0,
        height: 0,
        left: 0,
        top: 0
      };
      let rippleX;
      let rippleY;
      let rippleSize;
      if (center || event === void 0 || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
        rippleX = Math.round(rect.width / 2);
        rippleY = Math.round(rect.height / 2);
      } else {
        const {
          clientX,
          clientY
        } = event.touches && event.touches.length > 0 ? event.touches[0] : event;
        rippleX = Math.round(clientX - rect.left);
        rippleY = Math.round(clientY - rect.top);
      }
      if (center) {
        rippleSize = Math.sqrt((2 * __pow(rect.width, 2) + __pow(rect.height, 2)) / 3);
        if (rippleSize % 2 === 0) {
          rippleSize += 1;
        }
      } else {
        const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
        const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
        rippleSize = Math.sqrt(__pow(sizeX, 2) + __pow(sizeY, 2));
      }
      if (event != null && event.touches) {
        if (startTimerCommit.current === null) {
          startTimerCommit.current = () => {
            startCommit({
              pulsate: pulsate2,
              rippleX,
              rippleY,
              rippleSize,
              cb
            });
          };
          startTimer.current = setTimeout(() => {
            if (startTimerCommit.current) {
              startTimerCommit.current();
              startTimerCommit.current = null;
            }
          }, DELAY_RIPPLE);
        }
      } else {
        startCommit({
          pulsate: pulsate2,
          rippleX,
          rippleY,
          rippleSize,
          cb
        });
      }
    }, [centerProp, startCommit]);
    const pulsate = React__namespace.useCallback(() => {
      start2({}, {
        pulsate: true
      });
    }, [start2]);
    const stop = React__namespace.useCallback((event, cb) => {
      clearTimeout(startTimer.current);
      if ((event == null ? void 0 : event.type) === "touchend" && startTimerCommit.current) {
        startTimerCommit.current();
        startTimerCommit.current = null;
        startTimer.current = setTimeout(() => {
          stop(event, cb);
        });
        return;
      }
      startTimerCommit.current = null;
      setRipples((oldRipples) => {
        if (oldRipples.length > 0) {
          return oldRipples.slice(1);
        }
        return oldRipples;
      });
      rippleCallback.current = cb;
    }, []);
    React__namespace.useImperativeHandle(ref, () => ({
      pulsate,
      start: start2,
      stop
    }), [pulsate, start2, stop]);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TouchRippleRoot, _extends$2({
      className: clsx$1(touchRippleClasses.root, classes.root, className),
      ref: container
    }, other, {
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionGroup, {
        component: null,
        exit: true,
        children: ripples
      })
    }));
  });
  process.env.NODE_ENV !== "production" ? TouchRipple.propTypes = {
    /**
     * If `true`, the ripple starts at the center of the component
     * rather than at the point of interaction.
     */
    center: PropTypes.bool,
    /**
     * Override or extend the styles applied to the component.
     * See [CSS API](#css) below for more details.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string
  } : void 0;
  function getButtonBaseUtilityClass(slot) {
    return generateUtilityClass("MuiButtonBase", slot);
  }
  const buttonBaseClasses = generateUtilityClasses("MuiButtonBase", ["root", "disabled", "focusVisible"]);
  const _excluded$T = ["action", "centerRipple", "children", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "LinkComponent", "onBlur", "onClick", "onContextMenu", "onDragLeave", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "tabIndex", "TouchRippleProps", "touchRippleRef", "type"];
  const useUtilityClasses$O = (ownerState) => {
    const {
      disabled,
      focusVisible,
      focusVisibleClassName,
      classes
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", focusVisible && "focusVisible"]
    };
    const composedClasses = composeClasses(slots, getButtonBaseUtilityClass, classes);
    if (focusVisible && focusVisibleClassName) {
      composedClasses.root += ` ${focusVisibleClassName}`;
    }
    return composedClasses;
  };
  const ButtonBaseRoot = styled("button", {
    name: "MuiButtonBase",
    slot: "Root",
    overridesResolver: (props, styles2) => styles2.root
  })({
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    position: "relative",
    boxSizing: "border-box",
    WebkitTapHighlightColor: "transparent",
    backgroundColor: "transparent",
    // Reset default value
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0,
    border: 0,
    margin: 0,
    // Remove the margin in Safari
    borderRadius: 0,
    padding: 0,
    // Remove the padding in Firefox
    cursor: "pointer",
    userSelect: "none",
    verticalAlign: "middle",
    MozAppearance: "none",
    // Reset
    WebkitAppearance: "none",
    // Reset
    textDecoration: "none",
    // So we take precedent over the style of a native <a /> element.
    color: "inherit",
    "&::-moz-focus-inner": {
      borderStyle: "none"
      // Remove Firefox dotted outline.
    },
    [`&.${buttonBaseClasses.disabled}`]: {
      pointerEvents: "none",
      // Disable link interactions
      cursor: "default"
    },
    "@media print": {
      colorAdjust: "exact"
    }
  });
  const ButtonBase = /* @__PURE__ */ React__namespace.forwardRef(function ButtonBase2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiButtonBase"
    });
    const {
      action,
      centerRipple = false,
      children,
      className,
      component = "button",
      disabled = false,
      disableRipple = false,
      disableTouchRipple = false,
      focusRipple = false,
      LinkComponent = "a",
      onBlur,
      onClick,
      onContextMenu,
      onDragLeave,
      onFocus,
      onFocusVisible,
      onKeyDown,
      onKeyUp,
      onMouseDown,
      onMouseLeave,
      onMouseUp,
      onTouchEnd,
      onTouchMove,
      onTouchStart,
      tabIndex = 0,
      TouchRippleProps,
      touchRippleRef,
      type
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$T);
    const buttonRef = React__namespace.useRef(null);
    const rippleRef = React__namespace.useRef(null);
    const handleRippleRef = useForkRef(rippleRef, touchRippleRef);
    const {
      isFocusVisibleRef,
      onFocus: handleFocusVisible,
      onBlur: handleBlurVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible();
    const [focusVisible, setFocusVisible] = React__namespace.useState(false);
    if (disabled && focusVisible) {
      setFocusVisible(false);
    }
    React__namespace.useImperativeHandle(action, () => ({
      focusVisible: () => {
        setFocusVisible(true);
        buttonRef.current.focus();
      }
    }), []);
    const [mountedState, setMountedState] = React__namespace.useState(false);
    React__namespace.useEffect(() => {
      setMountedState(true);
    }, []);
    const enableTouchRipple = mountedState && !disableRipple && !disabled;
    React__namespace.useEffect(() => {
      if (focusVisible && focusRipple && !disableRipple && mountedState) {
        rippleRef.current.pulsate();
      }
    }, [disableRipple, focusRipple, focusVisible, mountedState]);
    function useRippleHandler(rippleAction, eventCallback, skipRippleAction = disableTouchRipple) {
      return useEventCallback((event) => {
        if (eventCallback) {
          eventCallback(event);
        }
        const ignore = skipRippleAction;
        if (!ignore && rippleRef.current) {
          rippleRef.current[rippleAction](event);
        }
        return true;
      });
    }
    const handleMouseDown = useRippleHandler("start", onMouseDown);
    const handleContextMenu = useRippleHandler("stop", onContextMenu);
    const handleDragLeave = useRippleHandler("stop", onDragLeave);
    const handleMouseUp = useRippleHandler("stop", onMouseUp);
    const handleMouseLeave = useRippleHandler("stop", (event) => {
      if (focusVisible) {
        event.preventDefault();
      }
      if (onMouseLeave) {
        onMouseLeave(event);
      }
    });
    const handleTouchStart = useRippleHandler("start", onTouchStart);
    const handleTouchEnd = useRippleHandler("stop", onTouchEnd);
    const handleTouchMove = useRippleHandler("stop", onTouchMove);
    const handleBlur2 = useRippleHandler("stop", (event) => {
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setFocusVisible(false);
      }
      if (onBlur) {
        onBlur(event);
      }
    }, false);
    const handleFocus = useEventCallback((event) => {
      if (!buttonRef.current) {
        buttonRef.current = event.currentTarget;
      }
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        setFocusVisible(true);
        if (onFocusVisible) {
          onFocusVisible(event);
        }
      }
      if (onFocus) {
        onFocus(event);
      }
    });
    const isNonNativeButton = () => {
      const button = buttonRef.current;
      return component && component !== "button" && !(button.tagName === "A" && button.href);
    };
    const keydownRef = React__namespace.useRef(false);
    const handleKeyDown2 = useEventCallback((event) => {
      if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === " ") {
        keydownRef.current = true;
        rippleRef.current.stop(event, () => {
          rippleRef.current.start(event);
        });
      }
      if (event.target === event.currentTarget && isNonNativeButton() && event.key === " ") {
        event.preventDefault();
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
      if (event.target === event.currentTarget && isNonNativeButton() && event.key === "Enter" && !disabled) {
        event.preventDefault();
        if (onClick) {
          onClick(event);
        }
      }
    });
    const handleKeyUp = useEventCallback((event) => {
      if (focusRipple && event.key === " " && rippleRef.current && focusVisible && !event.defaultPrevented) {
        keydownRef.current = false;
        rippleRef.current.stop(event, () => {
          rippleRef.current.pulsate(event);
        });
      }
      if (onKeyUp) {
        onKeyUp(event);
      }
      if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === " " && !event.defaultPrevented) {
        onClick(event);
      }
    });
    let ComponentProp = component;
    if (ComponentProp === "button" && (other.href || other.to)) {
      ComponentProp = LinkComponent;
    }
    const buttonProps = {};
    if (ComponentProp === "button") {
      buttonProps.type = type === void 0 ? "button" : type;
      buttonProps.disabled = disabled;
    } else {
      if (!other.href && !other.to) {
        buttonProps.role = "button";
      }
      if (disabled) {
        buttonProps["aria-disabled"] = disabled;
      }
    }
    const handleRef = useForkRef(ref, focusVisibleRef, buttonRef);
    if (process.env.NODE_ENV !== "production") {
      React__namespace.useEffect(() => {
        if (enableTouchRipple && !rippleRef.current) {
          console.error(["MUI: The `component` prop provided to ButtonBase is invalid.", "Please make sure the children prop is rendered in this custom component."].join("\n"));
        }
      }, [enableTouchRipple]);
    }
    const ownerState = _extends$2({}, props, {
      centerRipple,
      component,
      disabled,
      disableRipple,
      disableTouchRipple,
      focusRipple,
      tabIndex,
      focusVisible
    });
    const classes = useUtilityClasses$O(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(ButtonBaseRoot, _extends$2({
      as: ComponentProp,
      className: clsx$1(classes.root, className),
      ownerState,
      onBlur: handleBlur2,
      onClick,
      onContextMenu: handleContextMenu,
      onFocus: handleFocus,
      onKeyDown: handleKeyDown2,
      onKeyUp: handleKeyUp,
      onMouseDown: handleMouseDown,
      onMouseLeave: handleMouseLeave,
      onMouseUp: handleMouseUp,
      onDragLeave: handleDragLeave,
      onTouchEnd: handleTouchEnd,
      onTouchMove: handleTouchMove,
      onTouchStart: handleTouchStart,
      ref: handleRef,
      tabIndex: disabled ? -1 : tabIndex,
      type
    }, buttonProps, other, {
      children: [children, enableTouchRipple ? (
        /* TouchRipple is only needed client-side, x2 boost on the server. */
        /* @__PURE__ */ jsxRuntimeExports.jsx(TouchRipple, _extends$2({
          ref: handleRippleRef,
          center: centerRipple
        }, TouchRippleProps))
      ) : null]
    }));
  });
  process.env.NODE_ENV !== "production" ? ButtonBase.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * A ref for imperative actions.
     * It currently only supports `focusVisible()` action.
     */
    action: refType,
    /**
     * If `true`, the ripples are centered.
     * They won't start at the cursor interaction position.
     * @default false
     */
    centerRipple: PropTypes.bool,
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: elementTypeAcceptingRef$1,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: PropTypes.bool,
    /**
     * If `true`, the touch ripple effect is disabled.
     * @default false
     */
    disableTouchRipple: PropTypes.bool,
    /**
     * If `true`, the base button will have a keyboard focus ripple.
     * @default false
     */
    focusRipple: PropTypes.bool,
    /**
     * This prop can help identify which element has keyboard focus.
     * The class name will be applied when the element gains the focus through keyboard interaction.
     * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
     * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
     * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
     * if needed.
     */
    focusVisibleClassName: PropTypes.string,
    /**
     * @ignore
     */
    href: PropTypes.any,
    /**
     * The component used to render a link when the `href` prop is provided.
     * @default 'a'
     */
    LinkComponent: PropTypes.elementType,
    /**
     * @ignore
     */
    onBlur: PropTypes.func,
    /**
     * @ignore
     */
    onClick: PropTypes.func,
    /**
     * @ignore
     */
    onContextMenu: PropTypes.func,
    /**
     * @ignore
     */
    onDragLeave: PropTypes.func,
    /**
     * @ignore
     */
    onFocus: PropTypes.func,
    /**
     * Callback fired when the component is focused with a keyboard.
     * We trigger a `onFocus` callback too.
     */
    onFocusVisible: PropTypes.func,
    /**
     * @ignore
     */
    onKeyDown: PropTypes.func,
    /**
     * @ignore
     */
    onKeyUp: PropTypes.func,
    /**
     * @ignore
     */
    onMouseDown: PropTypes.func,
    /**
     * @ignore
     */
    onMouseLeave: PropTypes.func,
    /**
     * @ignore
     */
    onMouseUp: PropTypes.func,
    /**
     * @ignore
     */
    onTouchEnd: PropTypes.func,
    /**
     * @ignore
     */
    onTouchMove: PropTypes.func,
    /**
     * @ignore
     */
    onTouchStart: PropTypes.func,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * @default 0
     */
    tabIndex: PropTypes.number,
    /**
     * Props applied to the `TouchRipple` element.
     */
    TouchRippleProps: PropTypes.object,
    /**
     * A ref that points to the `TouchRipple` element.
     */
    touchRippleRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
      current: PropTypes.shape({
        pulsate: PropTypes.func.isRequired,
        start: PropTypes.func.isRequired,
        stop: PropTypes.func.isRequired
      })
    })]),
    /**
     * @ignore
     */
    type: PropTypes.oneOfType([PropTypes.oneOf(["button", "reset", "submit"]), PropTypes.string])
  } : void 0;
  function getIconButtonUtilityClass(slot) {
    return generateUtilityClass("MuiIconButton", slot);
  }
  const iconButtonClasses = generateUtilityClasses("MuiIconButton", ["root", "disabled", "colorInherit", "colorPrimary", "colorSecondary", "colorError", "colorInfo", "colorSuccess", "colorWarning", "edgeStart", "edgeEnd", "sizeSmall", "sizeMedium", "sizeLarge"]);
  const _excluded$S = ["edge", "children", "className", "color", "disabled", "disableFocusRipple", "size"];
  const useUtilityClasses$N = (ownerState) => {
    const {
      classes,
      disabled,
      color: color2,
      edge,
      size
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", color2 !== "default" && `color${capitalize(color2)}`, edge && `edge${capitalize(edge)}`, `size${capitalize(size)}`]
    };
    return composeClasses(slots, getIconButtonUtilityClass, classes);
  };
  const IconButtonRoot = styled(ButtonBase, {
    name: "MuiIconButton",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, ownerState.color !== "default" && styles2[`color${capitalize(ownerState.color)}`], ownerState.edge && styles2[`edge${capitalize(ownerState.edge)}`], styles2[`size${capitalize(ownerState.size)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends$2({
    textAlign: "center",
    flex: "0 0 auto",
    fontSize: theme.typography.pxToRem(24),
    padding: 8,
    borderRadius: "50%",
    overflow: "visible",
    // Explicitly set the default value to solve a bug on IE11.
    color: (theme.vars || theme).palette.action.active,
    transition: theme.transitions.create("background-color", {
      duration: theme.transitions.duration.shortest
    })
  }, !ownerState.disableRipple && {
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }
  }, ownerState.edge === "start" && {
    marginLeft: ownerState.size === "small" ? -3 : -12
  }, ownerState.edge === "end" && {
    marginRight: ownerState.size === "small" ? -3 : -12
  }), ({
    theme,
    ownerState
  }) => {
    var _palette;
    const palette2 = (_palette = (theme.vars || theme).palette) == null ? void 0 : _palette[ownerState.color];
    return _extends$2({}, ownerState.color === "inherit" && {
      color: "inherit"
    }, ownerState.color !== "inherit" && ownerState.color !== "default" && _extends$2({
      color: palette2 == null ? void 0 : palette2.main
    }, !ownerState.disableRipple && {
      "&:hover": _extends$2({}, palette2 && {
        backgroundColor: theme.vars ? `rgba(${palette2.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(palette2.main, theme.palette.action.hoverOpacity)
      }, {
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      })
    }), ownerState.size === "small" && {
      padding: 5,
      fontSize: theme.typography.pxToRem(18)
    }, ownerState.size === "large" && {
      padding: 12,
      fontSize: theme.typography.pxToRem(28)
    }, {
      [`&.${iconButtonClasses.disabled}`]: {
        backgroundColor: "transparent",
        color: (theme.vars || theme).palette.action.disabled
      }
    });
  });
  const IconButton = /* @__PURE__ */ React__namespace.forwardRef(function IconButton2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiIconButton"
    });
    const {
      edge = false,
      children,
      className,
      color: color2 = "default",
      disabled = false,
      disableFocusRipple = false,
      size = "medium"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$S);
    const ownerState = _extends$2({}, props, {
      edge,
      color: color2,
      disabled,
      disableFocusRipple,
      size
    });
    const classes = useUtilityClasses$N(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(IconButtonRoot, _extends$2({
      className: clsx$1(classes.root, className),
      centerRipple: true,
      focusRipple: !disableFocusRipple,
      disabled,
      ref,
      ownerState
    }, other, {
      children
    }));
  });
  process.env.NODE_ENV !== "production" ? IconButton.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The icon to display.
     */
    children: chainPropTypes(PropTypes.node, (props) => {
      const found = React__namespace.Children.toArray(props.children).some((child) => /* @__PURE__ */ React__namespace.isValidElement(child) && child.props.onClick);
      if (found) {
        return new Error(["MUI: You are providing an onClick event listener to a child of a button element.", "Prefer applying it to the IconButton directly.", "This guarantees that the whole <button> will be responsive to click events."].join("\n"));
      }
      return null;
    }),
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'default'
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["inherit", "default", "primary", "secondary", "error", "info", "success", "warning"]), PropTypes.string]),
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: PropTypes.bool,
    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: PropTypes.bool,
    /**
     * If given, uses a negative margin to counteract the padding on one
     * side (this is often helpful for aligning the left or right
     * side of the icon with content above or below, without ruining the border
     * size and shape).
     * @default false
     */
    edge: PropTypes.oneOf(["end", "start", false]),
    /**
     * The size of the component.
     * `small` is equivalent to the dense button styling.
     * @default 'medium'
     */
    size: PropTypes.oneOfType([PropTypes.oneOf(["small", "medium", "large"]), PropTypes.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  const _excluded$R = ["components", "componentsProps", "slots", "slotProps"];
  const PopperRoot = styled(PopperUnstyled, {
    name: "MuiPopper",
    slot: "Root",
    overridesResolver: (props, styles2) => styles2.root
  })({});
  const Popper = /* @__PURE__ */ React__namespace.forwardRef(function Popper2(inProps, ref) {
    var _slots$root;
    const theme = useTheme$3();
    const props = useThemeProps({
      props: inProps,
      name: "MuiPopper"
    });
    const {
      components,
      componentsProps,
      slots,
      slotProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$R);
    const RootComponent = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components == null ? void 0 : components.Root;
    return /* @__PURE__ */ jsxRuntimeExports.jsx(PopperRoot, _extends$2({
      direction: theme == null ? void 0 : theme.direction,
      slots: {
        root: RootComponent
      },
      slotProps: slotProps != null ? slotProps : componentsProps
    }, other, {
      ref
    }));
  });
  process.env.NODE_ENV !== "production" ? Popper.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
     * or a function that returns either.
     * It's used to set the position of the popper.
     * The return value will passed as the reference object of the Popper instance.
     */
    anchorEl: PropTypes.oneOfType([HTMLElementType, PropTypes.object, PropTypes.func]),
    /**
     * Popper render function or node.
     */
    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
    /**
     * @ignore
     */
    component: PropTypes.elementType,
    /**
     * The components used for each slot inside the Popper.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    components: PropTypes.shape({
      Root: PropTypes.elementType
    }),
    /**
     * The props used for each slot inside the Popper.
     * @default {}
     */
    componentsProps: PropTypes.shape({
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: PropTypes.oneOfType([HTMLElementType, PropTypes.func]),
    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: PropTypes.bool,
    /**
     * Always keep the children in the DOM.
     * This prop can be useful in SEO situation or
     * when you want to maximize the responsiveness of the Popper.
     * @default false
     */
    keepMounted: PropTypes.bool,
    /**
     * Popper.js is based on a "plugin-like" architecture,
     * most of its features are fully encapsulated "modifiers".
     *
     * A modifier is a function that is called each time Popper.js needs to
     * compute the position of the popper.
     * For this reason, modifiers should be very performant to avoid bottlenecks.
     * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
     */
    modifiers: PropTypes.arrayOf(PropTypes.shape({
      data: PropTypes.object,
      effect: PropTypes.func,
      enabled: PropTypes.bool,
      fn: PropTypes.func,
      name: PropTypes.any,
      options: PropTypes.object,
      phase: PropTypes.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
      requires: PropTypes.arrayOf(PropTypes.string),
      requiresIfExists: PropTypes.arrayOf(PropTypes.string)
    })),
    /**
     * If `true`, the component is shown.
     */
    open: PropTypes.bool.isRequired,
    /**
     * @ignore
     */
    ownerState: PropTypes.any,
    /**
     * Popper placement.
     * @default 'bottom'
     */
    placement: PropTypes.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    /**
     * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
     * @default {}
     */
    popperOptions: PropTypes.shape({
      modifiers: PropTypes.array,
      onFirstUpdate: PropTypes.func,
      placement: PropTypes.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
      strategy: PropTypes.oneOf(["absolute", "fixed"])
    }),
    /**
     * A ref that points to the used popper instance.
     */
    popperRef: refType,
    /**
     * The props used for each slot inside the Popper.
     * @default {}
     */
    slotProps: PropTypes.shape({
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the Popper.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      root: PropTypes.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * Help supporting a react-transition-group/Transition component.
     * @default false
     */
    transition: PropTypes.bool
  } : void 0;
  function getTooltipUtilityClass(slot) {
    return generateUtilityClass("MuiTooltip", slot);
  }
  const tooltipClasses = generateUtilityClasses("MuiTooltip", ["popper", "popperInteractive", "popperArrow", "popperClose", "tooltip", "tooltipArrow", "touch", "tooltipPlacementLeft", "tooltipPlacementRight", "tooltipPlacementTop", "tooltipPlacementBottom", "arrow"]);
  const _excluded$Q = ["arrow", "children", "classes", "components", "componentsProps", "describeChild", "disableFocusListener", "disableHoverListener", "disableInteractive", "disableTouchListener", "enterDelay", "enterNextDelay", "enterTouchDelay", "followCursor", "id", "leaveDelay", "leaveTouchDelay", "onClose", "onOpen", "open", "placement", "PopperComponent", "PopperProps", "slotProps", "slots", "title", "TransitionComponent", "TransitionProps"];
  function round(value) {
    return Math.round(value * 1e5) / 1e5;
  }
  const useUtilityClasses$M = (ownerState) => {
    const {
      classes,
      disableInteractive,
      arrow: arrow2,
      touch,
      placement
    } = ownerState;
    const slots = {
      popper: ["popper", !disableInteractive && "popperInteractive", arrow2 && "popperArrow"],
      tooltip: ["tooltip", arrow2 && "tooltipArrow", touch && "touch", `tooltipPlacement${capitalize(placement.split("-")[0])}`],
      arrow: ["arrow"]
    };
    return composeClasses(slots, getTooltipUtilityClass, classes);
  };
  const TooltipPopper = styled(Popper, {
    name: "MuiTooltip",
    slot: "Popper",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.popper, !ownerState.disableInteractive && styles2.popperInteractive, ownerState.arrow && styles2.popperArrow, !ownerState.open && styles2.popperClose];
    }
  })(({
    theme,
    ownerState,
    open
  }) => _extends$2({
    zIndex: (theme.vars || theme).zIndex.tooltip,
    pointerEvents: "none"
  }, !ownerState.disableInteractive && {
    pointerEvents: "auto"
  }, !open && {
    pointerEvents: "none"
  }, ownerState.arrow && {
    [`&[data-popper-placement*="bottom"] .${tooltipClasses.arrow}`]: {
      top: 0,
      marginTop: "-0.71em",
      "&::before": {
        transformOrigin: "0 100%"
      }
    },
    [`&[data-popper-placement*="top"] .${tooltipClasses.arrow}`]: {
      bottom: 0,
      marginBottom: "-0.71em",
      "&::before": {
        transformOrigin: "100% 0"
      }
    },
    [`&[data-popper-placement*="right"] .${tooltipClasses.arrow}`]: _extends$2({}, !ownerState.isRtl ? {
      left: 0,
      marginLeft: "-0.71em"
    } : {
      right: 0,
      marginRight: "-0.71em"
    }, {
      height: "1em",
      width: "0.71em",
      "&::before": {
        transformOrigin: "100% 100%"
      }
    }),
    [`&[data-popper-placement*="left"] .${tooltipClasses.arrow}`]: _extends$2({}, !ownerState.isRtl ? {
      right: 0,
      marginRight: "-0.71em"
    } : {
      left: 0,
      marginLeft: "-0.71em"
    }, {
      height: "1em",
      width: "0.71em",
      "&::before": {
        transformOrigin: "0 0"
      }
    })
  }));
  const TooltipTooltip = styled("div", {
    name: "MuiTooltip",
    slot: "Tooltip",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.tooltip, ownerState.touch && styles2.touch, ownerState.arrow && styles2.tooltipArrow, styles2[`tooltipPlacement${capitalize(ownerState.placement.split("-")[0])}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends$2({
    backgroundColor: theme.vars ? theme.vars.palette.Tooltip.bg : alpha(theme.palette.grey[700], 0.92),
    borderRadius: (theme.vars || theme).shape.borderRadius,
    color: (theme.vars || theme).palette.common.white,
    fontFamily: theme.typography.fontFamily,
    padding: "4px 8px",
    fontSize: theme.typography.pxToRem(11),
    maxWidth: 300,
    margin: 2,
    wordWrap: "break-word",
    fontWeight: theme.typography.fontWeightMedium
  }, ownerState.arrow && {
    position: "relative",
    margin: 0
  }, ownerState.touch && {
    padding: "8px 16px",
    fontSize: theme.typography.pxToRem(14),
    lineHeight: `${round(16 / 14)}em`,
    fontWeight: theme.typography.fontWeightRegular
  }, {
    [`.${tooltipClasses.popper}[data-popper-placement*="left"] &`]: _extends$2({
      transformOrigin: "right center"
    }, !ownerState.isRtl ? _extends$2({
      marginRight: "14px"
    }, ownerState.touch && {
      marginRight: "24px"
    }) : _extends$2({
      marginLeft: "14px"
    }, ownerState.touch && {
      marginLeft: "24px"
    })),
    [`.${tooltipClasses.popper}[data-popper-placement*="right"] &`]: _extends$2({
      transformOrigin: "left center"
    }, !ownerState.isRtl ? _extends$2({
      marginLeft: "14px"
    }, ownerState.touch && {
      marginLeft: "24px"
    }) : _extends$2({
      marginRight: "14px"
    }, ownerState.touch && {
      marginRight: "24px"
    })),
    [`.${tooltipClasses.popper}[data-popper-placement*="top"] &`]: _extends$2({
      transformOrigin: "center bottom",
      marginBottom: "14px"
    }, ownerState.touch && {
      marginBottom: "24px"
    }),
    [`.${tooltipClasses.popper}[data-popper-placement*="bottom"] &`]: _extends$2({
      transformOrigin: "center top",
      marginTop: "14px"
    }, ownerState.touch && {
      marginTop: "24px"
    })
  }));
  const TooltipArrow = styled("span", {
    name: "MuiTooltip",
    slot: "Arrow",
    overridesResolver: (props, styles2) => styles2.arrow
  })(({
    theme
  }) => ({
    overflow: "hidden",
    position: "absolute",
    width: "1em",
    height: "0.71em",
    boxSizing: "border-box",
    color: theme.vars ? theme.vars.palette.Tooltip.bg : alpha(theme.palette.grey[700], 0.9),
    "&::before": {
      content: '""',
      margin: "auto",
      display: "block",
      width: "100%",
      height: "100%",
      backgroundColor: "currentColor",
      transform: "rotate(45deg)"
    }
  }));
  let hystersisOpen = false;
  let hystersisTimer = null;
  let cursorPosition = {
    x: 0,
    y: 0
  };
  function testReset() {
    hystersisOpen = false;
    clearTimeout(hystersisTimer);
  }
  function composeEventHandler(handler, eventHandler) {
    return (event) => {
      if (eventHandler) {
        eventHandler(event);
      }
      handler(event);
    };
  }
  const Tooltip = /* @__PURE__ */ React__namespace.forwardRef(function Tooltip2(inProps, ref) {
    var _ref, _slots$popper, _ref2, _ref3, _slots$transition, _ref4, _slots$tooltip, _ref5, _slots$arrow, _slotProps$popper, _ref6, _slotProps$popper2, _slotProps$transition, _slotProps$tooltip, _ref7, _slotProps$tooltip2, _slotProps$arrow, _ref8, _slotProps$arrow2;
    const props = useThemeProps({
      props: inProps,
      name: "MuiTooltip"
    });
    const {
      arrow: arrow2 = false,
      children,
      components = {},
      componentsProps = {},
      describeChild = false,
      disableFocusListener = false,
      disableHoverListener = false,
      disableInteractive: disableInteractiveProp = false,
      disableTouchListener = false,
      enterDelay = 100,
      enterNextDelay = 0,
      enterTouchDelay = 700,
      followCursor = false,
      id: idProp,
      leaveDelay = 0,
      leaveTouchDelay = 1500,
      onClose: onClose2,
      onOpen: onOpen2,
      open: openProp,
      placement = "bottom",
      PopperComponent: PopperComponentProp,
      PopperProps = {},
      slotProps = {},
      slots = {},
      title,
      TransitionComponent: TransitionComponentProp = Grow,
      TransitionProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$Q);
    const theme = useTheme();
    const isRtl = theme.direction === "rtl";
    const [childNode, setChildNode] = React__namespace.useState();
    const [arrowRef, setArrowRef] = React__namespace.useState(null);
    const ignoreNonTouchEvents = React__namespace.useRef(false);
    const disableInteractive = disableInteractiveProp || followCursor;
    const closeTimer = React__namespace.useRef();
    const enterTimer = React__namespace.useRef();
    const leaveTimer = React__namespace.useRef();
    const touchTimer = React__namespace.useRef();
    const [openState, setOpenState] = useControlled({
      controlled: openProp,
      default: false,
      name: "Tooltip",
      state: "open"
    });
    let open = openState;
    if (process.env.NODE_ENV !== "production") {
      const {
        current: isControlled
      } = React__namespace.useRef(openProp !== void 0);
      React__namespace.useEffect(() => {
        if (childNode && childNode.disabled && !isControlled && title !== "" && childNode.tagName.toLowerCase() === "button") {
          console.error(["MUI: You are providing a disabled `button` child to the Tooltip component.", "A disabled element does not fire events.", "Tooltip needs to listen to the child element's events to display the title.", "", "Add a simple wrapper element, such as a `span`."].join("\n"));
        }
      }, [title, childNode, isControlled]);
    }
    const id = useId(idProp);
    const prevUserSelect = React__namespace.useRef();
    const stopTouchInteraction = React__namespace.useCallback(() => {
      if (prevUserSelect.current !== void 0) {
        document.body.style.WebkitUserSelect = prevUserSelect.current;
        prevUserSelect.current = void 0;
      }
      clearTimeout(touchTimer.current);
    }, []);
    React__namespace.useEffect(() => {
      return () => {
        clearTimeout(closeTimer.current);
        clearTimeout(enterTimer.current);
        clearTimeout(leaveTimer.current);
        stopTouchInteraction();
      };
    }, [stopTouchInteraction]);
    const handleOpen = (event) => {
      clearTimeout(hystersisTimer);
      hystersisOpen = true;
      setOpenState(true);
      if (onOpen2 && !open) {
        onOpen2(event);
      }
    };
    const handleClose = useEventCallback(
      /**
       * @param {React.SyntheticEvent | Event} event
       */
      (event) => {
        clearTimeout(hystersisTimer);
        hystersisTimer = setTimeout(() => {
          hystersisOpen = false;
        }, 800 + leaveDelay);
        setOpenState(false);
        if (onClose2 && open) {
          onClose2(event);
        }
        clearTimeout(closeTimer.current);
        closeTimer.current = setTimeout(() => {
          ignoreNonTouchEvents.current = false;
        }, theme.transitions.duration.shortest);
      }
    );
    const handleEnter = (event) => {
      if (ignoreNonTouchEvents.current && event.type !== "touchstart") {
        return;
      }
      if (childNode) {
        childNode.removeAttribute("title");
      }
      clearTimeout(enterTimer.current);
      clearTimeout(leaveTimer.current);
      if (enterDelay || hystersisOpen && enterNextDelay) {
        enterTimer.current = setTimeout(() => {
          handleOpen(event);
        }, hystersisOpen ? enterNextDelay : enterDelay);
      } else {
        handleOpen(event);
      }
    };
    const handleLeave = (event) => {
      clearTimeout(enterTimer.current);
      clearTimeout(leaveTimer.current);
      leaveTimer.current = setTimeout(() => {
        handleClose(event);
      }, leaveDelay);
    };
    const {
      isFocusVisibleRef,
      onBlur: handleBlurVisible,
      onFocus: handleFocusVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible();
    const [, setChildIsFocusVisible] = React__namespace.useState(false);
    const handleBlur2 = (event) => {
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setChildIsFocusVisible(false);
        handleLeave(event);
      }
    };
    const handleFocus = (event) => {
      if (!childNode) {
        setChildNode(event.currentTarget);
      }
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        setChildIsFocusVisible(true);
        handleEnter(event);
      }
    };
    const detectTouchStart = (event) => {
      ignoreNonTouchEvents.current = true;
      const childrenProps2 = children.props;
      if (childrenProps2.onTouchStart) {
        childrenProps2.onTouchStart(event);
      }
    };
    const handleMouseOver = handleEnter;
    const handleMouseLeave = handleLeave;
    const handleTouchStart = (event) => {
      detectTouchStart(event);
      clearTimeout(leaveTimer.current);
      clearTimeout(closeTimer.current);
      stopTouchInteraction();
      prevUserSelect.current = document.body.style.WebkitUserSelect;
      document.body.style.WebkitUserSelect = "none";
      touchTimer.current = setTimeout(() => {
        document.body.style.WebkitUserSelect = prevUserSelect.current;
        handleEnter(event);
      }, enterTouchDelay);
    };
    const handleTouchEnd = (event) => {
      if (children.props.onTouchEnd) {
        children.props.onTouchEnd(event);
      }
      stopTouchInteraction();
      clearTimeout(leaveTimer.current);
      leaveTimer.current = setTimeout(() => {
        handleClose(event);
      }, leaveTouchDelay);
    };
    React__namespace.useEffect(() => {
      if (!open) {
        return void 0;
      }
      function handleKeyDown2(nativeEvent) {
        if (nativeEvent.key === "Escape" || nativeEvent.key === "Esc") {
          handleClose(nativeEvent);
        }
      }
      document.addEventListener("keydown", handleKeyDown2);
      return () => {
        document.removeEventListener("keydown", handleKeyDown2);
      };
    }, [handleClose, open]);
    const handleRef = useForkRef(children.ref, focusVisibleRef, setChildNode, ref);
    if (!title && title !== 0) {
      open = false;
    }
    const popperRef = React__namespace.useRef();
    const handleMouseMove = (event) => {
      const childrenProps2 = children.props;
      if (childrenProps2.onMouseMove) {
        childrenProps2.onMouseMove(event);
      }
      cursorPosition = {
        x: event.clientX,
        y: event.clientY
      };
      if (popperRef.current) {
        popperRef.current.update();
      }
    };
    const nameOrDescProps = {};
    const titleIsString = typeof title === "string";
    if (describeChild) {
      nameOrDescProps.title = !open && titleIsString && !disableHoverListener ? title : null;
      nameOrDescProps["aria-describedby"] = open ? id : null;
    } else {
      nameOrDescProps["aria-label"] = titleIsString ? title : null;
      nameOrDescProps["aria-labelledby"] = open && !titleIsString ? id : null;
    }
    const childrenProps = _extends$2({}, nameOrDescProps, other, children.props, {
      className: clsx$1(other.className, children.props.className),
      onTouchStart: detectTouchStart,
      ref: handleRef
    }, followCursor ? {
      onMouseMove: handleMouseMove
    } : {});
    if (process.env.NODE_ENV !== "production") {
      childrenProps["data-mui-internal-clone-element"] = true;
      React__namespace.useEffect(() => {
        if (childNode && !childNode.getAttribute("data-mui-internal-clone-element")) {
          console.error(["MUI: The `children` component of the Tooltip is not forwarding its props correctly.", "Please make sure that props are spread on the same element that the ref is applied to."].join("\n"));
        }
      }, [childNode]);
    }
    const interactiveWrapperListeners = {};
    if (!disableTouchListener) {
      childrenProps.onTouchStart = handleTouchStart;
      childrenProps.onTouchEnd = handleTouchEnd;
    }
    if (!disableHoverListener) {
      childrenProps.onMouseOver = composeEventHandler(handleMouseOver, childrenProps.onMouseOver);
      childrenProps.onMouseLeave = composeEventHandler(handleMouseLeave, childrenProps.onMouseLeave);
      if (!disableInteractive) {
        interactiveWrapperListeners.onMouseOver = handleMouseOver;
        interactiveWrapperListeners.onMouseLeave = handleMouseLeave;
      }
    }
    if (!disableFocusListener) {
      childrenProps.onFocus = composeEventHandler(handleFocus, childrenProps.onFocus);
      childrenProps.onBlur = composeEventHandler(handleBlur2, childrenProps.onBlur);
      if (!disableInteractive) {
        interactiveWrapperListeners.onFocus = handleFocus;
        interactiveWrapperListeners.onBlur = handleBlur2;
      }
    }
    if (process.env.NODE_ENV !== "production") {
      if (children.props.title) {
        console.error(["MUI: You have provided a `title` prop to the child of <Tooltip />.", `Remove this title prop \`${children.props.title}\` or the Tooltip component.`].join("\n"));
      }
    }
    const popperOptions = React__namespace.useMemo(() => {
      var _PopperProps$popperOp;
      let tooltipModifiers = [{
        name: "arrow",
        enabled: Boolean(arrowRef),
        options: {
          element: arrowRef,
          padding: 4
        }
      }];
      if ((_PopperProps$popperOp = PopperProps.popperOptions) != null && _PopperProps$popperOp.modifiers) {
        tooltipModifiers = tooltipModifiers.concat(PopperProps.popperOptions.modifiers);
      }
      return _extends$2({}, PopperProps.popperOptions, {
        modifiers: tooltipModifiers
      });
    }, [arrowRef, PopperProps]);
    const ownerState = _extends$2({}, props, {
      isRtl,
      arrow: arrow2,
      disableInteractive,
      placement,
      PopperComponentProp,
      touch: ignoreNonTouchEvents.current
    });
    const classes = useUtilityClasses$M(ownerState);
    const PopperComponent = (_ref = (_slots$popper = slots.popper) != null ? _slots$popper : components.Popper) != null ? _ref : TooltipPopper;
    const TransitionComponent = (_ref2 = (_ref3 = (_slots$transition = slots.transition) != null ? _slots$transition : components.Transition) != null ? _ref3 : TransitionComponentProp) != null ? _ref2 : Grow;
    const TooltipComponent = (_ref4 = (_slots$tooltip = slots.tooltip) != null ? _slots$tooltip : components.Tooltip) != null ? _ref4 : TooltipTooltip;
    const ArrowComponent = (_ref5 = (_slots$arrow = slots.arrow) != null ? _slots$arrow : components.Arrow) != null ? _ref5 : TooltipArrow;
    const popperProps = appendOwnerState(PopperComponent, _extends$2({}, PopperProps, (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper, {
      className: clsx$1(classes.popper, PopperProps == null ? void 0 : PopperProps.className, (_ref6 = (_slotProps$popper2 = slotProps.popper) != null ? _slotProps$popper2 : componentsProps.popper) == null ? void 0 : _ref6.className)
    }), ownerState);
    const transitionProps = appendOwnerState(TransitionComponent, _extends$2({}, TransitionProps, (_slotProps$transition = slotProps.transition) != null ? _slotProps$transition : componentsProps.transition), ownerState);
    const tooltipProps = appendOwnerState(TooltipComponent, _extends$2({}, (_slotProps$tooltip = slotProps.tooltip) != null ? _slotProps$tooltip : componentsProps.tooltip, {
      className: clsx$1(classes.tooltip, (_ref7 = (_slotProps$tooltip2 = slotProps.tooltip) != null ? _slotProps$tooltip2 : componentsProps.tooltip) == null ? void 0 : _ref7.className)
    }), ownerState);
    const tooltipArrowProps = appendOwnerState(ArrowComponent, _extends$2({}, (_slotProps$arrow = slotProps.arrow) != null ? _slotProps$arrow : componentsProps.arrow, {
      className: clsx$1(classes.arrow, (_ref8 = (_slotProps$arrow2 = slotProps.arrow) != null ? _slotProps$arrow2 : componentsProps.arrow) == null ? void 0 : _ref8.className)
    }), ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(React__namespace.Fragment, {
      children: [/* @__PURE__ */ React__namespace.cloneElement(children, childrenProps), /* @__PURE__ */ jsxRuntimeExports.jsx(PopperComponent, _extends$2({
        as: PopperComponentProp != null ? PopperComponentProp : Popper,
        placement,
        anchorEl: followCursor ? {
          getBoundingClientRect: () => ({
            top: cursorPosition.y,
            left: cursorPosition.x,
            right: cursorPosition.x,
            bottom: cursorPosition.y,
            width: 0,
            height: 0
          })
        } : childNode,
        popperRef,
        open: childNode ? open : false,
        id,
        transition: true
      }, interactiveWrapperListeners, popperProps, {
        popperOptions,
        children: ({
          TransitionProps: TransitionPropsInner
        }) => /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionComponent, _extends$2({
          timeout: theme.transitions.duration.shorter
        }, TransitionPropsInner, transitionProps, {
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs(TooltipComponent, _extends$2({}, tooltipProps, {
            children: [title, arrow2 ? /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowComponent, _extends$2({}, tooltipArrowProps, {
              ref: setArrowRef
            })) : null]
          }))
        }))
      }))]
    });
  });
  process.env.NODE_ENV !== "production" ? Tooltip.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * If `true`, adds an arrow to the tooltip.
     * @default false
     */
    arrow: PropTypes.bool,
    /**
     * Tooltip reference element.
     */
    children: elementAcceptingRef.isRequired,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: PropTypes.shape({
      Arrow: PropTypes.elementType,
      Popper: PropTypes.elementType,
      Tooltip: PropTypes.elementType,
      Transition: PropTypes.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: PropTypes.shape({
      arrow: PropTypes.object,
      popper: PropTypes.object,
      tooltip: PropTypes.object,
      transition: PropTypes.object
    }),
    /**
     * Set to `true` if the `title` acts as an accessible description.
     * By default the `title` acts as an accessible label for the child.
     * @default false
     */
    describeChild: PropTypes.bool,
    /**
     * Do not respond to focus-visible events.
     * @default false
     */
    disableFocusListener: PropTypes.bool,
    /**
     * Do not respond to hover events.
     * @default false
     */
    disableHoverListener: PropTypes.bool,
    /**
     * Makes a tooltip not interactive, i.e. it will close when the user
     * hovers over the tooltip before the `leaveDelay` is expired.
     * @default false
     */
    disableInteractive: PropTypes.bool,
    /**
     * Do not respond to long press touch events.
     * @default false
     */
    disableTouchListener: PropTypes.bool,
    /**
     * The number of milliseconds to wait before showing the tooltip.
     * This prop won't impact the enter touch delay (`enterTouchDelay`).
     * @default 100
     */
    enterDelay: PropTypes.number,
    /**
     * The number of milliseconds to wait before showing the tooltip when one was already recently opened.
     * @default 0
     */
    enterNextDelay: PropTypes.number,
    /**
     * The number of milliseconds a user must touch the element before showing the tooltip.
     * @default 700
     */
    enterTouchDelay: PropTypes.number,
    /**
     * If `true`, the tooltip follow the cursor over the wrapped element.
     * @default false
     */
    followCursor: PropTypes.bool,
    /**
     * This prop is used to help implement the accessibility logic.
     * If you don't provide this prop. It falls back to a randomly generated id.
     */
    id: PropTypes.string,
    /**
     * The number of milliseconds to wait before hiding the tooltip.
     * This prop won't impact the leave touch delay (`leaveTouchDelay`).
     * @default 0
     */
    leaveDelay: PropTypes.number,
    /**
     * The number of milliseconds after the user stops touching an element before hiding the tooltip.
     * @default 1500
     */
    leaveTouchDelay: PropTypes.number,
    /**
     * Callback fired when the component requests to be closed.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     */
    onClose: PropTypes.func,
    /**
     * Callback fired when the component requests to be open.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     */
    onOpen: PropTypes.func,
    /**
     * If `true`, the component is shown.
     */
    open: PropTypes.bool,
    /**
     * Tooltip placement.
     * @default 'bottom'
     */
    placement: PropTypes.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    /**
     * The component used for the popper.
     * @default Popper
     */
    PopperComponent: PropTypes.elementType,
    /**
     * Props applied to the [`Popper`](/material-ui/api/popper/) element.
     * @default {}
     */
    PopperProps: PropTypes.object,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: PropTypes.shape({
      arrow: PropTypes.object,
      popper: PropTypes.object,
      tooltip: PropTypes.object,
      transition: PropTypes.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: PropTypes.shape({
      arrow: PropTypes.elementType,
      popper: PropTypes.elementType,
      tooltip: PropTypes.elementType,
      transition: PropTypes.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * Tooltip title. Zero-length titles string, undefined, null and false are never displayed.
     */
    title: PropTypes.node,
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Grow
     */
    TransitionComponent: PropTypes.elementType,
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
     */
    TransitionProps: PropTypes.object
  } : void 0;
  function getListItemIconUtilityClass(slot) {
    return generateUtilityClass("MuiListItemIcon", slot);
  }
  const listItemIconClasses = generateUtilityClasses("MuiListItemIcon", ["root", "alignItemsFlexStart"]);
  const ListContext = /* @__PURE__ */ React__namespace.createContext({});
  if (process.env.NODE_ENV !== "production") {
    ListContext.displayName = "ListContext";
  }
  const _excluded$P = ["className"];
  const useUtilityClasses$L = (ownerState) => {
    const {
      alignItems: alignItems2,
      classes
    } = ownerState;
    const slots = {
      root: ["root", alignItems2 === "flex-start" && "alignItemsFlexStart"]
    };
    return composeClasses(slots, getListItemIconUtilityClass, classes);
  };
  const ListItemIconRoot = styled("div", {
    name: "MuiListItemIcon",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, ownerState.alignItems === "flex-start" && styles2.alignItemsFlexStart];
    }
  })(({
    theme,
    ownerState
  }) => _extends$2({
    minWidth: 56,
    color: (theme.vars || theme).palette.action.active,
    flexShrink: 0,
    display: "inline-flex"
  }, ownerState.alignItems === "flex-start" && {
    marginTop: 8
  }));
  const ListItemIcon = /* @__PURE__ */ React__namespace.forwardRef(function ListItemIcon2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiListItemIcon"
    });
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$P);
    const context = React__namespace.useContext(ListContext);
    const ownerState = _extends$2({}, props, {
      alignItems: context.alignItems
    });
    const classes = useUtilityClasses$L(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(ListItemIconRoot, _extends$2({
      className: clsx$1(classes.root, className),
      ownerState,
      ref
    }, other));
  });
  process.env.NODE_ENV !== "production" ? ListItemIcon.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component, normally `Icon`, `SvgIcon`,
     * or a `@mui/icons-material` SVG icon element.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  function getListUtilityClass(slot) {
    return generateUtilityClass("MuiList", slot);
  }
  const listClasses = generateUtilityClasses("MuiList", ["root", "padding", "dense", "subheader"]);
  const _excluded$O = ["children", "className", "component", "dense", "disablePadding", "subheader"];
  const useUtilityClasses$K = (ownerState) => {
    const {
      classes,
      disablePadding,
      dense,
      subheader
    } = ownerState;
    const slots = {
      root: ["root", !disablePadding && "padding", dense && "dense", subheader && "subheader"]
    };
    return composeClasses(slots, getListUtilityClass, classes);
  };
  const ListRoot = styled("ul", {
    name: "MuiList",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, !ownerState.disablePadding && styles2.padding, ownerState.dense && styles2.dense, ownerState.subheader && styles2.subheader];
    }
  })(({
    ownerState
  }) => _extends$2({
    listStyle: "none",
    margin: 0,
    padding: 0,
    position: "relative"
  }, !ownerState.disablePadding && {
    paddingTop: 8,
    paddingBottom: 8
  }, ownerState.subheader && {
    paddingTop: 0
  }));
  const List = /* @__PURE__ */ React__namespace.forwardRef(function List2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiList"
    });
    const {
      children,
      className,
      component = "ul",
      dense = false,
      disablePadding = false,
      subheader
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$O);
    const context = React__namespace.useMemo(() => ({
      dense
    }), [dense]);
    const ownerState = _extends$2({}, props, {
      component,
      dense,
      disablePadding
    });
    const classes = useUtilityClasses$K(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(ListContext.Provider, {
      value: context,
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs(ListRoot, _extends$2({
        as: component,
        className: clsx$1(classes.root, className),
        ref,
        ownerState
      }, other, {
        children: [subheader, children]
      }))
    });
  });
  process.env.NODE_ENV !== "production" ? List.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, compact vertical padding designed for keyboard and mouse input is used for
     * the list and list items.
     * The prop is available to descendant components as the `dense` context.
     * @default false
     */
    dense: PropTypes.bool,
    /**
     * If `true`, vertical padding is removed from the list.
     * @default false
     */
    disablePadding: PropTypes.bool,
    /**
     * The content of the subheader, normally `ListSubheader`.
     */
    subheader: PropTypes.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  const _excluded$N = ["actions", "autoFocus", "autoFocusItem", "children", "className", "disabledItemsFocusable", "disableListWrap", "onKeyDown", "variant"];
  function nextItem(list, item, disableListWrap) {
    if (list === item) {
      return list.firstChild;
    }
    if (item && item.nextElementSibling) {
      return item.nextElementSibling;
    }
    return disableListWrap ? null : list.firstChild;
  }
  function previousItem(list, item, disableListWrap) {
    if (list === item) {
      return disableListWrap ? list.firstChild : list.lastChild;
    }
    if (item && item.previousElementSibling) {
      return item.previousElementSibling;
    }
    return disableListWrap ? null : list.lastChild;
  }
  function textCriteriaMatches(nextFocus, textCriteria) {
    if (textCriteria === void 0) {
      return true;
    }
    let text2 = nextFocus.innerText;
    if (text2 === void 0) {
      text2 = nextFocus.textContent;
    }
    text2 = text2.trim().toLowerCase();
    if (text2.length === 0) {
      return false;
    }
    if (textCriteria.repeating) {
      return text2[0] === textCriteria.keys[0];
    }
    return text2.indexOf(textCriteria.keys.join("")) === 0;
  }
  function moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
    let wrappedOnce = false;
    let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);
    while (nextFocus) {
      if (nextFocus === list.firstChild) {
        if (wrappedOnce) {
          return false;
        }
        wrappedOnce = true;
      }
      const nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute("aria-disabled") === "true";
      if (!nextFocus.hasAttribute("tabindex") || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {
        nextFocus = traversalFunction(list, nextFocus, disableListWrap);
      } else {
        nextFocus.focus();
        return true;
      }
    }
    return false;
  }
  const MenuList = /* @__PURE__ */ React__namespace.forwardRef(function MenuList2(props, ref) {
    const {
      // private
      // eslint-disable-next-line react/prop-types
      actions,
      autoFocus = false,
      autoFocusItem = false,
      children,
      className,
      disabledItemsFocusable = false,
      disableListWrap = false,
      onKeyDown,
      variant = "selectedMenu"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$N);
    const listRef = React__namespace.useRef(null);
    const textCriteriaRef = React__namespace.useRef({
      keys: [],
      repeating: true,
      previousKeyMatched: true,
      lastTime: null
    });
    useEnhancedEffect(() => {
      if (autoFocus) {
        listRef.current.focus();
      }
    }, [autoFocus]);
    React__namespace.useImperativeHandle(actions, () => ({
      adjustStyleForScrollbar: (containerElement, theme) => {
        const noExplicitWidth = !listRef.current.style.width;
        if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
          const scrollbarSize = `${getScrollbarSize(ownerDocument(containerElement))}px`;
          listRef.current.style[theme.direction === "rtl" ? "paddingLeft" : "paddingRight"] = scrollbarSize;
          listRef.current.style.width = `calc(100% + ${scrollbarSize})`;
        }
        return listRef.current;
      }
    }), []);
    const handleKeyDown2 = (event) => {
      const list = listRef.current;
      const key = event.key;
      const currentFocus = ownerDocument(list).activeElement;
      if (key === "ArrowDown") {
        event.preventDefault();
        moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);
      } else if (key === "ArrowUp") {
        event.preventDefault();
        moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);
      } else if (key === "Home") {
        event.preventDefault();
        moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);
      } else if (key === "End") {
        event.preventDefault();
        moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);
      } else if (key.length === 1) {
        const criteria = textCriteriaRef.current;
        const lowerKey = key.toLowerCase();
        const currTime = performance.now();
        if (criteria.keys.length > 0) {
          if (currTime - criteria.lastTime > 500) {
            criteria.keys = [];
            criteria.repeating = true;
            criteria.previousKeyMatched = true;
          } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
            criteria.repeating = false;
          }
        }
        criteria.lastTime = currTime;
        criteria.keys.push(lowerKey);
        const keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);
        if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))) {
          event.preventDefault();
        } else {
          criteria.previousKeyMatched = false;
        }
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
    };
    const handleRef = useForkRef(listRef, ref);
    let activeItemIndex = -1;
    React__namespace.Children.forEach(children, (child, index2) => {
      if (!/* @__PURE__ */ React__namespace.isValidElement(child)) {
        return;
      }
      if (process.env.NODE_ENV !== "production") {
        if (reactIsExports.isFragment(child)) {
          console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      if (!child.props.disabled) {
        if (variant === "selectedMenu" && child.props.selected) {
          activeItemIndex = index2;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index2;
        }
      }
    });
    const items = React__namespace.Children.map(children, (child, index2) => {
      if (index2 === activeItemIndex) {
        const newChildProps = {};
        if (autoFocusItem) {
          newChildProps.autoFocus = true;
        }
        if (child.props.tabIndex === void 0 && variant === "selectedMenu") {
          newChildProps.tabIndex = 0;
        }
        return /* @__PURE__ */ React__namespace.cloneElement(child, newChildProps);
      }
      return child;
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(List, _extends$2({
      role: "menu",
      ref: handleRef,
      className,
      onKeyDown: handleKeyDown2,
      tabIndex: autoFocus ? 0 : -1
    }, other, {
      children: items
    }));
  });
  process.env.NODE_ENV !== "production" ? MenuList.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * If `true`, will focus the `[role="menu"]` container and move into tab order.
     * @default false
     */
    autoFocus: PropTypes.bool,
    /**
     * If `true`, will focus the first menuitem if `variant="menu"` or selected item
     * if `variant="selectedMenu"`.
     * @default false
     */
    autoFocusItem: PropTypes.bool,
    /**
     * MenuList contents, normally `MenuItem`s.
     */
    children: PropTypes.node,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * If `true`, will allow focus on disabled items.
     * @default false
     */
    disabledItemsFocusable: PropTypes.bool,
    /**
     * If `true`, the menu items will not wrap focus.
     * @default false
     */
    disableListWrap: PropTypes.bool,
    /**
     * @ignore
     */
    onKeyDown: PropTypes.func,
    /**
     * The variant to use. Use `menu` to prevent selected items from impacting the initial focus
     * and the vertical alignment relative to the anchor element.
     * @default 'selectedMenu'
     */
    variant: PropTypes.oneOf(["menu", "selectedMenu"])
  } : void 0;
  function getPopoverUtilityClass(slot) {
    return generateUtilityClass("MuiPopover", slot);
  }
  const popoverClasses = generateUtilityClasses("MuiPopover", ["root", "paper"]);
  const _excluded$M = ["onEntering"], _excluded2$1 = ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "className", "container", "elevation", "marginThreshold", "open", "PaperProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps"];
  function getOffsetTop(rect, vertical) {
    let offset2 = 0;
    if (typeof vertical === "number") {
      offset2 = vertical;
    } else if (vertical === "center") {
      offset2 = rect.height / 2;
    } else if (vertical === "bottom") {
      offset2 = rect.height;
    }
    return offset2;
  }
  function getOffsetLeft(rect, horizontal) {
    let offset2 = 0;
    if (typeof horizontal === "number") {
      offset2 = horizontal;
    } else if (horizontal === "center") {
      offset2 = rect.width / 2;
    } else if (horizontal === "right") {
      offset2 = rect.width;
    }
    return offset2;
  }
  function getTransformOriginValue(transformOrigin) {
    return [transformOrigin.horizontal, transformOrigin.vertical].map((n) => typeof n === "number" ? `${n}px` : n).join(" ");
  }
  function resolveAnchorEl(anchorEl) {
    return typeof anchorEl === "function" ? anchorEl() : anchorEl;
  }
  const useUtilityClasses$J = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      paper: ["paper"]
    };
    return composeClasses(slots, getPopoverUtilityClass, classes);
  };
  const PopoverRoot = styled(Modal, {
    name: "MuiPopover",
    slot: "Root",
    overridesResolver: (props, styles2) => styles2.root
  })({});
  const PopoverPaper = styled(Paper, {
    name: "MuiPopover",
    slot: "Paper",
    overridesResolver: (props, styles2) => styles2.paper
  })({
    position: "absolute",
    overflowY: "auto",
    overflowX: "hidden",
    // So we see the popover when it's empty.
    // It's most likely on issue on userland.
    minWidth: 16,
    minHeight: 16,
    maxWidth: "calc(100% - 32px)",
    maxHeight: "calc(100% - 32px)",
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0
  });
  const Popover = /* @__PURE__ */ React__namespace.forwardRef(function Popover2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiPopover"
    });
    const {
      action,
      anchorEl,
      anchorOrigin = {
        vertical: "top",
        horizontal: "left"
      },
      anchorPosition,
      anchorReference = "anchorEl",
      children,
      className,
      container: containerProp,
      elevation = 8,
      marginThreshold = 16,
      open,
      PaperProps = {},
      transformOrigin = {
        vertical: "top",
        horizontal: "left"
      },
      TransitionComponent = Grow,
      transitionDuration: transitionDurationProp = "auto",
      TransitionProps: {
        onEntering
      } = {}
    } = props, TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded$M), other = _objectWithoutPropertiesLoose(props, _excluded2$1);
    const paperRef = React__namespace.useRef();
    const handlePaperRef = useForkRef(paperRef, PaperProps.ref);
    const ownerState = _extends$2({}, props, {
      anchorOrigin,
      anchorReference,
      elevation,
      marginThreshold,
      PaperProps,
      transformOrigin,
      TransitionComponent,
      transitionDuration: transitionDurationProp,
      TransitionProps
    });
    const classes = useUtilityClasses$J(ownerState);
    const getAnchorOffset = React__namespace.useCallback(() => {
      if (anchorReference === "anchorPosition") {
        if (process.env.NODE_ENV !== "production") {
          if (!anchorPosition) {
            console.error('MUI: You need to provide a `anchorPosition` prop when using <Popover anchorReference="anchorPosition" />.');
          }
        }
        return anchorPosition;
      }
      const resolvedAnchorEl = resolveAnchorEl(anchorEl);
      const anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : ownerDocument(paperRef.current).body;
      const anchorRect = anchorElement.getBoundingClientRect();
      if (process.env.NODE_ENV !== "production") {
        const box = anchorElement.getBoundingClientRect();
        if (process.env.NODE_ENV !== "test" && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
          console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
        }
      }
      return {
        top: anchorRect.top + getOffsetTop(anchorRect, anchorOrigin.vertical),
        left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
      };
    }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]);
    const getTransformOrigin = React__namespace.useCallback((elemRect) => {
      return {
        vertical: getOffsetTop(elemRect, transformOrigin.vertical),
        horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)
      };
    }, [transformOrigin.horizontal, transformOrigin.vertical]);
    const getPositioningStyle = React__namespace.useCallback((element) => {
      const elemRect = {
        width: element.offsetWidth,
        height: element.offsetHeight
      };
      const elemTransformOrigin = getTransformOrigin(elemRect);
      if (anchorReference === "none") {
        return {
          top: null,
          left: null,
          transformOrigin: getTransformOriginValue(elemTransformOrigin)
        };
      }
      const anchorOffset = getAnchorOffset();
      let top2 = anchorOffset.top - elemTransformOrigin.vertical;
      let left2 = anchorOffset.left - elemTransformOrigin.horizontal;
      const bottom2 = top2 + elemRect.height;
      const right2 = left2 + elemRect.width;
      const containerWindow = ownerWindow(resolveAnchorEl(anchorEl));
      const heightThreshold = containerWindow.innerHeight - marginThreshold;
      const widthThreshold = containerWindow.innerWidth - marginThreshold;
      if (top2 < marginThreshold) {
        const diff = top2 - marginThreshold;
        top2 -= diff;
        elemTransformOrigin.vertical += diff;
      } else if (bottom2 > heightThreshold) {
        const diff = bottom2 - heightThreshold;
        top2 -= diff;
        elemTransformOrigin.vertical += diff;
      }
      if (process.env.NODE_ENV !== "production") {
        if (elemRect.height > heightThreshold && elemRect.height && heightThreshold) {
          console.error(["MUI: The popover component is too tall.", `Some part of it can not be seen on the screen (${elemRect.height - heightThreshold}px).`, "Please consider adding a `max-height` to improve the user-experience."].join("\n"));
        }
      }
      if (left2 < marginThreshold) {
        const diff = left2 - marginThreshold;
        left2 -= diff;
        elemTransformOrigin.horizontal += diff;
      } else if (right2 > widthThreshold) {
        const diff = right2 - widthThreshold;
        left2 -= diff;
        elemTransformOrigin.horizontal += diff;
      }
      return {
        top: `${Math.round(top2)}px`,
        left: `${Math.round(left2)}px`,
        transformOrigin: getTransformOriginValue(elemTransformOrigin)
      };
    }, [anchorEl, anchorReference, getAnchorOffset, getTransformOrigin, marginThreshold]);
    const [isPositioned, setIsPositioned] = React__namespace.useState(open);
    const setPositioningStyles = React__namespace.useCallback(() => {
      const element = paperRef.current;
      if (!element) {
        return;
      }
      const positioning = getPositioningStyle(element);
      if (positioning.top !== null) {
        element.style.top = positioning.top;
      }
      if (positioning.left !== null) {
        element.style.left = positioning.left;
      }
      element.style.transformOrigin = positioning.transformOrigin;
      setIsPositioned(true);
    }, [getPositioningStyle]);
    const handleEntering = (element, isAppearing) => {
      if (onEntering) {
        onEntering(element, isAppearing);
      }
      setPositioningStyles();
    };
    const handleExited = () => {
      setIsPositioned(false);
    };
    React__namespace.useEffect(() => {
      if (open) {
        setPositioningStyles();
      }
    });
    React__namespace.useImperativeHandle(action, () => open ? {
      updatePosition: () => {
        setPositioningStyles();
      }
    } : null, [open, setPositioningStyles]);
    React__namespace.useEffect(() => {
      if (!open) {
        return void 0;
      }
      const handleResize = debounce$1(() => {
        setPositioningStyles();
      });
      const containerWindow = ownerWindow(anchorEl);
      containerWindow.addEventListener("resize", handleResize);
      return () => {
        handleResize.clear();
        containerWindow.removeEventListener("resize", handleResize);
      };
    }, [anchorEl, open, setPositioningStyles]);
    let transitionDuration = transitionDurationProp;
    if (transitionDurationProp === "auto" && !TransitionComponent.muiSupportAuto) {
      transitionDuration = void 0;
    }
    const container = containerProp || (anchorEl ? ownerDocument(resolveAnchorEl(anchorEl)).body : void 0);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(PopoverRoot, _extends$2({
      BackdropProps: {
        invisible: true
      },
      className: clsx$1(classes.root, className),
      container,
      open,
      ref,
      ownerState
    }, other, {
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionComponent, _extends$2({
        appear: true,
        in: open,
        onEntering: handleEntering,
        onExited: handleExited,
        timeout: transitionDuration
      }, TransitionProps, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(PopoverPaper, _extends$2({
          elevation
        }, PaperProps, {
          ref: handlePaperRef,
          className: clsx$1(classes.paper, PaperProps.className)
        }, isPositioned ? void 0 : {
          style: _extends$2({}, PaperProps.style, {
            opacity: 0
          })
        }, {
          ownerState,
          children
        }))
      }))
    }));
  });
  process.env.NODE_ENV !== "production" ? Popover.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * A ref for imperative actions.
     * It currently only supports updatePosition() action.
     */
    action: refType,
    /**
     * An HTML element, or a function that returns one.
     * It's used to set the position of the popover.
     */
    anchorEl: chainPropTypes(PropTypes.oneOfType([HTMLElementType, PropTypes.func]), (props) => {
      if (props.open && (!props.anchorReference || props.anchorReference === "anchorEl")) {
        const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);
        if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
          const box = resolvedAnchorEl.getBoundingClientRect();
          if (process.env.NODE_ENV !== "test" && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        } else {
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", `It should be an Element instance but it's \`${resolvedAnchorEl}\` instead.`].join("\n"));
        }
      }
      return null;
    }),
    /**
     * This is the point on the anchor where the popover's
     * `anchorEl` will attach to. This is not used when the
     * anchorReference is 'anchorPosition'.
     *
     * Options:
     * vertical: [top, center, bottom];
     * horizontal: [left, center, right].
     * @default {
     *   vertical: 'top',
     *   horizontal: 'left',
     * }
     */
    anchorOrigin: PropTypes.shape({
      horizontal: PropTypes.oneOfType([PropTypes.oneOf(["center", "left", "right"]), PropTypes.number]).isRequired,
      vertical: PropTypes.oneOfType([PropTypes.oneOf(["bottom", "center", "top"]), PropTypes.number]).isRequired
    }),
    /**
     * This is the position that may be used to set the position of the popover.
     * The coordinates are relative to the application's client area.
     */
    anchorPosition: PropTypes.shape({
      left: PropTypes.number.isRequired,
      top: PropTypes.number.isRequired
    }),
    /**
     * This determines which anchor prop to refer to when setting
     * the position of the popover.
     * @default 'anchorEl'
     */
    anchorReference: PropTypes.oneOf(["anchorEl", "anchorPosition", "none"]),
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * An HTML element, component instance, or function that returns either.
     * The `container` will passed to the Modal component.
     *
     * By default, it uses the body of the anchorEl's top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: PropTypes.oneOfType([HTMLElementType, PropTypes.func]),
    /**
     * The elevation of the popover.
     * @default 8
     */
    elevation: integerPropType,
    /**
     * Specifies how close to the edge of the window the popover can appear.
     * @default 16
     */
    marginThreshold: PropTypes.number,
    /**
     * Callback fired when the component requests to be closed.
     * The `reason` parameter can optionally be used to control the response to `onClose`.
     */
    onClose: PropTypes.func,
    /**
     * If `true`, the component is shown.
     */
    open: PropTypes.bool.isRequired,
    /**
     * Props applied to the [`Paper`](/material-ui/api/paper/) element.
     * @default {}
     */
    PaperProps: PropTypes.shape({
      component: elementTypeAcceptingRef$1
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * This is the point on the popover which
     * will attach to the anchor's origin.
     *
     * Options:
     * vertical: [top, center, bottom, x(px)];
     * horizontal: [left, center, right, x(px)].
     * @default {
     *   vertical: 'top',
     *   horizontal: 'left',
     * }
     */
    transformOrigin: PropTypes.shape({
      horizontal: PropTypes.oneOfType([PropTypes.oneOf(["center", "left", "right"]), PropTypes.number]).isRequired,
      vertical: PropTypes.oneOfType([PropTypes.oneOf(["bottom", "center", "top"]), PropTypes.number]).isRequired
    }),
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Grow
     */
    TransitionComponent: PropTypes.elementType,
    /**
     * Set to 'auto' to automatically calculate transition time based on height.
     * @default 'auto'
     */
    transitionDuration: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number, PropTypes.shape({
      appear: PropTypes.number,
      enter: PropTypes.number,
      exit: PropTypes.number
    })]),
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
     * @default {}
     */
    TransitionProps: PropTypes.object
  } : void 0;
  function getMenuUtilityClass(slot) {
    return generateUtilityClass("MuiMenu", slot);
  }
  const menuClasses = generateUtilityClasses("MuiMenu", ["root", "paper", "list"]);
  const _excluded$L = ["onEntering"], _excluded2 = ["autoFocus", "children", "disableAutoFocusItem", "MenuListProps", "onClose", "open", "PaperProps", "PopoverClasses", "transitionDuration", "TransitionProps", "variant"];
  const RTL_ORIGIN = {
    vertical: "top",
    horizontal: "right"
  };
  const LTR_ORIGIN = {
    vertical: "top",
    horizontal: "left"
  };
  const useUtilityClasses$I = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      paper: ["paper"],
      list: ["list"]
    };
    return composeClasses(slots, getMenuUtilityClass, classes);
  };
  const MenuRoot = styled(Popover, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiMenu",
    slot: "Root",
    overridesResolver: (props, styles2) => styles2.root
  })({});
  const MenuPaper = styled(Paper, {
    name: "MuiMenu",
    slot: "Paper",
    overridesResolver: (props, styles2) => styles2.paper
  })({
    // specZ: The maximum height of a simple menu should be one or more rows less than the view
    // height. This ensures a tapable area outside of the simple menu with which to dismiss
    // the menu.
    maxHeight: "calc(100% - 96px)",
    // Add iOS momentum scrolling for iOS < 13.0
    WebkitOverflowScrolling: "touch"
  });
  const MenuMenuList = styled(MenuList, {
    name: "MuiMenu",
    slot: "List",
    overridesResolver: (props, styles2) => styles2.list
  })({
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0
  });
  const Menu = /* @__PURE__ */ React__namespace.forwardRef(function Menu2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiMenu"
    });
    const {
      autoFocus = true,
      children,
      disableAutoFocusItem = false,
      MenuListProps = {},
      onClose: onClose2,
      open,
      PaperProps = {},
      PopoverClasses,
      transitionDuration = "auto",
      TransitionProps: {
        onEntering
      } = {},
      variant = "selectedMenu"
    } = props, TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded$L), other = _objectWithoutPropertiesLoose(props, _excluded2);
    const theme = useTheme();
    const isRtl = theme.direction === "rtl";
    const ownerState = _extends$2({}, props, {
      autoFocus,
      disableAutoFocusItem,
      MenuListProps,
      onEntering,
      PaperProps,
      transitionDuration,
      TransitionProps,
      variant
    });
    const classes = useUtilityClasses$I(ownerState);
    const autoFocusItem = autoFocus && !disableAutoFocusItem && open;
    const menuListActionsRef = React__namespace.useRef(null);
    const handleEntering = (element, isAppearing) => {
      if (menuListActionsRef.current) {
        menuListActionsRef.current.adjustStyleForScrollbar(element, theme);
      }
      if (onEntering) {
        onEntering(element, isAppearing);
      }
    };
    const handleListKeyDown = (event) => {
      if (event.key === "Tab") {
        event.preventDefault();
        if (onClose2) {
          onClose2(event, "tabKeyDown");
        }
      }
    };
    let activeItemIndex = -1;
    React__namespace.Children.map(children, (child, index2) => {
      if (!/* @__PURE__ */ React__namespace.isValidElement(child)) {
        return;
      }
      if (process.env.NODE_ENV !== "production") {
        if (reactIsExports.isFragment(child)) {
          console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      if (!child.props.disabled) {
        if (variant === "selectedMenu" && child.props.selected) {
          activeItemIndex = index2;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index2;
        }
      }
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(MenuRoot, _extends$2({
      onClose: onClose2,
      anchorOrigin: {
        vertical: "bottom",
        horizontal: isRtl ? "right" : "left"
      },
      transformOrigin: isRtl ? RTL_ORIGIN : LTR_ORIGIN,
      PaperProps: _extends$2({
        component: MenuPaper
      }, PaperProps, {
        classes: _extends$2({}, PaperProps.classes, {
          root: classes.paper
        })
      }),
      className: classes.root,
      open,
      ref,
      transitionDuration,
      TransitionProps: _extends$2({
        onEntering: handleEntering
      }, TransitionProps),
      ownerState
    }, other, {
      classes: PopoverClasses,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(MenuMenuList, _extends$2({
        onKeyDown: handleListKeyDown,
        actions: menuListActionsRef,
        autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
        autoFocusItem,
        variant
      }, MenuListProps, {
        className: clsx$1(classes.list, MenuListProps.className),
        children
      }))
    }));
  });
  process.env.NODE_ENV !== "production" ? Menu.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * An HTML element, or a function that returns one.
     * It's used to set the position of the menu.
     */
    anchorEl: PropTypes.oneOfType([HTMLElementType, PropTypes.func]),
    /**
     * If `true` (Default) will focus the `[role="menu"]` if no focusable child is found. Disabled
     * children are not focusable. If you set this prop to `false` focus will be placed
     * on the parent modal container. This has severe accessibility implications
     * and should only be considered if you manage focus otherwise.
     * @default true
     */
    autoFocus: PropTypes.bool,
    /**
     * Menu contents, normally `MenuItem`s.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * When opening the menu will not focus the active item but the `[role="menu"]`
     * unless `autoFocus` is also set to `false`. Not using the default means not
     * following WAI-ARIA authoring practices. Please be considerate about possible
     * accessibility implications.
     * @default false
     */
    disableAutoFocusItem: PropTypes.bool,
    /**
     * Props applied to the [`MenuList`](/material-ui/api/menu-list/) element.
     * @default {}
     */
    MenuListProps: PropTypes.object,
    /**
     * Callback fired when the component requests to be closed.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`, `"tabKeyDown"`.
     */
    onClose: PropTypes.func,
    /**
     * If `true`, the component is shown.
     */
    open: PropTypes.bool.isRequired,
    /**
     * @ignore
     */
    PaperProps: PropTypes.object,
    /**
     * `classes` prop applied to the [`Popover`](/material-ui/api/popover/) element.
     */
    PopoverClasses: PropTypes.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The length of the transition in `ms`, or 'auto'
     * @default 'auto'
     */
    transitionDuration: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number, PropTypes.shape({
      appear: PropTypes.number,
      enter: PropTypes.number,
      exit: PropTypes.number
    })]),
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
     * @default {}
     */
    TransitionProps: PropTypes.object,
    /**
     * The variant to use. Use `menu` to prevent selected items from impacting the initial focus.
     * @default 'selectedMenu'
     */
    variant: PropTypes.oneOf(["menu", "selectedMenu"])
  } : void 0;
  function getDividerUtilityClass(slot) {
    return generateUtilityClass("MuiDivider", slot);
  }
  const dividerClasses = generateUtilityClasses("MuiDivider", ["root", "absolute", "fullWidth", "inset", "middle", "flexItem", "light", "vertical", "withChildren", "withChildrenVertical", "textAlignRight", "textAlignLeft", "wrapper", "wrapperVertical"]);
  const _excluded$K = ["absolute", "children", "className", "component", "flexItem", "light", "orientation", "role", "textAlign", "variant"];
  const useUtilityClasses$H = (ownerState) => {
    const {
      absolute,
      children,
      classes,
      flexItem,
      light: light2,
      orientation,
      textAlign: textAlign2,
      variant
    } = ownerState;
    const slots = {
      root: ["root", absolute && "absolute", variant, light2 && "light", orientation === "vertical" && "vertical", flexItem && "flexItem", children && "withChildren", children && orientation === "vertical" && "withChildrenVertical", textAlign2 === "right" && orientation !== "vertical" && "textAlignRight", textAlign2 === "left" && orientation !== "vertical" && "textAlignLeft"],
      wrapper: ["wrapper", orientation === "vertical" && "wrapperVertical"]
    };
    return composeClasses(slots, getDividerUtilityClass, classes);
  };
  const DividerRoot = styled("div", {
    name: "MuiDivider",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, ownerState.absolute && styles2.absolute, styles2[ownerState.variant], ownerState.light && styles2.light, ownerState.orientation === "vertical" && styles2.vertical, ownerState.flexItem && styles2.flexItem, ownerState.children && styles2.withChildren, ownerState.children && ownerState.orientation === "vertical" && styles2.withChildrenVertical, ownerState.textAlign === "right" && ownerState.orientation !== "vertical" && styles2.textAlignRight, ownerState.textAlign === "left" && ownerState.orientation !== "vertical" && styles2.textAlignLeft];
    }
  })(({
    theme,
    ownerState
  }) => _extends$2({
    margin: 0,
    // Reset browser default style.
    flexShrink: 0,
    borderWidth: 0,
    borderStyle: "solid",
    borderColor: (theme.vars || theme).palette.divider,
    borderBottomWidth: "thin"
  }, ownerState.absolute && {
    position: "absolute",
    bottom: 0,
    left: 0,
    width: "100%"
  }, ownerState.light && {
    borderColor: theme.vars ? `rgba(${theme.vars.palette.dividerChannel} / 0.08)` : alpha(theme.palette.divider, 0.08)
  }, ownerState.variant === "inset" && {
    marginLeft: 72
  }, ownerState.variant === "middle" && ownerState.orientation === "horizontal" && {
    marginLeft: theme.spacing(2),
    marginRight: theme.spacing(2)
  }, ownerState.variant === "middle" && ownerState.orientation === "vertical" && {
    marginTop: theme.spacing(1),
    marginBottom: theme.spacing(1)
  }, ownerState.orientation === "vertical" && {
    height: "100%",
    borderBottomWidth: 0,
    borderRightWidth: "thin"
  }, ownerState.flexItem && {
    alignSelf: "stretch",
    height: "auto"
  }), ({
    theme,
    ownerState
  }) => _extends$2({}, ownerState.children && {
    display: "flex",
    whiteSpace: "nowrap",
    textAlign: "center",
    border: 0,
    "&::before, &::after": {
      position: "relative",
      width: "100%",
      borderTop: `thin solid ${(theme.vars || theme).palette.divider}`,
      top: "50%",
      content: '""',
      transform: "translateY(50%)"
    }
  }), ({
    theme,
    ownerState
  }) => _extends$2({}, ownerState.children && ownerState.orientation === "vertical" && {
    flexDirection: "column",
    "&::before, &::after": {
      height: "100%",
      top: "0%",
      left: "50%",
      borderTop: 0,
      borderLeft: `thin solid ${(theme.vars || theme).palette.divider}`,
      transform: "translateX(0%)"
    }
  }), ({
    ownerState
  }) => _extends$2({}, ownerState.textAlign === "right" && ownerState.orientation !== "vertical" && {
    "&::before": {
      width: "90%"
    },
    "&::after": {
      width: "10%"
    }
  }, ownerState.textAlign === "left" && ownerState.orientation !== "vertical" && {
    "&::before": {
      width: "10%"
    },
    "&::after": {
      width: "90%"
    }
  }));
  const DividerWrapper = styled("span", {
    name: "MuiDivider",
    slot: "Wrapper",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.wrapper, ownerState.orientation === "vertical" && styles2.wrapperVertical];
    }
  })(({
    theme,
    ownerState
  }) => _extends$2({
    display: "inline-block",
    paddingLeft: `calc(${theme.spacing(1)} * 1.2)`,
    paddingRight: `calc(${theme.spacing(1)} * 1.2)`
  }, ownerState.orientation === "vertical" && {
    paddingTop: `calc(${theme.spacing(1)} * 1.2)`,
    paddingBottom: `calc(${theme.spacing(1)} * 1.2)`
  }));
  const Divider = /* @__PURE__ */ React__namespace.forwardRef(function Divider2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiDivider"
    });
    const {
      absolute = false,
      children,
      className,
      component = children ? "div" : "hr",
      flexItem = false,
      light: light2 = false,
      orientation = "horizontal",
      role = component !== "hr" ? "separator" : void 0,
      textAlign: textAlign2 = "center",
      variant = "fullWidth"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$K);
    const ownerState = _extends$2({}, props, {
      absolute,
      component,
      flexItem,
      light: light2,
      orientation,
      role,
      textAlign: textAlign2,
      variant
    });
    const classes = useUtilityClasses$H(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(DividerRoot, _extends$2({
      as: component,
      className: clsx$1(classes.root, className),
      role,
      ref,
      ownerState
    }, other, {
      children: children ? /* @__PURE__ */ jsxRuntimeExports.jsx(DividerWrapper, {
        className: classes.wrapper,
        ownerState,
        children
      }) : null
    }));
  });
  process.env.NODE_ENV !== "production" ? Divider.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Absolutely position the element.
     * @default false
     */
    absolute: PropTypes.bool,
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, a vertical divider will have the correct height when used in flex container.
     * (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)
     * @default false
     */
    flexItem: PropTypes.bool,
    /**
     * If `true`, the divider will have a lighter color.
     * @default false
     */
    light: PropTypes.bool,
    /**
     * The component orientation.
     * @default 'horizontal'
     */
    orientation: PropTypes.oneOf(["horizontal", "vertical"]),
    /**
     * @ignore
     */
    role: PropTypes.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The text alignment.
     * @default 'center'
     */
    textAlign: PropTypes.oneOf(["center", "left", "right"]),
    /**
     * The variant to use.
     * @default 'fullWidth'
     */
    variant: PropTypes.oneOfType([PropTypes.oneOf(["fullWidth", "inset", "middle"]), PropTypes.string])
  } : void 0;
  function getTypographyUtilityClass(slot) {
    return generateUtilityClass("MuiTypography", slot);
  }
  const typographyClasses = generateUtilityClasses("MuiTypography", ["root", "h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "inherit", "button", "caption", "overline", "alignLeft", "alignRight", "alignCenter", "alignJustify", "noWrap", "gutterBottom", "paragraph"]);
  const _excluded$J = ["align", "className", "component", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"];
  const useUtilityClasses$G = (ownerState) => {
    const {
      align,
      gutterBottom,
      noWrap,
      paragraph,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, ownerState.align !== "inherit" && `align${capitalize(align)}`, gutterBottom && "gutterBottom", noWrap && "noWrap", paragraph && "paragraph"]
    };
    return composeClasses(slots, getTypographyUtilityClass, classes);
  };
  const TypographyRoot = styled("span", {
    name: "MuiTypography",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, ownerState.variant && styles2[ownerState.variant], ownerState.align !== "inherit" && styles2[`align${capitalize(ownerState.align)}`], ownerState.noWrap && styles2.noWrap, ownerState.gutterBottom && styles2.gutterBottom, ownerState.paragraph && styles2.paragraph];
    }
  })(({
    theme,
    ownerState
  }) => _extends$2({
    margin: 0
  }, ownerState.variant && theme.typography[ownerState.variant], ownerState.align !== "inherit" && {
    textAlign: ownerState.align
  }, ownerState.noWrap && {
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap"
  }, ownerState.gutterBottom && {
    marginBottom: "0.35em"
  }, ownerState.paragraph && {
    marginBottom: 16
  }));
  const defaultVariantMapping = {
    h1: "h1",
    h2: "h2",
    h3: "h3",
    h4: "h4",
    h5: "h5",
    h6: "h6",
    subtitle1: "h6",
    subtitle2: "h6",
    body1: "p",
    body2: "p",
    inherit: "p"
  };
  const colorTransformations = {
    primary: "primary.main",
    textPrimary: "text.primary",
    secondary: "secondary.main",
    textSecondary: "text.secondary",
    error: "error.main"
  };
  const transformDeprecatedColors = (color2) => {
    return colorTransformations[color2] || color2;
  };
  const Typography = /* @__PURE__ */ React__namespace.forwardRef(function Typography2(inProps, ref) {
    const themeProps = useThemeProps({
      props: inProps,
      name: "MuiTypography"
    });
    const color2 = transformDeprecatedColors(themeProps.color);
    const props = extendSxProp(_extends$2({}, themeProps, {
      color: color2
    }));
    const {
      align = "inherit",
      className,
      component,
      gutterBottom = false,
      noWrap = false,
      paragraph = false,
      variant = "body1",
      variantMapping = defaultVariantMapping
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$J);
    const ownerState = _extends$2({}, props, {
      align,
      color: color2,
      className,
      component,
      gutterBottom,
      noWrap,
      paragraph,
      variant,
      variantMapping
    });
    const Component = component || (paragraph ? "p" : variantMapping[variant] || defaultVariantMapping[variant]) || "span";
    const classes = useUtilityClasses$G(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TypographyRoot, _extends$2({
      as: Component,
      ref,
      ownerState,
      className: clsx$1(classes.root, className)
    }, other));
  });
  process.env.NODE_ENV !== "production" ? Typography.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Set the text-align on the component.
     * @default 'inherit'
     */
    align: PropTypes.oneOf(["center", "inherit", "justify", "left", "right"]),
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, the text will have a bottom margin.
     * @default false
     */
    gutterBottom: PropTypes.bool,
    /**
     * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
     *
     * Note that text overflow can only happen with block or inline-block level elements
     * (the element needs to have a width in order to overflow).
     * @default false
     */
    noWrap: PropTypes.bool,
    /**
     * If `true`, the element will be a paragraph element.
     * @default false
     */
    paragraph: PropTypes.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * Applies the theme typography styles.
     * @default 'body1'
     */
    variant: PropTypes.oneOfType([PropTypes.oneOf(["body1", "body2", "button", "caption", "h1", "h2", "h3", "h4", "h5", "h6", "inherit", "overline", "subtitle1", "subtitle2"]), PropTypes.string]),
    /**
     * The component maps the variant prop to a range of different HTML element types.
     * For instance, subtitle1 to `<h6>`.
     * If you wish to change that mapping, you can provide your own.
     * Alternatively, you can use the `component` prop.
     * @default {
     *   h1: 'h1',
     *   h2: 'h2',
     *   h3: 'h3',
     *   h4: 'h4',
     *   h5: 'h5',
     *   h6: 'h6',
     *   subtitle1: 'h6',
     *   subtitle2: 'h6',
     *   body1: 'p',
     *   body2: 'p',
     *   inherit: 'p',
     * }
     */
    variantMapping: PropTypes.object
  } : void 0;
  function getListItemTextUtilityClass(slot) {
    return generateUtilityClass("MuiListItemText", slot);
  }
  const listItemTextClasses = generateUtilityClasses("MuiListItemText", ["root", "multiline", "dense", "inset", "primary", "secondary"]);
  const _excluded$I = ["children", "className", "disableTypography", "inset", "primary", "primaryTypographyProps", "secondary", "secondaryTypographyProps"];
  const useUtilityClasses$F = (ownerState) => {
    const {
      classes,
      inset,
      primary,
      secondary,
      dense
    } = ownerState;
    const slots = {
      root: ["root", inset && "inset", dense && "dense", primary && secondary && "multiline"],
      primary: ["primary"],
      secondary: ["secondary"]
    };
    return composeClasses(slots, getListItemTextUtilityClass, classes);
  };
  const ListItemTextRoot = styled("div", {
    name: "MuiListItemText",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${listItemTextClasses.primary}`]: styles2.primary
      }, {
        [`& .${listItemTextClasses.secondary}`]: styles2.secondary
      }, styles2.root, ownerState.inset && styles2.inset, ownerState.primary && ownerState.secondary && styles2.multiline, ownerState.dense && styles2.dense];
    }
  })(({
    ownerState
  }) => _extends$2({
    flex: "1 1 auto",
    minWidth: 0,
    marginTop: 4,
    marginBottom: 4
  }, ownerState.primary && ownerState.secondary && {
    marginTop: 6,
    marginBottom: 6
  }, ownerState.inset && {
    paddingLeft: 56
  }));
  const ListItemText = /* @__PURE__ */ React__namespace.forwardRef(function ListItemText2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiListItemText"
    });
    const {
      children,
      className,
      disableTypography = false,
      inset = false,
      primary: primaryProp,
      primaryTypographyProps,
      secondary: secondaryProp,
      secondaryTypographyProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$I);
    const {
      dense
    } = React__namespace.useContext(ListContext);
    let primary = primaryProp != null ? primaryProp : children;
    let secondary = secondaryProp;
    const ownerState = _extends$2({}, props, {
      disableTypography,
      inset,
      primary: !!primary,
      secondary: !!secondary,
      dense
    });
    const classes = useUtilityClasses$F(ownerState);
    if (primary != null && primary.type !== Typography && !disableTypography) {
      primary = /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, _extends$2({
        variant: dense ? "body2" : "body1",
        className: classes.primary,
        component: primaryTypographyProps != null && primaryTypographyProps.variant ? void 0 : "span",
        display: "block"
      }, primaryTypographyProps, {
        children: primary
      }));
    }
    if (secondary != null && secondary.type !== Typography && !disableTypography) {
      secondary = /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, _extends$2({
        variant: "body2",
        className: classes.secondary,
        color: "text.secondary",
        display: "block"
      }, secondaryTypographyProps, {
        children: secondary
      }));
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(ListItemTextRoot, _extends$2({
      className: clsx$1(classes.root, className),
      ownerState,
      ref
    }, other, {
      children: [primary, secondary]
    }));
  });
  process.env.NODE_ENV !== "production" ? ListItemText.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Alias for the `primary` prop.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * If `true`, the children won't be wrapped by a Typography component.
     * This can be useful to render an alternative Typography variant by wrapping
     * the `children` (or `primary`) text, and optional `secondary` text
     * with the Typography component.
     * @default false
     */
    disableTypography: PropTypes.bool,
    /**
     * If `true`, the children are indented.
     * This should be used if there is no left avatar or left icon.
     * @default false
     */
    inset: PropTypes.bool,
    /**
     * The main content element.
     */
    primary: PropTypes.node,
    /**
     * These props will be forwarded to the primary typography component
     * (as long as disableTypography is not `true`).
     */
    primaryTypographyProps: PropTypes.object,
    /**
     * The secondary content element.
     */
    secondary: PropTypes.node,
    /**
     * These props will be forwarded to the secondary typography component
     * (as long as disableTypography is not `true`).
     */
    secondaryTypographyProps: PropTypes.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  function getMenuItemUtilityClass(slot) {
    return generateUtilityClass("MuiMenuItem", slot);
  }
  const menuItemClasses = generateUtilityClasses("MuiMenuItem", ["root", "focusVisible", "dense", "disabled", "divider", "gutters", "selected"]);
  const _excluded$H = ["autoFocus", "component", "dense", "divider", "disableGutters", "focusVisibleClassName", "role", "tabIndex", "className"];
  const overridesResolver$1 = (props, styles2) => {
    const {
      ownerState
    } = props;
    return [styles2.root, ownerState.dense && styles2.dense, ownerState.divider && styles2.divider, !ownerState.disableGutters && styles2.gutters];
  };
  const useUtilityClasses$E = (ownerState) => {
    const {
      disabled,
      dense,
      divider,
      disableGutters,
      selected,
      classes
    } = ownerState;
    const slots = {
      root: ["root", dense && "dense", disabled && "disabled", !disableGutters && "gutters", divider && "divider", selected && "selected"]
    };
    const composedClasses = composeClasses(slots, getMenuItemUtilityClass, classes);
    return _extends$2({}, classes, composedClasses);
  };
  const MenuItemRoot = styled(ButtonBase, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiMenuItem",
    slot: "Root",
    overridesResolver: overridesResolver$1
  })(({
    theme,
    ownerState
  }) => _extends$2({}, theme.typography.body1, {
    display: "flex",
    justifyContent: "flex-start",
    alignItems: "center",
    position: "relative",
    textDecoration: "none",
    minHeight: 48,
    paddingTop: 6,
    paddingBottom: 6,
    boxSizing: "border-box",
    whiteSpace: "nowrap"
  }, !ownerState.disableGutters && {
    paddingLeft: 16,
    paddingRight: 16
  }, ownerState.divider && {
    borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
    backgroundClip: "padding-box"
  }, {
    "&:hover": {
      textDecoration: "none",
      backgroundColor: (theme.vars || theme).palette.action.hover,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    [`&.${menuItemClasses.selected}`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
      [`&.${menuItemClasses.focusVisible}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
      }
    },
    [`&.${menuItemClasses.selected}:hover`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
      }
    },
    [`&.${menuItemClasses.focusVisible}`]: {
      backgroundColor: (theme.vars || theme).palette.action.focus
    },
    [`&.${menuItemClasses.disabled}`]: {
      opacity: (theme.vars || theme).palette.action.disabledOpacity
    },
    [`& + .${dividerClasses.root}`]: {
      marginTop: theme.spacing(1),
      marginBottom: theme.spacing(1)
    },
    [`& + .${dividerClasses.inset}`]: {
      marginLeft: 52
    },
    [`& .${listItemTextClasses.root}`]: {
      marginTop: 0,
      marginBottom: 0
    },
    [`& .${listItemTextClasses.inset}`]: {
      paddingLeft: 36
    },
    [`& .${listItemIconClasses.root}`]: {
      minWidth: 36
    }
  }, !ownerState.dense && {
    [theme.breakpoints.up("sm")]: {
      minHeight: "auto"
    }
  }, ownerState.dense && _extends$2({
    minHeight: 32,
    // https://m2.material.io/components/menus#specs > Dense
    paddingTop: 4,
    paddingBottom: 4
  }, theme.typography.body2, {
    [`& .${listItemIconClasses.root} svg`]: {
      fontSize: "1.25rem"
    }
  })));
  const MenuItem = /* @__PURE__ */ React__namespace.forwardRef(function MenuItem2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiMenuItem"
    });
    const {
      autoFocus = false,
      component = "li",
      dense = false,
      divider = false,
      disableGutters = false,
      focusVisibleClassName,
      role = "menuitem",
      tabIndex: tabIndexProp,
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$H);
    const context = React__namespace.useContext(ListContext);
    const childContext = React__namespace.useMemo(() => ({
      dense: dense || context.dense || false,
      disableGutters
    }), [context.dense, dense, disableGutters]);
    const menuItemRef = React__namespace.useRef(null);
    useEnhancedEffect(() => {
      if (autoFocus) {
        if (menuItemRef.current) {
          menuItemRef.current.focus();
        } else if (process.env.NODE_ENV !== "production") {
          console.error("MUI: Unable to set focus to a MenuItem whose component has not been rendered.");
        }
      }
    }, [autoFocus]);
    const ownerState = _extends$2({}, props, {
      dense: childContext.dense,
      divider,
      disableGutters
    });
    const classes = useUtilityClasses$E(props);
    const handleRef = useForkRef(menuItemRef, ref);
    let tabIndex;
    if (!props.disabled) {
      tabIndex = tabIndexProp !== void 0 ? tabIndexProp : -1;
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx(ListContext.Provider, {
      value: childContext,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(MenuItemRoot, _extends$2({
        ref: handleRef,
        role,
        tabIndex,
        component,
        focusVisibleClassName: clsx$1(classes.focusVisible, focusVisibleClassName),
        className: clsx$1(classes.root, className)
      }, other, {
        ownerState,
        classes
      }))
    });
  });
  process.env.NODE_ENV !== "production" ? MenuItem.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * If `true`, the list item is focused during the first mount.
     * Focus will also be triggered if the value changes from false to true.
     * @default false
     */
    autoFocus: PropTypes.bool,
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, compact vertical padding designed for keyboard and mouse input is used.
     * The prop defaults to the value inherited from the parent Menu component.
     * @default false
     */
    dense: PropTypes.bool,
    /**
     * @ignore
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the left and right padding is removed.
     * @default false
     */
    disableGutters: PropTypes.bool,
    /**
     * If `true`, a 1px light border is added to the bottom of the menu item.
     * @default false
     */
    divider: PropTypes.bool,
    /**
     * This prop can help identify which element has keyboard focus.
     * The class name will be applied when the element gains the focus through keyboard interaction.
     * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
     * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
     * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
     * if needed.
     */
    focusVisibleClassName: PropTypes.string,
    /**
     * @ignore
     */
    role: PropTypes.string,
    /**
     * If `true`, the component is selected.
     * @default false
     */
    selected: PropTypes.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * @default 0
     */
    tabIndex: PropTypes.number
  } : void 0;
  function getButtonUtilityClass(slot) {
    return generateUtilityClass("MuiButton", slot);
  }
  const buttonClasses = generateUtilityClasses("MuiButton", ["root", "text", "textInherit", "textPrimary", "textSecondary", "textSuccess", "textError", "textInfo", "textWarning", "outlined", "outlinedInherit", "outlinedPrimary", "outlinedSecondary", "outlinedSuccess", "outlinedError", "outlinedInfo", "outlinedWarning", "contained", "containedInherit", "containedPrimary", "containedSecondary", "containedSuccess", "containedError", "containedInfo", "containedWarning", "disableElevation", "focusVisible", "disabled", "colorInherit", "textSizeSmall", "textSizeMedium", "textSizeLarge", "outlinedSizeSmall", "outlinedSizeMedium", "outlinedSizeLarge", "containedSizeSmall", "containedSizeMedium", "containedSizeLarge", "sizeMedium", "sizeSmall", "sizeLarge", "fullWidth", "startIcon", "endIcon", "iconSizeSmall", "iconSizeMedium", "iconSizeLarge"]);
  const ButtonGroupContext = /* @__PURE__ */ React__namespace.createContext({});
  if (process.env.NODE_ENV !== "production") {
    ButtonGroupContext.displayName = "ButtonGroupContext";
  }
  const _excluded$G = ["children", "color", "component", "className", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"];
  const useUtilityClasses$D = (ownerState) => {
    const {
      color: color2,
      disableElevation,
      fullWidth,
      size,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, `${variant}${capitalize(color2)}`, `size${capitalize(size)}`, `${variant}Size${capitalize(size)}`, color2 === "inherit" && "colorInherit", disableElevation && "disableElevation", fullWidth && "fullWidth"],
      label: ["label"],
      startIcon: ["startIcon", `iconSize${capitalize(size)}`],
      endIcon: ["endIcon", `iconSize${capitalize(size)}`]
    };
    const composedClasses = composeClasses(slots, getButtonUtilityClass, classes);
    return _extends$2({}, classes, composedClasses);
  };
  const commonIconStyles = (ownerState) => _extends$2({}, ownerState.size === "small" && {
    "& > *:nth-of-type(1)": {
      fontSize: 18
    }
  }, ownerState.size === "medium" && {
    "& > *:nth-of-type(1)": {
      fontSize: 20
    }
  }, ownerState.size === "large" && {
    "& > *:nth-of-type(1)": {
      fontSize: 22
    }
  });
  const ButtonRoot = styled(ButtonBase, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiButton",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, styles2[ownerState.variant], styles2[`${ownerState.variant}${capitalize(ownerState.color)}`], styles2[`size${capitalize(ownerState.size)}`], styles2[`${ownerState.variant}Size${capitalize(ownerState.size)}`], ownerState.color === "inherit" && styles2.colorInherit, ownerState.disableElevation && styles2.disableElevation, ownerState.fullWidth && styles2.fullWidth];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _theme$palette$getCon, _theme$palette;
    return _extends$2({}, theme.typography.button, {
      minWidth: 64,
      padding: "6px 16px",
      borderRadius: (theme.vars || theme).shape.borderRadius,
      transition: theme.transitions.create(["background-color", "box-shadow", "border-color", "color"], {
        duration: theme.transitions.duration.short
      }),
      "&:hover": _extends$2({
        textDecoration: "none",
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "outlined" && ownerState.color !== "inherit" && {
        border: `1px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "contained" && {
        backgroundColor: (theme.vars || theme).palette.grey.A100,
        boxShadow: (theme.vars || theme).shadows[4],
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          boxShadow: (theme.vars || theme).shadows[2],
          backgroundColor: (theme.vars || theme).palette.grey[300]
        }
      }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].dark,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: (theme.vars || theme).palette[ownerState.color].main
        }
      }),
      "&:active": _extends$2({}, ownerState.variant === "contained" && {
        boxShadow: (theme.vars || theme).shadows[8]
      }),
      [`&.${buttonClasses.focusVisible}`]: _extends$2({}, ownerState.variant === "contained" && {
        boxShadow: (theme.vars || theme).shadows[6]
      }),
      [`&.${buttonClasses.disabled}`]: _extends$2({
        color: (theme.vars || theme).palette.action.disabled
      }, ownerState.variant === "outlined" && {
        border: `1px solid ${(theme.vars || theme).palette.action.disabledBackground}`
      }, ownerState.variant === "contained" && {
        color: (theme.vars || theme).palette.action.disabled,
        boxShadow: (theme.vars || theme).shadows[0],
        backgroundColor: (theme.vars || theme).palette.action.disabledBackground
      })
    }, ownerState.variant === "text" && {
      padding: "6px 8px"
    }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
      color: (theme.vars || theme).palette[ownerState.color].main
    }, ownerState.variant === "outlined" && {
      padding: "5px 15px",
      border: "1px solid currentColor"
    }, ownerState.variant === "outlined" && ownerState.color !== "inherit" && {
      color: (theme.vars || theme).palette[ownerState.color].main,
      border: theme.vars ? `1px solid rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : `1px solid ${alpha(theme.palette[ownerState.color].main, 0.5)}`
    }, ownerState.variant === "contained" && {
      color: theme.vars ? (
        // this is safe because grey does not change between default light/dark mode
        theme.vars.palette.text.primary
      ) : (_theme$palette$getCon = (_theme$palette = theme.palette).getContrastText) == null ? void 0 : _theme$palette$getCon.call(_theme$palette, theme.palette.grey[300]),
      backgroundColor: (theme.vars || theme).palette.grey[300],
      boxShadow: (theme.vars || theme).shadows[2]
    }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
      color: (theme.vars || theme).palette[ownerState.color].contrastText,
      backgroundColor: (theme.vars || theme).palette[ownerState.color].main
    }, ownerState.color === "inherit" && {
      color: "inherit",
      borderColor: "currentColor"
    }, ownerState.size === "small" && ownerState.variant === "text" && {
      padding: "4px 5px",
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "text" && {
      padding: "8px 11px",
      fontSize: theme.typography.pxToRem(15)
    }, ownerState.size === "small" && ownerState.variant === "outlined" && {
      padding: "3px 9px",
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "outlined" && {
      padding: "7px 21px",
      fontSize: theme.typography.pxToRem(15)
    }, ownerState.size === "small" && ownerState.variant === "contained" && {
      padding: "4px 10px",
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "contained" && {
      padding: "8px 22px",
      fontSize: theme.typography.pxToRem(15)
    }, ownerState.fullWidth && {
      width: "100%"
    });
  }, ({
    ownerState
  }) => ownerState.disableElevation && {
    boxShadow: "none",
    "&:hover": {
      boxShadow: "none"
    },
    [`&.${buttonClasses.focusVisible}`]: {
      boxShadow: "none"
    },
    "&:active": {
      boxShadow: "none"
    },
    [`&.${buttonClasses.disabled}`]: {
      boxShadow: "none"
    }
  });
  const ButtonStartIcon = styled("span", {
    name: "MuiButton",
    slot: "StartIcon",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.startIcon, styles2[`iconSize${capitalize(ownerState.size)}`]];
    }
  })(({
    ownerState
  }) => _extends$2({
    display: "inherit",
    marginRight: 8,
    marginLeft: -4
  }, ownerState.size === "small" && {
    marginLeft: -2
  }, commonIconStyles(ownerState)));
  const ButtonEndIcon = styled("span", {
    name: "MuiButton",
    slot: "EndIcon",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.endIcon, styles2[`iconSize${capitalize(ownerState.size)}`]];
    }
  })(({
    ownerState
  }) => _extends$2({
    display: "inherit",
    marginRight: -4,
    marginLeft: 8
  }, ownerState.size === "small" && {
    marginRight: -2
  }, commonIconStyles(ownerState)));
  const Button = /* @__PURE__ */ React__namespace.forwardRef(function Button2(inProps, ref) {
    const contextProps = React__namespace.useContext(ButtonGroupContext);
    const resolvedProps = resolveProps(contextProps, inProps);
    const props = useThemeProps({
      props: resolvedProps,
      name: "MuiButton"
    });
    const {
      children,
      color: color2 = "primary",
      component = "button",
      className,
      disabled = false,
      disableElevation = false,
      disableFocusRipple = false,
      endIcon: endIconProp,
      focusVisibleClassName,
      fullWidth = false,
      size = "medium",
      startIcon: startIconProp,
      type,
      variant = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$G);
    const ownerState = _extends$2({}, props, {
      color: color2,
      component,
      disabled,
      disableElevation,
      disableFocusRipple,
      fullWidth,
      size,
      type,
      variant
    });
    const classes = useUtilityClasses$D(ownerState);
    const startIcon = startIconProp && /* @__PURE__ */ jsxRuntimeExports.jsx(ButtonStartIcon, {
      className: classes.startIcon,
      ownerState,
      children: startIconProp
    });
    const endIcon = endIconProp && /* @__PURE__ */ jsxRuntimeExports.jsx(ButtonEndIcon, {
      className: classes.endIcon,
      ownerState,
      children: endIconProp
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(ButtonRoot, _extends$2({
      ownerState,
      className: clsx$1(contextProps.className, classes.root, className),
      component,
      disabled,
      focusRipple: !disableFocusRipple,
      focusVisibleClassName: clsx$1(classes.focusVisible, focusVisibleClassName),
      ref,
      type
    }, other, {
      classes,
      children: [startIcon, children, endIcon]
    }));
  });
  process.env.NODE_ENV !== "production" ? Button.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'primary'
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["inherit", "primary", "secondary", "success", "error", "info", "warning"]), PropTypes.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, no elevation is used.
     * @default false
     */
    disableElevation: PropTypes.bool,
    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: PropTypes.bool,
    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: PropTypes.bool,
    /**
     * Element placed after the children.
     */
    endIcon: PropTypes.node,
    /**
     * @ignore
     */
    focusVisibleClassName: PropTypes.string,
    /**
     * If `true`, the button will take up the full width of its container.
     * @default false
     */
    fullWidth: PropTypes.bool,
    /**
     * The URL to link to when the button is clicked.
     * If defined, an `a` element will be used as the root node.
     */
    href: PropTypes.string,
    /**
     * The size of the component.
     * `small` is equivalent to the dense button styling.
     * @default 'medium'
     */
    size: PropTypes.oneOfType([PropTypes.oneOf(["small", "medium", "large"]), PropTypes.string]),
    /**
     * Element placed before the children.
     */
    startIcon: PropTypes.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * @ignore
     */
    type: PropTypes.oneOfType([PropTypes.oneOf(["button", "reset", "submit"]), PropTypes.string]),
    /**
     * The variant to use.
     * @default 'text'
     */
    variant: PropTypes.oneOfType([PropTypes.oneOf(["contained", "outlined", "text"]), PropTypes.string])
  } : void 0;
  const FormControlContext = /* @__PURE__ */ React__namespace.createContext(void 0);
  if (process.env.NODE_ENV !== "production") {
    FormControlContext.displayName = "FormControlContext";
  }
  function useFormControl() {
    return React__namespace.useContext(FormControlContext);
  }
  function getSwitchBaseUtilityClass(slot) {
    return generateUtilityClass("PrivateSwitchBase", slot);
  }
  const switchBaseClasses = generateUtilityClasses("PrivateSwitchBase", ["root", "checked", "disabled", "input", "edgeStart", "edgeEnd"]);
  const _excluded$F = ["autoFocus", "checked", "checkedIcon", "className", "defaultChecked", "disabled", "disableFocusRipple", "edge", "icon", "id", "inputProps", "inputRef", "name", "onBlur", "onChange", "onFocus", "readOnly", "required", "tabIndex", "type", "value"];
  const useUtilityClasses$C = (ownerState) => {
    const {
      classes,
      checked,
      disabled,
      edge
    } = ownerState;
    const slots = {
      root: ["root", checked && "checked", disabled && "disabled", edge && `edge${capitalize(edge)}`],
      input: ["input"]
    };
    return composeClasses(slots, getSwitchBaseUtilityClass, classes);
  };
  const SwitchBaseRoot = styled(ButtonBase)(({
    ownerState
  }) => _extends$2({
    padding: 9,
    borderRadius: "50%"
  }, ownerState.edge === "start" && {
    marginLeft: ownerState.size === "small" ? -3 : -12
  }, ownerState.edge === "end" && {
    marginRight: ownerState.size === "small" ? -3 : -12
  }));
  const SwitchBaseInput = styled("input")({
    cursor: "inherit",
    position: "absolute",
    opacity: 0,
    width: "100%",
    height: "100%",
    top: 0,
    left: 0,
    margin: 0,
    padding: 0,
    zIndex: 1
  });
  const SwitchBase = /* @__PURE__ */ React__namespace.forwardRef(function SwitchBase2(props, ref) {
    const {
      autoFocus,
      checked: checkedProp,
      checkedIcon,
      className,
      defaultChecked,
      disabled: disabledProp,
      disableFocusRipple = false,
      edge = false,
      icon,
      id,
      inputProps,
      inputRef,
      name,
      onBlur,
      onChange,
      onFocus,
      readOnly,
      required = false,
      tabIndex,
      type,
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$F);
    const [checked, setCheckedState] = useControlled({
      controlled: checkedProp,
      default: Boolean(defaultChecked),
      name: "SwitchBase",
      state: "checked"
    });
    const muiFormControl = useFormControl();
    const handleFocus = (event) => {
      if (onFocus) {
        onFocus(event);
      }
      if (muiFormControl && muiFormControl.onFocus) {
        muiFormControl.onFocus(event);
      }
    };
    const handleBlur2 = (event) => {
      if (onBlur) {
        onBlur(event);
      }
      if (muiFormControl && muiFormControl.onBlur) {
        muiFormControl.onBlur(event);
      }
    };
    const handleInputChange = (event) => {
      if (event.nativeEvent.defaultPrevented) {
        return;
      }
      const newChecked = event.target.checked;
      setCheckedState(newChecked);
      if (onChange) {
        onChange(event, newChecked);
      }
    };
    let disabled = disabledProp;
    if (muiFormControl) {
      if (typeof disabled === "undefined") {
        disabled = muiFormControl.disabled;
      }
    }
    const hasLabelFor = type === "checkbox" || type === "radio";
    const ownerState = _extends$2({}, props, {
      checked,
      disabled,
      disableFocusRipple,
      edge
    });
    const classes = useUtilityClasses$C(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(SwitchBaseRoot, _extends$2({
      component: "span",
      className: clsx$1(classes.root, className),
      centerRipple: true,
      focusRipple: !disableFocusRipple,
      disabled,
      tabIndex: null,
      role: void 0,
      onFocus: handleFocus,
      onBlur: handleBlur2,
      ownerState,
      ref
    }, other, {
      children: [/* @__PURE__ */ jsxRuntimeExports.jsx(SwitchBaseInput, _extends$2({
        autoFocus,
        checked: checkedProp,
        defaultChecked,
        className: classes.input,
        disabled,
        id: hasLabelFor ? id : void 0,
        name,
        onChange: handleInputChange,
        readOnly,
        ref: inputRef,
        required,
        ownerState,
        tabIndex,
        type
      }, type === "checkbox" && value === void 0 ? {} : {
        value
      }, inputProps)), checked ? checkedIcon : icon]
    }));
  });
  process.env.NODE_ENV !== "production" ? SwitchBase.propTypes = {
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: PropTypes.bool,
    /**
     * If `true`, the component is checked.
     */
    checked: PropTypes.bool,
    /**
     * The icon to display when the component is checked.
     */
    checkedIcon: PropTypes.node.isRequired,
    /**
     * Override or extend the styles applied to the component.
     * See [CSS API](#css) below for more details.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * @ignore
     */
    defaultChecked: PropTypes.bool,
    /**
     * If `true`, the component is disabled.
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: PropTypes.bool,
    /**
     * If given, uses a negative margin to counteract the padding on one
     * side (this is often helpful for aligning the left or right
     * side of the icon with content above or below, without ruining the border
     * size and shape).
     * @default false
     */
    edge: PropTypes.oneOf(["end", "start", false]),
    /**
     * The icon to display when the component is unchecked.
     */
    icon: PropTypes.node.isRequired,
    /**
     * The id of the `input` element.
     */
    id: PropTypes.string,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: PropTypes.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType,
    /*
     * @ignore
     */
    name: PropTypes.string,
    /**
     * @ignore
     */
    onBlur: PropTypes.func,
    /**
     * Callback fired when the state is changed.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: PropTypes.func,
    /**
     * @ignore
     */
    onFocus: PropTypes.func,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: PropTypes.bool,
    /**
     * If `true`, the `input` element is required.
     */
    required: PropTypes.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.object,
    /**
     * @ignore
     */
    tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * The input component prop `type`.
     */
    type: PropTypes.string.isRequired,
    /**
     * The value of the component.
     */
    value: PropTypes.any
  } : void 0;
  const CheckBoxOutlineBlankIcon = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
  }), "CheckBoxOutlineBlank");
  const CheckBoxIcon = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
  }), "CheckBox");
  const IndeterminateCheckBoxIcon = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
  }), "IndeterminateCheckBox");
  function getCheckboxUtilityClass(slot) {
    return generateUtilityClass("MuiCheckbox", slot);
  }
  const checkboxClasses = generateUtilityClasses("MuiCheckbox", ["root", "checked", "disabled", "indeterminate", "colorPrimary", "colorSecondary"]);
  const _excluded$E = ["checkedIcon", "color", "icon", "indeterminate", "indeterminateIcon", "inputProps", "size", "className"];
  const useUtilityClasses$B = (ownerState) => {
    const {
      classes,
      indeterminate,
      color: color2
    } = ownerState;
    const slots = {
      root: ["root", indeterminate && "indeterminate", `color${capitalize(color2)}`]
    };
    const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);
    return _extends$2({}, classes, composedClasses);
  };
  const CheckboxRoot = styled(SwitchBase, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiCheckbox",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, ownerState.indeterminate && styles2.indeterminate, ownerState.color !== "default" && styles2[`color${capitalize(ownerState.color)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends$2({
    color: (theme.vars || theme).palette.text.secondary
  }, !ownerState.disableRipple && {
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${ownerState.color === "default" ? theme.vars.palette.action.activeChannel : theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(ownerState.color === "default" ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }
  }, ownerState.color !== "default" && {
    [`&.${checkboxClasses.checked}, &.${checkboxClasses.indeterminate}`]: {
      color: (theme.vars || theme).palette[ownerState.color].main
    },
    [`&.${checkboxClasses.disabled}`]: {
      color: (theme.vars || theme).palette.action.disabled
    }
  }));
  const defaultCheckedIcon$1 = /* @__PURE__ */ jsxRuntimeExports.jsx(CheckBoxIcon, {});
  const defaultIcon$1 = /* @__PURE__ */ jsxRuntimeExports.jsx(CheckBoxOutlineBlankIcon, {});
  const defaultIndeterminateIcon = /* @__PURE__ */ jsxRuntimeExports.jsx(IndeterminateCheckBoxIcon, {});
  const Checkbox = /* @__PURE__ */ React__namespace.forwardRef(function Checkbox2(inProps, ref) {
    var _icon$props$fontSize, _indeterminateIcon$pr;
    const props = useThemeProps({
      props: inProps,
      name: "MuiCheckbox"
    });
    const {
      checkedIcon = defaultCheckedIcon$1,
      color: color2 = "primary",
      icon: iconProp = defaultIcon$1,
      indeterminate = false,
      indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,
      inputProps,
      size = "medium",
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$E);
    const icon = indeterminate ? indeterminateIconProp : iconProp;
    const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;
    const ownerState = _extends$2({}, props, {
      color: color2,
      indeterminate,
      size
    });
    const classes = useUtilityClasses$B(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(CheckboxRoot, _extends$2({
      type: "checkbox",
      inputProps: _extends$2({
        "data-indeterminate": indeterminate
      }, inputProps),
      icon: /* @__PURE__ */ React__namespace.cloneElement(icon, {
        fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size
      }),
      checkedIcon: /* @__PURE__ */ React__namespace.cloneElement(indeterminateIcon, {
        fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size
      }),
      ownerState,
      ref,
      className: clsx$1(classes.root, className)
    }, other, {
      classes
    }));
  });
  process.env.NODE_ENV !== "production" ? Checkbox.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * If `true`, the component is checked.
     */
    checked: PropTypes.bool,
    /**
     * The icon to display when the component is checked.
     * @default <CheckBoxIcon />
     */
    checkedIcon: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'primary'
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), PropTypes.string]),
    /**
     * The default checked state. Use when the component is not controlled.
     */
    defaultChecked: PropTypes.bool,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the ripple effect is disabled.
     * @default false
     */
    disableRipple: PropTypes.bool,
    /**
     * The icon to display when the component is unchecked.
     * @default <CheckBoxOutlineBlankIcon />
     */
    icon: PropTypes.node,
    /**
     * The id of the `input` element.
     */
    id: PropTypes.string,
    /**
     * If `true`, the component appears indeterminate.
     * This does not set the native input element to indeterminate due
     * to inconsistent behavior across browsers.
     * However, we set a `data-indeterminate` attribute on the `input`.
     * @default false
     */
    indeterminate: PropTypes.bool,
    /**
     * The icon to display when the component is indeterminate.
     * @default <IndeterminateCheckBoxIcon />
     */
    indeterminateIcon: PropTypes.node,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: PropTypes.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType,
    /**
     * Callback fired when the state is changed.
     *
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: PropTypes.func,
    /**
     * If `true`, the `input` element is required.
     * @default false
     */
    required: PropTypes.bool,
    /**
     * The size of the component.
     * `small` is equivalent to the dense checkbox styling.
     * @default 'medium'
     */
    size: PropTypes.oneOfType([PropTypes.oneOf(["medium", "small"]), PropTypes.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The value of the component. The DOM API casts this to a string.
     * The browser uses "on" as the default value.
     */
    value: PropTypes.any
  } : void 0;
  const RadioButtonUncheckedIcon = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
  }), "RadioButtonUnchecked");
  const RadioButtonCheckedIcon = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z"
  }), "RadioButtonChecked");
  const RadioButtonIconRoot = styled("span")({
    position: "relative",
    display: "flex"
  });
  const RadioButtonIconBackground = styled(RadioButtonUncheckedIcon)({
    // Scale applied to prevent dot misalignment in Safari
    transform: "scale(1)"
  });
  const RadioButtonIconDot = styled(RadioButtonCheckedIcon)(({
    theme,
    ownerState
  }) => _extends$2({
    left: 0,
    position: "absolute",
    transform: "scale(0)",
    transition: theme.transitions.create("transform", {
      easing: theme.transitions.easing.easeIn,
      duration: theme.transitions.duration.shortest
    })
  }, ownerState.checked && {
    transform: "scale(1)",
    transition: theme.transitions.create("transform", {
      easing: theme.transitions.easing.easeOut,
      duration: theme.transitions.duration.shortest
    })
  }));
  function RadioButtonIcon(props) {
    const {
      checked = false,
      classes = {},
      fontSize: fontSize2
    } = props;
    const ownerState = _extends$2({}, props, {
      checked
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(RadioButtonIconRoot, {
      className: classes.root,
      ownerState,
      children: [/* @__PURE__ */ jsxRuntimeExports.jsx(RadioButtonIconBackground, {
        fontSize: fontSize2,
        className: classes.background,
        ownerState
      }), /* @__PURE__ */ jsxRuntimeExports.jsx(RadioButtonIconDot, {
        fontSize: fontSize2,
        className: classes.dot,
        ownerState
      })]
    });
  }
  process.env.NODE_ENV !== "production" ? RadioButtonIcon.propTypes = {
    /**
     * If `true`, the component is checked.
     */
    checked: PropTypes.bool,
    /**
     * Override or extend the styles applied to the component.
     * See [CSS API](#css) below for more details.
     */
    classes: PropTypes.object,
    /**
     * The size of the component.
     * `small` is equivalent to the dense radio styling.
     */
    fontSize: PropTypes.oneOf(["small", "medium"])
  } : void 0;
  const RadioGroupContext = /* @__PURE__ */ React__namespace.createContext(void 0);
  if (process.env.NODE_ENV !== "production") {
    RadioGroupContext.displayName = "RadioGroupContext";
  }
  function useRadioGroup() {
    return React__namespace.useContext(RadioGroupContext);
  }
  function getRadioUtilityClass(slot) {
    return generateUtilityClass("MuiRadio", slot);
  }
  const radioClasses = generateUtilityClasses("MuiRadio", ["root", "checked", "disabled", "colorPrimary", "colorSecondary"]);
  const _excluded$D = ["checked", "checkedIcon", "color", "icon", "name", "onChange", "size", "className"];
  const useUtilityClasses$A = (ownerState) => {
    const {
      classes,
      color: color2
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize(color2)}`]
    };
    return _extends$2({}, classes, composeClasses(slots, getRadioUtilityClass, classes));
  };
  const RadioRoot = styled(SwitchBase, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiRadio",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, styles2[`color${capitalize(ownerState.color)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends$2({
    color: (theme.vars || theme).palette.text.secondary
  }, !ownerState.disableRipple && {
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${ownerState.color === "default" ? theme.vars.palette.action.activeChannel : theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(ownerState.color === "default" ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }
  }, ownerState.color !== "default" && {
    [`&.${radioClasses.checked}`]: {
      color: (theme.vars || theme).palette[ownerState.color].main
    }
  }, {
    [`&.${radioClasses.disabled}`]: {
      color: (theme.vars || theme).palette.action.disabled
    }
  }));
  function areEqualValues$1(a, b) {
    if (typeof b === "object" && b !== null) {
      return a === b;
    }
    return String(a) === String(b);
  }
  const defaultCheckedIcon = /* @__PURE__ */ jsxRuntimeExports.jsx(RadioButtonIcon, {
    checked: true
  });
  const defaultIcon = /* @__PURE__ */ jsxRuntimeExports.jsx(RadioButtonIcon, {});
  const Radio = /* @__PURE__ */ React__namespace.forwardRef(function Radio2(inProps, ref) {
    var _defaultIcon$props$fo, _defaultCheckedIcon$p;
    const props = useThemeProps({
      props: inProps,
      name: "MuiRadio"
    });
    const {
      checked: checkedProp,
      checkedIcon = defaultCheckedIcon,
      color: color2 = "primary",
      icon = defaultIcon,
      name: nameProp,
      onChange: onChangeProp,
      size = "medium",
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$D);
    const ownerState = _extends$2({}, props, {
      color: color2,
      size
    });
    const classes = useUtilityClasses$A(ownerState);
    const radioGroup = useRadioGroup();
    let checked = checkedProp;
    const onChange = createChainedFunction(onChangeProp, radioGroup && radioGroup.onChange);
    let name = nameProp;
    if (radioGroup) {
      if (typeof checked === "undefined") {
        checked = areEqualValues$1(radioGroup.value, props.value);
      }
      if (typeof name === "undefined") {
        name = radioGroup.name;
      }
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx(RadioRoot, _extends$2({
      type: "radio",
      icon: /* @__PURE__ */ React__namespace.cloneElement(icon, {
        fontSize: (_defaultIcon$props$fo = defaultIcon.props.fontSize) != null ? _defaultIcon$props$fo : size
      }),
      checkedIcon: /* @__PURE__ */ React__namespace.cloneElement(checkedIcon, {
        fontSize: (_defaultCheckedIcon$p = defaultCheckedIcon.props.fontSize) != null ? _defaultCheckedIcon$p : size
      }),
      ownerState,
      classes,
      name,
      checked,
      onChange,
      ref,
      className: clsx$1(classes.root, className)
    }, other));
  });
  process.env.NODE_ENV !== "production" ? Radio.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * If `true`, the component is checked.
     */
    checked: PropTypes.bool,
    /**
     * The icon to display when the component is checked.
     * @default <RadioButtonIcon checked />
     */
    checkedIcon: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'primary'
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), PropTypes.string]),
    /**
     * If `true`, the component is disabled.
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the ripple effect is disabled.
     * @default false
     */
    disableRipple: PropTypes.bool,
    /**
     * The icon to display when the component is unchecked.
     * @default <RadioButtonIcon />
     */
    icon: PropTypes.node,
    /**
     * The id of the `input` element.
     */
    id: PropTypes.string,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: PropTypes.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType,
    /**
     * Name attribute of the `input` element.
     */
    name: PropTypes.string,
    /**
     * Callback fired when the state is changed.
     *
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: PropTypes.func,
    /**
     * If `true`, the `input` element is required.
     * @default false
     */
    required: PropTypes.bool,
    /**
     * The size of the component.
     * `small` is equivalent to the dense radio styling.
     * @default 'medium'
     */
    size: PropTypes.oneOfType([PropTypes.oneOf(["medium", "small"]), PropTypes.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The value of the component. The DOM API casts this to a string.
     */
    value: PropTypes.any
  } : void 0;
  function getToolbarUtilityClass(slot) {
    return generateUtilityClass("MuiToolbar", slot);
  }
  const toolbarClasses = generateUtilityClasses("MuiToolbar", ["root", "gutters", "regular", "dense"]);
  const _excluded$C = ["className", "component", "disableGutters", "variant"];
  const useUtilityClasses$z = (ownerState) => {
    const {
      classes,
      disableGutters,
      variant
    } = ownerState;
    const slots = {
      root: ["root", !disableGutters && "gutters", variant]
    };
    return composeClasses(slots, getToolbarUtilityClass, classes);
  };
  const ToolbarRoot = styled("div", {
    name: "MuiToolbar",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, !ownerState.disableGutters && styles2.gutters, styles2[ownerState.variant]];
    }
  })(({
    theme,
    ownerState
  }) => _extends$2({
    position: "relative",
    display: "flex",
    alignItems: "center"
  }, !ownerState.disableGutters && {
    paddingLeft: theme.spacing(2),
    paddingRight: theme.spacing(2),
    [theme.breakpoints.up("sm")]: {
      paddingLeft: theme.spacing(3),
      paddingRight: theme.spacing(3)
    }
  }, ownerState.variant === "dense" && {
    minHeight: 48
  }), ({
    theme,
    ownerState
  }) => ownerState.variant === "regular" && theme.mixins.toolbar);
  const Toolbar = /* @__PURE__ */ React__namespace.forwardRef(function Toolbar2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiToolbar"
    });
    const {
      className,
      component = "div",
      disableGutters = false,
      variant = "regular"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$C);
    const ownerState = _extends$2({}, props, {
      component,
      disableGutters,
      variant
    });
    const classes = useUtilityClasses$z(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(ToolbarRoot, _extends$2({
      as: component,
      className: clsx$1(classes.root, className),
      ref,
      ownerState
    }, other));
  });
  process.env.NODE_ENV !== "production" ? Toolbar.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`.
     * The Toolbar is a flex container, allowing flex item properites to be used to lay out the children.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, disables gutter padding.
     * @default false
     */
    disableGutters: PropTypes.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The variant to use.
     * @default 'regular'
     */
    variant: PropTypes.oneOfType([PropTypes.oneOf(["dense", "regular"]), PropTypes.string])
  } : void 0;
  function useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {
    const [match2, setMatch] = React__namespace.useState(() => {
      if (noSsr && matchMedia) {
        return matchMedia(query).matches;
      }
      if (ssrMatchMedia) {
        return ssrMatchMedia(query).matches;
      }
      return defaultMatches;
    });
    useEnhancedEffect(() => {
      let active = true;
      if (!matchMedia) {
        return void 0;
      }
      const queryList = matchMedia(query);
      const updateMatch = () => {
        if (active) {
          setMatch(queryList.matches);
        }
      };
      updateMatch();
      queryList.addListener(updateMatch);
      return () => {
        active = false;
        queryList.removeListener(updateMatch);
      };
    }, [query, matchMedia]);
    return match2;
  }
  const maybeReactUseSyncExternalStore = React__namespace["useSyncExternalStore"];
  function useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {
    const getDefaultSnapshot = React__namespace.useCallback(() => defaultMatches, [defaultMatches]);
    const getServerSnapshot = React__namespace.useMemo(() => {
      if (noSsr && matchMedia) {
        return () => matchMedia(query).matches;
      }
      if (ssrMatchMedia !== null) {
        const {
          matches
        } = ssrMatchMedia(query);
        return () => matches;
      }
      return getDefaultSnapshot;
    }, [getDefaultSnapshot, query, ssrMatchMedia, noSsr, matchMedia]);
    const [getSnapshot, subscribe] = React__namespace.useMemo(() => {
      if (matchMedia === null) {
        return [getDefaultSnapshot, () => () => {
        }];
      }
      const mediaQueryList = matchMedia(query);
      return [() => mediaQueryList.matches, (notify) => {
        mediaQueryList.addListener(notify);
        return () => {
          mediaQueryList.removeListener(notify);
        };
      }];
    }, [getDefaultSnapshot, matchMedia, query]);
    const match2 = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    return match2;
  }
  function useMediaQuery(queryInput, options = {}) {
    const theme = useTheme$3();
    const supportMatchMedia = typeof window !== "undefined" && typeof window.matchMedia !== "undefined";
    const {
      defaultMatches = false,
      matchMedia = supportMatchMedia ? window.matchMedia : null,
      ssrMatchMedia = null,
      noSsr = false
    } = getThemeProps({
      name: "MuiUseMediaQuery",
      props: options,
      theme
    });
    if (process.env.NODE_ENV !== "production") {
      if (typeof queryInput === "function" && theme === null) {
        console.error(["MUI: The `query` argument provided is invalid.", "You are providing a function without a theme in the context.", "One of the parent elements needs to use a ThemeProvider."].join("\n"));
      }
    }
    let query = typeof queryInput === "function" ? queryInput(theme) : queryInput;
    query = query.replace(/^@media( ?)/m, "");
    const useMediaQueryImplementation = maybeReactUseSyncExternalStore !== void 0 ? useMediaQueryNew : useMediaQueryOld;
    const match2 = useMediaQueryImplementation(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr);
    if (process.env.NODE_ENV !== "production") {
      React__namespace.useDebugValue({
        query,
        match: match2
      });
    }
    return match2;
  }
  function getCollapseUtilityClass(slot) {
    return generateUtilityClass("MuiCollapse", slot);
  }
  const collapseClasses = generateUtilityClasses("MuiCollapse", ["root", "horizontal", "vertical", "entered", "hidden", "wrapper", "wrapperInner"]);
  const _excluded$B = ["addEndListener", "children", "className", "collapsedSize", "component", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "orientation", "style", "timeout", "TransitionComponent"];
  const useUtilityClasses$y = (ownerState) => {
    const {
      orientation,
      classes
    } = ownerState;
    const slots = {
      root: ["root", `${orientation}`],
      entered: ["entered"],
      hidden: ["hidden"],
      wrapper: ["wrapper", `${orientation}`],
      wrapperInner: ["wrapperInner", `${orientation}`]
    };
    return composeClasses(slots, getCollapseUtilityClass, classes);
  };
  const CollapseRoot = styled("div", {
    name: "MuiCollapse",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, styles2[ownerState.orientation], ownerState.state === "entered" && styles2.entered, ownerState.state === "exited" && !ownerState.in && ownerState.collapsedSize === "0px" && styles2.hidden];
    }
  })(({
    theme,
    ownerState
  }) => _extends$2({
    height: 0,
    overflow: "hidden",
    transition: theme.transitions.create("height")
  }, ownerState.orientation === "horizontal" && {
    height: "auto",
    width: 0,
    transition: theme.transitions.create("width")
  }, ownerState.state === "entered" && _extends$2({
    height: "auto",
    overflow: "visible"
  }, ownerState.orientation === "horizontal" && {
    width: "auto"
  }), ownerState.state === "exited" && !ownerState.in && ownerState.collapsedSize === "0px" && {
    visibility: "hidden"
  }));
  const CollapseWrapper = styled("div", {
    name: "MuiCollapse",
    slot: "Wrapper",
    overridesResolver: (props, styles2) => styles2.wrapper
  })(({
    ownerState
  }) => _extends$2({
    // Hack to get children with a negative margin to not falsify the height computation.
    display: "flex",
    width: "100%"
  }, ownerState.orientation === "horizontal" && {
    width: "auto",
    height: "100%"
  }));
  const CollapseWrapperInner = styled("div", {
    name: "MuiCollapse",
    slot: "WrapperInner",
    overridesResolver: (props, styles2) => styles2.wrapperInner
  })(({
    ownerState
  }) => _extends$2({
    width: "100%"
  }, ownerState.orientation === "horizontal" && {
    width: "auto",
    height: "100%"
  }));
  const Collapse = /* @__PURE__ */ React__namespace.forwardRef(function Collapse2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiCollapse"
    });
    const {
      addEndListener,
      children,
      className,
      collapsedSize: collapsedSizeProp = "0px",
      component,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      orientation = "vertical",
      style: style2,
      timeout = duration.standard,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$B);
    const ownerState = _extends$2({}, props, {
      orientation,
      collapsedSize: collapsedSizeProp
    });
    const classes = useUtilityClasses$y(ownerState);
    const theme = useTheme();
    const timer = React__namespace.useRef();
    const wrapperRef = React__namespace.useRef(null);
    const autoTransitionDuration = React__namespace.useRef();
    const collapsedSize = typeof collapsedSizeProp === "number" ? `${collapsedSizeProp}px` : collapsedSizeProp;
    const isHorizontal2 = orientation === "horizontal";
    const size = isHorizontal2 ? "width" : "height";
    React__namespace.useEffect(() => {
      return () => {
        clearTimeout(timer.current);
      };
    }, []);
    const nodeRef = React__namespace.useRef(null);
    const handleRef = useForkRef(ref, nodeRef);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node2 = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node2);
        } else {
          callback(node2, maybeIsAppearing);
        }
      }
    };
    const getWrapperSize = () => wrapperRef.current ? wrapperRef.current[isHorizontal2 ? "clientWidth" : "clientHeight"] : 0;
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      if (wrapperRef.current && isHorizontal2) {
        wrapperRef.current.style.position = "absolute";
      }
      node2.style[size] = collapsedSize;
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntering = normalizedTransitionCallback((node2, isAppearing) => {
      const wrapperSize = getWrapperSize();
      if (wrapperRef.current && isHorizontal2) {
        wrapperRef.current.style.position = "";
      }
      const {
        duration: transitionDuration,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style: style2,
        timeout,
        easing: easing2
      }, {
        mode: "enter"
      });
      if (timeout === "auto") {
        const duration2 = theme.transitions.getAutoHeightDuration(wrapperSize);
        node2.style.transitionDuration = `${duration2}ms`;
        autoTransitionDuration.current = duration2;
      } else {
        node2.style.transitionDuration = typeof transitionDuration === "string" ? transitionDuration : `${transitionDuration}ms`;
      }
      node2.style[size] = `${wrapperSize}px`;
      node2.style.transitionTimingFunction = transitionTimingFunction;
      if (onEntering) {
        onEntering(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback((node2, isAppearing) => {
      node2.style[size] = "auto";
      if (onEntered) {
        onEntered(node2, isAppearing);
      }
    });
    const handleExit = normalizedTransitionCallback((node2) => {
      node2.style[size] = `${getWrapperSize()}px`;
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleExiting = normalizedTransitionCallback((node2) => {
      const wrapperSize = getWrapperSize();
      const {
        duration: transitionDuration,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style: style2,
        timeout,
        easing: easing2
      }, {
        mode: "exit"
      });
      if (timeout === "auto") {
        const duration2 = theme.transitions.getAutoHeightDuration(wrapperSize);
        node2.style.transitionDuration = `${duration2}ms`;
        autoTransitionDuration.current = duration2;
      } else {
        node2.style.transitionDuration = typeof transitionDuration === "string" ? transitionDuration : `${transitionDuration}ms`;
      }
      node2.style[size] = collapsedSize;
      node2.style.transitionTimingFunction = transitionTimingFunction;
      if (onExiting) {
        onExiting(node2);
      }
    });
    const handleAddEndListener = (next2) => {
      if (timeout === "auto") {
        timer.current = setTimeout(next2, autoTransitionDuration.current || 0);
      }
      if (addEndListener) {
        addEndListener(nodeRef.current, next2);
      }
    };
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionComponent, _extends$2({
      in: inProp,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      nodeRef,
      timeout: timeout === "auto" ? null : timeout
    }, other, {
      children: (state, childProps) => /* @__PURE__ */ jsxRuntimeExports.jsx(CollapseRoot, _extends$2({
        as: component,
        className: clsx$1(classes.root, className, {
          "entered": classes.entered,
          "exited": !inProp && collapsedSize === "0px" && classes.hidden
        }[state]),
        style: _extends$2({
          [isHorizontal2 ? "minWidth" : "minHeight"]: collapsedSize
        }, style2),
        ownerState: _extends$2({}, ownerState, {
          state
        }),
        ref: handleRef
      }, childProps, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(CollapseWrapper, {
          ownerState: _extends$2({}, ownerState, {
            state
          }),
          className: classes.wrapper,
          ref: wrapperRef,
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(CollapseWrapperInner, {
            ownerState: _extends$2({}, ownerState, {
              state
            }),
            className: classes.wrapperInner,
            children
          })
        })
      }))
    }));
  });
  process.env.NODE_ENV !== "production" ? Collapse.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: PropTypes.func,
    /**
     * The content node to be collapsed.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The width (horizontal) or height (vertical) of the container when collapsed.
     * @default '0px'
     */
    collapsedSize: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: elementTypeAcceptingRef$1,
    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     */
    easing: PropTypes.oneOfType([PropTypes.shape({
      enter: PropTypes.string,
      exit: PropTypes.string
    }), PropTypes.string]),
    /**
     * If `true`, the component will transition in.
     */
    in: PropTypes.bool,
    /**
     * @ignore
     */
    onEnter: PropTypes.func,
    /**
     * @ignore
     */
    onEntered: PropTypes.func,
    /**
     * @ignore
     */
    onEntering: PropTypes.func,
    /**
     * @ignore
     */
    onExit: PropTypes.func,
    /**
     * @ignore
     */
    onExited: PropTypes.func,
    /**
     * @ignore
     */
    onExiting: PropTypes.func,
    /**
     * The transition orientation.
     * @default 'vertical'
     */
    orientation: PropTypes.oneOf(["horizontal", "vertical"]),
    /**
     * @ignore
     */
    style: PropTypes.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     *
     * Set to 'auto' to automatically calculate transition time based on height.
     * @default duration.standard
     */
    timeout: PropTypes.oneOfType([PropTypes.oneOf(["auto"]), PropTypes.number, PropTypes.shape({
      appear: PropTypes.number,
      enter: PropTypes.number,
      exit: PropTypes.number
    })])
  } : void 0;
  Collapse.muiSupportAuto = true;
  function getInputAdornmentUtilityClass(slot) {
    return generateUtilityClass("MuiInputAdornment", slot);
  }
  const inputAdornmentClasses = generateUtilityClasses("MuiInputAdornment", ["root", "filled", "standard", "outlined", "positionStart", "positionEnd", "disablePointerEvents", "hiddenLabel", "sizeSmall"]);
  var _span$3;
  const _excluded$A = ["children", "className", "component", "disablePointerEvents", "disableTypography", "position", "variant"];
  const overridesResolver = (props, styles2) => {
    const {
      ownerState
    } = props;
    return [styles2.root, styles2[`position${capitalize(ownerState.position)}`], ownerState.disablePointerEvents === true && styles2.disablePointerEvents, styles2[ownerState.variant]];
  };
  const useUtilityClasses$x = (ownerState) => {
    const {
      classes,
      disablePointerEvents,
      hiddenLabel,
      position: position2,
      size,
      variant
    } = ownerState;
    const slots = {
      root: ["root", disablePointerEvents && "disablePointerEvents", position2 && `position${capitalize(position2)}`, variant, hiddenLabel && "hiddenLabel", size && `size${capitalize(size)}`]
    };
    return composeClasses(slots, getInputAdornmentUtilityClass, classes);
  };
  const InputAdornmentRoot = styled("div", {
    name: "MuiInputAdornment",
    slot: "Root",
    overridesResolver
  })(({
    theme,
    ownerState
  }) => _extends$2({
    display: "flex",
    height: "0.01em",
    // Fix IE11 flexbox alignment. To remove at some point.
    maxHeight: "2em",
    alignItems: "center",
    whiteSpace: "nowrap",
    color: (theme.vars || theme).palette.action.active
  }, ownerState.variant === "filled" && {
    // Styles applied to the root element if `variant="filled"`.
    [`&.${inputAdornmentClasses.positionStart}&:not(.${inputAdornmentClasses.hiddenLabel})`]: {
      marginTop: 16
    }
  }, ownerState.position === "start" && {
    // Styles applied to the root element if `position="start"`.
    marginRight: 8
  }, ownerState.position === "end" && {
    // Styles applied to the root element if `position="end"`.
    marginLeft: 8
  }, ownerState.disablePointerEvents === true && {
    // Styles applied to the root element if `disablePointerEvents={true}`.
    pointerEvents: "none"
  }));
  const InputAdornment = /* @__PURE__ */ React__namespace.forwardRef(function InputAdornment2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiInputAdornment"
    });
    const {
      children,
      className,
      component = "div",
      disablePointerEvents = false,
      disableTypography = false,
      position: position2,
      variant: variantProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$A);
    const muiFormControl = useFormControl() || {};
    let variant = variantProp;
    if (variantProp && muiFormControl.variant) {
      if (process.env.NODE_ENV !== "production") {
        if (variantProp === muiFormControl.variant) {
          console.error("MUI: The `InputAdornment` variant infers the variant prop you do not have to provide one.");
        }
      }
    }
    if (muiFormControl && !variant) {
      variant = muiFormControl.variant;
    }
    const ownerState = _extends$2({}, props, {
      hiddenLabel: muiFormControl.hiddenLabel,
      size: muiFormControl.size,
      disablePointerEvents,
      position: position2,
      variant
    });
    const classes = useUtilityClasses$x(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(FormControlContext.Provider, {
      value: null,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(InputAdornmentRoot, _extends$2({
        as: component,
        ownerState,
        className: clsx$1(classes.root, className),
        ref
      }, other, {
        children: typeof children === "string" && !disableTypography ? /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, {
          color: "text.secondary",
          children
        }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(React__namespace.Fragment, {
          children: [position2 === "start" ? (
            /* notranslate needed while Google Translate will not fix zero-width space issue */
            _span$3 || (_span$3 = /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
              className: "notranslate",
              children: "​"
            }))
          ) : null, children]
        })
      }))
    });
  });
  process.env.NODE_ENV !== "production" ? InputAdornment.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component, normally an `IconButton` or string.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * Disable pointer events on the root.
     * This allows for the content of the adornment to focus the `input` on click.
     * @default false
     */
    disablePointerEvents: PropTypes.bool,
    /**
     * If children is a string then disable wrapping in a Typography component.
     * @default false
     */
    disableTypography: PropTypes.bool,
    /**
     * The position this adornment should appear relative to the `Input`.
     */
    position: PropTypes.oneOf(["end", "start"]).isRequired,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The variant to use.
     * Note: If you are using the `TextField` component or the `FormControl` component
     * you do not have to set this manually.
     */
    variant: PropTypes.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  function formControlState({
    props,
    states,
    muiFormControl
  }) {
    return states.reduce((acc, state) => {
      acc[state] = props[state];
      if (muiFormControl) {
        if (typeof props[state] === "undefined") {
          acc[state] = muiFormControl[state];
        }
      }
      return acc;
    }, {});
  }
  function GlobalStyles(props) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(GlobalStyles$1, _extends$2({}, props, {
      defaultTheme: defaultTheme$2
    }));
  }
  process.env.NODE_ENV !== "production" ? GlobalStyles.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The styles you want to apply globally.
     */
    styles: PropTypes.oneOfType([PropTypes.func, PropTypes.number, PropTypes.object, PropTypes.shape({
      __emotion_styles: PropTypes.any.isRequired
    }), PropTypes.string, PropTypes.bool])
  } : void 0;
  function hasValue(value) {
    return value != null && !(Array.isArray(value) && value.length === 0);
  }
  function isFilled(obj, SSR = false) {
    return obj && (hasValue(obj.value) && obj.value !== "" || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== "");
  }
  function isAdornedStart(obj) {
    return obj.startAdornment;
  }
  function getInputBaseUtilityClass(slot) {
    return generateUtilityClass("MuiInputBase", slot);
  }
  const inputBaseClasses = generateUtilityClasses("MuiInputBase", ["root", "formControl", "focused", "disabled", "adornedStart", "adornedEnd", "error", "sizeSmall", "multiline", "colorSecondary", "fullWidth", "hiddenLabel", "readOnly", "input", "inputSizeSmall", "inputMultiline", "inputTypeSearch", "inputAdornedStart", "inputAdornedEnd", "inputHiddenLabel"]);
  const _excluded$z = ["aria-describedby", "autoComplete", "autoFocus", "className", "color", "components", "componentsProps", "defaultValue", "disabled", "disableInjectingGlobalStyles", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "size", "slotProps", "slots", "startAdornment", "type", "value"];
  const rootOverridesResolver = (props, styles2) => {
    const {
      ownerState
    } = props;
    return [styles2.root, ownerState.formControl && styles2.formControl, ownerState.startAdornment && styles2.adornedStart, ownerState.endAdornment && styles2.adornedEnd, ownerState.error && styles2.error, ownerState.size === "small" && styles2.sizeSmall, ownerState.multiline && styles2.multiline, ownerState.color && styles2[`color${capitalize(ownerState.color)}`], ownerState.fullWidth && styles2.fullWidth, ownerState.hiddenLabel && styles2.hiddenLabel];
  };
  const inputOverridesResolver = (props, styles2) => {
    const {
      ownerState
    } = props;
    return [styles2.input, ownerState.size === "small" && styles2.inputSizeSmall, ownerState.multiline && styles2.inputMultiline, ownerState.type === "search" && styles2.inputTypeSearch, ownerState.startAdornment && styles2.inputAdornedStart, ownerState.endAdornment && styles2.inputAdornedEnd, ownerState.hiddenLabel && styles2.inputHiddenLabel];
  };
  const useUtilityClasses$w = (ownerState) => {
    const {
      classes,
      color: color2,
      disabled,
      error,
      endAdornment,
      focused,
      formControl,
      fullWidth,
      hiddenLabel,
      multiline,
      readOnly,
      size,
      startAdornment,
      type
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize(color2)}`, disabled && "disabled", error && "error", fullWidth && "fullWidth", focused && "focused", formControl && "formControl", size === "small" && "sizeSmall", multiline && "multiline", startAdornment && "adornedStart", endAdornment && "adornedEnd", hiddenLabel && "hiddenLabel", readOnly && "readOnly"],
      input: ["input", disabled && "disabled", type === "search" && "inputTypeSearch", multiline && "inputMultiline", size === "small" && "inputSizeSmall", hiddenLabel && "inputHiddenLabel", startAdornment && "inputAdornedStart", endAdornment && "inputAdornedEnd", readOnly && "readOnly"]
    };
    return composeClasses(slots, getInputBaseUtilityClass, classes);
  };
  const InputBaseRoot = styled("div", {
    name: "MuiInputBase",
    slot: "Root",
    overridesResolver: rootOverridesResolver
  })(({
    theme,
    ownerState
  }) => _extends$2({}, theme.typography.body1, {
    color: (theme.vars || theme).palette.text.primary,
    lineHeight: "1.4375em",
    // 23px
    boxSizing: "border-box",
    // Prevent padding issue with fullWidth.
    position: "relative",
    cursor: "text",
    display: "inline-flex",
    alignItems: "center",
    [`&.${inputBaseClasses.disabled}`]: {
      color: (theme.vars || theme).palette.text.disabled,
      cursor: "default"
    }
  }, ownerState.multiline && _extends$2({
    padding: "4px 0 5px"
  }, ownerState.size === "small" && {
    paddingTop: 1
  }), ownerState.fullWidth && {
    width: "100%"
  }));
  const InputBaseComponent = styled("input", {
    name: "MuiInputBase",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(({
    theme,
    ownerState
  }) => {
    const light2 = theme.palette.mode === "light";
    const placeholder = _extends$2({
      color: "currentColor"
    }, theme.vars ? {
      opacity: theme.vars.opacity.inputPlaceholder
    } : {
      opacity: light2 ? 0.42 : 0.5
    }, {
      transition: theme.transitions.create("opacity", {
        duration: theme.transitions.duration.shorter
      })
    });
    const placeholderHidden = {
      opacity: "0 !important"
    };
    const placeholderVisible = theme.vars ? {
      opacity: theme.vars.opacity.inputPlaceholder
    } : {
      opacity: light2 ? 0.42 : 0.5
    };
    return _extends$2({
      font: "inherit",
      letterSpacing: "inherit",
      color: "currentColor",
      padding: "4px 0 5px",
      border: 0,
      boxSizing: "content-box",
      background: "none",
      height: "1.4375em",
      // Reset 23pxthe native input line-height
      margin: 0,
      // Reset for Safari
      WebkitTapHighlightColor: "transparent",
      display: "block",
      // Make the flex item shrink with Firefox
      minWidth: 0,
      width: "100%",
      // Fix IE11 width issue
      animationName: "mui-auto-fill-cancel",
      animationDuration: "10ms",
      "&::-webkit-input-placeholder": placeholder,
      "&::-moz-placeholder": placeholder,
      // Firefox 19+
      "&:-ms-input-placeholder": placeholder,
      // IE11
      "&::-ms-input-placeholder": placeholder,
      // Edge
      "&:focus": {
        outline: 0
      },
      // Reset Firefox invalid required input style
      "&:invalid": {
        boxShadow: "none"
      },
      "&::-webkit-search-decoration": {
        // Remove the padding when type=search.
        WebkitAppearance: "none"
      },
      // Show and hide the placeholder logic
      [`label[data-shrink=false] + .${inputBaseClasses.formControl} &`]: {
        "&::-webkit-input-placeholder": placeholderHidden,
        "&::-moz-placeholder": placeholderHidden,
        // Firefox 19+
        "&:-ms-input-placeholder": placeholderHidden,
        // IE11
        "&::-ms-input-placeholder": placeholderHidden,
        // Edge
        "&:focus::-webkit-input-placeholder": placeholderVisible,
        "&:focus::-moz-placeholder": placeholderVisible,
        // Firefox 19+
        "&:focus:-ms-input-placeholder": placeholderVisible,
        // IE11
        "&:focus::-ms-input-placeholder": placeholderVisible
        // Edge
      },
      [`&.${inputBaseClasses.disabled}`]: {
        opacity: 1,
        // Reset iOS opacity
        WebkitTextFillColor: (theme.vars || theme).palette.text.disabled
        // Fix opacity Safari bug
      },
      "&:-webkit-autofill": {
        animationDuration: "5000s",
        animationName: "mui-auto-fill"
      }
    }, ownerState.size === "small" && {
      paddingTop: 1
    }, ownerState.multiline && {
      height: "auto",
      resize: "none",
      padding: 0,
      paddingTop: 0
    }, ownerState.type === "search" && {
      // Improve type search style.
      MozAppearance: "textfield"
    });
  });
  const inputGlobalStyles = /* @__PURE__ */ jsxRuntimeExports.jsx(GlobalStyles, {
    styles: {
      "@keyframes mui-auto-fill": {
        from: {
          display: "block"
        }
      },
      "@keyframes mui-auto-fill-cancel": {
        from: {
          display: "block"
        }
      }
    }
  });
  const InputBase = /* @__PURE__ */ React__namespace.forwardRef(function InputBase2(inProps, ref) {
    var _slotProps$input;
    const props = useThemeProps({
      props: inProps,
      name: "MuiInputBase"
    });
    const {
      "aria-describedby": ariaDescribedby,
      autoComplete,
      autoFocus,
      className,
      components = {},
      componentsProps = {},
      defaultValue,
      disabled,
      disableInjectingGlobalStyles,
      endAdornment,
      fullWidth = false,
      id,
      inputComponent = "input",
      inputProps: inputPropsProp = {},
      inputRef: inputRefProp,
      maxRows,
      minRows,
      multiline = false,
      name,
      onBlur,
      onChange,
      onClick,
      onFocus,
      onKeyDown,
      onKeyUp,
      placeholder,
      readOnly,
      renderSuffix,
      rows,
      slotProps = {},
      slots = {},
      startAdornment,
      type = "text",
      value: valueProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$z);
    const value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;
    const {
      current: isControlled
    } = React__namespace.useRef(value != null);
    const inputRef = React__namespace.useRef();
    const handleInputRefWarning = React__namespace.useCallback((instance) => {
      if (process.env.NODE_ENV !== "production") {
        if (instance && instance.nodeName !== "INPUT" && !instance.focus) {
          console.error(["MUI: You have provided a `inputComponent` to the input component", "that does not correctly handle the `ref` prop.", "Make sure the `ref` prop is called with a HTMLInputElement."].join("\n"));
        }
      }
    }, []);
    const handleInputRef = useForkRef(inputRef, inputRefProp, inputPropsProp.ref, handleInputRefWarning);
    const [focused, setFocused] = React__namespace.useState(false);
    const muiFormControl = useFormControl();
    if (process.env.NODE_ENV !== "production") {
      React__namespace.useEffect(() => {
        if (muiFormControl) {
          return muiFormControl.registerEffect();
        }
        return void 0;
      }, [muiFormControl]);
    }
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "disabled", "error", "hiddenLabel", "size", "required", "filled"]
    });
    fcs.focused = muiFormControl ? muiFormControl.focused : focused;
    React__namespace.useEffect(() => {
      if (!muiFormControl && disabled && focused) {
        setFocused(false);
        if (onBlur) {
          onBlur();
        }
      }
    }, [muiFormControl, disabled, focused, onBlur]);
    const onFilled = muiFormControl && muiFormControl.onFilled;
    const onEmpty = muiFormControl && muiFormControl.onEmpty;
    const checkDirty = React__namespace.useCallback((obj) => {
      if (isFilled(obj)) {
        if (onFilled) {
          onFilled();
        }
      } else if (onEmpty) {
        onEmpty();
      }
    }, [onFilled, onEmpty]);
    useEnhancedEffect(() => {
      if (isControlled) {
        checkDirty({
          value
        });
      }
    }, [value, checkDirty, isControlled]);
    const handleFocus = (event) => {
      if (fcs.disabled) {
        event.stopPropagation();
        return;
      }
      if (onFocus) {
        onFocus(event);
      }
      if (inputPropsProp.onFocus) {
        inputPropsProp.onFocus(event);
      }
      if (muiFormControl && muiFormControl.onFocus) {
        muiFormControl.onFocus(event);
      } else {
        setFocused(true);
      }
    };
    const handleBlur2 = (event) => {
      if (onBlur) {
        onBlur(event);
      }
      if (inputPropsProp.onBlur) {
        inputPropsProp.onBlur(event);
      }
      if (muiFormControl && muiFormControl.onBlur) {
        muiFormControl.onBlur(event);
      } else {
        setFocused(false);
      }
    };
    const handleChange = (event, ...args) => {
      if (!isControlled) {
        const element = event.target || inputRef.current;
        if (element == null) {
          throw new Error(process.env.NODE_ENV !== "production" ? `MUI: Expected valid input target. Did you use a custom \`inputComponent\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` : formatMuiErrorMessage(1));
        }
        checkDirty({
          value: element.value
        });
      }
      if (inputPropsProp.onChange) {
        inputPropsProp.onChange(event, ...args);
      }
      if (onChange) {
        onChange(event, ...args);
      }
    };
    React__namespace.useEffect(() => {
      checkDirty(inputRef.current);
    }, []);
    const handleClick = (event) => {
      if (inputRef.current && event.currentTarget === event.target) {
        inputRef.current.focus();
      }
      if (onClick) {
        onClick(event);
      }
    };
    let InputComponent = inputComponent;
    let inputProps = inputPropsProp;
    if (multiline && InputComponent === "input") {
      if (rows) {
        if (process.env.NODE_ENV !== "production") {
          if (minRows || maxRows) {
            console.warn("MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.");
          }
        }
        inputProps = _extends$2({
          type: void 0,
          minRows: rows,
          maxRows: rows
        }, inputProps);
      } else {
        inputProps = _extends$2({
          type: void 0,
          maxRows,
          minRows
        }, inputProps);
      }
      InputComponent = TextareaAutosize;
    }
    const handleAutoFill = (event) => {
      checkDirty(event.animationName === "mui-auto-fill-cancel" ? inputRef.current : {
        value: "x"
      });
    };
    React__namespace.useEffect(() => {
      if (muiFormControl) {
        muiFormControl.setAdornedStart(Boolean(startAdornment));
      }
    }, [muiFormControl, startAdornment]);
    const ownerState = _extends$2({}, props, {
      color: fcs.color || "primary",
      disabled: fcs.disabled,
      endAdornment,
      error: fcs.error,
      focused: fcs.focused,
      formControl: muiFormControl,
      fullWidth,
      hiddenLabel: fcs.hiddenLabel,
      multiline,
      size: fcs.size,
      startAdornment,
      type
    });
    const classes = useUtilityClasses$w(ownerState);
    const Root = slots.root || components.Root || InputBaseRoot;
    const rootProps = slotProps.root || componentsProps.root || {};
    const Input2 = slots.input || components.Input || InputBaseComponent;
    inputProps = _extends$2({}, inputProps, (_slotProps$input = slotProps.input) != null ? _slotProps$input : componentsProps.input);
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(React__namespace.Fragment, {
      children: [!disableInjectingGlobalStyles && inputGlobalStyles, /* @__PURE__ */ jsxRuntimeExports.jsxs(Root, _extends$2({}, rootProps, !isHostComponent(Root) && {
        ownerState: _extends$2({}, ownerState, rootProps.ownerState)
      }, {
        ref,
        onClick: handleClick
      }, other, {
        className: clsx$1(classes.root, rootProps.className, className),
        children: [startAdornment, /* @__PURE__ */ jsxRuntimeExports.jsx(FormControlContext.Provider, {
          value: null,
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(Input2, _extends$2({
            ownerState,
            "aria-invalid": fcs.error,
            "aria-describedby": ariaDescribedby,
            autoComplete,
            autoFocus,
            defaultValue,
            disabled: fcs.disabled,
            id,
            onAnimationStart: handleAutoFill,
            name,
            placeholder,
            readOnly,
            required: fcs.required,
            rows,
            value,
            onKeyDown,
            onKeyUp,
            type
          }, inputProps, !isHostComponent(Input2) && {
            as: InputComponent,
            ownerState: _extends$2({}, ownerState, inputProps.ownerState)
          }, {
            ref: handleInputRef,
            className: clsx$1(classes.input, inputProps.className),
            onBlur: handleBlur2,
            onChange: handleChange,
            onFocus: handleFocus
          }))
        }), endAdornment, renderSuffix ? renderSuffix(_extends$2({}, fcs, {
          startAdornment
        })) : null]
      }))]
    });
  });
  process.env.NODE_ENV !== "production" ? InputBase.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    "aria-describedby": PropTypes.string,
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: PropTypes.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: PropTypes.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), PropTypes.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: PropTypes.shape({
      Input: PropTypes.elementType,
      Root: PropTypes.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: PropTypes.shape({
      input: PropTypes.object,
      root: PropTypes.object
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: PropTypes.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, GlobalStyles for the auto-fill keyframes will not be injected/removed on mount/unmount. Make sure to inject them at the top of your application.
     * This option is intended to help with boosting the initial rendering performance if you are loading a big amount of Input components at once.
     * @default false
     */
    disableInjectingGlobalStyles: PropTypes.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: PropTypes.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: PropTypes.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: PropTypes.bool,
    /**
     * The id of the `input` element.
     */
    id: PropTypes.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: elementTypeAcceptingRef$1,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: PropTypes.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: PropTypes.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: PropTypes.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: PropTypes.string,
    /**
     * Callback fired when the `input` is blurred.
     *
     * Notice that the first argument (event) might be undefined.
     */
    onBlur: PropTypes.func,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: PropTypes.func,
    /**
     * @ignore
     */
    onClick: PropTypes.func,
    /**
     * @ignore
     */
    onFocus: PropTypes.func,
    /**
     * Callback fired when the `input` doesn't satisfy its constraints.
     */
    onInvalid: PropTypes.func,
    /**
     * @ignore
     */
    onKeyDown: PropTypes.func,
    /**
     * @ignore
     */
    onKeyUp: PropTypes.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: PropTypes.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: PropTypes.bool,
    /**
     * @ignore
     */
    renderSuffix: PropTypes.func,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: PropTypes.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * The size of the component.
     */
    size: PropTypes.oneOfType([PropTypes.oneOf(["medium", "small"]), PropTypes.string]),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: PropTypes.shape({
      input: PropTypes.object,
      root: PropTypes.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: PropTypes.shape({
      input: PropTypes.elementType,
      root: PropTypes.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: PropTypes.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: PropTypes.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: PropTypes.any
  } : void 0;
  function getInputUtilityClass(slot) {
    return generateUtilityClass("MuiInput", slot);
  }
  const inputClasses = _extends$2({}, inputBaseClasses, generateUtilityClasses("MuiInput", ["root", "underline", "input"]));
  const _excluded$y = ["disableUnderline", "components", "componentsProps", "fullWidth", "inputComponent", "multiline", "slotProps", "slots", "type"];
  const useUtilityClasses$v = (ownerState) => {
    const {
      classes,
      disableUnderline
    } = ownerState;
    const slots = {
      root: ["root", !disableUnderline && "underline"],
      input: ["input"]
    };
    const composedClasses = composeClasses(slots, getInputUtilityClass, classes);
    return _extends$2({}, classes, composedClasses);
  };
  const InputRoot = styled(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiInput",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [...rootOverridesResolver(props, styles2), !ownerState.disableUnderline && styles2.underline];
    }
  })(({
    theme,
    ownerState
  }) => {
    const light2 = theme.palette.mode === "light";
    let bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
    if (theme.vars) {
      bottomLineColor = `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})`;
    }
    return _extends$2({
      position: "relative"
    }, ownerState.formControl && {
      "label + &": {
        marginTop: 16
      }
    }, !ownerState.disableUnderline && {
      "&:after": {
        borderBottom: `2px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '""',
        position: "absolute",
        right: 0,
        transform: "scaleX(0)",
        transition: theme.transitions.create("transform", {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut
        }),
        pointerEvents: "none"
        // Transparent to the hover style.
      },
      [`&.${inputClasses.focused}:after`]: {
        // translateX(0) is a workaround for Safari transform scale bug
        // See https://github.com/mui/material-ui/issues/31766
        transform: "scaleX(1) translateX(0)"
      },
      [`&.${inputClasses.error}`]: {
        "&:before, &:after": {
          borderBottomColor: (theme.vars || theme).palette.error.main
        }
      },
      "&:before": {
        borderBottom: `1px solid ${bottomLineColor}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '"\\00a0"',
        position: "absolute",
        right: 0,
        transition: theme.transitions.create("border-bottom-color", {
          duration: theme.transitions.duration.shorter
        }),
        pointerEvents: "none"
        // Transparent to the hover style.
      },
      [`&:hover:not(.${inputClasses.disabled}, .${inputClasses.error}):before`]: {
        borderBottom: `2px solid ${(theme.vars || theme).palette.text.primary}`,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          borderBottom: `1px solid ${bottomLineColor}`
        }
      },
      [`&.${inputClasses.disabled}:before`]: {
        borderBottomStyle: "dotted"
      }
    });
  });
  const InputInput = styled(InputBaseComponent, {
    name: "MuiInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })({});
  const Input = /* @__PURE__ */ React__namespace.forwardRef(function Input2(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$input;
    const props = useThemeProps({
      props: inProps,
      name: "MuiInput"
    });
    const {
      disableUnderline,
      components = {},
      componentsProps: componentsPropsProp,
      fullWidth = false,
      inputComponent = "input",
      multiline = false,
      slotProps,
      slots = {},
      type = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$y);
    const classes = useUtilityClasses$v(props);
    const ownerState = {
      disableUnderline
    };
    const inputComponentsProps = {
      root: {
        ownerState
      }
    };
    const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? deepmerge(slotProps != null ? slotProps : componentsPropsProp, inputComponentsProps) : inputComponentsProps;
    const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : InputRoot;
    const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : InputInput;
    return /* @__PURE__ */ jsxRuntimeExports.jsx(InputBase, _extends$2({
      slots: {
        root: RootSlot,
        input: InputSlot
      },
      slotProps: componentsProps,
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other, {
      classes
    }));
  });
  process.env.NODE_ENV !== "production" ? Input.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: PropTypes.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: PropTypes.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["primary", "secondary"]), PropTypes.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: PropTypes.shape({
      Input: PropTypes.elementType,
      Root: PropTypes.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: PropTypes.shape({
      input: PropTypes.object,
      root: PropTypes.object
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: PropTypes.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the `input` will not have an underline.
     */
    disableUnderline: PropTypes.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: PropTypes.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: PropTypes.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: PropTypes.bool,
    /**
     * The id of the `input` element.
     */
    id: PropTypes.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: PropTypes.elementType,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: PropTypes.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: PropTypes.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: PropTypes.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: PropTypes.string,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: PropTypes.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: PropTypes.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: PropTypes.bool,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: PropTypes.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: PropTypes.shape({
      input: PropTypes.object,
      root: PropTypes.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: PropTypes.shape({
      input: PropTypes.elementType,
      root: PropTypes.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: PropTypes.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: PropTypes.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: PropTypes.any
  } : void 0;
  Input.muiName = "Input";
  function getFilledInputUtilityClass(slot) {
    return generateUtilityClass("MuiFilledInput", slot);
  }
  const filledInputClasses = _extends$2({}, inputBaseClasses, generateUtilityClasses("MuiFilledInput", ["root", "underline", "input"]));
  const _excluded$x = ["disableUnderline", "components", "componentsProps", "fullWidth", "hiddenLabel", "inputComponent", "multiline", "slotProps", "slots", "type"];
  const useUtilityClasses$u = (ownerState) => {
    const {
      classes,
      disableUnderline
    } = ownerState;
    const slots = {
      root: ["root", !disableUnderline && "underline"],
      input: ["input"]
    };
    const composedClasses = composeClasses(slots, getFilledInputUtilityClass, classes);
    return _extends$2({}, classes, composedClasses);
  };
  const FilledInputRoot = styled(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiFilledInput",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [...rootOverridesResolver(props, styles2), !ownerState.disableUnderline && styles2.underline];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _palette;
    const light2 = theme.palette.mode === "light";
    const bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
    const backgroundColor2 = light2 ? "rgba(0, 0, 0, 0.06)" : "rgba(255, 255, 255, 0.09)";
    const hoverBackground = light2 ? "rgba(0, 0, 0, 0.09)" : "rgba(255, 255, 255, 0.13)";
    const disabledBackground = light2 ? "rgba(0, 0, 0, 0.12)" : "rgba(255, 255, 255, 0.12)";
    return _extends$2({
      position: "relative",
      backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor2,
      borderTopLeftRadius: (theme.vars || theme).shape.borderRadius,
      borderTopRightRadius: (theme.vars || theme).shape.borderRadius,
      transition: theme.transitions.create("background-color", {
        duration: theme.transitions.duration.shorter,
        easing: theme.transitions.easing.easeOut
      }),
      "&:hover": {
        backgroundColor: theme.vars ? theme.vars.palette.FilledInput.hoverBg : hoverBackground,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor2
        }
      },
      [`&.${filledInputClasses.focused}`]: {
        backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor2
      },
      [`&.${filledInputClasses.disabled}`]: {
        backgroundColor: theme.vars ? theme.vars.palette.FilledInput.disabledBg : disabledBackground
      }
    }, !ownerState.disableUnderline && {
      "&:after": {
        borderBottom: `2px solid ${(_palette = (theme.vars || theme).palette[ownerState.color || "primary"]) == null ? void 0 : _palette.main}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '""',
        position: "absolute",
        right: 0,
        transform: "scaleX(0)",
        transition: theme.transitions.create("transform", {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut
        }),
        pointerEvents: "none"
        // Transparent to the hover style.
      },
      [`&.${filledInputClasses.focused}:after`]: {
        // translateX(0) is a workaround for Safari transform scale bug
        // See https://github.com/mui/material-ui/issues/31766
        transform: "scaleX(1) translateX(0)"
      },
      [`&.${filledInputClasses.error}`]: {
        "&:before, &:after": {
          borderBottomColor: (theme.vars || theme).palette.error.main
        }
      },
      "&:before": {
        borderBottom: `1px solid ${theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})` : bottomLineColor}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '"\\00a0"',
        position: "absolute",
        right: 0,
        transition: theme.transitions.create("border-bottom-color", {
          duration: theme.transitions.duration.shorter
        }),
        pointerEvents: "none"
        // Transparent to the hover style.
      },
      [`&:hover:not(.${filledInputClasses.disabled}, .${filledInputClasses.error}):before`]: {
        borderBottom: `1px solid ${(theme.vars || theme).palette.text.primary}`
      },
      [`&.${filledInputClasses.disabled}:before`]: {
        borderBottomStyle: "dotted"
      }
    }, ownerState.startAdornment && {
      paddingLeft: 12
    }, ownerState.endAdornment && {
      paddingRight: 12
    }, ownerState.multiline && _extends$2({
      padding: "25px 12px 8px"
    }, ownerState.size === "small" && {
      paddingTop: 21,
      paddingBottom: 4
    }, ownerState.hiddenLabel && {
      paddingTop: 16,
      paddingBottom: 17
    }));
  });
  const FilledInputInput = styled(InputBaseComponent, {
    name: "MuiFilledInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(({
    theme,
    ownerState
  }) => _extends$2({
    paddingTop: 25,
    paddingRight: 12,
    paddingBottom: 8,
    paddingLeft: 12
  }, !theme.vars && {
    "&:-webkit-autofill": {
      WebkitBoxShadow: theme.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
      WebkitTextFillColor: theme.palette.mode === "light" ? null : "#fff",
      caretColor: theme.palette.mode === "light" ? null : "#fff",
      borderTopLeftRadius: "inherit",
      borderTopRightRadius: "inherit"
    }
  }, theme.vars && {
    "&:-webkit-autofill": {
      borderTopLeftRadius: "inherit",
      borderTopRightRadius: "inherit"
    },
    [theme.getColorSchemeSelector("dark")]: {
      "&:-webkit-autofill": {
        WebkitBoxShadow: "0 0 0 100px #266798 inset",
        WebkitTextFillColor: "#fff",
        caretColor: "#fff"
      }
    }
  }, ownerState.size === "small" && {
    paddingTop: 21,
    paddingBottom: 4
  }, ownerState.hiddenLabel && {
    paddingTop: 16,
    paddingBottom: 17
  }, ownerState.multiline && {
    paddingTop: 0,
    paddingBottom: 0,
    paddingLeft: 0,
    paddingRight: 0
  }, ownerState.startAdornment && {
    paddingLeft: 0
  }, ownerState.endAdornment && {
    paddingRight: 0
  }, ownerState.hiddenLabel && ownerState.size === "small" && {
    paddingTop: 8,
    paddingBottom: 9
  }));
  const FilledInput = /* @__PURE__ */ React__namespace.forwardRef(function FilledInput2(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$input;
    const props = useThemeProps({
      props: inProps,
      name: "MuiFilledInput"
    });
    const {
      components = {},
      componentsProps: componentsPropsProp,
      fullWidth = false,
      // declare here to prevent spreading to DOM
      inputComponent = "input",
      multiline = false,
      slotProps,
      slots = {},
      type = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$x);
    const ownerState = _extends$2({}, props, {
      fullWidth,
      inputComponent,
      multiline,
      type
    });
    const classes = useUtilityClasses$u(props);
    const filledInputComponentsProps = {
      root: {
        ownerState
      },
      input: {
        ownerState
      }
    };
    const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? deepmerge(slotProps != null ? slotProps : componentsPropsProp, filledInputComponentsProps) : filledInputComponentsProps;
    const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : FilledInputRoot;
    const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : FilledInputInput;
    return /* @__PURE__ */ jsxRuntimeExports.jsx(InputBase, _extends$2({
      slots: {
        root: RootSlot,
        input: InputSlot
      },
      componentsProps,
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other, {
      classes
    }));
  });
  process.env.NODE_ENV !== "production" ? FilledInput.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: PropTypes.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: PropTypes.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["primary", "secondary"]), PropTypes.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: PropTypes.shape({
      Input: PropTypes.elementType,
      Root: PropTypes.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: PropTypes.shape({
      input: PropTypes.object,
      root: PropTypes.object
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: PropTypes.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the input will not have an underline.
     */
    disableUnderline: PropTypes.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: PropTypes.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: PropTypes.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: PropTypes.bool,
    /**
     * If `true`, the label is hidden.
     * This is used to increase density for a `FilledInput`.
     * Be sure to add `aria-label` to the `input` element.
     * @default false
     */
    hiddenLabel: PropTypes.bool,
    /**
     * The id of the `input` element.
     */
    id: PropTypes.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: PropTypes.elementType,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: PropTypes.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: PropTypes.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: PropTypes.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: PropTypes.string,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: PropTypes.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: PropTypes.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: PropTypes.bool,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: PropTypes.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: PropTypes.shape({
      input: PropTypes.object,
      root: PropTypes.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: PropTypes.shape({
      input: PropTypes.elementType,
      root: PropTypes.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: PropTypes.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: PropTypes.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: PropTypes.any
  } : void 0;
  FilledInput.muiName = "Input";
  var _span$2;
  const _excluded$w = ["children", "classes", "className", "label", "notched"];
  const NotchedOutlineRoot$1 = styled("fieldset")({
    textAlign: "left",
    position: "absolute",
    bottom: 0,
    right: 0,
    top: -5,
    left: 0,
    margin: 0,
    padding: "0 8px",
    pointerEvents: "none",
    borderRadius: "inherit",
    borderStyle: "solid",
    borderWidth: 1,
    overflow: "hidden",
    minWidth: "0%"
  });
  const NotchedOutlineLegend = styled("legend")(({
    ownerState,
    theme
  }) => _extends$2({
    float: "unset",
    // Fix conflict with bootstrap
    width: "auto",
    // Fix conflict with bootstrap
    overflow: "hidden"
  }, !ownerState.withLabel && {
    padding: 0,
    lineHeight: "11px",
    // sync with `height` in `legend` styles
    transition: theme.transitions.create("width", {
      duration: 150,
      easing: theme.transitions.easing.easeOut
    })
  }, ownerState.withLabel && _extends$2({
    display: "block",
    // Fix conflict with normalize.css and sanitize.css
    padding: 0,
    height: 11,
    // sync with `lineHeight` in `legend` styles
    fontSize: "0.75em",
    visibility: "hidden",
    maxWidth: 0.01,
    transition: theme.transitions.create("max-width", {
      duration: 50,
      easing: theme.transitions.easing.easeOut
    }),
    whiteSpace: "nowrap",
    "& > span": {
      paddingLeft: 5,
      paddingRight: 5,
      display: "inline-block",
      opacity: 0,
      visibility: "visible"
    }
  }, ownerState.notched && {
    maxWidth: "100%",
    transition: theme.transitions.create("max-width", {
      duration: 100,
      easing: theme.transitions.easing.easeOut,
      delay: 50
    })
  })));
  function NotchedOutline(props) {
    const {
      className,
      label,
      notched
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$w);
    const withLabel = label != null && label !== "";
    const ownerState = _extends$2({}, props, {
      notched,
      withLabel
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(NotchedOutlineRoot$1, _extends$2({
      "aria-hidden": true,
      className,
      ownerState
    }, other, {
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(NotchedOutlineLegend, {
        ownerState,
        children: withLabel ? /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
          children: label
        }) : (
          // notranslate needed while Google Translate will not fix zero-width space issue
          _span$2 || (_span$2 = /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
            className: "notranslate",
            children: "​"
          }))
        )
      })
    }));
  }
  process.env.NODE_ENV !== "production" ? NotchedOutline.propTypes = {
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     * See [CSS API](#css) below for more details.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The label.
     */
    label: PropTypes.node,
    /**
     * If `true`, the outline is notched to accommodate the label.
     */
    notched: PropTypes.bool.isRequired,
    /**
     * @ignore
     */
    style: PropTypes.object
  } : void 0;
  function getOutlinedInputUtilityClass(slot) {
    return generateUtilityClass("MuiOutlinedInput", slot);
  }
  const outlinedInputClasses = _extends$2({}, inputBaseClasses, generateUtilityClasses("MuiOutlinedInput", ["root", "notchedOutline", "input"]));
  const _excluded$v = ["components", "fullWidth", "inputComponent", "label", "multiline", "notched", "slots", "type"];
  const useUtilityClasses$t = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      notchedOutline: ["notchedOutline"],
      input: ["input"]
    };
    const composedClasses = composeClasses(slots, getOutlinedInputUtilityClass, classes);
    return _extends$2({}, classes, composedClasses);
  };
  const OutlinedInputRoot = styled(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiOutlinedInput",
    slot: "Root",
    overridesResolver: rootOverridesResolver
  })(({
    theme,
    ownerState
  }) => {
    const borderColor2 = theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
    return _extends$2({
      position: "relative",
      borderRadius: (theme.vars || theme).shape.borderRadius,
      [`&:hover .${outlinedInputClasses.notchedOutline}`]: {
        borderColor: (theme.vars || theme).palette.text.primary
      },
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        [`&:hover .${outlinedInputClasses.notchedOutline}`]: {
          borderColor: theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor2
        }
      },
      [`&.${outlinedInputClasses.focused} .${outlinedInputClasses.notchedOutline}`]: {
        borderColor: (theme.vars || theme).palette[ownerState.color].main,
        borderWidth: 2
      },
      [`&.${outlinedInputClasses.error} .${outlinedInputClasses.notchedOutline}`]: {
        borderColor: (theme.vars || theme).palette.error.main
      },
      [`&.${outlinedInputClasses.disabled} .${outlinedInputClasses.notchedOutline}`]: {
        borderColor: (theme.vars || theme).palette.action.disabled
      }
    }, ownerState.startAdornment && {
      paddingLeft: 14
    }, ownerState.endAdornment && {
      paddingRight: 14
    }, ownerState.multiline && _extends$2({
      padding: "16.5px 14px"
    }, ownerState.size === "small" && {
      padding: "8.5px 14px"
    }));
  });
  const NotchedOutlineRoot = styled(NotchedOutline, {
    name: "MuiOutlinedInput",
    slot: "NotchedOutline",
    overridesResolver: (props, styles2) => styles2.notchedOutline
  })(({
    theme
  }) => {
    const borderColor2 = theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
    return {
      borderColor: theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor2
    };
  });
  const OutlinedInputInput = styled(InputBaseComponent, {
    name: "MuiOutlinedInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(({
    theme,
    ownerState
  }) => _extends$2({
    padding: "16.5px 14px"
  }, !theme.vars && {
    "&:-webkit-autofill": {
      WebkitBoxShadow: theme.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
      WebkitTextFillColor: theme.palette.mode === "light" ? null : "#fff",
      caretColor: theme.palette.mode === "light" ? null : "#fff",
      borderRadius: "inherit"
    }
  }, theme.vars && {
    "&:-webkit-autofill": {
      borderRadius: "inherit"
    },
    [theme.getColorSchemeSelector("dark")]: {
      "&:-webkit-autofill": {
        WebkitBoxShadow: "0 0 0 100px #266798 inset",
        WebkitTextFillColor: "#fff",
        caretColor: "#fff"
      }
    }
  }, ownerState.size === "small" && {
    padding: "8.5px 14px"
  }, ownerState.multiline && {
    padding: 0
  }, ownerState.startAdornment && {
    paddingLeft: 0
  }, ownerState.endAdornment && {
    paddingRight: 0
  }));
  const OutlinedInput = /* @__PURE__ */ React__namespace.forwardRef(function OutlinedInput2(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$input, _React$Fragment;
    const props = useThemeProps({
      props: inProps,
      name: "MuiOutlinedInput"
    });
    const {
      components = {},
      fullWidth = false,
      inputComponent = "input",
      label,
      multiline = false,
      notched,
      slots = {},
      type = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$v);
    const classes = useUtilityClasses$t(props);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["required"]
    });
    const ownerState = _extends$2({}, props, {
      color: fcs.color || "primary",
      disabled: fcs.disabled,
      error: fcs.error,
      focused: fcs.focused,
      formControl: muiFormControl,
      fullWidth,
      hiddenLabel: fcs.hiddenLabel,
      multiline,
      size: fcs.size,
      type
    });
    const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : OutlinedInputRoot;
    const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : OutlinedInputInput;
    return /* @__PURE__ */ jsxRuntimeExports.jsx(InputBase, _extends$2({
      slots: {
        root: RootSlot,
        input: InputSlot
      },
      renderSuffix: (state) => /* @__PURE__ */ jsxRuntimeExports.jsx(NotchedOutlineRoot, {
        ownerState,
        className: classes.notchedOutline,
        label: label != null && label !== "" && fcs.required ? _React$Fragment || (_React$Fragment = /* @__PURE__ */ jsxRuntimeExports.jsxs(React__namespace.Fragment, {
          children: [label, " ", "*"]
        })) : label,
        notched: typeof notched !== "undefined" ? notched : Boolean(state.startAdornment || state.filled || state.focused)
      }),
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other, {
      classes: _extends$2({}, classes, {
        notchedOutline: null
      })
    }));
  });
  process.env.NODE_ENV !== "production" ? OutlinedInput.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: PropTypes.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: PropTypes.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["primary", "secondary"]), PropTypes.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: PropTypes.shape({
      Input: PropTypes.elementType,
      Root: PropTypes.elementType
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: PropTypes.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: PropTypes.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: PropTypes.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: PropTypes.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: PropTypes.bool,
    /**
     * The id of the `input` element.
     */
    id: PropTypes.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: PropTypes.elementType,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: PropTypes.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType,
    /**
     * The label of the `input`. It is only used for layout. The actual labelling
     * is handled by `InputLabel`.
     */
    label: PropTypes.node,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: PropTypes.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: PropTypes.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: PropTypes.string,
    /**
     * If `true`, the outline is notched to accommodate the label.
     */
    notched: PropTypes.bool,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: PropTypes.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: PropTypes.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: PropTypes.bool,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: PropTypes.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: PropTypes.shape({
      input: PropTypes.elementType,
      root: PropTypes.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: PropTypes.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: PropTypes.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: PropTypes.any
  } : void 0;
  OutlinedInput.muiName = "Input";
  function getFormLabelUtilityClasses(slot) {
    return generateUtilityClass("MuiFormLabel", slot);
  }
  const formLabelClasses = generateUtilityClasses("MuiFormLabel", ["root", "colorSecondary", "focused", "disabled", "error", "filled", "required", "asterisk"]);
  const _excluded$u = ["children", "className", "color", "component", "disabled", "error", "filled", "focused", "required"];
  const useUtilityClasses$s = (ownerState) => {
    const {
      classes,
      color: color2,
      focused,
      disabled,
      error,
      filled,
      required
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize(color2)}`, disabled && "disabled", error && "error", filled && "filled", focused && "focused", required && "required"],
      asterisk: ["asterisk", error && "error"]
    };
    return composeClasses(slots, getFormLabelUtilityClasses, classes);
  };
  const FormLabelRoot = styled("label", {
    name: "MuiFormLabel",
    slot: "Root",
    overridesResolver: ({
      ownerState
    }, styles2) => {
      return _extends$2({}, styles2.root, ownerState.color === "secondary" && styles2.colorSecondary, ownerState.filled && styles2.filled);
    }
  })(({
    theme,
    ownerState
  }) => _extends$2({
    color: (theme.vars || theme).palette.text.secondary
  }, theme.typography.body1, {
    lineHeight: "1.4375em",
    padding: 0,
    position: "relative",
    [`&.${formLabelClasses.focused}`]: {
      color: (theme.vars || theme).palette[ownerState.color].main
    },
    [`&.${formLabelClasses.disabled}`]: {
      color: (theme.vars || theme).palette.text.disabled
    },
    [`&.${formLabelClasses.error}`]: {
      color: (theme.vars || theme).palette.error.main
    }
  }));
  const AsteriskComponent = styled("span", {
    name: "MuiFormLabel",
    slot: "Asterisk",
    overridesResolver: (props, styles2) => styles2.asterisk
  })(({
    theme
  }) => ({
    [`&.${formLabelClasses.error}`]: {
      color: (theme.vars || theme).palette.error.main
    }
  }));
  const FormLabel = /* @__PURE__ */ React__namespace.forwardRef(function FormLabel2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiFormLabel"
    });
    const {
      children,
      className,
      component = "label"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$u);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "required", "focused", "disabled", "error", "filled"]
    });
    const ownerState = _extends$2({}, props, {
      color: fcs.color || "primary",
      component,
      disabled: fcs.disabled,
      error: fcs.error,
      filled: fcs.filled,
      focused: fcs.focused,
      required: fcs.required
    });
    const classes = useUtilityClasses$s(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(FormLabelRoot, _extends$2({
      as: component,
      ownerState,
      className: clsx$1(classes.root, className),
      ref
    }, other, {
      children: [children, fcs.required && /* @__PURE__ */ jsxRuntimeExports.jsxs(AsteriskComponent, {
        ownerState,
        "aria-hidden": true,
        className: classes.asterisk,
        children: [" ", "*"]
      })]
    }));
  });
  process.env.NODE_ENV !== "production" ? FormLabel.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), PropTypes.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, the label should be displayed in a disabled state.
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the label is displayed in an error state.
     */
    error: PropTypes.bool,
    /**
     * If `true`, the label should use filled classes key.
     */
    filled: PropTypes.bool,
    /**
     * If `true`, the input of this label is focused (used by `FormGroup` components).
     */
    focused: PropTypes.bool,
    /**
     * If `true`, the label will indicate that the `input` is required.
     */
    required: PropTypes.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  function getInputLabelUtilityClasses(slot) {
    return generateUtilityClass("MuiInputLabel", slot);
  }
  const inputLabelClasses = generateUtilityClasses("MuiInputLabel", ["root", "focused", "disabled", "error", "required", "asterisk", "formControl", "sizeSmall", "shrink", "animated", "standard", "filled", "outlined"]);
  const _excluded$t = ["disableAnimation", "margin", "shrink", "variant", "className"];
  const useUtilityClasses$r = (ownerState) => {
    const {
      classes,
      formControl,
      size,
      shrink,
      disableAnimation,
      variant,
      required
    } = ownerState;
    const slots = {
      root: ["root", formControl && "formControl", !disableAnimation && "animated", shrink && "shrink", size === "small" && "sizeSmall", variant],
      asterisk: [required && "asterisk"]
    };
    const composedClasses = composeClasses(slots, getInputLabelUtilityClasses, classes);
    return _extends$2({}, classes, composedClasses);
  };
  const InputLabelRoot = styled(FormLabel, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiInputLabel",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${formLabelClasses.asterisk}`]: styles2.asterisk
      }, styles2.root, ownerState.formControl && styles2.formControl, ownerState.size === "small" && styles2.sizeSmall, ownerState.shrink && styles2.shrink, !ownerState.disableAnimation && styles2.animated, styles2[ownerState.variant]];
    }
  })(({
    theme,
    ownerState
  }) => _extends$2({
    display: "block",
    transformOrigin: "top left",
    whiteSpace: "nowrap",
    overflow: "hidden",
    textOverflow: "ellipsis",
    maxWidth: "100%"
  }, ownerState.formControl && {
    position: "absolute",
    left: 0,
    top: 0,
    // slight alteration to spec spacing to match visual spec result
    transform: "translate(0, 20px) scale(1)"
  }, ownerState.size === "small" && {
    // Compensation for the `Input.inputSizeSmall` style.
    transform: "translate(0, 17px) scale(1)"
  }, ownerState.shrink && {
    transform: "translate(0, -1.5px) scale(0.75)",
    transformOrigin: "top left",
    maxWidth: "133%"
  }, !ownerState.disableAnimation && {
    transition: theme.transitions.create(["color", "transform", "max-width"], {
      duration: theme.transitions.duration.shorter,
      easing: theme.transitions.easing.easeOut
    })
  }, ownerState.variant === "filled" && _extends$2({
    // Chrome's autofill feature gives the input field a yellow background.
    // Since the input field is behind the label in the HTML tree,
    // the input field is drawn last and hides the label with an opaque background color.
    // zIndex: 1 will raise the label above opaque background-colors of input.
    zIndex: 1,
    pointerEvents: "none",
    transform: "translate(12px, 16px) scale(1)",
    maxWidth: "calc(100% - 24px)"
  }, ownerState.size === "small" && {
    transform: "translate(12px, 13px) scale(1)"
  }, ownerState.shrink && _extends$2({
    userSelect: "none",
    pointerEvents: "auto",
    transform: "translate(12px, 7px) scale(0.75)",
    maxWidth: "calc(133% - 24px)"
  }, ownerState.size === "small" && {
    transform: "translate(12px, 4px) scale(0.75)"
  })), ownerState.variant === "outlined" && _extends$2({
    // see comment above on filled.zIndex
    zIndex: 1,
    pointerEvents: "none",
    transform: "translate(14px, 16px) scale(1)",
    maxWidth: "calc(100% - 24px)"
  }, ownerState.size === "small" && {
    transform: "translate(14px, 9px) scale(1)"
  }, ownerState.shrink && {
    userSelect: "none",
    pointerEvents: "auto",
    maxWidth: "calc(133% - 24px)",
    transform: "translate(14px, -9px) scale(0.75)"
  })));
  const InputLabel = /* @__PURE__ */ React__namespace.forwardRef(function InputLabel2(inProps, ref) {
    const props = useThemeProps({
      name: "MuiInputLabel",
      props: inProps
    });
    const {
      disableAnimation = false,
      shrink: shrinkProp,
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$t);
    const muiFormControl = useFormControl();
    let shrink = shrinkProp;
    if (typeof shrink === "undefined" && muiFormControl) {
      shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
    }
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["size", "variant", "required"]
    });
    const ownerState = _extends$2({}, props, {
      disableAnimation,
      formControl: muiFormControl,
      shrink,
      size: fcs.size,
      variant: fcs.variant,
      required: fcs.required
    });
    const classes = useUtilityClasses$r(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(InputLabelRoot, _extends$2({
      "data-shrink": shrink,
      ownerState,
      ref,
      className: clsx$1(classes.root, className)
    }, other, {
      classes
    }));
  });
  process.env.NODE_ENV !== "production" ? InputLabel.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), PropTypes.string]),
    /**
     * If `true`, the transition animation is disabled.
     * @default false
     */
    disableAnimation: PropTypes.bool,
    /**
     * If `true`, the component is disabled.
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the label is displayed in an error state.
     */
    error: PropTypes.bool,
    /**
     * If `true`, the `input` of this label is focused.
     */
    focused: PropTypes.bool,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     */
    margin: PropTypes.oneOf(["dense"]),
    /**
     * if `true`, the label will indicate that the `input` is required.
     */
    required: PropTypes.bool,
    /**
     * If `true`, the label is shrunk.
     */
    shrink: PropTypes.bool,
    /**
     * The size of the component.
     * @default 'normal'
     */
    size: PropTypes.oneOfType([PropTypes.oneOf(["normal", "small"]), PropTypes.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The variant to use.
     */
    variant: PropTypes.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  function getFormControlUtilityClasses(slot) {
    return generateUtilityClass("MuiFormControl", slot);
  }
  const formControlClasses = generateUtilityClasses("MuiFormControl", ["root", "marginNone", "marginNormal", "marginDense", "fullWidth", "disabled"]);
  const _excluded$s = ["children", "className", "color", "component", "disabled", "error", "focused", "fullWidth", "hiddenLabel", "margin", "required", "size", "variant"];
  const useUtilityClasses$q = (ownerState) => {
    const {
      classes,
      margin: margin2,
      fullWidth
    } = ownerState;
    const slots = {
      root: ["root", margin2 !== "none" && `margin${capitalize(margin2)}`, fullWidth && "fullWidth"]
    };
    return composeClasses(slots, getFormControlUtilityClasses, classes);
  };
  const FormControlRoot = styled("div", {
    name: "MuiFormControl",
    slot: "Root",
    overridesResolver: ({
      ownerState
    }, styles2) => {
      return _extends$2({}, styles2.root, styles2[`margin${capitalize(ownerState.margin)}`], ownerState.fullWidth && styles2.fullWidth);
    }
  })(({
    ownerState
  }) => _extends$2({
    display: "inline-flex",
    flexDirection: "column",
    position: "relative",
    // Reset fieldset default style.
    minWidth: 0,
    padding: 0,
    margin: 0,
    border: 0,
    verticalAlign: "top"
  }, ownerState.margin === "normal" && {
    marginTop: 16,
    marginBottom: 8
  }, ownerState.margin === "dense" && {
    marginTop: 8,
    marginBottom: 4
  }, ownerState.fullWidth && {
    width: "100%"
  }));
  const FormControl = /* @__PURE__ */ React__namespace.forwardRef(function FormControl2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiFormControl"
    });
    const {
      children,
      className,
      color: color2 = "primary",
      component = "div",
      disabled = false,
      error = false,
      focused: visuallyFocused,
      fullWidth = false,
      hiddenLabel = false,
      margin: margin2 = "none",
      required = false,
      size = "medium",
      variant = "outlined"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$s);
    const ownerState = _extends$2({}, props, {
      color: color2,
      component,
      disabled,
      error,
      fullWidth,
      hiddenLabel,
      margin: margin2,
      required,
      size,
      variant
    });
    const classes = useUtilityClasses$q(ownerState);
    const [adornedStart, setAdornedStart] = React__namespace.useState(() => {
      let initialAdornedStart = false;
      if (children) {
        React__namespace.Children.forEach(children, (child) => {
          if (!isMuiElement(child, ["Input", "Select"])) {
            return;
          }
          const input = isMuiElement(child, ["Select"]) ? child.props.input : child;
          if (input && isAdornedStart(input.props)) {
            initialAdornedStart = true;
          }
        });
      }
      return initialAdornedStart;
    });
    const [filled, setFilled] = React__namespace.useState(() => {
      let initialFilled = false;
      if (children) {
        React__namespace.Children.forEach(children, (child) => {
          if (!isMuiElement(child, ["Input", "Select"])) {
            return;
          }
          if (isFilled(child.props, true)) {
            initialFilled = true;
          }
        });
      }
      return initialFilled;
    });
    const [focusedState, setFocused] = React__namespace.useState(false);
    if (disabled && focusedState) {
      setFocused(false);
    }
    const focused = visuallyFocused !== void 0 && !disabled ? visuallyFocused : focusedState;
    let registerEffect;
    if (process.env.NODE_ENV !== "production") {
      const registeredInput = React__namespace.useRef(false);
      registerEffect = () => {
        if (registeredInput.current) {
          console.error(["MUI: There are multiple `InputBase` components inside a FormControl.", "This creates visual inconsistencies, only use one `InputBase`."].join("\n"));
        }
        registeredInput.current = true;
        return () => {
          registeredInput.current = false;
        };
      };
    }
    const childContext = React__namespace.useMemo(() => {
      return {
        adornedStart,
        setAdornedStart,
        color: color2,
        disabled,
        error,
        filled,
        focused,
        fullWidth,
        hiddenLabel,
        size,
        onBlur: () => {
          setFocused(false);
        },
        onEmpty: () => {
          setFilled(false);
        },
        onFilled: () => {
          setFilled(true);
        },
        onFocus: () => {
          setFocused(true);
        },
        registerEffect,
        required,
        variant
      };
    }, [adornedStart, color2, disabled, error, filled, focused, fullWidth, hiddenLabel, registerEffect, required, size, variant]);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(FormControlContext.Provider, {
      value: childContext,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(FormControlRoot, _extends$2({
        as: component,
        ownerState,
        className: clsx$1(classes.root, className),
        ref
      }, other, {
        children
      }))
    });
  });
  process.env.NODE_ENV !== "production" ? FormControl.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'primary'
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), PropTypes.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, the label, input and helper text should be displayed in a disabled state.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the label is displayed in an error state.
     * @default false
     */
    error: PropTypes.bool,
    /**
     * If `true`, the component is displayed in focused state.
     */
    focused: PropTypes.bool,
    /**
     * If `true`, the component will take up the full width of its container.
     * @default false
     */
    fullWidth: PropTypes.bool,
    /**
     * If `true`, the label is hidden.
     * This is used to increase density for a `FilledInput`.
     * Be sure to add `aria-label` to the `input` element.
     * @default false
     */
    hiddenLabel: PropTypes.bool,
    /**
     * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
     * @default 'none'
     */
    margin: PropTypes.oneOf(["dense", "none", "normal"]),
    /**
     * If `true`, the label will indicate that the `input` is required.
     * @default false
     */
    required: PropTypes.bool,
    /**
     * The size of the component.
     * @default 'medium'
     */
    size: PropTypes.oneOfType([PropTypes.oneOf(["medium", "small"]), PropTypes.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: PropTypes.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  function getFormHelperTextUtilityClasses(slot) {
    return generateUtilityClass("MuiFormHelperText", slot);
  }
  const formHelperTextClasses = generateUtilityClasses("MuiFormHelperText", ["root", "error", "disabled", "sizeSmall", "sizeMedium", "contained", "focused", "filled", "required"]);
  var _span$1;
  const _excluded$r = ["children", "className", "component", "disabled", "error", "filled", "focused", "margin", "required", "variant"];
  const useUtilityClasses$p = (ownerState) => {
    const {
      classes,
      contained,
      size,
      disabled,
      error,
      filled,
      focused,
      required
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", error && "error", size && `size${capitalize(size)}`, contained && "contained", focused && "focused", filled && "filled", required && "required"]
    };
    return composeClasses(slots, getFormHelperTextUtilityClasses, classes);
  };
  const FormHelperTextRoot = styled("p", {
    name: "MuiFormHelperText",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, ownerState.size && styles2[`size${capitalize(ownerState.size)}`], ownerState.contained && styles2.contained, ownerState.filled && styles2.filled];
    }
  })(({
    theme,
    ownerState
  }) => _extends$2({
    color: (theme.vars || theme).palette.text.secondary
  }, theme.typography.caption, {
    textAlign: "left",
    marginTop: 3,
    marginRight: 0,
    marginBottom: 0,
    marginLeft: 0,
    [`&.${formHelperTextClasses.disabled}`]: {
      color: (theme.vars || theme).palette.text.disabled
    },
    [`&.${formHelperTextClasses.error}`]: {
      color: (theme.vars || theme).palette.error.main
    }
  }, ownerState.size === "small" && {
    marginTop: 4
  }, ownerState.contained && {
    marginLeft: 14,
    marginRight: 14
  }));
  const FormHelperText = /* @__PURE__ */ React__namespace.forwardRef(function FormHelperText2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiFormHelperText"
    });
    const {
      children,
      className,
      component = "p"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$r);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant", "size", "disabled", "error", "filled", "focused", "required"]
    });
    const ownerState = _extends$2({}, props, {
      component,
      contained: fcs.variant === "filled" || fcs.variant === "outlined",
      variant: fcs.variant,
      size: fcs.size,
      disabled: fcs.disabled,
      error: fcs.error,
      filled: fcs.filled,
      focused: fcs.focused,
      required: fcs.required
    });
    const classes = useUtilityClasses$p(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(FormHelperTextRoot, _extends$2({
      as: component,
      ownerState,
      className: clsx$1(classes.root, className),
      ref
    }, other, {
      children: children === " " ? (
        // notranslate needed while Google Translate will not fix zero-width space issue
        _span$1 || (_span$1 = /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
          className: "notranslate",
          children: "​"
        }))
      ) : children
    }));
  });
  process.env.NODE_ENV !== "production" ? FormHelperText.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     *
     * If `' '` is provided, the component reserves one line height for displaying a future message.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, the helper text should be displayed in a disabled state.
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, helper text should be displayed in an error state.
     */
    error: PropTypes.bool,
    /**
     * If `true`, the helper text should use filled classes key.
     */
    filled: PropTypes.bool,
    /**
     * If `true`, the helper text should use focused classes key.
     */
    focused: PropTypes.bool,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     */
    margin: PropTypes.oneOf(["dense"]),
    /**
     * If `true`, the helper text should use required classes key.
     */
    required: PropTypes.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The variant to use.
     */
    variant: PropTypes.oneOfType([PropTypes.oneOf(["filled", "outlined", "standard"]), PropTypes.string])
  } : void 0;
  function getNativeSelectUtilityClasses(slot) {
    return generateUtilityClass("MuiNativeSelect", slot);
  }
  const nativeSelectClasses = generateUtilityClasses("MuiNativeSelect", ["root", "select", "multiple", "filled", "outlined", "standard", "disabled", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput"]);
  const _excluded$q = ["className", "disabled", "IconComponent", "inputRef", "variant"];
  const useUtilityClasses$o = (ownerState) => {
    const {
      classes,
      variant,
      disabled,
      multiple,
      open
    } = ownerState;
    const slots = {
      select: ["select", variant, disabled && "disabled", multiple && "multiple"],
      icon: ["icon", `icon${capitalize(variant)}`, open && "iconOpen", disabled && "disabled"]
    };
    return composeClasses(slots, getNativeSelectUtilityClasses, classes);
  };
  const nativeSelectSelectStyles = ({
    ownerState,
    theme
  }) => _extends$2({
    MozAppearance: "none",
    // Reset
    WebkitAppearance: "none",
    // Reset
    // When interacting quickly, the text can end up selected.
    // Native select can't be selected either.
    userSelect: "none",
    borderRadius: 0,
    // Reset
    cursor: "pointer",
    "&:focus": _extends$2({}, theme.vars ? {
      backgroundColor: `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.05)`
    } : {
      backgroundColor: theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.05)" : "rgba(255, 255, 255, 0.05)"
    }, {
      borderRadius: 0
      // Reset Chrome style
    }),
    // Remove IE11 arrow
    "&::-ms-expand": {
      display: "none"
    },
    [`&.${nativeSelectClasses.disabled}`]: {
      cursor: "default"
    },
    "&[multiple]": {
      height: "auto"
    },
    "&:not([multiple]) option, &:not([multiple]) optgroup": {
      backgroundColor: (theme.vars || theme).palette.background.paper
    },
    // Bump specificity to allow extending custom inputs
    "&&&": {
      paddingRight: 24,
      minWidth: 16
      // So it doesn't collapse.
    }
  }, ownerState.variant === "filled" && {
    "&&&": {
      paddingRight: 32
    }
  }, ownerState.variant === "outlined" && {
    borderRadius: (theme.vars || theme).shape.borderRadius,
    "&:focus": {
      borderRadius: (theme.vars || theme).shape.borderRadius
      // Reset the reset for Chrome style
    },
    "&&&": {
      paddingRight: 32
    }
  });
  const NativeSelectSelect = styled("select", {
    name: "MuiNativeSelect",
    slot: "Select",
    shouldForwardProp: rootShouldForwardProp,
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.select, styles2[ownerState.variant], {
        [`&.${nativeSelectClasses.multiple}`]: styles2.multiple
      }];
    }
  })(nativeSelectSelectStyles);
  const nativeSelectIconStyles = ({
    ownerState,
    theme
  }) => _extends$2({
    // We use a position absolute over a flexbox in order to forward the pointer events
    // to the input and to support wrapping tags..
    position: "absolute",
    right: 0,
    top: "calc(50% - .5em)",
    // Center vertically, height is 1em
    pointerEvents: "none",
    // Don't block pointer events on the select under the icon.
    color: (theme.vars || theme).palette.action.active,
    [`&.${nativeSelectClasses.disabled}`]: {
      color: (theme.vars || theme).palette.action.disabled
    }
  }, ownerState.open && {
    transform: "rotate(180deg)"
  }, ownerState.variant === "filled" && {
    right: 7
  }, ownerState.variant === "outlined" && {
    right: 7
  });
  const NativeSelectIcon = styled("svg", {
    name: "MuiNativeSelect",
    slot: "Icon",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.icon, ownerState.variant && styles2[`icon${capitalize(ownerState.variant)}`], ownerState.open && styles2.iconOpen];
    }
  })(nativeSelectIconStyles);
  const NativeSelectInput = /* @__PURE__ */ React__namespace.forwardRef(function NativeSelectInput2(props, ref) {
    const {
      className,
      disabled,
      IconComponent,
      inputRef,
      variant = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$q);
    const ownerState = _extends$2({}, props, {
      disabled,
      variant
    });
    const classes = useUtilityClasses$o(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(React__namespace.Fragment, {
      children: [/* @__PURE__ */ jsxRuntimeExports.jsx(NativeSelectSelect, _extends$2({
        ownerState,
        className: clsx$1(classes.select, className),
        disabled,
        ref: inputRef || ref
      }, other)), props.multiple ? null : /* @__PURE__ */ jsxRuntimeExports.jsx(NativeSelectIcon, {
        as: IconComponent,
        ownerState,
        className: classes.icon
      })]
    });
  });
  process.env.NODE_ENV !== "production" ? NativeSelectInput.propTypes = {
    /**
     * The option elements to populate the select with.
     * Can be some `<option>` elements.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     * See [CSS API](#css) below for more details.
     */
    classes: PropTypes.object,
    /**
     * The CSS class name of the select element.
     */
    className: PropTypes.string,
    /**
     * If `true`, the select is disabled.
     */
    disabled: PropTypes.bool,
    /**
     * The icon that displays the arrow.
     */
    IconComponent: PropTypes.elementType.isRequired,
    /**
     * Use that prop to pass a ref to the native select element.
     * @deprecated
     */
    inputRef: refType,
    /**
     * @ignore
     */
    multiple: PropTypes.bool,
    /**
     * Name attribute of the `select` or hidden `input` element.
     */
    name: PropTypes.string,
    /**
     * Callback fired when a menu item is selected.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: PropTypes.func,
    /**
     * The input value.
     */
    value: PropTypes.any,
    /**
     * The variant to use.
     */
    variant: PropTypes.oneOf(["standard", "outlined", "filled"])
  } : void 0;
  function getSelectUtilityClasses(slot) {
    return generateUtilityClass("MuiSelect", slot);
  }
  const selectClasses = generateUtilityClasses("MuiSelect", ["select", "multiple", "filled", "outlined", "standard", "disabled", "focused", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput"]);
  var _span;
  const _excluded$p = ["aria-describedby", "aria-label", "autoFocus", "autoWidth", "children", "className", "defaultOpen", "defaultValue", "disabled", "displayEmpty", "IconComponent", "inputRef", "labelId", "MenuProps", "multiple", "name", "onBlur", "onChange", "onClose", "onFocus", "onOpen", "open", "readOnly", "renderValue", "SelectDisplayProps", "tabIndex", "type", "value", "variant"];
  const SelectSelect = styled("div", {
    name: "MuiSelect",
    slot: "Select",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [
        // Win specificity over the input base
        {
          [`&.${selectClasses.select}`]: styles2.select
        },
        {
          [`&.${selectClasses.select}`]: styles2[ownerState.variant]
        },
        {
          [`&.${selectClasses.multiple}`]: styles2.multiple
        }
      ];
    }
  })(nativeSelectSelectStyles, {
    // Win specificity over the input base
    [`&.${selectClasses.select}`]: {
      height: "auto",
      // Resets for multiple select with chips
      minHeight: "1.4375em",
      // Required for select\text-field height consistency
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
      overflow: "hidden"
    }
  });
  const SelectIcon = styled("svg", {
    name: "MuiSelect",
    slot: "Icon",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.icon, ownerState.variant && styles2[`icon${capitalize(ownerState.variant)}`], ownerState.open && styles2.iconOpen];
    }
  })(nativeSelectIconStyles);
  const SelectNativeInput = styled("input", {
    shouldForwardProp: (prop) => slotShouldForwardProp(prop) && prop !== "classes",
    name: "MuiSelect",
    slot: "NativeInput",
    overridesResolver: (props, styles2) => styles2.nativeInput
  })({
    bottom: 0,
    left: 0,
    position: "absolute",
    opacity: 0,
    pointerEvents: "none",
    width: "100%",
    boxSizing: "border-box"
  });
  function areEqualValues(a, b) {
    if (typeof b === "object" && b !== null) {
      return a === b;
    }
    return String(a) === String(b);
  }
  function isEmpty(display2) {
    return display2 == null || typeof display2 === "string" && !display2.trim();
  }
  const useUtilityClasses$n = (ownerState) => {
    const {
      classes,
      variant,
      disabled,
      multiple,
      open
    } = ownerState;
    const slots = {
      select: ["select", variant, disabled && "disabled", multiple && "multiple"],
      icon: ["icon", `icon${capitalize(variant)}`, open && "iconOpen", disabled && "disabled"],
      nativeInput: ["nativeInput"]
    };
    return composeClasses(slots, getSelectUtilityClasses, classes);
  };
  const SelectInput = /* @__PURE__ */ React__namespace.forwardRef(function SelectInput2(props, ref) {
    const {
      "aria-describedby": ariaDescribedby,
      "aria-label": ariaLabel,
      autoFocus,
      autoWidth,
      children,
      className,
      defaultOpen,
      defaultValue,
      disabled,
      displayEmpty,
      IconComponent,
      inputRef: inputRefProp,
      labelId,
      MenuProps = {},
      multiple,
      name,
      onBlur,
      onChange,
      onClose: onClose2,
      onFocus,
      onOpen: onOpen2,
      open: openProp,
      readOnly,
      renderValue,
      SelectDisplayProps = {},
      tabIndex: tabIndexProp,
      value: valueProp,
      variant = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$p);
    const [value, setValueState] = useControlled({
      controlled: valueProp,
      default: defaultValue,
      name: "Select"
    });
    const [openState, setOpenState] = useControlled({
      controlled: openProp,
      default: defaultOpen,
      name: "Select"
    });
    const inputRef = React__namespace.useRef(null);
    const displayRef = React__namespace.useRef(null);
    const [displayNode, setDisplayNode] = React__namespace.useState(null);
    const {
      current: isOpenControlled
    } = React__namespace.useRef(openProp != null);
    const [menuMinWidthState, setMenuMinWidthState] = React__namespace.useState();
    const handleRef = useForkRef(ref, inputRefProp);
    const handleDisplayRef = React__namespace.useCallback((node2) => {
      displayRef.current = node2;
      if (node2) {
        setDisplayNode(node2);
      }
    }, []);
    const anchorElement = displayNode == null ? void 0 : displayNode.parentNode;
    React__namespace.useImperativeHandle(handleRef, () => ({
      focus: () => {
        displayRef.current.focus();
      },
      node: inputRef.current,
      value
    }), [value]);
    React__namespace.useEffect(() => {
      if (defaultOpen && openState && displayNode && !isOpenControlled) {
        setMenuMinWidthState(autoWidth ? null : anchorElement.clientWidth);
        displayRef.current.focus();
      }
    }, [displayNode, autoWidth]);
    React__namespace.useEffect(() => {
      if (autoFocus) {
        displayRef.current.focus();
      }
    }, [autoFocus]);
    React__namespace.useEffect(() => {
      if (!labelId) {
        return void 0;
      }
      const label = ownerDocument(displayRef.current).getElementById(labelId);
      if (label) {
        const handler = () => {
          if (getSelection().isCollapsed) {
            displayRef.current.focus();
          }
        };
        label.addEventListener("click", handler);
        return () => {
          label.removeEventListener("click", handler);
        };
      }
      return void 0;
    }, [labelId]);
    const update = (open2, event) => {
      if (open2) {
        if (onOpen2) {
          onOpen2(event);
        }
      } else if (onClose2) {
        onClose2(event);
      }
      if (!isOpenControlled) {
        setMenuMinWidthState(autoWidth ? null : anchorElement.clientWidth);
        setOpenState(open2);
      }
    };
    const handleMouseDown = (event) => {
      if (event.button !== 0) {
        return;
      }
      event.preventDefault();
      displayRef.current.focus();
      update(true, event);
    };
    const handleClose = (event) => {
      update(false, event);
    };
    const childrenArray = React__namespace.Children.toArray(children);
    const handleChange = (event) => {
      const index2 = childrenArray.map((child2) => child2.props.value).indexOf(event.target.value);
      if (index2 === -1) {
        return;
      }
      const child = childrenArray[index2];
      setValueState(child.props.value);
      if (onChange) {
        onChange(event, child);
      }
    };
    const handleItemClick = (child) => (event) => {
      let newValue;
      if (!event.currentTarget.hasAttribute("tabindex")) {
        return;
      }
      if (multiple) {
        newValue = Array.isArray(value) ? value.slice() : [];
        const itemIndex = value.indexOf(child.props.value);
        if (itemIndex === -1) {
          newValue.push(child.props.value);
        } else {
          newValue.splice(itemIndex, 1);
        }
      } else {
        newValue = child.props.value;
      }
      if (child.props.onClick) {
        child.props.onClick(event);
      }
      if (value !== newValue) {
        setValueState(newValue);
        if (onChange) {
          const nativeEvent = event.nativeEvent || event;
          const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
          Object.defineProperty(clonedEvent, "target", {
            writable: true,
            value: {
              value: newValue,
              name
            }
          });
          onChange(clonedEvent, child);
        }
      }
      if (!multiple) {
        update(false, event);
      }
    };
    const handleKeyDown2 = (event) => {
      if (!readOnly) {
        const validKeys = [
          " ",
          "ArrowUp",
          "ArrowDown",
          // The native select doesn't respond to enter on macOS, but it's recommended by
          // https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-select-only/
          "Enter"
        ];
        if (validKeys.indexOf(event.key) !== -1) {
          event.preventDefault();
          update(true, event);
        }
      }
    };
    const open = displayNode !== null && openState;
    const handleBlur2 = (event) => {
      if (!open && onBlur) {
        Object.defineProperty(event, "target", {
          writable: true,
          value: {
            value,
            name
          }
        });
        onBlur(event);
      }
    };
    delete other["aria-invalid"];
    let display2;
    let displaySingle;
    const displayMultiple = [];
    let computeDisplay = false;
    let foundMatch = false;
    if (isFilled({
      value
    }) || displayEmpty) {
      if (renderValue) {
        display2 = renderValue(value);
      } else {
        computeDisplay = true;
      }
    }
    const items = childrenArray.map((child, index2, arr) => {
      var _arr$, _arr$$props, _arr$2, _arr$2$props;
      if (!/* @__PURE__ */ React__namespace.isValidElement(child)) {
        return null;
      }
      if (process.env.NODE_ENV !== "production") {
        if (reactIsExports.isFragment(child)) {
          console.error(["MUI: The Select component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      let selected;
      if (multiple) {
        if (!Array.isArray(value)) {
          throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The \`value\` prop must be an array when using the \`Select\` component with \`multiple\`.` : formatMuiErrorMessage(2));
        }
        selected = value.some((v) => areEqualValues(v, child.props.value));
        if (selected && computeDisplay) {
          displayMultiple.push(child.props.children);
        }
      } else {
        selected = areEqualValues(value, child.props.value);
        if (selected && computeDisplay) {
          displaySingle = child.props.children;
        }
      }
      if (selected) {
        foundMatch = true;
      }
      if (child.props.value === void 0) {
        return /* @__PURE__ */ React__namespace.cloneElement(child, {
          "aria-readonly": true,
          role: "option"
        });
      }
      const isFirstSelectableElement = () => {
        if (value) {
          return selected;
        }
        const firstSelectableElement = arr.find((item) => {
          var _item$props;
          return (item == null ? void 0 : (_item$props = item.props) == null ? void 0 : _item$props.value) !== void 0 && item.props.disabled !== true;
        });
        if (child === firstSelectableElement) {
          return true;
        }
        return selected;
      };
      return /* @__PURE__ */ React__namespace.cloneElement(child, {
        "aria-selected": selected ? "true" : "false",
        onClick: handleItemClick(child),
        onKeyUp: (event) => {
          if (event.key === " ") {
            event.preventDefault();
          }
          if (child.props.onKeyUp) {
            child.props.onKeyUp(event);
          }
        },
        role: "option",
        selected: ((_arr$ = arr[0]) == null ? void 0 : (_arr$$props = _arr$.props) == null ? void 0 : _arr$$props.value) === void 0 || ((_arr$2 = arr[0]) == null ? void 0 : (_arr$2$props = _arr$2.props) == null ? void 0 : _arr$2$props.disabled) === true ? isFirstSelectableElement() : selected,
        value: void 0,
        // The value is most likely not a valid HTML attribute.
        "data-value": child.props.value
        // Instead, we provide it as a data attribute.
      });
    });
    if (process.env.NODE_ENV !== "production") {
      React__namespace.useEffect(() => {
        if (!foundMatch && !multiple && value !== "") {
          const values2 = childrenArray.map((child) => child.props.value);
          console.warn([`MUI: You have provided an out-of-range value \`${value}\` for the select ${name ? `(name="${name}") ` : ""}component.`, "Consider providing a value that matches one of the available options or ''.", `The available values are ${values2.filter((x) => x != null).map((x) => `\`${x}\``).join(", ") || '""'}.`].join("\n"));
        }
      }, [foundMatch, childrenArray, multiple, name, value]);
    }
    if (computeDisplay) {
      if (multiple) {
        if (displayMultiple.length === 0) {
          display2 = null;
        } else {
          display2 = displayMultiple.reduce((output, child, index2) => {
            output.push(child);
            if (index2 < displayMultiple.length - 1) {
              output.push(", ");
            }
            return output;
          }, []);
        }
      } else {
        display2 = displaySingle;
      }
    }
    let menuMinWidth = menuMinWidthState;
    if (!autoWidth && isOpenControlled && displayNode) {
      menuMinWidth = anchorElement.clientWidth;
    }
    let tabIndex;
    if (typeof tabIndexProp !== "undefined") {
      tabIndex = tabIndexProp;
    } else {
      tabIndex = disabled ? null : 0;
    }
    const buttonId = SelectDisplayProps.id || (name ? `mui-component-select-${name}` : void 0);
    const ownerState = _extends$2({}, props, {
      variant,
      value,
      open
    });
    const classes = useUtilityClasses$n(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(React__namespace.Fragment, {
      children: [/* @__PURE__ */ jsxRuntimeExports.jsx(SelectSelect, _extends$2({
        ref: handleDisplayRef,
        tabIndex,
        role: "button",
        "aria-disabled": disabled ? "true" : void 0,
        "aria-expanded": open ? "true" : "false",
        "aria-haspopup": "listbox",
        "aria-label": ariaLabel,
        "aria-labelledby": [labelId, buttonId].filter(Boolean).join(" ") || void 0,
        "aria-describedby": ariaDescribedby,
        onKeyDown: handleKeyDown2,
        onMouseDown: disabled || readOnly ? null : handleMouseDown,
        onBlur: handleBlur2,
        onFocus
      }, SelectDisplayProps, {
        ownerState,
        className: clsx$1(SelectDisplayProps.className, classes.select, className),
        id: buttonId,
        children: isEmpty(display2) ? (
          // notranslate needed while Google Translate will not fix zero-width space issue
          _span || (_span = /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
            className: "notranslate",
            children: "​"
          }))
        ) : display2
      })), /* @__PURE__ */ jsxRuntimeExports.jsx(SelectNativeInput, _extends$2({
        value: Array.isArray(value) ? value.join(",") : value,
        name,
        ref: inputRef,
        "aria-hidden": true,
        onChange: handleChange,
        tabIndex: -1,
        disabled,
        className: classes.nativeInput,
        autoFocus,
        ownerState
      }, other)), /* @__PURE__ */ jsxRuntimeExports.jsx(SelectIcon, {
        as: IconComponent,
        className: classes.icon,
        ownerState
      }), /* @__PURE__ */ jsxRuntimeExports.jsx(Menu, _extends$2({
        id: `menu-${name || ""}`,
        anchorEl: anchorElement,
        open,
        onClose: handleClose,
        anchorOrigin: {
          vertical: "bottom",
          horizontal: "center"
        },
        transformOrigin: {
          vertical: "top",
          horizontal: "center"
        }
      }, MenuProps, {
        MenuListProps: _extends$2({
          "aria-labelledby": labelId,
          role: "listbox",
          disableListWrap: true
        }, MenuProps.MenuListProps),
        PaperProps: _extends$2({}, MenuProps.PaperProps, {
          style: _extends$2({
            minWidth: menuMinWidth
          }, MenuProps.PaperProps != null ? MenuProps.PaperProps.style : null)
        }),
        children: items
      }))]
    });
  });
  process.env.NODE_ENV !== "production" ? SelectInput.propTypes = {
    /**
     * @ignore
     */
    "aria-describedby": PropTypes.string,
    /**
     * @ignore
     */
    "aria-label": PropTypes.string,
    /**
     * @ignore
     */
    autoFocus: PropTypes.bool,
    /**
     * If `true`, the width of the popover will automatically be set according to the items inside the
     * menu, otherwise it will be at least the width of the select input.
     */
    autoWidth: PropTypes.bool,
    /**
     * The option elements to populate the select with.
     * Can be some `<MenuItem>` elements.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     * See [CSS API](#css) below for more details.
     */
    classes: PropTypes.object,
    /**
     * The CSS class name of the select element.
     */
    className: PropTypes.string,
    /**
     * If `true`, the component is toggled on mount. Use when the component open state is not controlled.
     * You can only use it when the `native` prop is `false` (default).
     */
    defaultOpen: PropTypes.bool,
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: PropTypes.any,
    /**
     * If `true`, the select is disabled.
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the selected item is displayed even if its value is empty.
     */
    displayEmpty: PropTypes.bool,
    /**
     * The icon that displays the arrow.
     */
    IconComponent: PropTypes.elementType.isRequired,
    /**
     * Imperative handle implementing `{ value: T, node: HTMLElement, focus(): void }`
     * Equivalent to `ref`
     */
    inputRef: refType,
    /**
     * The ID of an element that acts as an additional label. The Select will
     * be labelled by the additional label and the selected value.
     */
    labelId: PropTypes.string,
    /**
     * Props applied to the [`Menu`](/material-ui/api/menu/) element.
     */
    MenuProps: PropTypes.object,
    /**
     * If `true`, `value` must be an array and the menu will support multiple selections.
     */
    multiple: PropTypes.bool,
    /**
     * Name attribute of the `select` or hidden `input` element.
     */
    name: PropTypes.string,
    /**
     * @ignore
     */
    onBlur: PropTypes.func,
    /**
     * Callback fired when a menu item is selected.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (any).
     * @param {object} [child] The react element that was selected.
     */
    onChange: PropTypes.func,
    /**
     * Callback fired when the component requests to be closed.
     * Use in controlled mode (see open).
     *
     * @param {object} event The event source of the callback.
     */
    onClose: PropTypes.func,
    /**
     * @ignore
     */
    onFocus: PropTypes.func,
    /**
     * Callback fired when the component requests to be opened.
     * Use in controlled mode (see open).
     *
     * @param {object} event The event source of the callback.
     */
    onOpen: PropTypes.func,
    /**
     * If `true`, the component is shown.
     */
    open: PropTypes.bool,
    /**
     * @ignore
     */
    readOnly: PropTypes.bool,
    /**
     * Render the selected value.
     *
     * @param {any} value The `value` provided to the component.
     * @returns {ReactNode}
     */
    renderValue: PropTypes.func,
    /**
     * Props applied to the clickable div element.
     */
    SelectDisplayProps: PropTypes.object,
    /**
     * @ignore
     */
    tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * @ignore
     */
    type: PropTypes.any,
    /**
     * The input value.
     */
    value: PropTypes.any,
    /**
     * The variant to use.
     */
    variant: PropTypes.oneOf(["standard", "outlined", "filled"])
  } : void 0;
  const ArrowDropDownIcon = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M7 10l5 5 5-5z"
  }), "ArrowDropDown");
  var _StyledInput, _StyledFilledInput;
  const _excluded$o = ["autoWidth", "children", "classes", "className", "defaultOpen", "displayEmpty", "IconComponent", "id", "input", "inputProps", "label", "labelId", "MenuProps", "multiple", "native", "onClose", "onOpen", "open", "renderValue", "SelectDisplayProps", "variant"];
  const useUtilityClasses$m = (ownerState) => {
    const {
      classes
    } = ownerState;
    return classes;
  };
  const styledRootConfig = {
    name: "MuiSelect",
    overridesResolver: (props, styles2) => styles2.root,
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) && prop !== "variant",
    slot: "Root"
  };
  const StyledInput = styled(Input, styledRootConfig)("");
  const StyledOutlinedInput = styled(OutlinedInput, styledRootConfig)("");
  const StyledFilledInput = styled(FilledInput, styledRootConfig)("");
  const Select = /* @__PURE__ */ React__namespace.forwardRef(function Select2(inProps, ref) {
    const props = useThemeProps({
      name: "MuiSelect",
      props: inProps
    });
    const {
      autoWidth = false,
      children,
      classes: classesProp = {},
      className,
      defaultOpen = false,
      displayEmpty = false,
      IconComponent = ArrowDropDownIcon,
      id,
      input,
      inputProps,
      label,
      labelId,
      MenuProps,
      multiple = false,
      native = false,
      onClose: onClose2,
      onOpen: onOpen2,
      open,
      renderValue,
      SelectDisplayProps,
      variant: variantProp = "outlined"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$o);
    const inputComponent = native ? NativeSelectInput : SelectInput;
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant"]
    });
    const variant = fcs.variant || variantProp;
    const InputComponent = input || {
      standard: _StyledInput || (_StyledInput = /* @__PURE__ */ jsxRuntimeExports.jsx(StyledInput, {})),
      outlined: /* @__PURE__ */ jsxRuntimeExports.jsx(StyledOutlinedInput, {
        label
      }),
      filled: _StyledFilledInput || (_StyledFilledInput = /* @__PURE__ */ jsxRuntimeExports.jsx(StyledFilledInput, {}))
    }[variant];
    const ownerState = _extends$2({}, props, {
      variant,
      classes: classesProp
    });
    const classes = useUtilityClasses$m(ownerState);
    const inputComponentRef = useForkRef(ref, InputComponent.ref);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(React__namespace.Fragment, {
      children: /* @__PURE__ */ React__namespace.cloneElement(InputComponent, _extends$2({
        // Most of the logic is implemented in `SelectInput`.
        // The `Select` component is a simple API wrapper to expose something better to play with.
        inputComponent,
        inputProps: _extends$2({
          children,
          IconComponent,
          variant,
          type: void 0,
          // We render a select. We can ignore the type provided by the `Input`.
          multiple
        }, native ? {
          id
        } : {
          autoWidth,
          defaultOpen,
          displayEmpty,
          labelId,
          MenuProps,
          onClose: onClose2,
          onOpen: onOpen2,
          open,
          renderValue,
          SelectDisplayProps: _extends$2({
            id
          }, SelectDisplayProps)
        }, inputProps, {
          classes: inputProps ? deepmerge(classes, inputProps.classes) : classes
        }, input ? input.props.inputProps : {})
      }, multiple && native && variant === "outlined" ? {
        notched: true
      } : {}, {
        ref: inputComponentRef,
        className: clsx$1(InputComponent.props.className, className)
      }, !input && {
        variant
      }, other))
    });
  });
  process.env.NODE_ENV !== "production" ? Select.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * If `true`, the width of the popover will automatically be set according to the items inside the
     * menu, otherwise it will be at least the width of the select input.
     * @default false
     */
    autoWidth: PropTypes.bool,
    /**
     * The option elements to populate the select with.
     * Can be some `MenuItem` when `native` is false and `option` when `native` is true.
     *
     * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     * @default {}
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * If `true`, the component is initially open. Use when the component open state is not controlled (i.e. the `open` prop is not defined).
     * You can only use it when the `native` prop is `false` (default).
     * @default false
     */
    defaultOpen: PropTypes.bool,
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: PropTypes.any,
    /**
     * If `true`, a value is displayed even if no items are selected.
     *
     * In order to display a meaningful value, a function can be passed to the `renderValue` prop which
     * returns the value to be displayed when no items are selected.
     *
     * ⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value.
     * The label should either be hidden or forced to a shrunk state.
     * @default false
     */
    displayEmpty: PropTypes.bool,
    /**
     * The icon that displays the arrow.
     * @default ArrowDropDownIcon
     */
    IconComponent: PropTypes.elementType,
    /**
     * The `id` of the wrapper element or the `select` element when `native`.
     */
    id: PropTypes.string,
    /**
     * An `Input` element; does not have to be a material-ui specific `Input`.
     */
    input: PropTypes.element,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * When `native` is `true`, the attributes are applied on the `select` element.
     */
    inputProps: PropTypes.object,
    /**
     * See [OutlinedInput#label](/material-ui/api/outlined-input/#props)
     */
    label: PropTypes.node,
    /**
     * The ID of an element that acts as an additional label. The Select will
     * be labelled by the additional label and the selected value.
     */
    labelId: PropTypes.string,
    /**
     * Props applied to the [`Menu`](/material-ui/api/menu/) element.
     */
    MenuProps: PropTypes.object,
    /**
     * If `true`, `value` must be an array and the menu will support multiple selections.
     * @default false
     */
    multiple: PropTypes.bool,
    /**
     * If `true`, the component uses a native `select` element.
     * @default false
     */
    native: PropTypes.bool,
    /**
     * Callback fired when a menu item is selected.
     *
     * @param {SelectChangeEvent<T>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (any).
     * **Warning**: This is a generic event, not a change event, unless the change event is caused by browser autofill.
     * @param {object} [child] The react element that was selected when `native` is `false` (default).
     */
    onChange: PropTypes.func,
    /**
     * Callback fired when the component requests to be closed.
     * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select collapes).
     *
     * @param {object} event The event source of the callback.
     */
    onClose: PropTypes.func,
    /**
     * Callback fired when the component requests to be opened.
     * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select expands).
     *
     * @param {object} event The event source of the callback.
     */
    onOpen: PropTypes.func,
    /**
     * If `true`, the component is shown.
     * You can only use it when the `native` prop is `false` (default).
     */
    open: PropTypes.bool,
    /**
     * Render the selected value.
     * You can only use it when the `native` prop is `false` (default).
     *
     * @param {any} value The `value` provided to the component.
     * @returns {ReactNode}
     */
    renderValue: PropTypes.func,
    /**
     * Props applied to the clickable div element.
     */
    SelectDisplayProps: PropTypes.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The `input` value. Providing an empty string will select no options.
     * Set to an empty string `''` if you don't want any of the available options to be selected.
     *
     * If the value is an object it must have reference equality with the option in order to be selected.
     * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.
     */
    value: PropTypes.oneOfType([PropTypes.oneOf([""]), PropTypes.any]),
    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: PropTypes.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  Select.muiName = "Select";
  function getTextFieldUtilityClass(slot) {
    return generateUtilityClass("MuiTextField", slot);
  }
  const textFieldClasses = generateUtilityClasses("MuiTextField", ["root"]);
  const _excluded$n = ["autoComplete", "autoFocus", "children", "className", "color", "defaultValue", "disabled", "error", "FormHelperTextProps", "fullWidth", "helperText", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onFocus", "placeholder", "required", "rows", "select", "SelectProps", "type", "value", "variant"];
  const variantComponent = {
    standard: Input,
    filled: FilledInput,
    outlined: OutlinedInput
  };
  const useUtilityClasses$l = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getTextFieldUtilityClass, classes);
  };
  const TextFieldRoot = styled(FormControl, {
    name: "MuiTextField",
    slot: "Root",
    overridesResolver: (props, styles2) => styles2.root
  })({});
  const TextField = /* @__PURE__ */ React__namespace.forwardRef(function TextField2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiTextField"
    });
    const {
      autoComplete,
      autoFocus = false,
      children,
      className,
      color: color2 = "primary",
      defaultValue,
      disabled = false,
      error = false,
      FormHelperTextProps,
      fullWidth = false,
      helperText,
      id: idOverride,
      InputLabelProps,
      inputProps,
      InputProps,
      inputRef,
      label,
      maxRows,
      minRows,
      multiline = false,
      name,
      onBlur,
      onChange,
      onFocus,
      placeholder,
      required = false,
      rows,
      select = false,
      SelectProps,
      type,
      value,
      variant = "outlined"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$n);
    const ownerState = _extends$2({}, props, {
      autoFocus,
      color: color2,
      disabled,
      error,
      fullWidth,
      multiline,
      required,
      select,
      variant
    });
    const classes = useUtilityClasses$l(ownerState);
    if (process.env.NODE_ENV !== "production") {
      if (select && !children) {
        console.error("MUI: `children` must be passed when using the `TextField` component with `select`.");
      }
    }
    const InputMore = {};
    if (variant === "outlined") {
      if (InputLabelProps && typeof InputLabelProps.shrink !== "undefined") {
        InputMore.notched = InputLabelProps.shrink;
      }
      InputMore.label = label;
    }
    if (select) {
      if (!SelectProps || !SelectProps.native) {
        InputMore.id = void 0;
      }
      InputMore["aria-describedby"] = void 0;
    }
    const id = useId(idOverride);
    const helperTextId = helperText && id ? `${id}-helper-text` : void 0;
    const inputLabelId = label && id ? `${id}-label` : void 0;
    const InputComponent = variantComponent[variant];
    const InputElement = /* @__PURE__ */ jsxRuntimeExports.jsx(InputComponent, _extends$2({
      "aria-describedby": helperTextId,
      autoComplete,
      autoFocus,
      defaultValue,
      fullWidth,
      multiline,
      name,
      rows,
      maxRows,
      minRows,
      type,
      value,
      id,
      inputRef,
      onBlur,
      onChange,
      onFocus,
      placeholder,
      inputProps
    }, InputMore, InputProps));
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(TextFieldRoot, _extends$2({
      className: clsx$1(classes.root, className),
      disabled,
      error,
      fullWidth,
      ref,
      required,
      color: color2,
      variant,
      ownerState
    }, other, {
      children: [label != null && label !== "" && /* @__PURE__ */ jsxRuntimeExports.jsx(InputLabel, _extends$2({
        htmlFor: id,
        id: inputLabelId
      }, InputLabelProps, {
        children: label
      })), select ? /* @__PURE__ */ jsxRuntimeExports.jsx(Select, _extends$2({
        "aria-describedby": helperTextId,
        id,
        labelId: inputLabelId,
        value,
        input: InputElement
      }, SelectProps, {
        children
      })) : InputElement, helperText && /* @__PURE__ */ jsxRuntimeExports.jsx(FormHelperText, _extends$2({
        id: helperTextId
      }, FormHelperTextProps, {
        children: helperText
      }))]
    }));
  });
  process.env.NODE_ENV !== "production" ? TextField.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: PropTypes.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     * @default false
     */
    autoFocus: PropTypes.bool,
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'primary'
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), PropTypes.string]),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: PropTypes.any,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the label is displayed in an error state.
     * @default false
     */
    error: PropTypes.bool,
    /**
     * Props applied to the [`FormHelperText`](/material-ui/api/form-helper-text/) element.
     */
    FormHelperTextProps: PropTypes.object,
    /**
     * If `true`, the input will take up the full width of its container.
     * @default false
     */
    fullWidth: PropTypes.bool,
    /**
     * The helper text content.
     */
    helperText: PropTypes.node,
    /**
     * The id of the `input` element.
     * Use this prop to make `label` and `helperText` accessible for screen readers.
     */
    id: PropTypes.string,
    /**
     * Props applied to the [`InputLabel`](/material-ui/api/input-label/) element.
     * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.
     */
    InputLabelProps: PropTypes.object,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: PropTypes.object,
    /**
     * Props applied to the Input element.
     * It will be a [`FilledInput`](/material-ui/api/filled-input/),
     * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)
     * component depending on the `variant` prop value.
     */
    InputProps: PropTypes.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType,
    /**
     * The label content.
     */
    label: PropTypes.node,
    /**
     * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
     * @default 'none'
     */
    margin: PropTypes.oneOf(["dense", "none", "normal"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * If `true`, a `textarea` element is rendered instead of an input.
     * @default false
     */
    multiline: PropTypes.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: PropTypes.string,
    /**
     * @ignore
     */
    onBlur: PropTypes.func,
    /**
     * Callback fired when the value is changed.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: PropTypes.func,
    /**
     * @ignore
     */
    onFocus: PropTypes.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: PropTypes.string,
    /**
     * If `true`, the label is displayed as required and the `input` element is required.
     * @default false
     */
    required: PropTypes.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * Render a [`Select`](/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.
     * If this option is set you must pass the options of the select as children.
     * @default false
     */
    select: PropTypes.bool,
    /**
     * Props applied to the [`Select`](/material-ui/api/select/) element.
     */
    SelectProps: PropTypes.object,
    /**
     * The size of the component.
     */
    size: PropTypes.oneOfType([PropTypes.oneOf(["medium", "small"]), PropTypes.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     */
    type: PropTypes.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: PropTypes.any,
    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: PropTypes.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  function getLinearProgressUtilityClass(slot) {
    return generateUtilityClass("MuiLinearProgress", slot);
  }
  const linearProgressClasses = generateUtilityClasses("MuiLinearProgress", ["root", "colorPrimary", "colorSecondary", "determinate", "indeterminate", "buffer", "query", "dashed", "dashedColorPrimary", "dashedColorSecondary", "bar", "barColorPrimary", "barColorSecondary", "bar1Indeterminate", "bar1Determinate", "bar1Buffer", "bar2Indeterminate", "bar2Buffer"]);
  const _excluded$m = ["className", "color", "value", "valueBuffer", "variant"];
  let _$1 = (t) => t, _t$1, _t2$1, _t3$1, _t4$1, _t5, _t6;
  const TRANSITION_DURATION = 4;
  const indeterminate1Keyframe = react.keyframes(_t$1 || (_t$1 = _$1`
  0% {
    left: -35%;
    right: 100%;
  }

  60% {
    left: 100%;
    right: -90%;
  }

  100% {
    left: 100%;
    right: -90%;
  }
`));
  const indeterminate2Keyframe = react.keyframes(_t2$1 || (_t2$1 = _$1`
  0% {
    left: -200%;
    right: 100%;
  }

  60% {
    left: 107%;
    right: -8%;
  }

  100% {
    left: 107%;
    right: -8%;
  }
`));
  const bufferKeyframe = react.keyframes(_t3$1 || (_t3$1 = _$1`
  0% {
    opacity: 1;
    background-position: 0 -23px;
  }

  60% {
    opacity: 0;
    background-position: 0 -23px;
  }

  100% {
    opacity: 1;
    background-position: -200px -23px;
  }
`));
  const useUtilityClasses$k = (ownerState) => {
    const {
      classes,
      variant,
      color: color2
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize(color2)}`, variant],
      dashed: ["dashed", `dashedColor${capitalize(color2)}`],
      bar1: ["bar", `barColor${capitalize(color2)}`, (variant === "indeterminate" || variant === "query") && "bar1Indeterminate", variant === "determinate" && "bar1Determinate", variant === "buffer" && "bar1Buffer"],
      bar2: ["bar", variant !== "buffer" && `barColor${capitalize(color2)}`, variant === "buffer" && `color${capitalize(color2)}`, (variant === "indeterminate" || variant === "query") && "bar2Indeterminate", variant === "buffer" && "bar2Buffer"]
    };
    return composeClasses(slots, getLinearProgressUtilityClass, classes);
  };
  const getColorShade = (theme, color2) => {
    if (color2 === "inherit") {
      return "currentColor";
    }
    if (theme.vars) {
      return theme.vars.palette.LinearProgress[`${color2}Bg`];
    }
    return theme.palette.mode === "light" ? lighten(theme.palette[color2].main, 0.62) : darken(theme.palette[color2].main, 0.5);
  };
  const LinearProgressRoot = styled("span", {
    name: "MuiLinearProgress",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, styles2[`color${capitalize(ownerState.color)}`], styles2[ownerState.variant]];
    }
  })(({
    ownerState,
    theme
  }) => _extends$2({
    position: "relative",
    overflow: "hidden",
    display: "block",
    height: 4,
    zIndex: 0,
    // Fix Safari's bug during composition of different paint.
    "@media print": {
      colorAdjust: "exact"
    },
    backgroundColor: getColorShade(theme, ownerState.color)
  }, ownerState.color === "inherit" && ownerState.variant !== "buffer" && {
    backgroundColor: "none",
    "&::before": {
      content: '""',
      position: "absolute",
      left: 0,
      top: 0,
      right: 0,
      bottom: 0,
      backgroundColor: "currentColor",
      opacity: 0.3
    }
  }, ownerState.variant === "buffer" && {
    backgroundColor: "transparent"
  }, ownerState.variant === "query" && {
    transform: "rotate(180deg)"
  }));
  const LinearProgressDashed = styled("span", {
    name: "MuiLinearProgress",
    slot: "Dashed",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.dashed, styles2[`dashedColor${capitalize(ownerState.color)}`]];
    }
  })(({
    ownerState,
    theme
  }) => {
    const backgroundColor2 = getColorShade(theme, ownerState.color);
    return _extends$2({
      position: "absolute",
      marginTop: 0,
      height: "100%",
      width: "100%"
    }, ownerState.color === "inherit" && {
      opacity: 0.3
    }, {
      backgroundImage: `radial-gradient(${backgroundColor2} 0%, ${backgroundColor2} 16%, transparent 42%)`,
      backgroundSize: "10px 10px",
      backgroundPosition: "0 -23px"
    });
  }, react.css(_t4$1 || (_t4$1 = _$1`
    animation: ${0} 3s infinite linear;
  `), bufferKeyframe));
  const LinearProgressBar1 = styled("span", {
    name: "MuiLinearProgress",
    slot: "Bar1",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.bar, styles2[`barColor${capitalize(ownerState.color)}`], (ownerState.variant === "indeterminate" || ownerState.variant === "query") && styles2.bar1Indeterminate, ownerState.variant === "determinate" && styles2.bar1Determinate, ownerState.variant === "buffer" && styles2.bar1Buffer];
    }
  })(({
    ownerState,
    theme
  }) => _extends$2({
    width: "100%",
    position: "absolute",
    left: 0,
    bottom: 0,
    top: 0,
    transition: "transform 0.2s linear",
    transformOrigin: "left",
    backgroundColor: ownerState.color === "inherit" ? "currentColor" : (theme.vars || theme).palette[ownerState.color].main
  }, ownerState.variant === "determinate" && {
    transition: `transform .${TRANSITION_DURATION}s linear`
  }, ownerState.variant === "buffer" && {
    zIndex: 1,
    transition: `transform .${TRANSITION_DURATION}s linear`
  }), ({
    ownerState
  }) => (ownerState.variant === "indeterminate" || ownerState.variant === "query") && react.css(_t5 || (_t5 = _$1`
      width: auto;
      animation: ${0} 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
    `), indeterminate1Keyframe));
  const LinearProgressBar2 = styled("span", {
    name: "MuiLinearProgress",
    slot: "Bar2",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.bar, styles2[`barColor${capitalize(ownerState.color)}`], (ownerState.variant === "indeterminate" || ownerState.variant === "query") && styles2.bar2Indeterminate, ownerState.variant === "buffer" && styles2.bar2Buffer];
    }
  })(({
    ownerState,
    theme
  }) => _extends$2({
    width: "100%",
    position: "absolute",
    left: 0,
    bottom: 0,
    top: 0,
    transition: "transform 0.2s linear",
    transformOrigin: "left"
  }, ownerState.variant !== "buffer" && {
    backgroundColor: ownerState.color === "inherit" ? "currentColor" : (theme.vars || theme).palette[ownerState.color].main
  }, ownerState.color === "inherit" && {
    opacity: 0.3
  }, ownerState.variant === "buffer" && {
    backgroundColor: getColorShade(theme, ownerState.color),
    transition: `transform .${TRANSITION_DURATION}s linear`
  }), ({
    ownerState
  }) => (ownerState.variant === "indeterminate" || ownerState.variant === "query") && react.css(_t6 || (_t6 = _$1`
      width: auto;
      animation: ${0} 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) 1.15s infinite;
    `), indeterminate2Keyframe));
  const LinearProgress = /* @__PURE__ */ React__namespace.forwardRef(function LinearProgress2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiLinearProgress"
    });
    const {
      className,
      color: color2 = "primary",
      value,
      valueBuffer,
      variant = "indeterminate"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$m);
    const ownerState = _extends$2({}, props, {
      color: color2,
      variant
    });
    const classes = useUtilityClasses$k(ownerState);
    const theme = useTheme();
    const rootProps = {};
    const inlineStyles = {
      bar1: {},
      bar2: {}
    };
    if (variant === "determinate" || variant === "buffer") {
      if (value !== void 0) {
        rootProps["aria-valuenow"] = Math.round(value);
        rootProps["aria-valuemin"] = 0;
        rootProps["aria-valuemax"] = 100;
        let transform = value - 100;
        if (theme.direction === "rtl") {
          transform = -transform;
        }
        inlineStyles.bar1.transform = `translateX(${transform}%)`;
      } else if (process.env.NODE_ENV !== "production") {
        console.error("MUI: You need to provide a value prop when using the determinate or buffer variant of LinearProgress .");
      }
    }
    if (variant === "buffer") {
      if (valueBuffer !== void 0) {
        let transform = (valueBuffer || 0) - 100;
        if (theme.direction === "rtl") {
          transform = -transform;
        }
        inlineStyles.bar2.transform = `translateX(${transform}%)`;
      } else if (process.env.NODE_ENV !== "production") {
        console.error("MUI: You need to provide a valueBuffer prop when using the buffer variant of LinearProgress.");
      }
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(LinearProgressRoot, _extends$2({
      className: clsx$1(classes.root, className),
      ownerState,
      role: "progressbar"
    }, rootProps, {
      ref
    }, other, {
      children: [variant === "buffer" ? /* @__PURE__ */ jsxRuntimeExports.jsx(LinearProgressDashed, {
        className: classes.dashed,
        ownerState
      }) : null, /* @__PURE__ */ jsxRuntimeExports.jsx(LinearProgressBar1, {
        className: classes.bar1,
        ownerState,
        style: inlineStyles.bar1
      }), variant === "determinate" ? null : /* @__PURE__ */ jsxRuntimeExports.jsx(LinearProgressBar2, {
        className: classes.bar2,
        ownerState,
        style: inlineStyles.bar2
      })]
    }));
  });
  process.env.NODE_ENV !== "production" ? LinearProgress.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'primary'
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["inherit", "primary", "secondary"]), PropTypes.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The value of the progress indicator for the determinate and buffer variants.
     * Value between 0 and 100.
     */
    value: PropTypes.number,
    /**
     * The value for the buffer variant.
     * Value between 0 and 100.
     */
    valueBuffer: PropTypes.number,
    /**
     * The variant to use.
     * Use indeterminate or query when there is no progress value.
     * @default 'indeterminate'
     */
    variant: PropTypes.oneOf(["buffer", "determinate", "indeterminate", "query"])
  } : void 0;
  const TableContext = /* @__PURE__ */ React__namespace.createContext();
  if (process.env.NODE_ENV !== "production") {
    TableContext.displayName = "TableContext";
  }
  const Tablelvl2Context = /* @__PURE__ */ React__namespace.createContext();
  if (process.env.NODE_ENV !== "production") {
    Tablelvl2Context.displayName = "Tablelvl2Context";
  }
  function getTableCellUtilityClass(slot) {
    return generateUtilityClass("MuiTableCell", slot);
  }
  const tableCellClasses = generateUtilityClasses("MuiTableCell", ["root", "head", "body", "footer", "sizeSmall", "sizeMedium", "paddingCheckbox", "paddingNone", "alignLeft", "alignCenter", "alignRight", "alignJustify", "stickyHeader"]);
  const _excluded$l = ["align", "className", "component", "padding", "scope", "size", "sortDirection", "variant"];
  const useUtilityClasses$j = (ownerState) => {
    const {
      classes,
      variant,
      align,
      padding: padding2,
      size,
      stickyHeader
    } = ownerState;
    const slots = {
      root: ["root", variant, stickyHeader && "stickyHeader", align !== "inherit" && `align${capitalize(align)}`, padding2 !== "normal" && `padding${capitalize(padding2)}`, `size${capitalize(size)}`]
    };
    return composeClasses(slots, getTableCellUtilityClass, classes);
  };
  const TableCellRoot = styled("td", {
    name: "MuiTableCell",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, styles2[ownerState.variant], styles2[`size${capitalize(ownerState.size)}`], ownerState.padding !== "normal" && styles2[`padding${capitalize(ownerState.padding)}`], ownerState.align !== "inherit" && styles2[`align${capitalize(ownerState.align)}`], ownerState.stickyHeader && styles2.stickyHeader];
    }
  })(({
    theme,
    ownerState
  }) => _extends$2({}, theme.typography.body2, {
    display: "table-cell",
    verticalAlign: "inherit",
    // Workaround for a rendering bug with spanned columns in Chrome 62.0.
    // Removes the alpha (sets it to 1), and lightens or darkens the theme color.
    borderBottom: theme.vars ? `1px solid ${theme.vars.palette.TableCell.border}` : `1px solid
    ${theme.palette.mode === "light" ? lighten(alpha(theme.palette.divider, 1), 0.88) : darken(alpha(theme.palette.divider, 1), 0.68)}`,
    textAlign: "left",
    padding: 16
  }, ownerState.variant === "head" && {
    color: (theme.vars || theme).palette.text.primary,
    lineHeight: theme.typography.pxToRem(24),
    fontWeight: theme.typography.fontWeightMedium
  }, ownerState.variant === "body" && {
    color: (theme.vars || theme).palette.text.primary
  }, ownerState.variant === "footer" && {
    color: (theme.vars || theme).palette.text.secondary,
    lineHeight: theme.typography.pxToRem(21),
    fontSize: theme.typography.pxToRem(12)
  }, ownerState.size === "small" && {
    padding: "6px 16px",
    [`&.${tableCellClasses.paddingCheckbox}`]: {
      width: 24,
      // prevent the checkbox column from growing
      padding: "0 12px 0 16px",
      "& > *": {
        padding: 0
      }
    }
  }, ownerState.padding === "checkbox" && {
    width: 48,
    // prevent the checkbox column from growing
    padding: "0 0 0 4px"
  }, ownerState.padding === "none" && {
    padding: 0
  }, ownerState.align === "left" && {
    textAlign: "left"
  }, ownerState.align === "center" && {
    textAlign: "center"
  }, ownerState.align === "right" && {
    textAlign: "right",
    flexDirection: "row-reverse"
  }, ownerState.align === "justify" && {
    textAlign: "justify"
  }, ownerState.stickyHeader && {
    position: "sticky",
    top: 0,
    zIndex: 2,
    backgroundColor: (theme.vars || theme).palette.background.default
  }));
  const TableCell = /* @__PURE__ */ React__namespace.forwardRef(function TableCell2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiTableCell"
    });
    const {
      align = "inherit",
      className,
      component: componentProp,
      padding: paddingProp,
      scope: scopeProp,
      size: sizeProp,
      sortDirection,
      variant: variantProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$l);
    const table = React__namespace.useContext(TableContext);
    const tablelvl22 = React__namespace.useContext(Tablelvl2Context);
    const isHeadCell = tablelvl22 && tablelvl22.variant === "head";
    let component;
    if (componentProp) {
      component = componentProp;
    } else {
      component = isHeadCell ? "th" : "td";
    }
    let scope = scopeProp;
    if (component === "td") {
      scope = void 0;
    } else if (!scope && isHeadCell) {
      scope = "col";
    }
    const variant = variantProp || tablelvl22 && tablelvl22.variant;
    const ownerState = _extends$2({}, props, {
      align,
      component,
      padding: paddingProp || (table && table.padding ? table.padding : "normal"),
      size: sizeProp || (table && table.size ? table.size : "medium"),
      sortDirection,
      stickyHeader: variant === "head" && table && table.stickyHeader,
      variant
    });
    const classes = useUtilityClasses$j(ownerState);
    let ariaSort = null;
    if (sortDirection) {
      ariaSort = sortDirection === "asc" ? "ascending" : "descending";
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TableCellRoot, _extends$2({
      as: component,
      ref,
      className: clsx$1(classes.root, className),
      "aria-sort": ariaSort,
      scope,
      ownerState
    }, other));
  });
  process.env.NODE_ENV !== "production" ? TableCell.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Set the text-align on the table cell content.
     *
     * Monetary or generally number fields **should be right aligned** as that allows
     * you to add them up quickly in your head without having to worry about decimals.
     * @default 'inherit'
     */
    align: PropTypes.oneOf(["center", "inherit", "justify", "left", "right"]),
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * Sets the padding applied to the cell.
     * The prop defaults to the value (`'default'`) inherited from the parent Table component.
     */
    padding: PropTypes.oneOf(["checkbox", "none", "normal"]),
    /**
     * Set scope attribute.
     */
    scope: PropTypes.string,
    /**
     * Specify the size of the cell.
     * The prop defaults to the value (`'medium'`) inherited from the parent Table component.
     */
    size: PropTypes.oneOfType([PropTypes.oneOf(["medium", "small"]), PropTypes.string]),
    /**
     * Set aria-sort direction.
     */
    sortDirection: PropTypes.oneOf(["asc", "desc", false]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * Specify the cell type.
     * The prop defaults to the value inherited from the parent TableHead, TableBody, or TableFooter components.
     */
    variant: PropTypes.oneOfType([PropTypes.oneOf(["body", "footer", "head"]), PropTypes.string])
  } : void 0;
  const KeyboardArrowLeft = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"
  }), "KeyboardArrowLeft");
  const KeyboardArrowRight = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"
  }), "KeyboardArrowRight");
  const LastPageIcon = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"
  }), "LastPage");
  const FirstPageIcon = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"
  }), "FirstPage");
  var _LastPageIcon, _FirstPageIcon, _KeyboardArrowRight, _KeyboardArrowLeft, _KeyboardArrowLeft2, _KeyboardArrowRight2, _FirstPageIcon2, _LastPageIcon2;
  const _excluded$k = ["backIconButtonProps", "count", "getItemAriaLabel", "nextIconButtonProps", "onPageChange", "page", "rowsPerPage", "showFirstButton", "showLastButton"];
  const TablePaginationActions = /* @__PURE__ */ React__namespace.forwardRef(function TablePaginationActions2(props, ref) {
    const {
      backIconButtonProps,
      count: count2,
      getItemAriaLabel,
      nextIconButtonProps,
      onPageChange,
      page,
      rowsPerPage,
      showFirstButton,
      showLastButton
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$k);
    const theme = useTheme();
    const handleFirstPageButtonClick = (event) => {
      onPageChange(event, 0);
    };
    const handleBackButtonClick = (event) => {
      onPageChange(event, page - 1);
    };
    const handleNextButtonClick = (event) => {
      onPageChange(event, page + 1);
    };
    const handleLastPageButtonClick = (event) => {
      onPageChange(event, Math.max(0, Math.ceil(count2 / rowsPerPage) - 1));
    };
    return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", _extends$2({
      ref
    }, other, {
      children: [showFirstButton && /* @__PURE__ */ jsxRuntimeExports.jsx(IconButton, {
        onClick: handleFirstPageButtonClick,
        disabled: page === 0,
        "aria-label": getItemAriaLabel("first", page),
        title: getItemAriaLabel("first", page),
        children: theme.direction === "rtl" ? _LastPageIcon || (_LastPageIcon = /* @__PURE__ */ jsxRuntimeExports.jsx(LastPageIcon, {})) : _FirstPageIcon || (_FirstPageIcon = /* @__PURE__ */ jsxRuntimeExports.jsx(FirstPageIcon, {}))
      }), /* @__PURE__ */ jsxRuntimeExports.jsx(IconButton, _extends$2({
        onClick: handleBackButtonClick,
        disabled: page === 0,
        color: "inherit",
        "aria-label": getItemAriaLabel("previous", page),
        title: getItemAriaLabel("previous", page)
      }, backIconButtonProps, {
        children: theme.direction === "rtl" ? _KeyboardArrowRight || (_KeyboardArrowRight = /* @__PURE__ */ jsxRuntimeExports.jsx(KeyboardArrowRight, {})) : _KeyboardArrowLeft || (_KeyboardArrowLeft = /* @__PURE__ */ jsxRuntimeExports.jsx(KeyboardArrowLeft, {}))
      })), /* @__PURE__ */ jsxRuntimeExports.jsx(IconButton, _extends$2({
        onClick: handleNextButtonClick,
        disabled: count2 !== -1 ? page >= Math.ceil(count2 / rowsPerPage) - 1 : false,
        color: "inherit",
        "aria-label": getItemAriaLabel("next", page),
        title: getItemAriaLabel("next", page)
      }, nextIconButtonProps, {
        children: theme.direction === "rtl" ? _KeyboardArrowLeft2 || (_KeyboardArrowLeft2 = /* @__PURE__ */ jsxRuntimeExports.jsx(KeyboardArrowLeft, {})) : _KeyboardArrowRight2 || (_KeyboardArrowRight2 = /* @__PURE__ */ jsxRuntimeExports.jsx(KeyboardArrowRight, {}))
      })), showLastButton && /* @__PURE__ */ jsxRuntimeExports.jsx(IconButton, {
        onClick: handleLastPageButtonClick,
        disabled: page >= Math.ceil(count2 / rowsPerPage) - 1,
        "aria-label": getItemAriaLabel("last", page),
        title: getItemAriaLabel("last", page),
        children: theme.direction === "rtl" ? _FirstPageIcon2 || (_FirstPageIcon2 = /* @__PURE__ */ jsxRuntimeExports.jsx(FirstPageIcon, {})) : _LastPageIcon2 || (_LastPageIcon2 = /* @__PURE__ */ jsxRuntimeExports.jsx(LastPageIcon, {}))
      })]
    }));
  });
  process.env.NODE_ENV !== "production" ? TablePaginationActions.propTypes = {
    /**
     * Props applied to the back arrow [`IconButton`](/material-ui/api/icon-button/) element.
     */
    backIconButtonProps: PropTypes.object,
    /**
     * The total number of rows.
     */
    count: PropTypes.number.isRequired,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the current page.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     *
     * @param {string} type The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous'). Defaults to 'page'.
     * @param {number} page The page number to format.
     * @returns {string}
     */
    getItemAriaLabel: PropTypes.func.isRequired,
    /**
     * Props applied to the next arrow [`IconButton`](/material-ui/api/icon-button/) element.
     */
    nextIconButtonProps: PropTypes.object,
    /**
     * Callback fired when the page is changed.
     *
     * @param {object} event The event source of the callback.
     * @param {number} page The page selected.
     */
    onPageChange: PropTypes.func.isRequired,
    /**
     * The zero-based index of the current page.
     */
    page: PropTypes.number.isRequired,
    /**
     * The number of rows per page.
     */
    rowsPerPage: PropTypes.number.isRequired,
    /**
     * If `true`, show the first-page button.
     */
    showFirstButton: PropTypes.bool.isRequired,
    /**
     * If `true`, show the last-page button.
     */
    showLastButton: PropTypes.bool.isRequired
  } : void 0;
  function getTablePaginationUtilityClass(slot) {
    return generateUtilityClass("MuiTablePagination", slot);
  }
  const tablePaginationClasses = generateUtilityClasses("MuiTablePagination", ["root", "toolbar", "spacer", "selectLabel", "selectRoot", "select", "selectIcon", "input", "menuItem", "displayedRows", "actions"]);
  var _InputBase;
  const _excluded$j = ["ActionsComponent", "backIconButtonProps", "className", "colSpan", "component", "count", "getItemAriaLabel", "labelDisplayedRows", "labelRowsPerPage", "nextIconButtonProps", "onPageChange", "onRowsPerPageChange", "page", "rowsPerPage", "rowsPerPageOptions", "SelectProps", "showFirstButton", "showLastButton"];
  const TablePaginationRoot = styled(TableCell, {
    name: "MuiTablePagination",
    slot: "Root",
    overridesResolver: (props, styles2) => styles2.root
  })(({
    theme
  }) => ({
    overflow: "auto",
    color: (theme.vars || theme).palette.text.primary,
    fontSize: theme.typography.pxToRem(14),
    // Increase the specificity to override TableCell.
    "&:last-child": {
      padding: 0
    }
  }));
  const TablePaginationToolbar = styled(Toolbar, {
    name: "MuiTablePagination",
    slot: "Toolbar",
    overridesResolver: (props, styles2) => _extends$2({
      [`& .${tablePaginationClasses.actions}`]: styles2.actions
    }, styles2.toolbar)
  })(({
    theme
  }) => ({
    minHeight: 52,
    paddingRight: 2,
    [`${theme.breakpoints.up("xs")} and (orientation: landscape)`]: {
      minHeight: 52
    },
    [theme.breakpoints.up("sm")]: {
      minHeight: 52,
      paddingRight: 2
    },
    [`& .${tablePaginationClasses.actions}`]: {
      flexShrink: 0,
      marginLeft: 20
    }
  }));
  const TablePaginationSpacer = styled("div", {
    name: "MuiTablePagination",
    slot: "Spacer",
    overridesResolver: (props, styles2) => styles2.spacer
  })({
    flex: "1 1 100%"
  });
  const TablePaginationSelectLabel = styled("p", {
    name: "MuiTablePagination",
    slot: "SelectLabel",
    overridesResolver: (props, styles2) => styles2.selectLabel
  })(({
    theme
  }) => _extends$2({}, theme.typography.body2, {
    flexShrink: 0
  }));
  const TablePaginationSelect = styled(Select, {
    name: "MuiTablePagination",
    slot: "Select",
    overridesResolver: (props, styles2) => _extends$2({
      [`& .${tablePaginationClasses.selectIcon}`]: styles2.selectIcon,
      [`& .${tablePaginationClasses.select}`]: styles2.select
    }, styles2.input, styles2.selectRoot)
  })({
    color: "inherit",
    fontSize: "inherit",
    flexShrink: 0,
    marginRight: 32,
    marginLeft: 8,
    [`& .${tablePaginationClasses.select}`]: {
      paddingLeft: 8,
      paddingRight: 24,
      textAlign: "right",
      textAlignLast: "right"
      // Align <select> on Chrome.
    }
  });
  const TablePaginationMenuItem = styled(MenuItem, {
    name: "MuiTablePagination",
    slot: "MenuItem",
    overridesResolver: (props, styles2) => styles2.menuItem
  })({});
  const TablePaginationDisplayedRows = styled("p", {
    name: "MuiTablePagination",
    slot: "DisplayedRows",
    overridesResolver: (props, styles2) => styles2.displayedRows
  })(({
    theme
  }) => _extends$2({}, theme.typography.body2, {
    flexShrink: 0
  }));
  function defaultLabelDisplayedRows({
    from: from2,
    to,
    count: count2
  }) {
    return `${from2}–${to} of ${count2 !== -1 ? count2 : `more than ${to}`}`;
  }
  function defaultGetAriaLabel(type) {
    return `Go to ${type} page`;
  }
  const useUtilityClasses$i = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      toolbar: ["toolbar"],
      spacer: ["spacer"],
      selectLabel: ["selectLabel"],
      select: ["select"],
      input: ["input"],
      selectIcon: ["selectIcon"],
      menuItem: ["menuItem"],
      displayedRows: ["displayedRows"],
      actions: ["actions"]
    };
    return composeClasses(slots, getTablePaginationUtilityClass, classes);
  };
  const TablePagination = /* @__PURE__ */ React__namespace.forwardRef(function TablePagination2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiTablePagination"
    });
    const {
      ActionsComponent = TablePaginationActions,
      backIconButtonProps,
      className,
      colSpan: colSpanProp,
      component = TableCell,
      count: count2,
      getItemAriaLabel = defaultGetAriaLabel,
      labelDisplayedRows = defaultLabelDisplayedRows,
      labelRowsPerPage = "Rows per page:",
      nextIconButtonProps,
      onPageChange,
      onRowsPerPageChange,
      page,
      rowsPerPage,
      rowsPerPageOptions = [10, 25, 50, 100],
      SelectProps = {},
      showFirstButton = false,
      showLastButton = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$j);
    const ownerState = props;
    const classes = useUtilityClasses$i(ownerState);
    const MenuItemComponent = SelectProps.native ? "option" : TablePaginationMenuItem;
    let colSpan;
    if (component === TableCell || component === "td") {
      colSpan = colSpanProp || 1e3;
    }
    const selectId = useId(SelectProps.id);
    const labelId = useId(SelectProps.labelId);
    const getLabelDisplayedRowsTo = () => {
      if (count2 === -1) {
        return (page + 1) * rowsPerPage;
      }
      return rowsPerPage === -1 ? count2 : Math.min(count2, (page + 1) * rowsPerPage);
    };
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TablePaginationRoot, _extends$2({
      colSpan,
      ref,
      as: component,
      ownerState,
      className: clsx$1(classes.root, className)
    }, other, {
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs(TablePaginationToolbar, {
        className: classes.toolbar,
        children: [/* @__PURE__ */ jsxRuntimeExports.jsx(TablePaginationSpacer, {
          className: classes.spacer
        }), rowsPerPageOptions.length > 1 && /* @__PURE__ */ jsxRuntimeExports.jsx(TablePaginationSelectLabel, {
          className: classes.selectLabel,
          id: labelId,
          children: labelRowsPerPage
        }), rowsPerPageOptions.length > 1 && /* @__PURE__ */ jsxRuntimeExports.jsx(TablePaginationSelect, _extends$2({
          variant: "standard"
        }, !SelectProps.variant && {
          input: _InputBase || (_InputBase = /* @__PURE__ */ jsxRuntimeExports.jsx(InputBase, {}))
        }, {
          value: rowsPerPage,
          onChange: onRowsPerPageChange,
          id: selectId,
          labelId
        }, SelectProps, {
          classes: _extends$2({}, SelectProps.classes, {
            // TODO v5 remove `classes.input`
            root: clsx$1(classes.input, classes.selectRoot, (SelectProps.classes || {}).root),
            select: clsx$1(classes.select, (SelectProps.classes || {}).select),
            // TODO v5 remove `selectIcon`
            icon: clsx$1(classes.selectIcon, (SelectProps.classes || {}).icon)
          }),
          children: rowsPerPageOptions.map((rowsPerPageOption) => /* @__PURE__ */ React.createElement(MenuItemComponent, _extends$2({}, !isHostComponent(MenuItemComponent) && {
            ownerState
          }, {
            className: classes.menuItem,
            key: rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption,
            value: rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption
          }), rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption))
        })), /* @__PURE__ */ jsxRuntimeExports.jsx(TablePaginationDisplayedRows, {
          className: classes.displayedRows,
          children: labelDisplayedRows({
            from: count2 === 0 ? 0 : page * rowsPerPage + 1,
            to: getLabelDisplayedRowsTo(),
            count: count2 === -1 ? -1 : count2,
            page
          })
        }), /* @__PURE__ */ jsxRuntimeExports.jsx(ActionsComponent, {
          className: classes.actions,
          backIconButtonProps,
          count: count2,
          nextIconButtonProps,
          onPageChange,
          page,
          rowsPerPage,
          showFirstButton,
          showLastButton,
          getItemAriaLabel
        })]
      })
    }));
  });
  process.env.NODE_ENV !== "production" ? TablePagination.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The component used for displaying the actions.
     * Either a string to use a HTML element or a component.
     * @default TablePaginationActions
     */
    ActionsComponent: PropTypes.elementType,
    /**
     * Props applied to the back arrow [`IconButton`](/material-ui/api/icon-button/) component.
     */
    backIconButtonProps: PropTypes.object,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * @ignore
     */
    colSpan: PropTypes.number,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * The total number of rows.
     *
     * To enable server side pagination for an unknown number of items, provide -1.
     */
    count: integerPropType.isRequired,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the current page.
     * This is important for screen reader users.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @param {string} type The link or button type to format ('first' | 'last' | 'next' | 'previous').
     * @returns {string}
     * @default function defaultGetAriaLabel(type) {
     *   return `Go to ${type} page`;
     * }
     */
    getItemAriaLabel: PropTypes.func,
    /**
     * Customize the displayed rows label. Invoked with a `{ from, to, count, page }`
     * object.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default function defaultLabelDisplayedRows({ from, to, count }) {
     *   return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;
     * }
     */
    labelDisplayedRows: PropTypes.func,
    /**
     * Customize the rows per page label.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Rows per page:'
     */
    labelRowsPerPage: PropTypes.node,
    /**
     * Props applied to the next arrow [`IconButton`](/material-ui/api/icon-button/) element.
     */
    nextIconButtonProps: PropTypes.object,
    /**
     * Callback fired when the page is changed.
     *
     * @param {React.MouseEvent<HTMLButtonElement> | null} event The event source of the callback.
     * @param {number} page The page selected.
     */
    onPageChange: PropTypes.func.isRequired,
    /**
     * Callback fired when the number of rows per page is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     */
    onRowsPerPageChange: PropTypes.func,
    /**
     * The zero-based index of the current page.
     */
    page: chainPropTypes(integerPropType.isRequired, (props) => {
      const {
        count: count2,
        page,
        rowsPerPage
      } = props;
      if (count2 === -1) {
        return null;
      }
      const newLastPage = Math.max(0, Math.ceil(count2 / rowsPerPage) - 1);
      if (page < 0 || page > newLastPage) {
        return new Error(`MUI: The page prop of a TablePagination is out of range (0 to ${newLastPage}, but page is ${page}).`);
      }
      return null;
    }),
    /**
     * The number of rows per page.
     *
     * Set -1 to display all the rows.
     */
    rowsPerPage: integerPropType.isRequired,
    /**
     * Customizes the options of the rows per page select field. If less than two options are
     * available, no select field will be displayed.
     * Use -1 for the value with a custom label to show all the rows.
     * @default [10, 25, 50, 100]
     */
    rowsPerPageOptions: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
      label: PropTypes.string.isRequired,
      value: PropTypes.number.isRequired
    })]).isRequired),
    /**
     * Props applied to the rows per page [`Select`](/material-ui/api/select/) element.
     * @default {}
     */
    SelectProps: PropTypes.object,
    /**
     * If `true`, show the first-page button.
     * @default false
     */
    showFirstButton: PropTypes.bool,
    /**
     * If `true`, show the last-page button.
     * @default false
     */
    showLastButton: PropTypes.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  function getAlertUtilityClass(slot) {
    return generateUtilityClass("MuiAlert", slot);
  }
  const alertClasses = generateUtilityClasses("MuiAlert", ["root", "action", "icon", "message", "filled", "filledSuccess", "filledInfo", "filledWarning", "filledError", "outlined", "outlinedSuccess", "outlinedInfo", "outlinedWarning", "outlinedError", "standard", "standardSuccess", "standardInfo", "standardWarning", "standardError"]);
  const SuccessOutlinedIcon = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z"
  }), "SuccessOutlined");
  const ReportProblemOutlinedIcon = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"
  }), "ReportProblemOutlined");
  const ErrorOutlineIcon = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
  }), "ErrorOutline");
  const InfoOutlinedIcon = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z"
  }), "InfoOutlined");
  const CloseIcon = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
  }), "Close");
  const _excluded$i = ["action", "children", "className", "closeText", "color", "components", "componentsProps", "icon", "iconMapping", "onClose", "role", "severity", "slotProps", "slots", "variant"];
  const useUtilityClasses$h = (ownerState) => {
    const {
      variant,
      color: color2,
      severity,
      classes
    } = ownerState;
    const slots = {
      root: ["root", `${variant}${capitalize(color2 || severity)}`, `${variant}`],
      icon: ["icon"],
      message: ["message"],
      action: ["action"]
    };
    return composeClasses(slots, getAlertUtilityClass, classes);
  };
  const AlertRoot = styled(Paper, {
    name: "MuiAlert",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, styles2[ownerState.variant], styles2[`${ownerState.variant}${capitalize(ownerState.color || ownerState.severity)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    const getColor = theme.palette.mode === "light" ? darken : lighten;
    const getBackgroundColor = theme.palette.mode === "light" ? lighten : darken;
    const color2 = ownerState.color || ownerState.severity;
    return _extends$2({}, theme.typography.body2, {
      backgroundColor: "transparent",
      display: "flex",
      padding: "6px 16px"
    }, color2 && ownerState.variant === "standard" && {
      color: theme.vars ? theme.vars.palette.Alert[`${color2}Color`] : getColor(theme.palette[color2].light, 0.6),
      backgroundColor: theme.vars ? theme.vars.palette.Alert[`${color2}StandardBg`] : getBackgroundColor(theme.palette[color2].light, 0.9),
      [`& .${alertClasses.icon}`]: theme.vars ? {
        color: theme.vars.palette.Alert[`${color2}IconColor`]
      } : {
        color: theme.palette[color2].main
      }
    }, color2 && ownerState.variant === "outlined" && {
      color: theme.vars ? theme.vars.palette.Alert[`${color2}Color`] : getColor(theme.palette[color2].light, 0.6),
      border: `1px solid ${(theme.vars || theme).palette[color2].light}`,
      [`& .${alertClasses.icon}`]: theme.vars ? {
        color: theme.vars.palette.Alert[`${color2}IconColor`]
      } : {
        color: theme.palette[color2].main
      }
    }, color2 && ownerState.variant === "filled" && _extends$2({
      fontWeight: theme.typography.fontWeightMedium
    }, theme.vars ? {
      color: theme.vars.palette.Alert[`${color2}FilledColor`],
      backgroundColor: theme.vars.palette.Alert[`${color2}FilledBg`]
    } : {
      backgroundColor: theme.palette.mode === "dark" ? theme.palette[color2].dark : theme.palette[color2].main,
      color: theme.palette.getContrastText(theme.palette[color2].main)
    }));
  });
  const AlertIcon = styled("div", {
    name: "MuiAlert",
    slot: "Icon",
    overridesResolver: (props, styles2) => styles2.icon
  })({
    marginRight: 12,
    padding: "7px 0",
    display: "flex",
    fontSize: 22,
    opacity: 0.9
  });
  const AlertMessage = styled("div", {
    name: "MuiAlert",
    slot: "Message",
    overridesResolver: (props, styles2) => styles2.message
  })({
    padding: "8px 0",
    minWidth: 0,
    overflow: "auto"
  });
  const AlertAction = styled("div", {
    name: "MuiAlert",
    slot: "Action",
    overridesResolver: (props, styles2) => styles2.action
  })({
    display: "flex",
    alignItems: "flex-start",
    padding: "4px 0 0 16px",
    marginLeft: "auto",
    marginRight: -8
  });
  const defaultIconMapping = {
    success: /* @__PURE__ */ jsxRuntimeExports.jsx(SuccessOutlinedIcon, {
      fontSize: "inherit"
    }),
    warning: /* @__PURE__ */ jsxRuntimeExports.jsx(ReportProblemOutlinedIcon, {
      fontSize: "inherit"
    }),
    error: /* @__PURE__ */ jsxRuntimeExports.jsx(ErrorOutlineIcon, {
      fontSize: "inherit"
    }),
    info: /* @__PURE__ */ jsxRuntimeExports.jsx(InfoOutlinedIcon, {
      fontSize: "inherit"
    })
  };
  const Alert = /* @__PURE__ */ React__namespace.forwardRef(function Alert2(inProps, ref) {
    var _ref, _slots$closeButton, _ref2, _slots$closeIcon, _slotProps$closeButto, _slotProps$closeIcon;
    const props = useThemeProps({
      props: inProps,
      name: "MuiAlert"
    });
    const {
      action,
      children,
      className,
      closeText = "Close",
      color: color2,
      components = {},
      componentsProps = {},
      icon,
      iconMapping = defaultIconMapping,
      onClose: onClose2,
      role = "alert",
      severity = "success",
      slotProps = {},
      slots = {},
      variant = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$i);
    const ownerState = _extends$2({}, props, {
      color: color2,
      severity,
      variant
    });
    const classes = useUtilityClasses$h(ownerState);
    const AlertCloseButton = (_ref = (_slots$closeButton = slots.closeButton) != null ? _slots$closeButton : components.CloseButton) != null ? _ref : IconButton;
    const AlertCloseIcon = (_ref2 = (_slots$closeIcon = slots.closeIcon) != null ? _slots$closeIcon : components.CloseIcon) != null ? _ref2 : CloseIcon;
    const closeButtonProps = (_slotProps$closeButto = slotProps.closeButton) != null ? _slotProps$closeButto : componentsProps.closeButton;
    const closeIconProps = (_slotProps$closeIcon = slotProps.closeIcon) != null ? _slotProps$closeIcon : componentsProps.closeIcon;
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(AlertRoot, _extends$2({
      role,
      elevation: 0,
      ownerState,
      className: clsx$1(classes.root, className),
      ref
    }, other, {
      children: [icon !== false ? /* @__PURE__ */ jsxRuntimeExports.jsx(AlertIcon, {
        ownerState,
        className: classes.icon,
        children: icon || iconMapping[severity] || defaultIconMapping[severity]
      }) : null, /* @__PURE__ */ jsxRuntimeExports.jsx(AlertMessage, {
        ownerState,
        className: classes.message,
        children
      }), action != null ? /* @__PURE__ */ jsxRuntimeExports.jsx(AlertAction, {
        ownerState,
        className: classes.action,
        children: action
      }) : null, action == null && onClose2 ? /* @__PURE__ */ jsxRuntimeExports.jsx(AlertAction, {
        ownerState,
        className: classes.action,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(AlertCloseButton, _extends$2({
          size: "small",
          "aria-label": closeText,
          title: closeText,
          color: "inherit",
          onClick: onClose2
        }, closeButtonProps, {
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(AlertCloseIcon, _extends$2({
            fontSize: "small"
          }, closeIconProps))
        }))
      }) : null]
    }));
  });
  process.env.NODE_ENV !== "production" ? Alert.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The action to display. It renders after the message, at the end of the alert.
     */
    action: PropTypes.node,
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * Override the default label for the *close popup* icon button.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Close'
     */
    closeText: PropTypes.string,
    /**
     * The color of the component. Unless provided, the value is taken from the `severity` prop.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["error", "info", "success", "warning"]), PropTypes.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: PropTypes.shape({
      CloseButton: PropTypes.elementType,
      CloseIcon: PropTypes.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: PropTypes.shape({
      closeButton: PropTypes.object,
      closeIcon: PropTypes.object
    }),
    /**
     * Override the icon displayed before the children.
     * Unless provided, the icon is mapped to the value of the `severity` prop.
     * Set to `false` to remove the `icon`.
     */
    icon: PropTypes.node,
    /**
     * The component maps the `severity` prop to a range of different icons,
     * for instance success to `<SuccessOutlined>`.
     * If you wish to change this mapping, you can provide your own.
     * Alternatively, you can use the `icon` prop to override the icon displayed.
     */
    iconMapping: PropTypes.shape({
      error: PropTypes.node,
      info: PropTypes.node,
      success: PropTypes.node,
      warning: PropTypes.node
    }),
    /**
     * Callback fired when the component requests to be closed.
     * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.
     * @param {React.SyntheticEvent} event The event source of the callback.
     */
    onClose: PropTypes.func,
    /**
     * The ARIA role attribute of the element.
     * @default 'alert'
     */
    role: PropTypes.string,
    /**
     * The severity of the alert. This defines the color and icon used.
     * @default 'success'
     */
    severity: PropTypes.oneOf(["error", "info", "success", "warning"]),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: PropTypes.shape({
      closeButton: PropTypes.object,
      closeIcon: PropTypes.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: PropTypes.shape({
      closeButton: PropTypes.elementType,
      closeIcon: PropTypes.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The variant to use.
     * @default 'standard'
     */
    variant: PropTypes.oneOfType([PropTypes.oneOf(["filled", "outlined", "standard"]), PropTypes.string])
  } : void 0;
  function getAlertTitleUtilityClass(slot) {
    return generateUtilityClass("MuiAlertTitle", slot);
  }
  const alertTitleClasses = generateUtilityClasses("MuiAlertTitle", ["root"]);
  const _excluded$h = ["className"];
  const useUtilityClasses$g = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getAlertTitleUtilityClass, classes);
  };
  const AlertTitleRoot = styled(Typography, {
    name: "MuiAlertTitle",
    slot: "Root",
    overridesResolver: (props, styles2) => styles2.root
  })(({
    theme
  }) => {
    return {
      fontWeight: theme.typography.fontWeightMedium,
      marginTop: -2
    };
  });
  const AlertTitle = /* @__PURE__ */ React__namespace.forwardRef(function AlertTitle2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiAlertTitle"
    });
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$h);
    const ownerState = props;
    const classes = useUtilityClasses$g(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(AlertTitleRoot, _extends$2({
      gutterBottom: true,
      component: "div",
      ownerState,
      ref,
      className: clsx$1(classes.root, className)
    }, other));
  });
  process.env.NODE_ENV !== "production" ? AlertTitle.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  const CancelIcon = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
  }), "Cancel");
  function getChipUtilityClass(slot) {
    return generateUtilityClass("MuiChip", slot);
  }
  const chipClasses = generateUtilityClasses("MuiChip", ["root", "sizeSmall", "sizeMedium", "colorError", "colorInfo", "colorPrimary", "colorSecondary", "colorSuccess", "colorWarning", "disabled", "clickable", "clickableColorPrimary", "clickableColorSecondary", "deletable", "deletableColorPrimary", "deletableColorSecondary", "outlined", "filled", "outlinedPrimary", "outlinedSecondary", "filledPrimary", "filledSecondary", "avatar", "avatarSmall", "avatarMedium", "avatarColorPrimary", "avatarColorSecondary", "icon", "iconSmall", "iconMedium", "iconColorPrimary", "iconColorSecondary", "label", "labelSmall", "labelMedium", "deleteIcon", "deleteIconSmall", "deleteIconMedium", "deleteIconColorPrimary", "deleteIconColorSecondary", "deleteIconOutlinedColorPrimary", "deleteIconOutlinedColorSecondary", "deleteIconFilledColorPrimary", "deleteIconFilledColorSecondary", "focusVisible"]);
  const _excluded$g = ["avatar", "className", "clickable", "color", "component", "deleteIcon", "disabled", "icon", "label", "onClick", "onDelete", "onKeyDown", "onKeyUp", "size", "variant", "tabIndex", "skipFocusWhenDisabled"];
  const useUtilityClasses$f = (ownerState) => {
    const {
      classes,
      disabled,
      size,
      color: color2,
      iconColor,
      onDelete,
      clickable,
      variant
    } = ownerState;
    const slots = {
      root: ["root", variant, disabled && "disabled", `size${capitalize(size)}`, `color${capitalize(color2)}`, clickable && "clickable", clickable && `clickableColor${capitalize(color2)}`, onDelete && "deletable", onDelete && `deletableColor${capitalize(color2)}`, `${variant}${capitalize(color2)}`],
      label: ["label", `label${capitalize(size)}`],
      avatar: ["avatar", `avatar${capitalize(size)}`, `avatarColor${capitalize(color2)}`],
      icon: ["icon", `icon${capitalize(size)}`, `iconColor${capitalize(iconColor)}`],
      deleteIcon: ["deleteIcon", `deleteIcon${capitalize(size)}`, `deleteIconColor${capitalize(color2)}`, `deleteIcon${capitalize(variant)}Color${capitalize(color2)}`]
    };
    return composeClasses(slots, getChipUtilityClass, classes);
  };
  const ChipRoot = styled("div", {
    name: "MuiChip",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      const {
        color: color2,
        iconColor,
        clickable,
        onDelete,
        size,
        variant
      } = ownerState;
      return [{
        [`& .${chipClasses.avatar}`]: styles2.avatar
      }, {
        [`& .${chipClasses.avatar}`]: styles2[`avatar${capitalize(size)}`]
      }, {
        [`& .${chipClasses.avatar}`]: styles2[`avatarColor${capitalize(color2)}`]
      }, {
        [`& .${chipClasses.icon}`]: styles2.icon
      }, {
        [`& .${chipClasses.icon}`]: styles2[`icon${capitalize(size)}`]
      }, {
        [`& .${chipClasses.icon}`]: styles2[`iconColor${capitalize(iconColor)}`]
      }, {
        [`& .${chipClasses.deleteIcon}`]: styles2.deleteIcon
      }, {
        [`& .${chipClasses.deleteIcon}`]: styles2[`deleteIcon${capitalize(size)}`]
      }, {
        [`& .${chipClasses.deleteIcon}`]: styles2[`deleteIconColor${capitalize(color2)}`]
      }, {
        [`& .${chipClasses.deleteIcon}`]: styles2[`deleteIcon${capitalize(variant)}Color${capitalize(color2)}`]
      }, styles2.root, styles2[`size${capitalize(size)}`], styles2[`color${capitalize(color2)}`], clickable && styles2.clickable, clickable && color2 !== "default" && styles2[`clickableColor${capitalize(color2)})`], onDelete && styles2.deletable, onDelete && color2 !== "default" && styles2[`deletableColor${capitalize(color2)}`], styles2[variant], styles2[`${variant}${capitalize(color2)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    const deleteIconColor = alpha(theme.palette.text.primary, 0.26);
    const textColor = theme.palette.mode === "light" ? theme.palette.grey[700] : theme.palette.grey[300];
    return _extends$2({
      maxWidth: "100%",
      fontFamily: theme.typography.fontFamily,
      fontSize: theme.typography.pxToRem(13),
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      height: 32,
      color: (theme.vars || theme).palette.text.primary,
      backgroundColor: (theme.vars || theme).palette.action.selected,
      borderRadius: 32 / 2,
      whiteSpace: "nowrap",
      transition: theme.transitions.create(["background-color", "box-shadow"]),
      // label will inherit this from root, then `clickable` class overrides this for both
      cursor: "default",
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 0,
      textDecoration: "none",
      border: 0,
      // Remove `button` border
      padding: 0,
      // Remove `button` padding
      verticalAlign: "middle",
      boxSizing: "border-box",
      [`&.${chipClasses.disabled}`]: {
        opacity: (theme.vars || theme).palette.action.disabledOpacity,
        pointerEvents: "none"
      },
      [`& .${chipClasses.avatar}`]: {
        marginLeft: 5,
        marginRight: -6,
        width: 24,
        height: 24,
        color: theme.vars ? theme.vars.palette.Chip.defaultAvatarColor : textColor,
        fontSize: theme.typography.pxToRem(12)
      },
      [`& .${chipClasses.avatarColorPrimary}`]: {
        color: (theme.vars || theme).palette.primary.contrastText,
        backgroundColor: (theme.vars || theme).palette.primary.dark
      },
      [`& .${chipClasses.avatarColorSecondary}`]: {
        color: (theme.vars || theme).palette.secondary.contrastText,
        backgroundColor: (theme.vars || theme).palette.secondary.dark
      },
      [`& .${chipClasses.avatarSmall}`]: {
        marginLeft: 4,
        marginRight: -4,
        width: 18,
        height: 18,
        fontSize: theme.typography.pxToRem(10)
      },
      [`& .${chipClasses.icon}`]: _extends$2({
        marginLeft: 5,
        marginRight: -6
      }, ownerState.size === "small" && {
        fontSize: 18,
        marginLeft: 4,
        marginRight: -4
      }, ownerState.iconColor === ownerState.color && _extends$2({
        color: theme.vars ? theme.vars.palette.Chip.defaultIconColor : textColor
      }, ownerState.color !== "default" && {
        color: "inherit"
      })),
      [`& .${chipClasses.deleteIcon}`]: _extends$2({
        WebkitTapHighlightColor: "transparent",
        color: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.26)` : deleteIconColor,
        fontSize: 22,
        cursor: "pointer",
        margin: "0 5px 0 -6px",
        "&:hover": {
          color: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.4)` : alpha(deleteIconColor, 0.4)
        }
      }, ownerState.size === "small" && {
        fontSize: 16,
        marginRight: 4,
        marginLeft: -4
      }, ownerState.color !== "default" && {
        color: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].contrastTextChannel} / 0.7)` : alpha(theme.palette[ownerState.color].contrastText, 0.7),
        "&:hover, &:active": {
          color: (theme.vars || theme).palette[ownerState.color].contrastText
        }
      })
    }, ownerState.size === "small" && {
      height: 24
    }, ownerState.color !== "default" && {
      backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
      color: (theme.vars || theme).palette[ownerState.color].contrastText
    }, ownerState.onDelete && {
      [`&.${chipClasses.focusVisible}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
      }
    }, ownerState.onDelete && ownerState.color !== "default" && {
      [`&.${chipClasses.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
      }
    });
  }, ({
    theme,
    ownerState
  }) => _extends$2({}, ownerState.clickable && {
    userSelect: "none",
    WebkitTapHighlightColor: "transparent",
    cursor: "pointer",
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity)
    },
    [`&.${chipClasses.focusVisible}`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
    },
    "&:active": {
      boxShadow: (theme.vars || theme).shadows[1]
    }
  }, ownerState.clickable && ownerState.color !== "default" && {
    [`&:hover, &.${chipClasses.focusVisible}`]: {
      backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
    }
  }), ({
    theme,
    ownerState
  }) => _extends$2({}, ownerState.variant === "outlined" && {
    backgroundColor: "transparent",
    border: theme.vars ? `1px solid ${theme.vars.palette.Chip.defaultBorder}` : `1px solid ${theme.palette.mode === "light" ? theme.palette.grey[400] : theme.palette.grey[700]}`,
    [`&.${chipClasses.clickable}:hover`]: {
      backgroundColor: (theme.vars || theme).palette.action.hover
    },
    [`&.${chipClasses.focusVisible}`]: {
      backgroundColor: (theme.vars || theme).palette.action.focus
    },
    [`& .${chipClasses.avatar}`]: {
      marginLeft: 4
    },
    [`& .${chipClasses.avatarSmall}`]: {
      marginLeft: 2
    },
    [`& .${chipClasses.icon}`]: {
      marginLeft: 4
    },
    [`& .${chipClasses.iconSmall}`]: {
      marginLeft: 2
    },
    [`& .${chipClasses.deleteIcon}`]: {
      marginRight: 5
    },
    [`& .${chipClasses.deleteIconSmall}`]: {
      marginRight: 3
    }
  }, ownerState.variant === "outlined" && ownerState.color !== "default" && {
    color: (theme.vars || theme).palette[ownerState.color].main,
    border: `1px solid ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.7)` : alpha(theme.palette[ownerState.color].main, 0.7)}`,
    [`&.${chipClasses.clickable}:hover`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity)
    },
    [`&.${chipClasses.focusVisible}`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.focusOpacity)
    },
    [`& .${chipClasses.deleteIcon}`]: {
      color: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.7)` : alpha(theme.palette[ownerState.color].main, 0.7),
      "&:hover, &:active": {
        color: (theme.vars || theme).palette[ownerState.color].main
      }
    }
  }));
  const ChipLabel = styled("span", {
    name: "MuiChip",
    slot: "Label",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      const {
        size
      } = ownerState;
      return [styles2.label, styles2[`label${capitalize(size)}`]];
    }
  })(({
    ownerState
  }) => _extends$2({
    overflow: "hidden",
    textOverflow: "ellipsis",
    paddingLeft: 12,
    paddingRight: 12,
    whiteSpace: "nowrap"
  }, ownerState.size === "small" && {
    paddingLeft: 8,
    paddingRight: 8
  }));
  function isDeleteKeyboardEvent(keyboardEvent) {
    return keyboardEvent.key === "Backspace" || keyboardEvent.key === "Delete";
  }
  const Chip = /* @__PURE__ */ React__namespace.forwardRef(function Chip2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiChip"
    });
    const {
      avatar: avatarProp,
      className,
      clickable: clickableProp,
      color: color2 = "default",
      component: ComponentProp,
      deleteIcon: deleteIconProp,
      disabled = false,
      icon: iconProp,
      label,
      onClick,
      onDelete,
      onKeyDown,
      onKeyUp,
      size = "medium",
      variant = "filled",
      tabIndex,
      skipFocusWhenDisabled = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$g);
    const chipRef = React__namespace.useRef(null);
    const handleRef = useForkRef(chipRef, ref);
    const handleDeleteIconClick = (event) => {
      event.stopPropagation();
      if (onDelete) {
        onDelete(event);
      }
    };
    const handleKeyDown2 = (event) => {
      if (event.currentTarget === event.target && isDeleteKeyboardEvent(event)) {
        event.preventDefault();
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
    };
    const handleKeyUp = (event) => {
      if (event.currentTarget === event.target) {
        if (onDelete && isDeleteKeyboardEvent(event)) {
          onDelete(event);
        } else if (event.key === "Escape" && chipRef.current) {
          chipRef.current.blur();
        }
      }
      if (onKeyUp) {
        onKeyUp(event);
      }
    };
    const clickable = clickableProp !== false && onClick ? true : clickableProp;
    const component = clickable || onDelete ? ButtonBase : ComponentProp || "div";
    const ownerState = _extends$2({}, props, {
      component,
      disabled,
      size,
      color: color2,
      iconColor: /* @__PURE__ */ React__namespace.isValidElement(iconProp) ? iconProp.props.color || color2 : color2,
      onDelete: !!onDelete,
      clickable,
      variant
    });
    const classes = useUtilityClasses$f(ownerState);
    const moreProps = component === ButtonBase ? _extends$2({
      component: ComponentProp || "div",
      focusVisibleClassName: classes.focusVisible
    }, onDelete && {
      disableRipple: true
    }) : {};
    let deleteIcon = null;
    if (onDelete) {
      deleteIcon = deleteIconProp && /* @__PURE__ */ React__namespace.isValidElement(deleteIconProp) ? /* @__PURE__ */ React__namespace.cloneElement(deleteIconProp, {
        className: clsx$1(deleteIconProp.props.className, classes.deleteIcon),
        onClick: handleDeleteIconClick
      }) : /* @__PURE__ */ jsxRuntimeExports.jsx(CancelIcon, {
        className: clsx$1(classes.deleteIcon),
        onClick: handleDeleteIconClick
      });
    }
    let avatar = null;
    if (avatarProp && /* @__PURE__ */ React__namespace.isValidElement(avatarProp)) {
      avatar = /* @__PURE__ */ React__namespace.cloneElement(avatarProp, {
        className: clsx$1(classes.avatar, avatarProp.props.className)
      });
    }
    let icon = null;
    if (iconProp && /* @__PURE__ */ React__namespace.isValidElement(iconProp)) {
      icon = /* @__PURE__ */ React__namespace.cloneElement(iconProp, {
        className: clsx$1(classes.icon, iconProp.props.className)
      });
    }
    if (process.env.NODE_ENV !== "production") {
      if (avatar && icon) {
        console.error("MUI: The Chip component can not handle the avatar and the icon prop at the same time. Pick one.");
      }
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(ChipRoot, _extends$2({
      as: component,
      className: clsx$1(classes.root, className),
      disabled: clickable && disabled ? true : void 0,
      onClick,
      onKeyDown: handleKeyDown2,
      onKeyUp: handleKeyUp,
      ref: handleRef,
      tabIndex: skipFocusWhenDisabled && disabled ? -1 : tabIndex,
      ownerState
    }, moreProps, other, {
      children: [avatar || icon, /* @__PURE__ */ jsxRuntimeExports.jsx(ChipLabel, {
        className: clsx$1(classes.label),
        ownerState,
        children: label
      }), deleteIcon]
    }));
  });
  process.env.NODE_ENV !== "production" ? Chip.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The Avatar element to display.
     */
    avatar: PropTypes.element,
    /**
     * This prop isn't supported.
     * Use the `component` prop if you need to change the children structure.
     */
    children: unsupportedProp,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * If `true`, the chip will appear clickable, and will raise when pressed,
     * even if the onClick prop is not defined.
     * If `false`, the chip will not appear clickable, even if onClick prop is defined.
     * This can be used, for example,
     * along with the component prop to indicate an anchor Chip is clickable.
     * Note: this controls the UI and does not affect the onClick event.
     */
    clickable: PropTypes.bool,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'default'
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), PropTypes.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * Override the default delete icon element. Shown only if `onDelete` is set.
     */
    deleteIcon: PropTypes.element,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * Icon element.
     */
    icon: PropTypes.element,
    /**
     * The content of the component.
     */
    label: PropTypes.node,
    /**
     * @ignore
     */
    onClick: PropTypes.func,
    /**
     * Callback fired when the delete icon is clicked.
     * If set, the delete icon will be shown.
     */
    onDelete: PropTypes.func,
    /**
     * @ignore
     */
    onKeyDown: PropTypes.func,
    /**
     * @ignore
     */
    onKeyUp: PropTypes.func,
    /**
     * The size of the component.
     * @default 'medium'
     */
    size: PropTypes.oneOfType([PropTypes.oneOf(["medium", "small"]), PropTypes.string]),
    /**
     * If `true`, allows the disabled chip to escape focus.
     * If `false`, allows the disabled chip to receive focus.
     * @default false
     */
    skipFocusWhenDisabled: PropTypes.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * @ignore
     */
    tabIndex: PropTypes.number,
    /**
     * The variant to use.
     * @default 'filled'
     */
    variant: PropTypes.oneOfType([PropTypes.oneOf(["filled", "outlined"]), PropTypes.string])
  } : void 0;
  function getFormControlLabelUtilityClasses(slot) {
    return generateUtilityClass("MuiFormControlLabel", slot);
  }
  const formControlLabelClasses = generateUtilityClasses("MuiFormControlLabel", ["root", "labelPlacementStart", "labelPlacementTop", "labelPlacementBottom", "disabled", "label", "error"]);
  const _excluded$f = ["checked", "className", "componentsProps", "control", "disabled", "disableTypography", "inputRef", "label", "labelPlacement", "name", "onChange", "slotProps", "value"];
  const useUtilityClasses$e = (ownerState) => {
    const {
      classes,
      disabled,
      labelPlacement,
      error
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", `labelPlacement${capitalize(labelPlacement)}`, error && "error"],
      label: ["label", disabled && "disabled"]
    };
    return composeClasses(slots, getFormControlLabelUtilityClasses, classes);
  };
  const FormControlLabelRoot = styled("label", {
    name: "MuiFormControlLabel",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${formControlLabelClasses.label}`]: styles2.label
      }, styles2.root, styles2[`labelPlacement${capitalize(ownerState.labelPlacement)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends$2({
    display: "inline-flex",
    alignItems: "center",
    cursor: "pointer",
    // For correct alignment with the text.
    verticalAlign: "middle",
    WebkitTapHighlightColor: "transparent",
    marginLeft: -11,
    marginRight: 16,
    // used for row presentation of radio/checkbox
    [`&.${formControlLabelClasses.disabled}`]: {
      cursor: "default"
    }
  }, ownerState.labelPlacement === "start" && {
    flexDirection: "row-reverse",
    marginLeft: 16,
    // used for row presentation of radio/checkbox
    marginRight: -11
  }, ownerState.labelPlacement === "top" && {
    flexDirection: "column-reverse",
    marginLeft: 16
  }, ownerState.labelPlacement === "bottom" && {
    flexDirection: "column",
    marginLeft: 16
  }, {
    [`& .${formControlLabelClasses.label}`]: {
      [`&.${formControlLabelClasses.disabled}`]: {
        color: (theme.vars || theme).palette.text.disabled
      }
    }
  }));
  const FormControlLabel = /* @__PURE__ */ React__namespace.forwardRef(function FormControlLabel2(inProps, ref) {
    var _slotProps$typography;
    const props = useThemeProps({
      props: inProps,
      name: "MuiFormControlLabel"
    });
    const {
      className,
      componentsProps = {},
      control,
      disabled: disabledProp,
      disableTypography,
      label: labelProp,
      labelPlacement = "end",
      slotProps = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$f);
    const muiFormControl = useFormControl();
    let disabled = disabledProp;
    if (typeof disabled === "undefined" && typeof control.props.disabled !== "undefined") {
      disabled = control.props.disabled;
    }
    if (typeof disabled === "undefined" && muiFormControl) {
      disabled = muiFormControl.disabled;
    }
    const controlProps = {
      disabled
    };
    ["checked", "name", "onChange", "value", "inputRef"].forEach((key) => {
      if (typeof control.props[key] === "undefined" && typeof props[key] !== "undefined") {
        controlProps[key] = props[key];
      }
    });
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["error"]
    });
    const ownerState = _extends$2({}, props, {
      disabled,
      labelPlacement,
      error: fcs.error
    });
    const classes = useUtilityClasses$e(ownerState);
    const typographySlotProps = (_slotProps$typography = slotProps.typography) != null ? _slotProps$typography : componentsProps.typography;
    let label = labelProp;
    if (label != null && label.type !== Typography && !disableTypography) {
      label = /* @__PURE__ */ jsxRuntimeExports.jsx(Typography, _extends$2({
        component: "span"
      }, typographySlotProps, {
        className: clsx$1(classes.label, typographySlotProps == null ? void 0 : typographySlotProps.className),
        children: label
      }));
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(FormControlLabelRoot, _extends$2({
      className: clsx$1(classes.root, className),
      ownerState,
      ref
    }, other, {
      children: [/* @__PURE__ */ React__namespace.cloneElement(control, controlProps), label]
    }));
  });
  process.env.NODE_ENV !== "production" ? FormControlLabel.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * If `true`, the component appears selected.
     */
    checked: PropTypes.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The props used for each slot inside.
     * @default {}
     */
    componentsProps: PropTypes.shape({
      typography: PropTypes.object
    }),
    /**
     * A control element. For instance, it can be a `Radio`, a `Switch` or a `Checkbox`.
     */
    control: PropTypes.element.isRequired,
    /**
     * If `true`, the control is disabled.
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the label is rendered as it is passed without an additional typography node.
     */
    disableTypography: PropTypes.bool,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType,
    /**
     * A text or an element to be used in an enclosing label element.
     */
    label: PropTypes.node,
    /**
     * The position of the label.
     * @default 'end'
     */
    labelPlacement: PropTypes.oneOf(["bottom", "end", "start", "top"]),
    /**
     * @ignore
     */
    name: PropTypes.string,
    /**
     * Callback fired when the state is changed.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: PropTypes.func,
    /**
     * The props used for each slot inside.
     * @default {}
     */
    slotProps: PropTypes.shape({
      typography: PropTypes.object
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The value of the component.
     */
    value: PropTypes.any
  } : void 0;
  function getSwitchUtilityClass(slot) {
    return generateUtilityClass("MuiSwitch", slot);
  }
  const switchClasses = generateUtilityClasses("MuiSwitch", ["root", "edgeStart", "edgeEnd", "switchBase", "colorPrimary", "colorSecondary", "sizeSmall", "sizeMedium", "checked", "disabled", "input", "thumb", "track"]);
  const _excluded$e = ["className", "color", "edge", "size", "sx"];
  const useUtilityClasses$d = (ownerState) => {
    const {
      classes,
      edge,
      size,
      color: color2,
      checked,
      disabled
    } = ownerState;
    const slots = {
      root: ["root", edge && `edge${capitalize(edge)}`, `size${capitalize(size)}`],
      switchBase: ["switchBase", `color${capitalize(color2)}`, checked && "checked", disabled && "disabled"],
      thumb: ["thumb"],
      track: ["track"],
      input: ["input"]
    };
    const composedClasses = composeClasses(slots, getSwitchUtilityClass, classes);
    return _extends$2({}, classes, composedClasses);
  };
  const SwitchRoot = styled("span", {
    name: "MuiSwitch",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, ownerState.edge && styles2[`edge${capitalize(ownerState.edge)}`], styles2[`size${capitalize(ownerState.size)}`]];
    }
  })(({
    ownerState
  }) => _extends$2({
    display: "inline-flex",
    width: 34 + 12 * 2,
    height: 14 + 12 * 2,
    overflow: "hidden",
    padding: 12,
    boxSizing: "border-box",
    position: "relative",
    flexShrink: 0,
    zIndex: 0,
    // Reset the stacking context.
    verticalAlign: "middle",
    // For correct alignment with the text.
    "@media print": {
      colorAdjust: "exact"
    }
  }, ownerState.edge === "start" && {
    marginLeft: -8
  }, ownerState.edge === "end" && {
    marginRight: -8
  }, ownerState.size === "small" && {
    width: 40,
    height: 24,
    padding: 7,
    [`& .${switchClasses.thumb}`]: {
      width: 16,
      height: 16
    },
    [`& .${switchClasses.switchBase}`]: {
      padding: 4,
      [`&.${switchClasses.checked}`]: {
        transform: "translateX(16px)"
      }
    }
  }));
  const SwitchSwitchBase = styled(SwitchBase, {
    name: "MuiSwitch",
    slot: "SwitchBase",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.switchBase, {
        [`& .${switchClasses.input}`]: styles2.input
      }, ownerState.color !== "default" && styles2[`color${capitalize(ownerState.color)}`]];
    }
  })(({
    theme
  }) => ({
    position: "absolute",
    top: 0,
    left: 0,
    zIndex: 1,
    // Render above the focus ripple.
    color: theme.vars ? theme.vars.palette.Switch.defaultColor : `${theme.palette.mode === "light" ? theme.palette.common.white : theme.palette.grey[300]}`,
    transition: theme.transitions.create(["left", "transform"], {
      duration: theme.transitions.duration.shortest
    }),
    [`&.${switchClasses.checked}`]: {
      transform: "translateX(20px)"
    },
    [`&.${switchClasses.disabled}`]: {
      color: theme.vars ? theme.vars.palette.Switch.defaultDisabledColor : `${theme.palette.mode === "light" ? theme.palette.grey[100] : theme.palette.grey[600]}`
    },
    [`&.${switchClasses.checked} + .${switchClasses.track}`]: {
      opacity: 0.5
    },
    [`&.${switchClasses.disabled} + .${switchClasses.track}`]: {
      opacity: theme.vars ? theme.vars.opacity.switchTrackDisabled : `${theme.palette.mode === "light" ? 0.12 : 0.2}`
    },
    [`& .${switchClasses.input}`]: {
      left: "-100%",
      width: "300%"
    }
  }), ({
    theme,
    ownerState
  }) => _extends$2({
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }
  }, ownerState.color !== "default" && {
    [`&.${switchClasses.checked}`]: {
      color: (theme.vars || theme).palette[ownerState.color].main,
      "&:hover": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      },
      [`&.${switchClasses.disabled}`]: {
        color: theme.vars ? theme.vars.palette.Switch[`${ownerState.color}DisabledColor`] : `${theme.palette.mode === "light" ? lighten(theme.palette[ownerState.color].main, 0.62) : darken(theme.palette[ownerState.color].main, 0.55)}`
      }
    },
    [`&.${switchClasses.checked} + .${switchClasses.track}`]: {
      backgroundColor: (theme.vars || theme).palette[ownerState.color].main
    }
  }));
  const SwitchTrack = styled("span", {
    name: "MuiSwitch",
    slot: "Track",
    overridesResolver: (props, styles2) => styles2.track
  })(({
    theme
  }) => ({
    height: "100%",
    width: "100%",
    borderRadius: 14 / 2,
    zIndex: -1,
    transition: theme.transitions.create(["opacity", "background-color"], {
      duration: theme.transitions.duration.shortest
    }),
    backgroundColor: theme.vars ? theme.vars.palette.common.onBackground : `${theme.palette.mode === "light" ? theme.palette.common.black : theme.palette.common.white}`,
    opacity: theme.vars ? theme.vars.opacity.switchTrack : `${theme.palette.mode === "light" ? 0.38 : 0.3}`
  }));
  const SwitchThumb = styled("span", {
    name: "MuiSwitch",
    slot: "Thumb",
    overridesResolver: (props, styles2) => styles2.thumb
  })(({
    theme
  }) => ({
    boxShadow: (theme.vars || theme).shadows[1],
    backgroundColor: "currentColor",
    width: 20,
    height: 20,
    borderRadius: "50%"
  }));
  const Switch = /* @__PURE__ */ React__namespace.forwardRef(function Switch2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiSwitch"
    });
    const {
      className,
      color: color2 = "primary",
      edge = false,
      size = "medium",
      sx
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$e);
    const ownerState = _extends$2({}, props, {
      color: color2,
      edge,
      size
    });
    const classes = useUtilityClasses$d(ownerState);
    const icon = /* @__PURE__ */ jsxRuntimeExports.jsx(SwitchThumb, {
      className: classes.thumb,
      ownerState
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(SwitchRoot, {
      className: clsx$1(classes.root, className),
      sx,
      ownerState,
      children: [/* @__PURE__ */ jsxRuntimeExports.jsx(SwitchSwitchBase, _extends$2({
        type: "checkbox",
        icon,
        checkedIcon: icon,
        ref,
        ownerState
      }, other, {
        classes: _extends$2({}, classes, {
          root: classes.switchBase
        })
      })), /* @__PURE__ */ jsxRuntimeExports.jsx(SwitchTrack, {
        className: classes.track,
        ownerState
      })]
    });
  });
  process.env.NODE_ENV !== "production" ? Switch.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * If `true`, the component is checked.
     */
    checked: PropTypes.bool,
    /**
     * The icon to display when the component is checked.
     */
    checkedIcon: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'primary'
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), PropTypes.string]),
    /**
     * The default checked state. Use when the component is not controlled.
     */
    defaultChecked: PropTypes.bool,
    /**
     * If `true`, the component is disabled.
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the ripple effect is disabled.
     * @default false
     */
    disableRipple: PropTypes.bool,
    /**
     * If given, uses a negative margin to counteract the padding on one
     * side (this is often helpful for aligning the left or right
     * side of the icon with content above or below, without ruining the border
     * size and shape).
     * @default false
     */
    edge: PropTypes.oneOf(["end", "start", false]),
    /**
     * The icon to display when the component is unchecked.
     */
    icon: PropTypes.node,
    /**
     * The id of the `input` element.
     */
    id: PropTypes.string,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: PropTypes.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType,
    /**
     * Callback fired when the state is changed.
     *
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: PropTypes.func,
    /**
     * If `true`, the `input` element is required.
     * @default false
     */
    required: PropTypes.bool,
    /**
     * The size of the component.
     * `small` is equivalent to the dense switch styling.
     * @default 'medium'
     */
    size: PropTypes.oneOfType([PropTypes.oneOf(["medium", "small"]), PropTypes.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The value of the component. The DOM API casts this to a string.
     * The browser uses "on" as the default value.
     */
    value: PropTypes.any
  } : void 0;
  function getTableContainerUtilityClass(slot) {
    return generateUtilityClass("MuiTableContainer", slot);
  }
  const tableContainerClasses = generateUtilityClasses("MuiTableContainer", ["root"]);
  const _excluded$d = ["className", "component"];
  const useUtilityClasses$c = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getTableContainerUtilityClass, classes);
  };
  const TableContainerRoot = styled("div", {
    name: "MuiTableContainer",
    slot: "Root",
    overridesResolver: (props, styles2) => styles2.root
  })({
    width: "100%",
    overflowX: "auto"
  });
  const TableContainer = /* @__PURE__ */ React__namespace.forwardRef(function TableContainer2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiTableContainer"
    });
    const {
      className,
      component = "div"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$d);
    const ownerState = _extends$2({}, props, {
      component
    });
    const classes = useUtilityClasses$c(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TableContainerRoot, _extends$2({
      ref,
      as: component,
      className: clsx$1(classes.root, className),
      ownerState
    }, other));
  });
  process.env.NODE_ENV !== "production" ? TableContainer.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component, normally `Table`.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  /**
   * react-virtual
   *
   * Copyright (c) TanStack
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   */
  function _extends$1() {
    _extends$1 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$1.apply(this, arguments);
  }
  /**
   * virtual-core
   *
   * Copyright (c) TanStack
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   */
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  /**
   * virtual-core
   *
   * Copyright (c) TanStack
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   */
  function memo(getDeps, fn, opts) {
    var _opts$initialDeps;
    var deps = (_opts$initialDeps = opts.initialDeps) != null ? _opts$initialDeps : [];
    var result;
    return function() {
      var depTime;
      if (opts.key && opts.debug != null && opts.debug())
        depTime = Date.now();
      var newDeps = getDeps();
      var depsChanged = newDeps.length !== deps.length || newDeps.some(function(dep, index2) {
        return deps[index2] !== dep;
      });
      if (!depsChanged) {
        return result;
      }
      deps = newDeps;
      var resultTime;
      if (opts.key && opts.debug != null && opts.debug())
        resultTime = Date.now();
      result = fn.apply(void 0, newDeps);
      if (opts.key && opts.debug != null && opts.debug()) {
        var depEndTime = Math.round((Date.now() - depTime) * 100) / 100;
        var resultEndTime = Math.round((Date.now() - resultTime) * 100) / 100;
        var resultFpsPercentage = resultEndTime / 16;
        var pad = function pad2(str, num) {
          str = String(str);
          while (str.length < num) {
            str = " " + str;
          }
          return str;
        };
        console.info("%c⏱ " + pad(resultEndTime, 5) + " /" + pad(depEndTime, 5) + " ms", "\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(" + Math.max(0, Math.min(120 - 120 * resultFpsPercentage, 120)) + "deg 100% 31%);", opts == null ? void 0 : opts.key);
      }
      opts == null ? void 0 : opts.onChange == null ? void 0 : opts.onChange(result);
      return result;
    };
  }
  function notUndefined(value, msg) {
    if (value === void 0) {
      throw new Error("Unexpected undefined" + (msg ? ": " + msg : ""));
    } else {
      return value;
    }
  }
  var approxEqual = function approxEqual2(a, b) {
    return Math.abs(a - b) < 1;
  };
  /**
   * virtual-core
   *
   * Copyright (c) TanStack
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   */
  var defaultKeyExtractor = function defaultKeyExtractor2(index2) {
    return index2;
  };
  var defaultRangeExtractor = function defaultRangeExtractor2(range) {
    var start2 = Math.max(range.startIndex - range.overscan, 0);
    var end2 = Math.min(range.endIndex + range.overscan, range.count - 1);
    var arr = [];
    for (var _i = start2; _i <= end2; _i++) {
      arr.push(_i);
    }
    return arr;
  };
  var observeElementRect = function observeElementRect2(instance, cb) {
    var element = instance.scrollElement;
    if (!element) {
      return;
    }
    var handler = function handler2(rect) {
      var width2 = rect.width, height2 = rect.height;
      cb({
        width: Math.round(width2),
        height: Math.round(height2)
      });
    };
    handler(element.getBoundingClientRect());
    var observer = new ResizeObserver(function(entries) {
      var entry = entries[0];
      if (entry != null && entry.borderBoxSize) {
        var box = entry.borderBoxSize[0];
        if (box) {
          handler({
            width: box.inlineSize,
            height: box.blockSize
          });
          return;
        }
      }
      handler(element.getBoundingClientRect());
    });
    observer.observe(element, {
      box: "border-box"
    });
    return function() {
      observer.unobserve(element);
    };
  };
  var observeWindowRect = function observeWindowRect2(instance, cb) {
    var element = instance.scrollElement;
    if (!element) {
      return;
    }
    var handler = function handler2() {
      cb({
        width: element.innerWidth,
        height: element.innerHeight
      });
    };
    handler();
    element.addEventListener("resize", handler, {
      passive: true
    });
    return function() {
      element.removeEventListener("resize", handler);
    };
  };
  var observeElementOffset = function observeElementOffset2(instance, cb) {
    var element = instance.scrollElement;
    if (!element) {
      return;
    }
    var handler = function handler2() {
      cb(element[instance.options.horizontal ? "scrollLeft" : "scrollTop"]);
    };
    handler();
    element.addEventListener("scroll", handler, {
      passive: true
    });
    return function() {
      element.removeEventListener("scroll", handler);
    };
  };
  var observeWindowOffset = function observeWindowOffset2(instance, cb) {
    var element = instance.scrollElement;
    if (!element) {
      return;
    }
    var handler = function handler2() {
      cb(element[instance.options.horizontal ? "scrollX" : "scrollY"]);
    };
    handler();
    element.addEventListener("scroll", handler, {
      passive: true
    });
    return function() {
      element.removeEventListener("scroll", handler);
    };
  };
  var measureElement = function measureElement2(element, entry, instance) {
    if (entry != null && entry.borderBoxSize) {
      var box = entry.borderBoxSize[0];
      if (box) {
        var size = Math.round(box[instance.options.horizontal ? "inlineSize" : "blockSize"]);
        return size;
      }
    }
    return Math.round(element.getBoundingClientRect()[instance.options.horizontal ? "width" : "height"]);
  };
  var windowScroll = function windowScroll2(offset2, _ref, instance) {
    var _instance$scrollEleme, _instance$scrollEleme2;
    var _ref$adjustments = _ref.adjustments, adjustments = _ref$adjustments === void 0 ? 0 : _ref$adjustments, behavior = _ref.behavior;
    var toOffset = offset2 + adjustments;
    (_instance$scrollEleme = instance.scrollElement) == null ? void 0 : _instance$scrollEleme.scrollTo == null ? void 0 : _instance$scrollEleme.scrollTo((_instance$scrollEleme2 = {}, _instance$scrollEleme2[instance.options.horizontal ? "left" : "top"] = toOffset, _instance$scrollEleme2.behavior = behavior, _instance$scrollEleme2));
  };
  var elementScroll = function elementScroll2(offset2, _ref2, instance) {
    var _instance$scrollEleme3, _instance$scrollEleme4;
    var _ref2$adjustments = _ref2.adjustments, adjustments = _ref2$adjustments === void 0 ? 0 : _ref2$adjustments, behavior = _ref2.behavior;
    var toOffset = offset2 + adjustments;
    (_instance$scrollEleme3 = instance.scrollElement) == null ? void 0 : _instance$scrollEleme3.scrollTo == null ? void 0 : _instance$scrollEleme3.scrollTo((_instance$scrollEleme4 = {}, _instance$scrollEleme4[instance.options.horizontal ? "left" : "top"] = toOffset, _instance$scrollEleme4.behavior = behavior, _instance$scrollEleme4));
  };
  var Virtualizer = function Virtualizer2(_opts) {
    var _this = this;
    this.unsubs = [];
    this.scrollElement = null;
    this.isScrolling = false;
    this.isScrollingTimeoutId = null;
    this.scrollToIndexTimeoutId = null;
    this.measurementsCache = [];
    this.itemSizeCache = /* @__PURE__ */ new Map();
    this.pendingMeasuredCacheIndexes = [];
    this.scrollDirection = null;
    this.scrollAdjustments = 0;
    this.measureElementCache = /* @__PURE__ */ new Map();
    this.observer = function() {
      var _ro = null;
      var get2 = function get3() {
        if (_ro) {
          return _ro;
        } else if (typeof ResizeObserver !== "undefined") {
          return _ro = new ResizeObserver(function(entries) {
            entries.forEach(function(entry) {
              _this._measureElement(entry.target, entry);
            });
          });
        } else {
          return null;
        }
      };
      return {
        disconnect: function disconnect() {
          var _get;
          return (_get = get2()) == null ? void 0 : _get.disconnect();
        },
        observe: function observe(target) {
          var _get2;
          return (_get2 = get2()) == null ? void 0 : _get2.observe(target, {
            box: "border-box"
          });
        },
        unobserve: function unobserve(target) {
          var _get3;
          return (_get3 = get2()) == null ? void 0 : _get3.unobserve(target);
        }
      };
    }();
    this.range = null;
    this.setOptions = function(opts) {
      Object.entries(opts).forEach(function(_ref3) {
        var key = _ref3[0], value = _ref3[1];
        if (typeof value === "undefined")
          delete opts[key];
      });
      _this.options = _extends({
        debug: false,
        initialOffset: 0,
        overscan: 1,
        paddingStart: 0,
        paddingEnd: 0,
        scrollPaddingStart: 0,
        scrollPaddingEnd: 0,
        horizontal: false,
        getItemKey: defaultKeyExtractor,
        rangeExtractor: defaultRangeExtractor,
        onChange: function onChange() {
        },
        measureElement,
        initialRect: {
          width: 0,
          height: 0
        },
        scrollMargin: 0,
        scrollingDelay: 150,
        indexAttribute: "data-index",
        initialMeasurementsCache: [],
        lanes: 1
      }, opts);
    };
    this.notify = function() {
      _this.options.onChange == null ? void 0 : _this.options.onChange(_this);
    };
    this.cleanup = function() {
      _this.unsubs.filter(Boolean).forEach(function(d) {
        return d();
      });
      _this.unsubs = [];
      _this.scrollElement = null;
    };
    this._didMount = function() {
      _this.measureElementCache.forEach(_this.observer.observe);
      return function() {
        _this.observer.disconnect();
        _this.cleanup();
      };
    };
    this._willUpdate = function() {
      var scrollElement = _this.options.getScrollElement();
      if (_this.scrollElement !== scrollElement) {
        _this.cleanup();
        _this.scrollElement = scrollElement;
        _this._scrollToOffset(_this.scrollOffset, {
          adjustments: void 0,
          behavior: void 0
        });
        _this.unsubs.push(_this.options.observeElementRect(_this, function(rect) {
          _this.scrollRect = rect;
          _this.maybeNotify();
        }));
        _this.unsubs.push(_this.options.observeElementOffset(_this, function(offset2) {
          _this.scrollAdjustments = 0;
          if (_this.scrollOffset === offset2) {
            return;
          }
          if (_this.isScrollingTimeoutId !== null) {
            clearTimeout(_this.isScrollingTimeoutId);
            _this.isScrollingTimeoutId = null;
          }
          _this.isScrolling = true;
          _this.scrollDirection = _this.scrollOffset < offset2 ? "forward" : "backward";
          _this.scrollOffset = offset2;
          _this.maybeNotify();
          _this.isScrollingTimeoutId = setTimeout(function() {
            _this.isScrollingTimeoutId = null;
            _this.isScrolling = false;
            _this.scrollDirection = null;
            _this.maybeNotify();
          }, _this.options.scrollingDelay);
        }));
      }
    };
    this.getSize = function() {
      return _this.scrollRect[_this.options.horizontal ? "width" : "height"];
    };
    this.memoOptions = memo(function() {
      return [_this.options.count, _this.options.paddingStart, _this.options.scrollMargin, _this.options.getItemKey];
    }, function(count2, paddingStart, scrollMargin, getItemKey) {
      _this.pendingMeasuredCacheIndexes = [];
      return {
        count: count2,
        paddingStart,
        scrollMargin,
        getItemKey
      };
    }, {
      key: false
    });
    this.getFurthestMeasurement = function(measurements, index2) {
      var furthestMeasurementsFound = /* @__PURE__ */ new Map();
      var furthestMeasurements = /* @__PURE__ */ new Map();
      for (var m = index2 - 1; m >= 0; m--) {
        var measurement = measurements[m];
        if (furthestMeasurementsFound.has(measurement.lane)) {
          continue;
        }
        var previousFurthestMeasurement = furthestMeasurements.get(measurement.lane);
        if (previousFurthestMeasurement == null || measurement.end > previousFurthestMeasurement.end) {
          furthestMeasurements.set(measurement.lane, measurement);
        } else if (measurement.end < previousFurthestMeasurement.end) {
          furthestMeasurementsFound.set(measurement.lane, true);
        }
        if (furthestMeasurementsFound.size === _this.options.lanes) {
          break;
        }
      }
      return furthestMeasurements.size === _this.options.lanes ? Array.from(furthestMeasurements.values()).sort(function(a, b) {
        return a.end - b.end;
      })[0] : void 0;
    };
    this.getMeasurements = memo(function() {
      return [_this.memoOptions(), _this.itemSizeCache];
    }, function(_ref4, itemSizeCache) {
      var count2 = _ref4.count, paddingStart = _ref4.paddingStart, scrollMargin = _ref4.scrollMargin, getItemKey = _ref4.getItemKey;
      var min2 = _this.pendingMeasuredCacheIndexes.length > 0 ? Math.min.apply(Math, _this.pendingMeasuredCacheIndexes) : 0;
      _this.pendingMeasuredCacheIndexes = [];
      var measurements = _this.measurementsCache.slice(0, min2);
      for (var _i2 = min2; _i2 < count2; _i2++) {
        var key = getItemKey(_i2);
        var furthestMeasurement = _this.options.lanes === 1 ? measurements[_i2 - 1] : _this.getFurthestMeasurement(measurements, _i2);
        var start2 = furthestMeasurement ? furthestMeasurement.end : paddingStart + scrollMargin;
        var measuredSize = itemSizeCache.get(key);
        var size = typeof measuredSize === "number" ? measuredSize : _this.options.estimateSize(_i2);
        var end2 = start2 + size;
        var lane = furthestMeasurement ? furthestMeasurement.lane : _i2 % _this.options.lanes;
        measurements[_i2] = {
          index: _i2,
          start: start2,
          size,
          end: end2,
          key,
          lane
        };
      }
      _this.measurementsCache = measurements;
      return measurements;
    }, {
      key: process.env.NODE_ENV !== "production" && "getMeasurements",
      debug: function debug() {
        return _this.options.debug;
      }
    });
    this.calculateRange = memo(function() {
      return [_this.getMeasurements(), _this.getSize(), _this.scrollOffset];
    }, function(measurements, outerSize, scrollOffset) {
      return _this.range = measurements.length > 0 && outerSize > 0 ? calculateRange({
        measurements,
        outerSize,
        scrollOffset
      }) : null;
    }, {
      key: process.env.NODE_ENV !== "production" && "calculateRange",
      debug: function debug() {
        return _this.options.debug;
      }
    });
    this.maybeNotify = memo(function() {
      _this.calculateRange();
      return [_this.range ? _this.range.startIndex : null, _this.range ? _this.range.endIndex : null, _this.isScrolling];
    }, function() {
      _this.notify();
    }, {
      key: process.env.NODE_ENV !== "production" && "maybeNotify",
      debug: function debug() {
        return _this.options.debug;
      },
      initialDeps: [this.range ? this.range.startIndex : null, this.range ? this.range.endIndex : null, this.isScrolling]
    });
    this.getIndexes = memo(function() {
      return [_this.options.rangeExtractor, _this.calculateRange(), _this.options.overscan, _this.options.count];
    }, function(rangeExtractor, range, overscan, count2) {
      return range === null ? [] : rangeExtractor(_extends({}, range, {
        overscan,
        count: count2
      }));
    }, {
      key: process.env.NODE_ENV !== "production" && "getIndexes",
      debug: function debug() {
        return _this.options.debug;
      }
    });
    this.indexFromElement = function(node2) {
      var attributeName = _this.options.indexAttribute;
      var indexStr = node2.getAttribute(attributeName);
      if (!indexStr) {
        console.warn("Missing attribute name '" + attributeName + "={index}' on measured element.");
        return -1;
      }
      return parseInt(indexStr, 10);
    };
    this._measureElement = function(node2, entry) {
      var item = _this.measurementsCache[_this.indexFromElement(node2)];
      if (!item || !node2.isConnected) {
        _this.measureElementCache.forEach(function(cached, key) {
          if (cached === node2) {
            _this.observer.unobserve(node2);
            _this.measureElementCache["delete"](key);
          }
        });
        return;
      }
      var prevNode = _this.measureElementCache.get(item.key);
      if (prevNode !== node2) {
        if (prevNode) {
          _this.observer.unobserve(prevNode);
        }
        _this.observer.observe(node2);
        _this.measureElementCache.set(item.key, node2);
      }
      var measuredItemSize = _this.options.measureElement(node2, entry, _this);
      _this.resizeItem(item, measuredItemSize);
    };
    this.resizeItem = function(item, size) {
      var _this$itemSizeCache$g;
      var itemSize = (_this$itemSizeCache$g = _this.itemSizeCache.get(item.key)) != null ? _this$itemSizeCache$g : item.size;
      var delta = size - itemSize;
      if (delta !== 0) {
        if (item.start < _this.scrollOffset) {
          if (process.env.NODE_ENV !== "production" && _this.options.debug) {
            console.info("correction", delta);
          }
          _this._scrollToOffset(_this.scrollOffset, {
            adjustments: _this.scrollAdjustments += delta,
            behavior: void 0
          });
        }
        _this.pendingMeasuredCacheIndexes.push(item.index);
        _this.itemSizeCache = new Map(_this.itemSizeCache.set(item.key, size));
        _this.notify();
      }
    };
    this.measureElement = function(node2) {
      if (!node2) {
        return;
      }
      _this._measureElement(node2, void 0);
    };
    this.getVirtualItems = memo(function() {
      return [_this.getIndexes(), _this.getMeasurements()];
    }, function(indexes, measurements) {
      var virtualItems = [];
      for (var k = 0, len = indexes.length; k < len; k++) {
        var _i3 = indexes[k];
        var measurement = measurements[_i3];
        virtualItems.push(measurement);
      }
      return virtualItems;
    }, {
      key: process.env.NODE_ENV !== "production" && "getIndexes",
      debug: function debug() {
        return _this.options.debug;
      }
    });
    this.getVirtualItemForOffset = function(offset2) {
      var measurements = _this.getMeasurements();
      return notUndefined(measurements[findNearestBinarySearch(0, measurements.length - 1, function(index2) {
        return notUndefined(measurements[index2]).start;
      }, offset2)]);
    };
    this.getOffsetForAlignment = function(toOffset, align) {
      var size = _this.getSize();
      if (align === "auto") {
        if (toOffset <= _this.scrollOffset) {
          align = "start";
        } else if (toOffset >= _this.scrollOffset + size) {
          align = "end";
        } else {
          align = "start";
        }
      }
      if (align === "start") {
        toOffset = toOffset;
      } else if (align === "end") {
        toOffset = toOffset - size;
      } else if (align === "center") {
        toOffset = toOffset - size / 2;
      }
      var scrollSizeProp = _this.options.horizontal ? "scrollWidth" : "scrollHeight";
      var scrollSize = _this.scrollElement ? "document" in _this.scrollElement ? _this.scrollElement.document.documentElement[scrollSizeProp] : _this.scrollElement[scrollSizeProp] : 0;
      var maxOffset = scrollSize - _this.getSize();
      return Math.max(Math.min(maxOffset, toOffset), 0);
    };
    this.getOffsetForIndex = function(index2, align) {
      if (align === void 0) {
        align = "auto";
      }
      index2 = Math.max(0, Math.min(index2, _this.options.count - 1));
      var measurement = notUndefined(_this.getMeasurements()[index2]);
      if (align === "auto") {
        if (measurement.end >= _this.scrollOffset + _this.getSize() - _this.options.scrollPaddingEnd) {
          align = "end";
        } else if (measurement.start <= _this.scrollOffset + _this.options.scrollPaddingStart) {
          align = "start";
        } else {
          return [_this.scrollOffset, align];
        }
      }
      var toOffset = align === "end" ? measurement.end + _this.options.scrollPaddingEnd : measurement.start - _this.options.scrollPaddingStart;
      return [_this.getOffsetForAlignment(toOffset, align), align];
    };
    this.isDynamicMode = function() {
      return _this.measureElementCache.size > 0;
    };
    this.cancelScrollToIndex = function() {
      if (_this.scrollToIndexTimeoutId !== null) {
        clearTimeout(_this.scrollToIndexTimeoutId);
        _this.scrollToIndexTimeoutId = null;
      }
    };
    this.scrollToOffset = function(toOffset, _temp) {
      var _ref5 = _temp === void 0 ? {} : _temp, _ref5$align = _ref5.align, align = _ref5$align === void 0 ? "start" : _ref5$align, behavior = _ref5.behavior;
      _this.cancelScrollToIndex();
      if (behavior === "smooth" && _this.isDynamicMode()) {
        console.warn("The `smooth` scroll behavior is not fully supported with dynamic size.");
      }
      _this._scrollToOffset(_this.getOffsetForAlignment(toOffset, align), {
        adjustments: void 0,
        behavior
      });
    };
    this.scrollToIndex = function(index2, _temp2) {
      var _ref6 = _temp2 === void 0 ? {} : _temp2, _ref6$align = _ref6.align, initialAlign = _ref6$align === void 0 ? "auto" : _ref6$align, behavior = _ref6.behavior;
      index2 = Math.max(0, Math.min(index2, _this.options.count - 1));
      _this.cancelScrollToIndex();
      if (behavior === "smooth" && _this.isDynamicMode()) {
        console.warn("The `smooth` scroll behavior is not fully supported with dynamic size.");
      }
      var _this$getOffsetForInd = _this.getOffsetForIndex(index2, initialAlign), toOffset = _this$getOffsetForInd[0], align = _this$getOffsetForInd[1];
      _this._scrollToOffset(toOffset, {
        adjustments: void 0,
        behavior
      });
      if (behavior !== "smooth" && _this.isDynamicMode()) {
        _this.scrollToIndexTimeoutId = setTimeout(function() {
          _this.scrollToIndexTimeoutId = null;
          var elementInDOM = _this.measureElementCache.has(_this.options.getItemKey(index2));
          if (elementInDOM) {
            var _this$getOffsetForInd2 = _this.getOffsetForIndex(index2, align), _toOffset = _this$getOffsetForInd2[0];
            if (!approxEqual(_toOffset, _this.scrollOffset)) {
              _this.scrollToIndex(index2, {
                align,
                behavior
              });
            }
          } else {
            _this.scrollToIndex(index2, {
              align,
              behavior
            });
          }
        });
      }
    };
    this.scrollBy = function(delta, _temp3) {
      var _ref7 = _temp3 === void 0 ? {} : _temp3, behavior = _ref7.behavior;
      _this.cancelScrollToIndex();
      if (behavior === "smooth" && _this.isDynamicMode()) {
        console.warn("The `smooth` scroll behavior is not fully supported with dynamic size.");
      }
      _this._scrollToOffset(_this.scrollOffset + delta, {
        adjustments: void 0,
        behavior
      });
    };
    this.getTotalSize = function() {
      var _this$getMeasurements;
      return (((_this$getMeasurements = _this.getMeasurements()[_this.options.count - 1]) == null ? void 0 : _this$getMeasurements.end) || _this.options.paddingStart) - _this.options.scrollMargin + _this.options.paddingEnd;
    };
    this._scrollToOffset = function(offset2, _ref8) {
      var adjustments = _ref8.adjustments, behavior = _ref8.behavior;
      _this.options.scrollToFn(offset2, {
        behavior,
        adjustments
      }, _this);
    };
    this.measure = function() {
      _this.itemSizeCache = /* @__PURE__ */ new Map();
      _this.notify();
    };
    this.setOptions(_opts);
    this.scrollRect = this.options.initialRect;
    this.scrollOffset = this.options.initialOffset;
    this.measurementsCache = this.options.initialMeasurementsCache;
    this.measurementsCache.forEach(function(item) {
      _this.itemSizeCache.set(item.key, item.size);
    });
    this.maybeNotify();
  };
  var findNearestBinarySearch = function findNearestBinarySearch2(low, high, getCurrentValue, value) {
    while (low <= high) {
      var middle = (low + high) / 2 | 0;
      var currentValue = getCurrentValue(middle);
      if (currentValue < value) {
        low = middle + 1;
      } else if (currentValue > value) {
        high = middle - 1;
      } else {
        return middle;
      }
    }
    if (low > 0) {
      return low - 1;
    } else {
      return 0;
    }
  };
  function calculateRange(_ref9) {
    var measurements = _ref9.measurements, outerSize = _ref9.outerSize, scrollOffset = _ref9.scrollOffset;
    var count2 = measurements.length - 1;
    var getOffset = function getOffset2(index2) {
      return measurements[index2].start;
    };
    var startIndex = findNearestBinarySearch(0, count2, getOffset, scrollOffset);
    var endIndex = startIndex;
    while (endIndex < count2 && measurements[endIndex].end < scrollOffset + outerSize) {
      endIndex++;
    }
    return {
      startIndex,
      endIndex
    };
  }
  /**
   * react-virtual
   *
   * Copyright (c) TanStack
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   */
  var useIsomorphicLayoutEffect$1 = typeof document !== "undefined" ? React__namespace.useLayoutEffect : React__namespace.useEffect;
  function useVirtualizerBase(options) {
    var rerender = React__namespace.useReducer(function() {
      return {};
    }, {})[1];
    var resolvedOptions = _extends$1({}, options, {
      onChange: function onChange(instance2) {
        rerender();
        options.onChange == null ? void 0 : options.onChange(instance2);
      }
    });
    var _React$useState = React__namespace.useState(function() {
      return new Virtualizer(resolvedOptions);
    }), instance = _React$useState[0];
    instance.setOptions(resolvedOptions);
    React__namespace.useEffect(function() {
      return instance._didMount();
    }, []);
    useIsomorphicLayoutEffect$1(function() {
      return instance._willUpdate();
    });
    return instance;
  }
  function useVirtualizer(options) {
    return useVirtualizerBase(_extends$1({
      observeElementRect,
      observeElementOffset,
      scrollToFn: elementScroll
    }, options));
  }
  function useWindowVirtualizer(options) {
    return useVirtualizerBase(_extends$1({
      getScrollElement: function getScrollElement() {
        return typeof document !== "undefined" ? window : null;
      },
      observeElementRect: observeWindowRect,
      observeElementOffset: observeWindowOffset,
      scrollToFn: windowScroll,
      initialOffset: typeof document !== "undefined" ? window.scrollY : void 0
    }, options));
  }
  function getTableUtilityClass(slot) {
    return generateUtilityClass("MuiTable", slot);
  }
  const tableClasses = generateUtilityClasses("MuiTable", ["root", "stickyHeader"]);
  const _excluded$c = ["className", "component", "padding", "size", "stickyHeader"];
  const useUtilityClasses$b = (ownerState) => {
    const {
      classes,
      stickyHeader
    } = ownerState;
    const slots = {
      root: ["root", stickyHeader && "stickyHeader"]
    };
    return composeClasses(slots, getTableUtilityClass, classes);
  };
  const TableRoot = styled("table", {
    name: "MuiTable",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, ownerState.stickyHeader && styles2.stickyHeader];
    }
  })(({
    theme,
    ownerState
  }) => _extends$2({
    display: "table",
    width: "100%",
    borderCollapse: "collapse",
    borderSpacing: 0,
    "& caption": _extends$2({}, theme.typography.body2, {
      padding: theme.spacing(2),
      color: (theme.vars || theme).palette.text.secondary,
      textAlign: "left",
      captionSide: "bottom"
    })
  }, ownerState.stickyHeader && {
    borderCollapse: "separate"
  }));
  const defaultComponent$4 = "table";
  const Table = /* @__PURE__ */ React__namespace.forwardRef(function Table2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiTable"
    });
    const {
      className,
      component = defaultComponent$4,
      padding: padding2 = "normal",
      size = "medium",
      stickyHeader = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$c);
    const ownerState = _extends$2({}, props, {
      component,
      padding: padding2,
      size,
      stickyHeader
    });
    const classes = useUtilityClasses$b(ownerState);
    const table = React__namespace.useMemo(() => ({
      padding: padding2,
      size,
      stickyHeader
    }), [padding2, size, stickyHeader]);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TableContext.Provider, {
      value: table,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(TableRoot, _extends$2({
        as: component,
        role: component === defaultComponent$4 ? null : "table",
        ref,
        className: clsx$1(classes.root, className),
        ownerState
      }, other))
    });
  });
  process.env.NODE_ENV !== "production" ? Table.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the table, normally `TableHead` and `TableBody`.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * Allows TableCells to inherit padding of the Table.
     * @default 'normal'
     */
    padding: PropTypes.oneOf(["checkbox", "none", "normal"]),
    /**
     * Allows TableCells to inherit size of the Table.
     * @default 'medium'
     */
    size: PropTypes.oneOfType([PropTypes.oneOf(["medium", "small"]), PropTypes.string]),
    /**
     * Set the header sticky.
     *
     * ⚠️ It doesn't work with IE11.
     * @default false
     */
    stickyHeader: PropTypes.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  function getTableHeadUtilityClass(slot) {
    return generateUtilityClass("MuiTableHead", slot);
  }
  const tableHeadClasses = generateUtilityClasses("MuiTableHead", ["root"]);
  const _excluded$b = ["className", "component"];
  const useUtilityClasses$a = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getTableHeadUtilityClass, classes);
  };
  const TableHeadRoot = styled("thead", {
    name: "MuiTableHead",
    slot: "Root",
    overridesResolver: (props, styles2) => styles2.root
  })({
    display: "table-header-group"
  });
  const tablelvl2$2 = {
    variant: "head"
  };
  const defaultComponent$3 = "thead";
  const TableHead = /* @__PURE__ */ React__namespace.forwardRef(function TableHead2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiTableHead"
    });
    const {
      className,
      component = defaultComponent$3
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$b);
    const ownerState = _extends$2({}, props, {
      component
    });
    const classes = useUtilityClasses$a(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Tablelvl2Context.Provider, {
      value: tablelvl2$2,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(TableHeadRoot, _extends$2({
        as: component,
        className: clsx$1(classes.root, className),
        ref,
        role: component === defaultComponent$3 ? null : "rowgroup",
        ownerState
      }, other))
    });
  });
  process.env.NODE_ENV !== "production" ? TableHead.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component, normally `TableRow`.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  function getTableRowUtilityClass(slot) {
    return generateUtilityClass("MuiTableRow", slot);
  }
  const tableRowClasses = generateUtilityClasses("MuiTableRow", ["root", "selected", "hover", "head", "footer"]);
  const _excluded$a = ["className", "component", "hover", "selected"];
  const useUtilityClasses$9 = (ownerState) => {
    const {
      classes,
      selected,
      hover,
      head,
      footer
    } = ownerState;
    const slots = {
      root: ["root", selected && "selected", hover && "hover", head && "head", footer && "footer"]
    };
    return composeClasses(slots, getTableRowUtilityClass, classes);
  };
  const TableRowRoot = styled("tr", {
    name: "MuiTableRow",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, ownerState.head && styles2.head, ownerState.footer && styles2.footer];
    }
  })(({
    theme
  }) => ({
    color: "inherit",
    display: "table-row",
    verticalAlign: "middle",
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0,
    [`&.${tableRowClasses.hover}:hover`]: {
      backgroundColor: (theme.vars || theme).palette.action.hover
    },
    [`&.${tableRowClasses.selected}`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
      "&:hover": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity)
      }
    }
  }));
  const defaultComponent$2 = "tr";
  const TableRow = /* @__PURE__ */ React__namespace.forwardRef(function TableRow2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiTableRow"
    });
    const {
      className,
      component = defaultComponent$2,
      hover = false,
      selected = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$a);
    const tablelvl22 = React__namespace.useContext(Tablelvl2Context);
    const ownerState = _extends$2({}, props, {
      component,
      hover,
      selected,
      head: tablelvl22 && tablelvl22.variant === "head",
      footer: tablelvl22 && tablelvl22.variant === "footer"
    });
    const classes = useUtilityClasses$9(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TableRowRoot, _extends$2({
      as: component,
      ref,
      className: clsx$1(classes.root, className),
      role: component === defaultComponent$2 ? null : "row",
      ownerState
    }, other));
  });
  process.env.NODE_ENV !== "production" ? TableRow.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Should be valid <tr> children such as `TableCell`.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, the table row will shade on hover.
     * @default false
     */
    hover: PropTypes.bool,
    /**
     * If `true`, the table row will have the selected shading.
     * @default false
     */
    selected: PropTypes.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  const shouldSpreadAdditionalProps = (Slot) => {
    return !Slot || !isHostComponent(Slot);
  };
  function getSliderUtilityClass(slot) {
    return generateUtilityClass("MuiSlider", slot);
  }
  const sliderClasses = generateUtilityClasses("MuiSlider", ["root", "active", "colorPrimary", "colorSecondary", "disabled", "dragging", "focusVisible", "mark", "markActive", "marked", "markLabel", "markLabelActive", "rail", "sizeSmall", "thumb", "thumbColorPrimary", "thumbColorSecondary", "track", "trackInverted", "trackFalse", "thumbSizeSmall", "valueLabel", "valueLabelOpen", "valueLabelCircle", "valueLabelLabel", "vertical"]);
  const useValueLabelClasses = (props) => {
    const {
      open
    } = props;
    const utilityClasses = {
      offset: clsx$1(open && sliderClasses.valueLabelOpen),
      circle: sliderClasses.valueLabelCircle,
      label: sliderClasses.valueLabelLabel
    };
    return utilityClasses;
  };
  function SliderValueLabel(props) {
    const {
      children,
      className,
      value
    } = props;
    const classes = useValueLabelClasses(props);
    if (!children) {
      return null;
    }
    return /* @__PURE__ */ React__namespace.cloneElement(children, {
      className: clsx$1(children.props.className)
    }, /* @__PURE__ */ jsxRuntimeExports.jsxs(React__namespace.Fragment, {
      children: [children.props.children, /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
        className: clsx$1(classes.offset, className),
        "aria-hidden": true,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
          className: classes.circle,
          children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
            className: classes.label,
            children: value
          })
        })
      })]
    }));
  }
  process.env.NODE_ENV !== "production" ? SliderValueLabel.propTypes = {
    children: PropTypes.element.isRequired,
    className: PropTypes.string,
    value: PropTypes.node
  } : void 0;
  const _excluded$9 = ["aria-label", "aria-valuetext", "aria-labelledby", "component", "components", "componentsProps", "color", "classes", "className", "disableSwap", "disabled", "getAriaLabel", "getAriaValueText", "marks", "max", "min", "name", "onChange", "onChangeCommitted", "orientation", "size", "step", "scale", "slotProps", "slots", "tabIndex", "track", "value", "valueLabelDisplay", "valueLabelFormat"];
  const valueToPercent = (value, min2, max2) => (value - min2) * 100 / (max2 - min2);
  function Identity(x) {
    return x;
  }
  const SliderRoot = styled("span", {
    name: "MuiSlider",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, styles2[`color${capitalize(ownerState.color)}`], ownerState.size !== "medium" && styles2[`size${capitalize(ownerState.size)}`], ownerState.marked && styles2.marked, ownerState.orientation === "vertical" && styles2.vertical, ownerState.track === "inverted" && styles2.trackInverted, ownerState.track === false && styles2.trackFalse];
    }
  })(({
    theme,
    ownerState
  }) => _extends$2({
    borderRadius: 12,
    boxSizing: "content-box",
    display: "inline-block",
    position: "relative",
    cursor: "pointer",
    touchAction: "none",
    color: (theme.vars || theme).palette[ownerState.color].main,
    WebkitTapHighlightColor: "transparent"
  }, ownerState.orientation === "horizontal" && _extends$2({
    height: 4,
    width: "100%",
    padding: "13px 0",
    // The primary input mechanism of the device includes a pointing device of limited accuracy.
    "@media (pointer: coarse)": {
      // Reach 42px touch target, about ~8mm on screen.
      padding: "20px 0"
    }
  }, ownerState.size === "small" && {
    height: 2
  }, ownerState.marked && {
    marginBottom: 20
  }), ownerState.orientation === "vertical" && _extends$2({
    height: "100%",
    width: 4,
    padding: "0 13px",
    // The primary input mechanism of the device includes a pointing device of limited accuracy.
    "@media (pointer: coarse)": {
      // Reach 42px touch target, about ~8mm on screen.
      padding: "0 20px"
    }
  }, ownerState.size === "small" && {
    width: 2
  }, ownerState.marked && {
    marginRight: 44
  }), {
    "@media print": {
      colorAdjust: "exact"
    },
    [`&.${sliderClasses.disabled}`]: {
      pointerEvents: "none",
      cursor: "default",
      color: (theme.vars || theme).palette.grey[400]
    },
    [`&.${sliderClasses.dragging}`]: {
      [`& .${sliderClasses.thumb}, & .${sliderClasses.track}`]: {
        transition: "none"
      }
    }
  }));
  process.env.NODE_ENV !== "production" ? SliderRoot.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: PropTypes.node
  } : void 0;
  const SliderRail = styled("span", {
    name: "MuiSlider",
    slot: "Rail",
    overridesResolver: (props, styles2) => styles2.rail
  })(({
    ownerState
  }) => _extends$2({
    display: "block",
    position: "absolute",
    borderRadius: "inherit",
    backgroundColor: "currentColor",
    opacity: 0.38
  }, ownerState.orientation === "horizontal" && {
    width: "100%",
    height: "inherit",
    top: "50%",
    transform: "translateY(-50%)"
  }, ownerState.orientation === "vertical" && {
    height: "100%",
    width: "inherit",
    left: "50%",
    transform: "translateX(-50%)"
  }, ownerState.track === "inverted" && {
    opacity: 1
  }));
  process.env.NODE_ENV !== "production" ? SliderRail.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: PropTypes.node
  } : void 0;
  const SliderTrack = styled("span", {
    name: "MuiSlider",
    slot: "Track",
    overridesResolver: (props, styles2) => styles2.track
  })(({
    theme,
    ownerState
  }) => {
    const color2 = (
      // Same logic as the LinearProgress track color
      theme.palette.mode === "light" ? lighten(theme.palette[ownerState.color].main, 0.62) : darken(theme.palette[ownerState.color].main, 0.5)
    );
    return _extends$2({
      display: "block",
      position: "absolute",
      borderRadius: "inherit",
      border: "1px solid currentColor",
      backgroundColor: "currentColor",
      transition: theme.transitions.create(["left", "width", "bottom", "height"], {
        duration: theme.transitions.duration.shortest
      })
    }, ownerState.size === "small" && {
      border: "none"
    }, ownerState.orientation === "horizontal" && {
      height: "inherit",
      top: "50%",
      transform: "translateY(-50%)"
    }, ownerState.orientation === "vertical" && {
      width: "inherit",
      left: "50%",
      transform: "translateX(-50%)"
    }, ownerState.track === false && {
      display: "none"
    }, ownerState.track === "inverted" && {
      backgroundColor: theme.vars ? theme.vars.palette.Slider[`${ownerState.color}Track`] : color2,
      borderColor: theme.vars ? theme.vars.palette.Slider[`${ownerState.color}Track`] : color2
    });
  });
  process.env.NODE_ENV !== "production" ? SliderTrack.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: PropTypes.node
  } : void 0;
  const SliderThumb = styled("span", {
    name: "MuiSlider",
    slot: "Thumb",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.thumb, styles2[`thumbColor${capitalize(ownerState.color)}`], ownerState.size !== "medium" && styles2[`thumbSize${capitalize(ownerState.size)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends$2({
    position: "absolute",
    width: 20,
    height: 20,
    boxSizing: "border-box",
    borderRadius: "50%",
    outline: 0,
    backgroundColor: "currentColor",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    transition: theme.transitions.create(["box-shadow", "left", "bottom"], {
      duration: theme.transitions.duration.shortest
    })
  }, ownerState.size === "small" && {
    width: 12,
    height: 12
  }, ownerState.orientation === "horizontal" && {
    top: "50%",
    transform: "translate(-50%, -50%)"
  }, ownerState.orientation === "vertical" && {
    left: "50%",
    transform: "translate(-50%, 50%)"
  }, {
    "&:before": _extends$2({
      position: "absolute",
      content: '""',
      borderRadius: "inherit",
      width: "100%",
      height: "100%",
      boxShadow: (theme.vars || theme).shadows[2]
    }, ownerState.size === "small" && {
      boxShadow: "none"
    }),
    "&::after": {
      position: "absolute",
      content: '""',
      borderRadius: "50%",
      // 42px is the hit target
      width: 42,
      height: 42,
      top: "50%",
      left: "50%",
      transform: "translate(-50%, -50%)"
    },
    [`&:hover, &.${sliderClasses.focusVisible}`]: {
      boxShadow: `0px 0px 0px 8px ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.16)` : alpha(theme.palette[ownerState.color].main, 0.16)}`,
      "@media (hover: none)": {
        boxShadow: "none"
      }
    },
    [`&.${sliderClasses.active}`]: {
      boxShadow: `0px 0px 0px 14px ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.16)` : alpha(theme.palette[ownerState.color].main, 0.16)}`
    },
    [`&.${sliderClasses.disabled}`]: {
      "&:hover": {
        boxShadow: "none"
      }
    }
  }));
  process.env.NODE_ENV !== "production" ? SliderThumb.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: PropTypes.node
  } : void 0;
  const StyledSliderValueLabel = styled(SliderValueLabel, {
    name: "MuiSlider",
    slot: "ValueLabel",
    overridesResolver: (props, styles2) => styles2.valueLabel
  })(({
    theme,
    ownerState
  }) => _extends$2({
    [`&.${sliderClasses.valueLabelOpen}`]: {
      transform: "translateY(-100%) scale(1)"
    },
    zIndex: 1,
    whiteSpace: "nowrap"
  }, theme.typography.body2, {
    fontWeight: 500,
    transition: theme.transitions.create(["transform"], {
      duration: theme.transitions.duration.shortest
    }),
    transform: "translateY(-100%) scale(0)",
    position: "absolute",
    backgroundColor: (theme.vars || theme).palette.grey[600],
    borderRadius: 2,
    color: (theme.vars || theme).palette.common.white,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    padding: "0.25rem 0.75rem"
  }, ownerState.orientation === "horizontal" && {
    top: "-10px",
    transformOrigin: "bottom center",
    "&:before": {
      position: "absolute",
      content: '""',
      width: 8,
      height: 8,
      transform: "translate(-50%, 50%) rotate(45deg)",
      backgroundColor: "inherit",
      bottom: 0,
      left: "50%"
    }
  }, ownerState.orientation === "vertical" && {
    right: "30px",
    top: "24px",
    transformOrigin: "right center",
    "&:before": {
      position: "absolute",
      content: '""',
      width: 8,
      height: 8,
      transform: "translate(-50%, 50%) rotate(45deg)",
      backgroundColor: "inherit",
      right: "-20%",
      top: "25%"
    }
  }, ownerState.size === "small" && {
    fontSize: theme.typography.pxToRem(12),
    padding: "0.25rem 0.5rem"
  }));
  process.env.NODE_ENV !== "production" ? StyledSliderValueLabel.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: PropTypes.node
  } : void 0;
  const SliderMark = styled("span", {
    name: "MuiSlider",
    slot: "Mark",
    shouldForwardProp: (prop) => slotShouldForwardProp(prop) && prop !== "markActive",
    overridesResolver: (props, styles2) => {
      const {
        markActive
      } = props;
      return [styles2.mark, markActive && styles2.markActive];
    }
  })(({
    theme,
    ownerState,
    markActive
  }) => _extends$2({
    position: "absolute",
    width: 2,
    height: 2,
    borderRadius: 1,
    backgroundColor: "currentColor"
  }, ownerState.orientation === "horizontal" && {
    top: "50%",
    transform: "translate(-1px, -50%)"
  }, ownerState.orientation === "vertical" && {
    left: "50%",
    transform: "translate(-50%, 1px)"
  }, markActive && {
    backgroundColor: (theme.vars || theme).palette.background.paper,
    opacity: 0.8
  }));
  process.env.NODE_ENV !== "production" ? SliderMark.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: PropTypes.node
  } : void 0;
  const SliderMarkLabel = styled("span", {
    name: "MuiSlider",
    slot: "MarkLabel",
    shouldForwardProp: (prop) => slotShouldForwardProp(prop) && prop !== "markLabelActive",
    overridesResolver: (props, styles2) => styles2.markLabel
  })(({
    theme,
    ownerState,
    markLabelActive
  }) => _extends$2({}, theme.typography.body2, {
    color: (theme.vars || theme).palette.text.secondary,
    position: "absolute",
    whiteSpace: "nowrap"
  }, ownerState.orientation === "horizontal" && {
    top: 30,
    transform: "translateX(-50%)",
    "@media (pointer: coarse)": {
      top: 40
    }
  }, ownerState.orientation === "vertical" && {
    left: 36,
    transform: "translateY(50%)",
    "@media (pointer: coarse)": {
      left: 44
    }
  }, markLabelActive && {
    color: (theme.vars || theme).palette.text.primary
  }));
  process.env.NODE_ENV !== "production" ? SliderMarkLabel.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: PropTypes.node
  } : void 0;
  const useUtilityClasses$8 = (ownerState) => {
    const {
      disabled,
      dragging,
      marked,
      orientation,
      track,
      classes,
      color: color2,
      size
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", dragging && "dragging", marked && "marked", orientation === "vertical" && "vertical", track === "inverted" && "trackInverted", track === false && "trackFalse", color2 && `color${capitalize(color2)}`, size && `size${capitalize(size)}`],
      rail: ["rail"],
      track: ["track"],
      mark: ["mark"],
      markActive: ["markActive"],
      markLabel: ["markLabel"],
      markLabelActive: ["markLabelActive"],
      valueLabel: ["valueLabel"],
      thumb: ["thumb", disabled && "disabled", size && `thumbSize${capitalize(size)}`, color2 && `thumbColor${capitalize(color2)}`],
      active: ["active"],
      disabled: ["disabled"],
      focusVisible: ["focusVisible"]
    };
    return composeClasses(slots, getSliderUtilityClass, classes);
  };
  const Forward = ({
    children
  }) => children;
  const Slider = /* @__PURE__ */ React__namespace.forwardRef(function Slider2(inputProps, ref) {
    var _ref, _slots$root, _ref2, _slots$rail, _ref3, _slots$track, _ref4, _slots$thumb, _ref5, _slots$valueLabel, _ref6, _slots$mark, _ref7, _slots$markLabel, _ref8, _slots$input, _slotProps$root, _slotProps$rail, _slotProps$track, _slotProps$thumb, _slotProps$valueLabel, _slotProps$mark, _slotProps$markLabel, _slotProps$input;
    const props = useThemeProps({
      props: inputProps,
      name: "MuiSlider"
    });
    const theme = useTheme();
    const isRtl = theme.direction === "rtl";
    const {
      "aria-label": ariaLabel,
      "aria-valuetext": ariaValuetext,
      "aria-labelledby": ariaLabelledby,
      // eslint-disable-next-line react/prop-types
      component = "span",
      components = {},
      componentsProps = {},
      color: color2 = "primary",
      classes: classesProp,
      // eslint-disable-next-line react/prop-types
      className,
      disableSwap = false,
      disabled = false,
      getAriaLabel,
      getAriaValueText,
      marks: marksProp = false,
      max: max2 = 100,
      min: min2 = 0,
      orientation = "horizontal",
      size = "medium",
      step = 1,
      scale = Identity,
      slotProps,
      slots,
      track = "normal",
      valueLabelDisplay = "off",
      valueLabelFormat = Identity
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$9);
    const ownerState = _extends$2({}, props, {
      isRtl,
      max: max2,
      min: min2,
      classes: classesProp,
      disabled,
      disableSwap,
      orientation,
      marks: marksProp,
      color: color2,
      size,
      step,
      scale,
      track,
      valueLabelDisplay,
      valueLabelFormat
    });
    const {
      axisProps: axisProps2,
      getRootProps,
      getHiddenInputProps,
      getThumbProps,
      open,
      active,
      axis,
      focusedThumbIndex,
      range,
      dragging,
      marks,
      values: values2,
      trackOffset,
      trackLeap
    } = useSlider(_extends$2({}, ownerState, {
      ref
    }));
    ownerState.marked = marks.length > 0 && marks.some((mark) => mark.label);
    ownerState.dragging = dragging;
    ownerState.focusedThumbIndex = focusedThumbIndex;
    const classes = useUtilityClasses$8(ownerState);
    const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : SliderRoot;
    const RailSlot = (_ref2 = (_slots$rail = slots == null ? void 0 : slots.rail) != null ? _slots$rail : components.Rail) != null ? _ref2 : SliderRail;
    const TrackSlot = (_ref3 = (_slots$track = slots == null ? void 0 : slots.track) != null ? _slots$track : components.Track) != null ? _ref3 : SliderTrack;
    const ThumbSlot = (_ref4 = (_slots$thumb = slots == null ? void 0 : slots.thumb) != null ? _slots$thumb : components.Thumb) != null ? _ref4 : SliderThumb;
    const ValueLabelSlot = (_ref5 = (_slots$valueLabel = slots == null ? void 0 : slots.valueLabel) != null ? _slots$valueLabel : components.ValueLabel) != null ? _ref5 : StyledSliderValueLabel;
    const MarkSlot = (_ref6 = (_slots$mark = slots == null ? void 0 : slots.mark) != null ? _slots$mark : components.Mark) != null ? _ref6 : SliderMark;
    const MarkLabelSlot = (_ref7 = (_slots$markLabel = slots == null ? void 0 : slots.markLabel) != null ? _slots$markLabel : components.MarkLabel) != null ? _ref7 : SliderMarkLabel;
    const InputSlot = (_ref8 = (_slots$input = slots == null ? void 0 : slots.input) != null ? _slots$input : components.Input) != null ? _ref8 : "input";
    const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
    const railSlotProps = (_slotProps$rail = slotProps == null ? void 0 : slotProps.rail) != null ? _slotProps$rail : componentsProps.rail;
    const trackSlotProps = (_slotProps$track = slotProps == null ? void 0 : slotProps.track) != null ? _slotProps$track : componentsProps.track;
    const thumbSlotProps = (_slotProps$thumb = slotProps == null ? void 0 : slotProps.thumb) != null ? _slotProps$thumb : componentsProps.thumb;
    const valueLabelSlotProps = (_slotProps$valueLabel = slotProps == null ? void 0 : slotProps.valueLabel) != null ? _slotProps$valueLabel : componentsProps.valueLabel;
    const markSlotProps = (_slotProps$mark = slotProps == null ? void 0 : slotProps.mark) != null ? _slotProps$mark : componentsProps.mark;
    const markLabelSlotProps = (_slotProps$markLabel = slotProps == null ? void 0 : slotProps.markLabel) != null ? _slotProps$markLabel : componentsProps.markLabel;
    const inputSlotProps = (_slotProps$input = slotProps == null ? void 0 : slotProps.input) != null ? _slotProps$input : componentsProps.input;
    const rootProps = useSlotProps({
      elementType: RootSlot,
      getSlotProps: getRootProps,
      externalSlotProps: rootSlotProps,
      externalForwardedProps: other,
      additionalProps: _extends$2({}, shouldSpreadAdditionalProps(RootSlot) && {
        as: component
      }),
      ownerState: _extends$2({}, ownerState, rootSlotProps == null ? void 0 : rootSlotProps.ownerState),
      className: [classes.root, className]
    });
    const railProps = useSlotProps({
      elementType: RailSlot,
      externalSlotProps: railSlotProps,
      ownerState,
      className: classes.rail
    });
    const trackProps = useSlotProps({
      elementType: TrackSlot,
      externalSlotProps: trackSlotProps,
      additionalProps: {
        style: _extends$2({}, axisProps2[axis].offset(trackOffset), axisProps2[axis].leap(trackLeap))
      },
      ownerState: _extends$2({}, ownerState, trackSlotProps == null ? void 0 : trackSlotProps.ownerState),
      className: classes.track
    });
    const thumbProps = useSlotProps({
      elementType: ThumbSlot,
      getSlotProps: getThumbProps,
      externalSlotProps: thumbSlotProps,
      ownerState: _extends$2({}, ownerState, thumbSlotProps == null ? void 0 : thumbSlotProps.ownerState)
    });
    const valueLabelProps = useSlotProps({
      elementType: ValueLabelSlot,
      externalSlotProps: valueLabelSlotProps,
      ownerState: _extends$2({}, ownerState, valueLabelSlotProps == null ? void 0 : valueLabelSlotProps.ownerState),
      className: classes.valueLabel
    });
    const markProps = useSlotProps({
      elementType: MarkSlot,
      externalSlotProps: markSlotProps,
      ownerState,
      className: classes.mark
    });
    const markLabelProps = useSlotProps({
      elementType: MarkLabelSlot,
      externalSlotProps: markLabelSlotProps,
      ownerState
    });
    const inputSliderProps = useSlotProps({
      elementType: InputSlot,
      getSlotProps: getHiddenInputProps,
      externalSlotProps: inputSlotProps,
      ownerState
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(RootSlot, _extends$2({}, rootProps, {
      children: [/* @__PURE__ */ jsxRuntimeExports.jsx(RailSlot, _extends$2({}, railProps)), /* @__PURE__ */ jsxRuntimeExports.jsx(TrackSlot, _extends$2({}, trackProps)), marks.filter((mark) => mark.value >= min2 && mark.value <= max2).map((mark, index2) => {
        const percent = valueToPercent(mark.value, min2, max2);
        const style2 = axisProps2[axis].offset(percent);
        let markActive;
        if (track === false) {
          markActive = values2.indexOf(mark.value) !== -1;
        } else {
          markActive = track === "normal" && (range ? mark.value >= values2[0] && mark.value <= values2[values2.length - 1] : mark.value <= values2[0]) || track === "inverted" && (range ? mark.value <= values2[0] || mark.value >= values2[values2.length - 1] : mark.value >= values2[0]);
        }
        return /* @__PURE__ */ jsxRuntimeExports.jsxs(React__namespace.Fragment, {
          children: [/* @__PURE__ */ jsxRuntimeExports.jsx(MarkSlot, _extends$2({
            "data-index": index2
          }, markProps, !isHostComponent(MarkSlot) && {
            markActive
          }, {
            style: _extends$2({}, style2, markProps.style),
            className: clsx$1(markProps.className, markActive && classes.markActive)
          })), mark.label != null ? /* @__PURE__ */ jsxRuntimeExports.jsx(MarkLabelSlot, _extends$2({
            "aria-hidden": true,
            "data-index": index2
          }, markLabelProps, !isHostComponent(MarkLabelSlot) && {
            markLabelActive: markActive
          }, {
            style: _extends$2({}, style2, markLabelProps.style),
            className: clsx$1(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive),
            children: mark.label
          })) : null]
        }, index2);
      }), values2.map((value, index2) => {
        const percent = valueToPercent(value, min2, max2);
        const style2 = axisProps2[axis].offset(percent);
        const ValueLabelComponent = valueLabelDisplay === "off" ? Forward : ValueLabelSlot;
        return /* @__PURE__ */ jsxRuntimeExports.jsx(React__namespace.Fragment, {
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(ValueLabelComponent, _extends$2({}, !isHostComponent(ValueLabelComponent) && {
            valueLabelFormat,
            valueLabelDisplay,
            value: typeof valueLabelFormat === "function" ? valueLabelFormat(scale(value), index2) : valueLabelFormat,
            index: index2,
            open: open === index2 || active === index2 || valueLabelDisplay === "on",
            disabled
          }, valueLabelProps, {
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(ThumbSlot, _extends$2({
              "data-index": index2,
              "data-focusvisible": focusedThumbIndex === index2
            }, thumbProps, {
              className: clsx$1(classes.thumb, thumbProps.className, active === index2 && classes.active, focusedThumbIndex === index2 && classes.focusVisible),
              style: _extends$2({}, style2, {
                pointerEvents: disableSwap && active !== index2 ? "none" : void 0
              }, thumbProps.style),
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(InputSlot, _extends$2({
                "data-index": index2,
                "aria-label": getAriaLabel ? getAriaLabel(index2) : ariaLabel,
                "aria-valuenow": scale(value),
                "aria-labelledby": ariaLabelledby,
                "aria-valuetext": getAriaValueText ? getAriaValueText(scale(value), index2) : ariaValuetext,
                value: values2[index2]
              }, inputSliderProps))
            }))
          }))
        }, index2);
      })]
    }));
  });
  process.env.NODE_ENV !== "production" ? Slider.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The label of the slider.
     */
    "aria-label": chainPropTypes(PropTypes.string, (props) => {
      const range = Array.isArray(props.value || props.defaultValue);
      if (range && props["aria-label"] != null) {
        return new Error("MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.");
      }
      return null;
    }),
    /**
     * The id of the element containing a label for the slider.
     */
    "aria-labelledby": PropTypes.string,
    /**
     * A string value that provides a user-friendly name for the current value of the slider.
     */
    "aria-valuetext": chainPropTypes(PropTypes.string, (props) => {
      const range = Array.isArray(props.value || props.defaultValue);
      if (range && props["aria-valuetext"] != null) {
        return new Error("MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.");
      }
      return null;
    }),
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'primary'
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["primary", "secondary"]), PropTypes.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: PropTypes.shape({
      Input: PropTypes.elementType,
      Mark: PropTypes.elementType,
      MarkLabel: PropTypes.elementType,
      Rail: PropTypes.elementType,
      Root: PropTypes.elementType,
      Thumb: PropTypes.elementType,
      Track: PropTypes.elementType,
      ValueLabel: PropTypes.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: PropTypes.shape({
      input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      mark: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      markLabel: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      rail: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      thumb: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      track: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      valueLabel: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
        children: PropTypes.element,
        className: PropTypes.string,
        open: PropTypes.bool,
        style: PropTypes.object,
        value: PropTypes.number,
        valueLabelDisplay: PropTypes.oneOf(["auto", "off", "on"])
      })])
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.
     * @default false
     */
    disableSwap: PropTypes.bool,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.
     * This is important for screen reader users.
     * @param {number} index The thumb label's index to format.
     * @returns {string}
     */
    getAriaLabel: PropTypes.func,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
     * This is important for screen reader users.
     * @param {number} value The thumb label's value to format.
     * @param {number} index The thumb label's index to format.
     * @returns {string}
     */
    getAriaValueText: PropTypes.func,
    /**
     * Marks indicate predetermined values to which the user can move the slider.
     * If `true` the marks are spaced according the value of the `step` prop.
     * If an array, it should contain objects with `value` and an optional `label` keys.
     * @default false
     */
    marks: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.shape({
      label: PropTypes.node,
      value: PropTypes.number.isRequired
    })), PropTypes.bool]),
    /**
     * The maximum allowed value of the slider.
     * Should not be equal to min.
     * @default 100
     */
    max: PropTypes.number,
    /**
     * The minimum allowed value of the slider.
     * Should not be equal to max.
     * @default 0
     */
    min: PropTypes.number,
    /**
     * Name attribute of the hidden `input` element.
     */
    name: PropTypes.string,
    /**
     * Callback function that is fired when the slider's value changed.
     *
     * @param {Event} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (any).
     * **Warning**: This is a generic event not a change event.
     * @param {number | number[]} value The new value.
     * @param {number} activeThumb Index of the currently moved thumb.
     */
    onChange: PropTypes.func,
    /**
     * Callback function that is fired when the `mouseup` is triggered.
     *
     * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.
     * @param {number | number[]} value The new value.
     */
    onChangeCommitted: PropTypes.func,
    /**
     * The component orientation.
     * @default 'horizontal'
     */
    orientation: PropTypes.oneOf(["horizontal", "vertical"]),
    /**
     * A transformation function, to change the scale of the slider.
     * @param {any} x
     * @returns {any}
     * @default function Identity(x) {
     *   return x;
     * }
     */
    scale: PropTypes.func,
    /**
     * The size of the slider.
     * @default 'medium'
     */
    size: PropTypes.oneOfType([PropTypes.oneOf(["small", "medium"]), PropTypes.string]),
    /**
     * The props used for each slot inside the Slider.
     * @default {}
     */
    slotProps: PropTypes.shape({
      input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      mark: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      markLabel: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      rail: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      thumb: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      track: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      valueLabel: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
        children: PropTypes.element,
        className: PropTypes.string,
        open: PropTypes.bool,
        style: PropTypes.object,
        value: PropTypes.number,
        valueLabelDisplay: PropTypes.oneOf(["auto", "off", "on"])
      })])
    }),
    /**
     * The components used for each slot inside the Slider.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      input: PropTypes.elementType,
      mark: PropTypes.elementType,
      markLabel: PropTypes.elementType,
      rail: PropTypes.elementType,
      root: PropTypes.elementType,
      thumb: PropTypes.elementType,
      track: PropTypes.elementType,
      valueLabel: PropTypes.elementType
    }),
    /**
     * The granularity with which the slider can step through values. (A "discrete" slider.)
     * The `min` prop serves as the origin for the valid values.
     * We recommend (max - min) to be evenly divisible by the step.
     *
     * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
     * @default 1
     */
    step: PropTypes.number,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * Tab index attribute of the hidden `input` element.
     */
    tabIndex: PropTypes.number,
    /**
     * The track presentation:
     *
     * - `normal` the track will render a bar representing the slider value.
     * - `inverted` the track will render a bar representing the remaining slider value.
     * - `false` the track will render without a bar.
     * @default 'normal'
     */
    track: PropTypes.oneOf(["inverted", "normal", false]),
    /**
     * The value of the slider.
     * For ranged sliders, provide an array with two values.
     */
    value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),
    /**
     * Controls when the value label is displayed:
     *
     * - `auto` the value label will display when the thumb is hovered or focused.
     * - `on` will display persistently.
     * - `off` will never display.
     * @default 'off'
     */
    valueLabelDisplay: PropTypes.oneOf(["auto", "off", "on"]),
    /**
     * The format function the value label's value.
     *
     * When a function is provided, it should have the following signature:
     *
     * - {number} value The value label's value to format
     * - {number} index The value label's index to format
     * @param {any} x
     * @returns {any}
     * @default function Identity(x) {
     *   return x;
     * }
     */
    valueLabelFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string])
  } : void 0;
  const _excluded$8 = ["component", "direction", "spacing", "divider", "children"];
  function joinChildren(children, separator) {
    const childrenArray = React__namespace.Children.toArray(children).filter(Boolean);
    return childrenArray.reduce((output, child, index2) => {
      output.push(child);
      if (index2 < childrenArray.length - 1) {
        output.push(/* @__PURE__ */ React__namespace.cloneElement(separator, {
          key: `separator-${index2}`
        }));
      }
      return output;
    }, []);
  }
  const getSideFromDirection = (direction) => {
    return {
      row: "Left",
      "row-reverse": "Right",
      column: "Top",
      "column-reverse": "Bottom"
    }[direction];
  };
  const style = ({
    ownerState,
    theme
  }) => {
    let styles2 = _extends$2({
      display: "flex",
      flexDirection: "column"
    }, handleBreakpoints({
      theme
    }, resolveBreakpointValues({
      values: ownerState.direction,
      breakpoints: theme.breakpoints.values
    }), (propValue) => ({
      flexDirection: propValue
    })));
    if (ownerState.spacing) {
      const transformer = createUnarySpacing(theme);
      const base = Object.keys(theme.breakpoints.values).reduce((acc, breakpoint) => {
        if (typeof ownerState.spacing === "object" && ownerState.spacing[breakpoint] != null || typeof ownerState.direction === "object" && ownerState.direction[breakpoint] != null) {
          acc[breakpoint] = true;
        }
        return acc;
      }, {});
      const directionValues = resolveBreakpointValues({
        values: ownerState.direction,
        base
      });
      const spacingValues = resolveBreakpointValues({
        values: ownerState.spacing,
        base
      });
      if (typeof directionValues === "object") {
        Object.keys(directionValues).forEach((breakpoint, index2, breakpoints2) => {
          const directionValue = directionValues[breakpoint];
          if (!directionValue) {
            const previousDirectionValue = index2 > 0 ? directionValues[breakpoints2[index2 - 1]] : "column";
            directionValues[breakpoint] = previousDirectionValue;
          }
        });
      }
      const styleFromPropValue = (propValue, breakpoint) => {
        return {
          "& > :not(style) + :not(style)": {
            margin: 0,
            [`margin${getSideFromDirection(breakpoint ? directionValues[breakpoint] : ownerState.direction)}`]: getValue(transformer, propValue)
          }
        };
      };
      styles2 = deepmerge(styles2, handleBreakpoints({
        theme
      }, spacingValues, styleFromPropValue));
    }
    styles2 = mergeBreakpointsInOrder(theme.breakpoints, styles2);
    return styles2;
  };
  const StackRoot = styled("div", {
    name: "MuiStack",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      return [styles2.root];
    }
  })(style);
  const Stack = /* @__PURE__ */ React__namespace.forwardRef(function Stack2(inProps, ref) {
    const themeProps = useThemeProps({
      props: inProps,
      name: "MuiStack"
    });
    const props = extendSxProp(themeProps);
    const {
      component = "div",
      direction = "column",
      spacing: spacing2 = 0,
      divider,
      children
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$8);
    const ownerState = {
      direction,
      spacing: spacing2
    };
    return /* @__PURE__ */ jsxRuntimeExports.jsx(StackRoot, _extends$2({
      as: component,
      ownerState,
      ref
    }, other, {
      children: divider ? joinChildren(children, divider) : children
    }));
  });
  process.env.NODE_ENV !== "production" ? Stack.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * Defines the `flex-direction` style property.
     * It is applied for all screen sizes.
     * @default 'column'
     */
    direction: PropTypes.oneOfType([PropTypes.oneOf(["column-reverse", "column", "row-reverse", "row"]), PropTypes.arrayOf(PropTypes.oneOf(["column-reverse", "column", "row-reverse", "row"])), PropTypes.object]),
    /**
     * Add an element between each child.
     */
    divider: PropTypes.node,
    /**
     * Defines the space between immediate children.
     * @default 0
     */
    spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),
    /**
     * The system prop, which allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  function getBadgeUtilityClass(slot) {
    return generateUtilityClass("MuiBadge", slot);
  }
  const badgeClasses = generateUtilityClasses("MuiBadge", [
    "root",
    "badge",
    "dot",
    "standard",
    "anchorOriginTopRight",
    "anchorOriginBottomRight",
    "anchorOriginTopLeft",
    "anchorOriginBottomLeft",
    "invisible",
    "colorError",
    "colorInfo",
    "colorPrimary",
    "colorSecondary",
    "colorSuccess",
    "colorWarning",
    "overlapRectangular",
    "overlapCircular",
    // TODO: v6 remove the overlap value from these class keys
    "anchorOriginTopLeftCircular",
    "anchorOriginTopLeftRectangular",
    "anchorOriginTopRightCircular",
    "anchorOriginTopRightRectangular",
    "anchorOriginBottomLeftCircular",
    "anchorOriginBottomLeftRectangular",
    "anchorOriginBottomRightCircular",
    "anchorOriginBottomRightRectangular"
  ]);
  const _excluded$7 = ["anchorOrigin", "className", "classes", "component", "components", "componentsProps", "children", "overlap", "color", "invisible", "max", "badgeContent", "slots", "slotProps", "showZero", "variant"];
  const RADIUS_STANDARD = 10;
  const RADIUS_DOT = 4;
  const useUtilityClasses$7 = (ownerState) => {
    const {
      color: color2,
      anchorOrigin,
      invisible,
      overlap,
      variant,
      classes = {}
    } = ownerState;
    const slots = {
      root: ["root"],
      badge: ["badge", variant, invisible && "invisible", `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}`, `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}${capitalize(overlap)}`, `overlap${capitalize(overlap)}`, color2 !== "default" && `color${capitalize(color2)}`]
    };
    return composeClasses(slots, getBadgeUtilityClass, classes);
  };
  const BadgeRoot = styled("span", {
    name: "MuiBadge",
    slot: "Root",
    overridesResolver: (props, styles2) => styles2.root
  })({
    position: "relative",
    display: "inline-flex",
    // For correct alignment with the text.
    verticalAlign: "middle",
    flexShrink: 0
  });
  const BadgeBadge = styled("span", {
    name: "MuiBadge",
    slot: "Badge",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.badge, styles2[ownerState.variant], styles2[`anchorOrigin${capitalize(ownerState.anchorOrigin.vertical)}${capitalize(ownerState.anchorOrigin.horizontal)}${capitalize(ownerState.overlap)}`], ownerState.color !== "default" && styles2[`color${capitalize(ownerState.color)}`], ownerState.invisible && styles2.invisible];
    }
  })(({
    theme,
    ownerState
  }) => _extends$2({
    display: "flex",
    flexDirection: "row",
    flexWrap: "wrap",
    justifyContent: "center",
    alignContent: "center",
    alignItems: "center",
    position: "absolute",
    boxSizing: "border-box",
    fontFamily: theme.typography.fontFamily,
    fontWeight: theme.typography.fontWeightMedium,
    fontSize: theme.typography.pxToRem(12),
    minWidth: RADIUS_STANDARD * 2,
    lineHeight: 1,
    padding: "0 6px",
    height: RADIUS_STANDARD * 2,
    borderRadius: RADIUS_STANDARD,
    zIndex: 1,
    // Render the badge on top of potential ripples.
    transition: theme.transitions.create("transform", {
      easing: theme.transitions.easing.easeInOut,
      duration: theme.transitions.duration.enteringScreen
    })
  }, ownerState.color !== "default" && {
    backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
    color: (theme.vars || theme).palette[ownerState.color].contrastText
  }, ownerState.variant === "dot" && {
    borderRadius: RADIUS_DOT,
    height: RADIUS_DOT * 2,
    minWidth: RADIUS_DOT * 2,
    padding: 0
  }, ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "rectangular" && {
    top: 0,
    right: 0,
    transform: "scale(1) translate(50%, -50%)",
    transformOrigin: "100% 0%",
    [`&.${badgeClasses.invisible}`]: {
      transform: "scale(0) translate(50%, -50%)"
    }
  }, ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "rectangular" && {
    bottom: 0,
    right: 0,
    transform: "scale(1) translate(50%, 50%)",
    transformOrigin: "100% 100%",
    [`&.${badgeClasses.invisible}`]: {
      transform: "scale(0) translate(50%, 50%)"
    }
  }, ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "rectangular" && {
    top: 0,
    left: 0,
    transform: "scale(1) translate(-50%, -50%)",
    transformOrigin: "0% 0%",
    [`&.${badgeClasses.invisible}`]: {
      transform: "scale(0) translate(-50%, -50%)"
    }
  }, ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "rectangular" && {
    bottom: 0,
    left: 0,
    transform: "scale(1) translate(-50%, 50%)",
    transformOrigin: "0% 100%",
    [`&.${badgeClasses.invisible}`]: {
      transform: "scale(0) translate(-50%, 50%)"
    }
  }, ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "circular" && {
    top: "14%",
    right: "14%",
    transform: "scale(1) translate(50%, -50%)",
    transformOrigin: "100% 0%",
    [`&.${badgeClasses.invisible}`]: {
      transform: "scale(0) translate(50%, -50%)"
    }
  }, ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "circular" && {
    bottom: "14%",
    right: "14%",
    transform: "scale(1) translate(50%, 50%)",
    transformOrigin: "100% 100%",
    [`&.${badgeClasses.invisible}`]: {
      transform: "scale(0) translate(50%, 50%)"
    }
  }, ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "circular" && {
    top: "14%",
    left: "14%",
    transform: "scale(1) translate(-50%, -50%)",
    transformOrigin: "0% 0%",
    [`&.${badgeClasses.invisible}`]: {
      transform: "scale(0) translate(-50%, -50%)"
    }
  }, ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "circular" && {
    bottom: "14%",
    left: "14%",
    transform: "scale(1) translate(-50%, 50%)",
    transformOrigin: "0% 100%",
    [`&.${badgeClasses.invisible}`]: {
      transform: "scale(0) translate(-50%, 50%)"
    }
  }, ownerState.invisible && {
    transition: theme.transitions.create("transform", {
      easing: theme.transitions.easing.easeInOut,
      duration: theme.transitions.duration.leavingScreen
    })
  }));
  const Badge = /* @__PURE__ */ React__namespace.forwardRef(function Badge2(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$badge, _slotProps$root, _slotProps$badge;
    const props = useThemeProps({
      props: inProps,
      name: "MuiBadge"
    });
    const {
      anchorOrigin: anchorOriginProp = {
        vertical: "top",
        horizontal: "right"
      },
      className,
      component,
      components = {},
      componentsProps = {},
      children,
      overlap: overlapProp = "rectangular",
      color: colorProp = "default",
      invisible: invisibleProp = false,
      max: maxProp = 99,
      badgeContent: badgeContentProp,
      slots,
      slotProps,
      showZero = false,
      variant: variantProp = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$7);
    const {
      badgeContent,
      invisible: invisibleFromHook,
      max: max2,
      displayValue: displayValueFromHook
    } = useBadge({
      max: maxProp,
      invisible: invisibleProp,
      badgeContent: badgeContentProp,
      showZero
    });
    const prevProps = usePreviousProps({
      anchorOrigin: anchorOriginProp,
      color: colorProp,
      overlap: overlapProp,
      variant: variantProp,
      badgeContent: badgeContentProp
    });
    const invisible = invisibleFromHook || badgeContent == null && variantProp !== "dot";
    const {
      color: color2 = colorProp,
      overlap = overlapProp,
      anchorOrigin = anchorOriginProp,
      variant = variantProp
    } = invisible ? prevProps : props;
    const displayValue = variant !== "dot" ? displayValueFromHook : void 0;
    const ownerState = _extends$2({}, props, {
      badgeContent,
      invisible,
      max: max2,
      displayValue,
      showZero,
      anchorOrigin,
      color: color2,
      overlap,
      variant
    });
    const classes = useUtilityClasses$7(ownerState);
    const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : BadgeRoot;
    const BadgeSlot = (_ref2 = (_slots$badge = slots == null ? void 0 : slots.badge) != null ? _slots$badge : components.Badge) != null ? _ref2 : BadgeBadge;
    const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
    const badgeSlotProps = (_slotProps$badge = slotProps == null ? void 0 : slotProps.badge) != null ? _slotProps$badge : componentsProps.badge;
    const rootProps = useSlotProps({
      elementType: RootSlot,
      externalSlotProps: rootSlotProps,
      externalForwardedProps: other,
      additionalProps: {
        ref,
        as: component
      },
      ownerState,
      className: clsx$1(rootSlotProps == null ? void 0 : rootSlotProps.className, classes.root, className)
    });
    const badgeProps = useSlotProps({
      elementType: BadgeSlot,
      externalSlotProps: badgeSlotProps,
      ownerState,
      className: clsx$1(classes.badge, badgeSlotProps == null ? void 0 : badgeSlotProps.className)
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(RootSlot, _extends$2({}, rootProps, {
      children: [children, /* @__PURE__ */ jsxRuntimeExports.jsx(BadgeSlot, _extends$2({}, badgeProps, {
        children: displayValue
      }))]
    }));
  });
  process.env.NODE_ENV !== "production" ? Badge.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The anchor of the badge.
     * @default {
     *   vertical: 'top',
     *   horizontal: 'right',
     * }
     */
    anchorOrigin: PropTypes.shape({
      horizontal: PropTypes.oneOf(["left", "right"]).isRequired,
      vertical: PropTypes.oneOf(["bottom", "top"]).isRequired
    }),
    /**
     * The content rendered within the badge.
     */
    badgeContent: PropTypes.node,
    /**
     * The badge will be added relative to this node.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'default'
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), PropTypes.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: PropTypes.shape({
      Badge: PropTypes.elementType,
      Root: PropTypes.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: PropTypes.shape({
      badge: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * If `true`, the badge is invisible.
     * @default false
     */
    invisible: PropTypes.bool,
    /**
     * Max count to show.
     * @default 99
     */
    max: PropTypes.number,
    /**
     * Wrapped shape the badge should overlap.
     * @default 'rectangular'
     */
    overlap: PropTypes.oneOf(["circular", "rectangular"]),
    /**
     * Controls whether the badge is hidden when `badgeContent` is zero.
     * @default false
     */
    showZero: PropTypes.bool,
    /**
     * The props used for each slot inside the Badge.
     * @default {}
     */
    slotProps: PropTypes.shape({
      badge: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
    }),
    /**
     * The components used for each slot inside the Badge.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: PropTypes.shape({
      badge: PropTypes.elementType,
      root: PropTypes.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The variant to use.
     * @default 'standard'
     */
    variant: PropTypes.oneOfType([PropTypes.oneOf(["dot", "standard"]), PropTypes.string])
  } : void 0;
  const ArrowDownwardIcon = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"
  }), "ArrowDownward");
  function getTableSortLabelUtilityClass(slot) {
    return generateUtilityClass("MuiTableSortLabel", slot);
  }
  const tableSortLabelClasses = generateUtilityClasses("MuiTableSortLabel", ["root", "active", "icon", "iconDirectionDesc", "iconDirectionAsc"]);
  const _excluded$6 = ["active", "children", "className", "direction", "hideSortIcon", "IconComponent"];
  const useUtilityClasses$6 = (ownerState) => {
    const {
      classes,
      direction,
      active
    } = ownerState;
    const slots = {
      root: ["root", active && "active"],
      icon: ["icon", `iconDirection${capitalize(direction)}`]
    };
    return composeClasses(slots, getTableSortLabelUtilityClass, classes);
  };
  const TableSortLabelRoot = styled(ButtonBase, {
    name: "MuiTableSortLabel",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, ownerState.active && styles2.active];
    }
  })(({
    theme
  }) => ({
    cursor: "pointer",
    display: "inline-flex",
    justifyContent: "flex-start",
    flexDirection: "inherit",
    alignItems: "center",
    "&:focus": {
      color: (theme.vars || theme).palette.text.secondary
    },
    "&:hover": {
      color: (theme.vars || theme).palette.text.secondary,
      [`& .${tableSortLabelClasses.icon}`]: {
        opacity: 0.5
      }
    },
    [`&.${tableSortLabelClasses.active}`]: {
      color: (theme.vars || theme).palette.text.primary,
      [`& .${tableSortLabelClasses.icon}`]: {
        opacity: 1,
        color: (theme.vars || theme).palette.text.secondary
      }
    }
  }));
  const TableSortLabelIcon = styled("span", {
    name: "MuiTableSortLabel",
    slot: "Icon",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.icon, styles2[`iconDirection${capitalize(ownerState.direction)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends$2({
    fontSize: 18,
    marginRight: 4,
    marginLeft: 4,
    opacity: 0,
    transition: theme.transitions.create(["opacity", "transform"], {
      duration: theme.transitions.duration.shorter
    }),
    userSelect: "none"
  }, ownerState.direction === "desc" && {
    transform: "rotate(0deg)"
  }, ownerState.direction === "asc" && {
    transform: "rotate(180deg)"
  }));
  const TableSortLabel = /* @__PURE__ */ React__namespace.forwardRef(function TableSortLabel2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiTableSortLabel"
    });
    const {
      active = false,
      children,
      className,
      direction = "asc",
      hideSortIcon = false,
      IconComponent = ArrowDownwardIcon
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$6);
    const ownerState = _extends$2({}, props, {
      active,
      direction,
      hideSortIcon,
      IconComponent
    });
    const classes = useUtilityClasses$6(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(TableSortLabelRoot, _extends$2({
      className: clsx$1(classes.root, className),
      component: "span",
      disableRipple: true,
      ownerState,
      ref
    }, other, {
      children: [children, hideSortIcon && !active ? null : /* @__PURE__ */ jsxRuntimeExports.jsx(TableSortLabelIcon, {
        as: IconComponent,
        className: clsx$1(classes.icon),
        ownerState
      })]
    }));
  });
  process.env.NODE_ENV !== "production" ? TableSortLabel.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * If `true`, the label will have the active styling (should be true for the sorted column).
     * @default false
     */
    active: PropTypes.bool,
    /**
     * Label contents, the arrow will be appended automatically.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The current sort direction.
     * @default 'asc'
     */
    direction: PropTypes.oneOf(["asc", "desc"]),
    /**
     * Hide sort icon when active is false.
     * @default false
     */
    hideSortIcon: PropTypes.bool,
    /**
     * Sort icon to use.
     * @default ArrowDownwardIcon
     */
    IconComponent: PropTypes.elementType,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  function getTableBodyUtilityClass(slot) {
    return generateUtilityClass("MuiTableBody", slot);
  }
  const tableBodyClasses = generateUtilityClasses("MuiTableBody", ["root"]);
  const _excluded$5 = ["className", "component"];
  const useUtilityClasses$5 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getTableBodyUtilityClass, classes);
  };
  const TableBodyRoot = styled("tbody", {
    name: "MuiTableBody",
    slot: "Root",
    overridesResolver: (props, styles2) => styles2.root
  })({
    display: "table-row-group"
  });
  const tablelvl2$1 = {
    variant: "body"
  };
  const defaultComponent$1 = "tbody";
  const TableBody = /* @__PURE__ */ React__namespace.forwardRef(function TableBody2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiTableBody"
    });
    const {
      className,
      component = defaultComponent$1
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$5);
    const ownerState = _extends$2({}, props, {
      component
    });
    const classes = useUtilityClasses$5(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Tablelvl2Context.Provider, {
      value: tablelvl2$1,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(TableBodyRoot, _extends$2({
        className: clsx$1(classes.root, className),
        as: component,
        ref,
        role: component === defaultComponent$1 ? null : "rowgroup",
        ownerState
      }, other))
    });
  });
  process.env.NODE_ENV !== "production" ? TableBody.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component, normally `TableRow`.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  function getSkeletonUtilityClass(slot) {
    return generateUtilityClass("MuiSkeleton", slot);
  }
  const skeletonClasses = generateUtilityClasses("MuiSkeleton", ["root", "text", "rectangular", "rounded", "circular", "pulse", "wave", "withChildren", "fitContent", "heightAuto"]);
  const _excluded$4 = ["animation", "className", "component", "height", "style", "variant", "width"];
  let _ = (t) => t, _t, _t2, _t3, _t4;
  const useUtilityClasses$4 = (ownerState) => {
    const {
      classes,
      variant,
      animation,
      hasChildren,
      width: width2,
      height: height2
    } = ownerState;
    const slots = {
      root: ["root", variant, animation, hasChildren && "withChildren", hasChildren && !width2 && "fitContent", hasChildren && !height2 && "heightAuto"]
    };
    return composeClasses(slots, getSkeletonUtilityClass, classes);
  };
  const pulseKeyframe = react.keyframes(_t || (_t = _`
  0% {
    opacity: 1;
  }

  50% {
    opacity: 0.4;
  }

  100% {
    opacity: 1;
  }
`));
  const waveKeyframe = react.keyframes(_t2 || (_t2 = _`
  0% {
    transform: translateX(-100%);
  }

  50% {
    /* +0.5s of delay between each loop */
    transform: translateX(100%);
  }

  100% {
    transform: translateX(100%);
  }
`));
  const SkeletonRoot = styled("span", {
    name: "MuiSkeleton",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, styles2[ownerState.variant], ownerState.animation !== false && styles2[ownerState.animation], ownerState.hasChildren && styles2.withChildren, ownerState.hasChildren && !ownerState.width && styles2.fitContent, ownerState.hasChildren && !ownerState.height && styles2.heightAuto];
    }
  })(({
    theme,
    ownerState
  }) => {
    const radiusUnit = getUnit(theme.shape.borderRadius) || "px";
    const radiusValue = toUnitless(theme.shape.borderRadius);
    return _extends$2({
      display: "block",
      // Create a "on paper" color with sufficient contrast retaining the color
      backgroundColor: theme.vars ? theme.vars.palette.Skeleton.bg : alpha(theme.palette.text.primary, theme.palette.mode === "light" ? 0.11 : 0.13),
      height: "1.2em"
    }, ownerState.variant === "text" && {
      marginTop: 0,
      marginBottom: 0,
      height: "auto",
      transformOrigin: "0 55%",
      transform: "scale(1, 0.60)",
      borderRadius: `${radiusValue}${radiusUnit}/${Math.round(radiusValue / 0.6 * 10) / 10}${radiusUnit}`,
      "&:empty:before": {
        content: '"\\00a0"'
      }
    }, ownerState.variant === "circular" && {
      borderRadius: "50%"
    }, ownerState.variant === "rounded" && {
      borderRadius: (theme.vars || theme).shape.borderRadius
    }, ownerState.hasChildren && {
      "& > *": {
        visibility: "hidden"
      }
    }, ownerState.hasChildren && !ownerState.width && {
      maxWidth: "fit-content"
    }, ownerState.hasChildren && !ownerState.height && {
      height: "auto"
    });
  }, ({
    ownerState
  }) => ownerState.animation === "pulse" && react.css(_t3 || (_t3 = _`
      animation: ${0} 1.5s ease-in-out 0.5s infinite;
    `), pulseKeyframe), ({
    ownerState,
    theme
  }) => ownerState.animation === "wave" && react.css(_t4 || (_t4 = _`
      position: relative;
      overflow: hidden;

      /* Fix bug in Safari https://bugs.webkit.org/show_bug.cgi?id=68196 */
      -webkit-mask-image: -webkit-radial-gradient(white, black);

      &::after {
        animation: ${0} 1.6s linear 0.5s infinite;
        background: linear-gradient(
          90deg,
          transparent,
          ${0},
          transparent
        );
        content: '';
        position: absolute;
        transform: translateX(-100%); /* Avoid flash during server-side hydration */
        bottom: 0;
        left: 0;
        right: 0;
        top: 0;
      }
    `), waveKeyframe, (theme.vars || theme).palette.action.hover));
  const Skeleton = /* @__PURE__ */ React__namespace.forwardRef(function Skeleton2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiSkeleton"
    });
    const {
      animation = "pulse",
      className,
      component = "span",
      height: height2,
      style: style2,
      variant = "text",
      width: width2
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$4);
    const ownerState = _extends$2({}, props, {
      animation,
      component,
      variant,
      hasChildren: Boolean(other.children)
    });
    const classes = useUtilityClasses$4(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(SkeletonRoot, _extends$2({
      as: component,
      ref,
      className: clsx$1(classes.root, className),
      ownerState
    }, other, {
      style: _extends$2({
        width: width2,
        height: height2
      }, style2)
    }));
  });
  process.env.NODE_ENV !== "production" ? Skeleton.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The animation.
     * If `false` the animation effect is disabled.
     * @default 'pulse'
     */
    animation: PropTypes.oneOf(["pulse", "wave", false]),
    /**
     * Optional children to infer width and height from.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * Height of the skeleton.
     * Useful when you don't want to adapt the skeleton to a text element but for instance a card.
     */
    height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * @ignore
     */
    style: PropTypes.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The type of content that will be rendered.
     * @default 'text'
     */
    variant: PropTypes.oneOfType([PropTypes.oneOf(["circular", "rectangular", "rounded", "text"]), PropTypes.string]),
    /**
     * Width of the skeleton.
     * Useful when the skeleton is inside an inline element with no width of its own.
     */
    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string])
  } : void 0;
  let IDX = 36;
  let HEX = "";
  while (IDX--) {
    HEX += IDX.toString(36);
  }
  function uid(len = 11) {
    let str = "";
    let num = len;
    while (num--) {
      str += HEX[Math.random() * 36 | 0];
    }
    return str;
  }
  const escapeRegexp = (term) => term.replace(/[|\\{}()[\]^$+*?.-]/g, (char2) => `\\${char2}`);
  const termsToRegExpString = (terms) => terms.replace(/\s{2,}/g, " ").split(" ").join("|");
  const regexpQuery = ({
    terms,
    matchExactly = false
  }) => {
    if (typeof terms !== "string") {
      throw new TypeError("Expected a string");
    }
    const escapedTerms = escapeRegexp(terms.trim());
    return `(${matchExactly ? escapedTerms : termsToRegExpString(escapedTerms)})`;
  };
  const buildRegexp = ({
    terms,
    matchExactly = false
  }) => {
    try {
      const fromString = /^([/~@;%#'])(.*?)\1([gimsuy]*)$/.exec(terms);
      if (fromString) {
        return new RegExp(fromString[2], fromString[3]);
      }
      return new RegExp(regexpQuery({ terms, matchExactly }), "ig");
    } catch (e) {
      throw new TypeError("Expected terms to be either a string or a RegExp!");
    }
  };
  const hasProp = (prop) => (obj) => obj !== null && typeof obj === "object" && prop in obj;
  const hasMatch = hasProp("match");
  const chunkExists = (chunk) => typeof chunk !== "undefined";
  function clip({
    curr,
    next: next2,
    prev: prev2,
    clipBy = 3
  }) {
    const words = curr.text.split(" ");
    const len = words.length;
    if (curr.match || clipBy >= len) {
      return curr.text;
    }
    const ellipsis = "...";
    if (chunkExists(next2) && chunkExists(prev2) && hasMatch(prev2) && hasMatch(next2)) {
      if (len > clipBy * 2) {
        return [
          ...words.slice(0, clipBy),
          ellipsis,
          ...words.slice(-clipBy)
        ].join(" ");
      }
      return curr.text;
    }
    if (chunkExists(next2) && hasMatch(next2)) {
      return [ellipsis, ...words.slice(-clipBy)].join(" ");
    }
    if (chunkExists(prev2) && hasMatch(prev2)) {
      return [...words.slice(0, clipBy), ellipsis].join(" ");
    }
    return curr.text;
  }
  var __defProp2 = Object.defineProperty;
  var __defProps2 = Object.defineProperties;
  var __getOwnPropDescs2 = Object.getOwnPropertyDescriptors;
  var __getOwnPropSymbols2 = Object.getOwnPropertySymbols;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __propIsEnum2 = Object.prototype.propertyIsEnumerable;
  var __defNormalProp2 = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues2 = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp2.call(b, prop))
        __defNormalProp2(a, prop, b[prop]);
    if (__getOwnPropSymbols2)
      for (var prop of __getOwnPropSymbols2(b)) {
        if (__propIsEnum2.call(b, prop))
          __defNormalProp2(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps2 = (a, b) => __defProps2(a, __getOwnPropDescs2(b));
  const hasLength = (str) => str.length > 0;
  const highlightWords = ({
    text: text2,
    query,
    clipBy,
    matchExactly = false
  }) => {
    const safeQuery = typeof query === "string" ? query.trim() : query;
    if (safeQuery === "") {
      return [
        {
          key: uid(),
          text: text2,
          match: false
        }
      ];
    }
    const searchRegexp = buildRegexp({ terms: query, matchExactly });
    return text2.split(searchRegexp).filter(hasLength).map((str) => ({
      // Compose the object for a match
      key: uid(),
      text: str,
      match: matchExactly ? str.toLowerCase() === safeQuery.toLowerCase() : searchRegexp.test(str)
    })).map((chunk, index2, chunks) => __spreadValues2(__spreadValues2({}, chunk), typeof clipBy === "number" && {
      // We only overwrite the text if there is a clip
      text: clip(__spreadProps2(__spreadValues2(__spreadValues2({
        curr: chunk
      }, index2 < chunks.length - 1 && { next: chunks[index2 + 1] }), index2 > 0 && { prev: chunks[index2 - 1] }), {
        // If this wasn't the first chunk, set the previous chunk
        clipBy
      }))
    }));
  };
  function getTableFooterUtilityClass(slot) {
    return generateUtilityClass("MuiTableFooter", slot);
  }
  const tableFooterClasses = generateUtilityClasses("MuiTableFooter", ["root"]);
  const _excluded$3 = ["className", "component"];
  const useUtilityClasses$3 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getTableFooterUtilityClass, classes);
  };
  const TableFooterRoot = styled("tfoot", {
    name: "MuiTableFooter",
    slot: "Root",
    overridesResolver: (props, styles2) => styles2.root
  })({
    display: "table-footer-group"
  });
  const tablelvl2 = {
    variant: "footer"
  };
  const defaultComponent = "tfoot";
  const TableFooter = /* @__PURE__ */ React__namespace.forwardRef(function TableFooter2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiTableFooter"
    });
    const {
      className,
      component = defaultComponent
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$3);
    const ownerState = _extends$2({}, props, {
      component
    });
    const classes = useUtilityClasses$3(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Tablelvl2Context.Provider, {
      value: tablelvl2,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(TableFooterRoot, _extends$2({
        as: component,
        className: clsx$1(classes.root, className),
        ref,
        role: component === defaultComponent ? null : "rowgroup",
        ownerState
      }, other))
    });
  });
  process.env.NODE_ENV !== "production" ? TableFooter.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component, normally `TableRow`.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  function getDialogActionsUtilityClass(slot) {
    return generateUtilityClass("MuiDialogActions", slot);
  }
  const dialogActionsClasses = generateUtilityClasses("MuiDialogActions", ["root", "spacing"]);
  const _excluded$2 = ["className", "disableSpacing"];
  const useUtilityClasses$2 = (ownerState) => {
    const {
      classes,
      disableSpacing
    } = ownerState;
    const slots = {
      root: ["root", !disableSpacing && "spacing"]
    };
    return composeClasses(slots, getDialogActionsUtilityClass, classes);
  };
  const DialogActionsRoot = styled("div", {
    name: "MuiDialogActions",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, !ownerState.disableSpacing && styles2.spacing];
    }
  })(({
    ownerState
  }) => _extends$2({
    display: "flex",
    alignItems: "center",
    padding: 8,
    justifyContent: "flex-end",
    flex: "0 0 auto"
  }, !ownerState.disableSpacing && {
    "& > :not(:first-of-type)": {
      marginLeft: 8
    }
  }));
  const DialogActions = /* @__PURE__ */ React__namespace.forwardRef(function DialogActions2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiDialogActions"
    });
    const {
      className,
      disableSpacing = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$2);
    const ownerState = _extends$2({}, props, {
      disableSpacing
    });
    const classes = useUtilityClasses$2(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(DialogActionsRoot, _extends$2({
      className: clsx$1(classes.root, className),
      ownerState,
      ref
    }, other));
  });
  process.env.NODE_ENV !== "production" ? DialogActions.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * If `true`, the actions do not have additional margin.
     * @default false
     */
    disableSpacing: PropTypes.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  function getDialogContentUtilityClass(slot) {
    return generateUtilityClass("MuiDialogContent", slot);
  }
  const dialogContentClasses = generateUtilityClasses("MuiDialogContent", ["root", "dividers"]);
  function getDialogTitleUtilityClass(slot) {
    return generateUtilityClass("MuiDialogTitle", slot);
  }
  const dialogTitleClasses = generateUtilityClasses("MuiDialogTitle", ["root"]);
  const _excluded$1 = ["className", "dividers"];
  const useUtilityClasses$1 = (ownerState) => {
    const {
      classes,
      dividers
    } = ownerState;
    const slots = {
      root: ["root", dividers && "dividers"]
    };
    return composeClasses(slots, getDialogContentUtilityClass, classes);
  };
  const DialogContentRoot = styled("div", {
    name: "MuiDialogContent",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, ownerState.dividers && styles2.dividers];
    }
  })(({
    theme,
    ownerState
  }) => _extends$2({
    flex: "1 1 auto",
    // Add iOS momentum scrolling for iOS < 13.0
    WebkitOverflowScrolling: "touch",
    overflowY: "auto",
    padding: "20px 24px"
  }, ownerState.dividers ? {
    padding: "16px 24px",
    borderTop: `1px solid ${(theme.vars || theme).palette.divider}`,
    borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`
  } : {
    [`.${dialogTitleClasses.root} + &`]: {
      paddingTop: 0
    }
  }));
  const DialogContent = /* @__PURE__ */ React__namespace.forwardRef(function DialogContent2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiDialogContent"
    });
    const {
      className,
      dividers = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1);
    const ownerState = _extends$2({}, props, {
      dividers
    });
    const classes = useUtilityClasses$1(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(DialogContentRoot, _extends$2({
      className: clsx$1(classes.root, className),
      ownerState,
      ref
    }, other));
  });
  process.env.NODE_ENV !== "production" ? DialogContent.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * Display the top and bottom dividers.
     * @default false
     */
    dividers: PropTypes.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  const _excluded = ["className", "id"];
  const useUtilityClasses = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getDialogTitleUtilityClass, classes);
  };
  const DialogTitleRoot = styled(Typography, {
    name: "MuiDialogTitle",
    slot: "Root",
    overridesResolver: (props, styles2) => styles2.root
  })({
    padding: "16px 24px",
    flex: "0 0 auto"
  });
  const DialogTitle = /* @__PURE__ */ React__namespace.forwardRef(function DialogTitle2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiDialogTitle"
    });
    const {
      className,
      id: idProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
    const ownerState = props;
    const classes = useUtilityClasses(ownerState);
    const {
      titleId: id = idProp
    } = React__namespace.useContext(DialogContext);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(DialogTitleRoot, _extends$2({
      component: "h2",
      className: clsx$1(classes.root, className),
      ownerState,
      ref,
      variant: "h6",
      id
    }, other));
  });
  process.env.NODE_ENV !== "production" ? DialogTitle.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * @ignore
     */
    id: PropTypes.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  function __rest(s, e) {
    var t = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  }
  typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
  };
  const MRT_AggregationFns = Object.assign({}, aggregationFns);
  const fuzzy$1 = (row, columnId, filterValue, addMeta) => {
    const itemRank = rankItem(row.getValue(columnId), filterValue, {
      threshold: rankings.MATCHES
    });
    addMeta(itemRank);
    return itemRank.passed;
  };
  fuzzy$1.autoRemove = (val) => !val;
  const contains = (row, id, filterValue) => row.getValue(id).toString().toLowerCase().trim().includes(filterValue.toString().toLowerCase().trim());
  contains.autoRemove = (val) => !val;
  const startsWith = (row, id, filterValue) => row.getValue(id).toString().toLowerCase().trim().startsWith(filterValue.toString().toLowerCase().trim());
  startsWith.autoRemove = (val) => !val;
  const endsWith = (row, id, filterValue) => row.getValue(id).toString().toLowerCase().trim().endsWith(filterValue.toString().toLowerCase().trim());
  endsWith.autoRemove = (val) => !val;
  const equals = (row, id, filterValue) => row.getValue(id).toString().toLowerCase().trim() === filterValue.toString().toLowerCase().trim();
  equals.autoRemove = (val) => !val;
  const notEquals = (row, id, filterValue) => row.getValue(id).toString().toLowerCase().trim() !== filterValue.toString().toLowerCase().trim();
  notEquals.autoRemove = (val) => !val;
  const greaterThan = (row, id, filterValue) => !isNaN(+filterValue) && !isNaN(+row.getValue(id)) ? +row.getValue(id) > +filterValue : row.getValue(id).toString().toLowerCase().trim() > filterValue.toString().toLowerCase().trim();
  greaterThan.autoRemove = (val) => !val;
  const greaterThanOrEqualTo = (row, id, filterValue) => equals(row, id, filterValue) || greaterThan(row, id, filterValue);
  greaterThanOrEqualTo.autoRemove = (val) => !val;
  const lessThan = (row, id, filterValue) => !isNaN(+filterValue) && !isNaN(+row.getValue(id)) ? +row.getValue(id) < +filterValue : row.getValue(id).toString().toLowerCase().trim() < filterValue.toString().toLowerCase().trim();
  lessThan.autoRemove = (val) => !val;
  const lessThanOrEqualTo = (row, id, filterValue) => equals(row, id, filterValue) || lessThan(row, id, filterValue);
  lessThanOrEqualTo.autoRemove = (val) => !val;
  const between = (row, id, filterValues) => (["", void 0].includes(filterValues[0]) || greaterThan(row, id, filterValues[0])) && (!isNaN(+filterValues[0]) && !isNaN(+filterValues[1]) && +filterValues[0] > +filterValues[1] || ["", void 0].includes(filterValues[1]) || lessThan(row, id, filterValues[1]));
  between.autoRemove = (val) => !val;
  const betweenInclusive = (row, id, filterValues) => (["", void 0].includes(filterValues[0]) || greaterThanOrEqualTo(row, id, filterValues[0])) && (!isNaN(+filterValues[0]) && !isNaN(+filterValues[1]) && +filterValues[0] > +filterValues[1] || ["", void 0].includes(filterValues[1]) || lessThanOrEqualTo(row, id, filterValues[1]));
  betweenInclusive.autoRemove = (val) => !val;
  const empty = (row, id, _filterValue) => !row.getValue(id).toString().trim();
  empty.autoRemove = (val) => !val;
  const notEmpty = (row, id, _filterValue) => !!row.getValue(id).toString().trim();
  notEmpty.autoRemove = (val) => !val;
  const MRT_FilterFns = Object.assign(Object.assign({}, filterFns), {
    between,
    betweenInclusive,
    contains,
    empty,
    endsWith,
    equals,
    fuzzy: fuzzy$1,
    greaterThan,
    greaterThanOrEqualTo,
    lessThan,
    lessThanOrEqualTo,
    notEmpty,
    notEquals,
    startsWith
  });
  const fuzzy = (rowA, rowB, columnId) => {
    let dir = 0;
    if (rowA.columnFiltersMeta[columnId]) {
      dir = compareItems(rowA.columnFiltersMeta[columnId], rowB.columnFiltersMeta[columnId]);
    }
    return dir === 0 ? sortingFns.alphanumeric(rowA, rowB, columnId) : dir;
  };
  const MRT_SortingFns = Object.assign(Object.assign({}, sortingFns), { fuzzy });
  const rankGlobalFuzzy = (rowA, rowB) => Math.max(...Object.values(rowB.columnFiltersMeta).map((v) => v.rank)) - Math.max(...Object.values(rowA.columnFiltersMeta).map((v) => v.rank));
  const getColumnId = (columnDef) => {
    var _a, _b, _c, _d;
    return (_d = (_a = columnDef.id) !== null && _a !== void 0 ? _a : (_c = (_b = columnDef.accessorKey) === null || _b === void 0 ? void 0 : _b.toString) === null || _c === void 0 ? void 0 : _c.call(_b)) !== null && _d !== void 0 ? _d : columnDef.header;
  };
  const getAllLeafColumnDefs = (columns) => {
    const allLeafColumnDefs = [];
    const getLeafColumns = (cols) => {
      cols.forEach((col) => {
        if (col.columns) {
          getLeafColumns(col.columns);
        } else {
          allLeafColumnDefs.push(col);
        }
      });
    };
    getLeafColumns(columns);
    return allLeafColumnDefs;
  };
  const prepareColumns = ({ aggregationFns: aggregationFns2, columnDefs, columnFilterFns, defaultDisplayColumn, filterFns: filterFns2, sortingFns: sortingFns2 }) => columnDefs.map((columnDef) => {
    var _a, _b;
    if (!columnDef.id)
      columnDef.id = getColumnId(columnDef);
    if (process.env.NODE_ENV !== "production" && !columnDef.id) {
      console.error("Column definitions must have a valid `accessorKey` or `id` property");
    }
    if (!columnDef.columnDefType)
      columnDef.columnDefType = "data";
    if ((_a = columnDef.columns) === null || _a === void 0 ? void 0 : _a.length) {
      columnDef.columnDefType = "group";
      columnDef.columns = prepareColumns({
        aggregationFns: aggregationFns2,
        columnDefs: columnDef.columns,
        columnFilterFns,
        defaultDisplayColumn,
        filterFns: filterFns2,
        sortingFns: sortingFns2
      });
    } else if (columnDef.columnDefType === "data") {
      if (Array.isArray(columnDef.aggregationFn)) {
        const aggFns = columnDef.aggregationFn;
        columnDef.aggregationFn = (columnId, leafRows, childRows) => aggFns.map((fn) => {
          var _a2;
          return (_a2 = aggregationFns2[fn]) === null || _a2 === void 0 ? void 0 : _a2.call(aggregationFns2, columnId, leafRows, childRows);
        });
      }
      if (Object.keys(filterFns2).includes(columnFilterFns[columnDef.id])) {
        columnDef.filterFn = (_b = filterFns2[columnFilterFns[columnDef.id]]) !== null && _b !== void 0 ? _b : filterFns2.fuzzy;
        columnDef._filterFn = columnFilterFns[columnDef.id];
      }
      if (Object.keys(sortingFns2).includes(columnDef.sortingFn)) {
        columnDef.sortingFn = sortingFns2[columnDef.sortingFn];
      }
    } else if (columnDef.columnDefType === "display") {
      columnDef = Object.assign(Object.assign({}, defaultDisplayColumn), columnDef);
    }
    return columnDef;
  });
  const reorderColumn = (draggedColumn, targetColumn, columnOrder) => {
    if (draggedColumn.getCanPin()) {
      draggedColumn.pin(targetColumn.getIsPinned());
    }
    const newColumnOrder = [...columnOrder];
    newColumnOrder.splice(newColumnOrder.indexOf(targetColumn.id), 0, newColumnOrder.splice(newColumnOrder.indexOf(draggedColumn.id), 1)[0]);
    return newColumnOrder;
  };
  const showExpandColumn = (props, grouping) => !!(props.enableExpanding || props.enableGrouping && (grouping === void 0 || (grouping === null || grouping === void 0 ? void 0 : grouping.length)) || props.renderDetailPanel);
  const getLeadingDisplayColumnIds = (props) => {
    var _a;
    return [
      (props.enableRowDragging || props.enableRowOrdering) && "mrt-row-drag",
      props.positionActionsColumn === "first" && (props.enableRowActions || props.enableEditing && ["row", "modal"].includes((_a = props.editingMode) !== null && _a !== void 0 ? _a : "")) && "mrt-row-actions",
      props.positionExpandColumn === "first" && showExpandColumn(props) && "mrt-row-expand",
      props.enableRowSelection && "mrt-row-select",
      props.enableRowNumbers && "mrt-row-numbers"
    ].filter(Boolean);
  };
  const getTrailingDisplayColumnIds = (props) => {
    var _a;
    return [
      props.positionActionsColumn === "last" && (props.enableRowActions || props.enableEditing && ["row", "modal"].includes((_a = props.editingMode) !== null && _a !== void 0 ? _a : "")) && "mrt-row-actions",
      props.positionExpandColumn === "last" && showExpandColumn(props) && "mrt-row-expand"
    ].filter(Boolean);
  };
  const getDefaultColumnOrderIds = (props) => {
    const leadingDisplayCols = getLeadingDisplayColumnIds(props);
    const trailingDisplayCols = getTrailingDisplayColumnIds(props);
    const allLeafColumnDefs = getAllLeafColumnDefs(props.columns).map((columnDef) => getColumnId(columnDef)).filter((columnId) => !leadingDisplayCols.includes(columnId) && !trailingDisplayCols.includes(columnId));
    return [...leadingDisplayCols, ...allLeafColumnDefs, ...trailingDisplayCols];
  };
  const getDefaultColumnFilterFn = (columnDef) => {
    if (columnDef.filterVariant === "multi-select")
      return "arrIncludesSome";
    if (columnDef.filterVariant === "range" || columnDef.filterVariant === "range-slider")
      return "betweenInclusive";
    if (columnDef.filterVariant === "select" || columnDef.filterVariant === "checkbox")
      return "equals";
    return "fuzzy";
  };
  const getIsFirstColumn = (column2, table) => {
    return table.getVisibleLeafColumns()[0].id === column2.id;
  };
  const getIsLastColumn = (column2, table) => {
    const columns = table.getVisibleLeafColumns();
    return columns[columns.length - 1].id === column2.id;
  };
  const getIsLastLeftPinnedColumn = (table, column2) => {
    return column2.getIsPinned() === "left" && table.getLeftLeafHeaders().length - 1 === column2.getPinnedIndex();
  };
  const getIsFirstRightPinnedColumn = (column2) => {
    return column2.getIsPinned() === "right" && column2.getPinnedIndex() === 0;
  };
  const getTotalRight = (table, column2) => {
    return table.getRightLeafHeaders().slice(column2.getPinnedIndex() + 1).reduce((acc, col) => acc + col.getSize(), 0);
  };
  const getCommonCellStyles = ({ column: column2, header, table, tableCellProps, theme }) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    const widthStyles = {
      minWidth: `max(calc(var(--${header ? "header" : "col"}-${parseCSSVarId((_a = header === null || header === void 0 ? void 0 : header.id) !== null && _a !== void 0 ? _a : column2.id)}-size) * 1px), ${(_b = column2.columnDef.minSize) !== null && _b !== void 0 ? _b : 30}px)`,
      width: `calc(var(--${header ? "header" : "col"}-${parseCSSVarId((_c = header === null || header === void 0 ? void 0 : header.id) !== null && _c !== void 0 ? _c : column2.id)}-size) * 1px)`
    };
    return Object.assign(Object.assign(Object.assign({ backgroundColor: column2.getIsPinned() && column2.columnDef.columnDefType !== "group" ? alpha(lighten(theme.palette.background.default, 0.04), 0.97) : "inherit", backgroundImage: "inherit", boxShadow: getIsLastLeftPinnedColumn(table, column2) ? `-4px 0 8px -6px ${alpha(theme.palette.common.black, 0.2)} inset` : getIsFirstRightPinnedColumn(column2) ? `4px 0 8px -6px ${alpha(theme.palette.common.black, 0.2)} inset` : void 0, display: table.options.layoutMode === "grid" ? "flex" : "table-cell", flex: table.options.layoutMode === "grid" ? `var(--${header ? "header" : "col"}-${parseCSSVarId((_d = header === null || header === void 0 ? void 0 : header.id) !== null && _d !== void 0 ? _d : column2.id)}-size) 0 auto` : void 0, left: column2.getIsPinned() === "left" ? `${column2.getStart("left")}px` : void 0, ml: table.options.enableColumnVirtualization && column2.getIsPinned() === "left" && column2.getPinnedIndex() === 0 ? `-${column2.getSize() * ((_f = (_e = table.getState().columnPinning.left) === null || _e === void 0 ? void 0 : _e.length) !== null && _f !== void 0 ? _f : 1)}px` : void 0, mr: table.options.enableColumnVirtualization && column2.getIsPinned() === "right" && column2.getPinnedIndex() === table.getVisibleLeafColumns().length - 1 ? `-${column2.getSize() * ((_h = (_g = table.getState().columnPinning.right) === null || _g === void 0 ? void 0 : _g.length) !== null && _h !== void 0 ? _h : 1) * 1.2}px` : void 0, opacity: ((_j = table.getState().draggingColumn) === null || _j === void 0 ? void 0 : _j.id) === column2.id || ((_k = table.getState().hoveredColumn) === null || _k === void 0 ? void 0 : _k.id) === column2.id ? 0.5 : 1, position: column2.getIsPinned() && column2.columnDef.columnDefType !== "group" ? "sticky" : void 0, right: column2.getIsPinned() === "right" ? `${getTotalRight(table, column2)}px` : void 0, transition: table.options.enableColumnVirtualization ? "none" : `padding 150ms ease-in-out` }, !table.options.enableColumnResizing && widthStyles), (tableCellProps === null || tableCellProps === void 0 ? void 0 : tableCellProps.sx) instanceof Function ? tableCellProps.sx(theme) : tableCellProps === null || tableCellProps === void 0 ? void 0 : tableCellProps.sx), table.options.enableColumnResizing && widthStyles);
  };
  const MRT_DefaultColumn = {
    filterVariant: "text",
    minSize: 40,
    maxSize: 1e3,
    size: 180
  };
  const MRT_DefaultDisplayColumn = {
    columnDefType: "display",
    enableClickToCopy: false,
    enableColumnActions: false,
    enableColumnDragging: false,
    enableColumnFilter: false,
    enableColumnOrdering: false,
    enableEditing: false,
    enableGlobalFilter: false,
    enableGrouping: false,
    enableHiding: false,
    enableResizing: false,
    enableSorting: false
  };
  const parseCSSVarId = (id) => id.replace(/[^a-zA-Z0-9]/g, "_");
  const MRT_Default_Icons = {
    ArrowDownwardIcon: default_1$r,
    ArrowRightIcon: default_1$q,
    CancelIcon: default_1$p,
    ClearAllIcon: default_1$o,
    CloseIcon: default_1$n,
    DensityLargeIcon: default_1$m,
    DensityMediumIcon: default_1$l,
    DensitySmallIcon: default_1$k,
    DragHandleIcon: default_1$j,
    DynamicFeedIcon: default_1$i,
    EditIcon: default_1$h,
    ExpandMoreIcon: default_1$g,
    FilterAltIcon: default_1$f,
    FilterListIcon: default_1$e,
    FilterListOffIcon: default_1$d,
    FullscreenExitIcon: default_1$c,
    FullscreenIcon: default_1$b,
    KeyboardDoubleArrowDownIcon: default_1$a,
    MoreHorizIcon: default_1$9,
    MoreVertIcon: default_1$8,
    PushPinIcon: default_1$7,
    RestartAltIcon: default_1$6,
    SaveIcon: default_1$5,
    SearchIcon: default_1$4,
    SearchOffIcon: default_1$3,
    SortIcon: default_1$2,
    ViewColumnIcon: default_1$1,
    VisibilityOffIcon: default_1
  };
  const MRT_Localization_EN = {
    actions: "Actions",
    and: "and",
    cancel: "Cancel",
    changeFilterMode: "Change filter mode",
    changeSearchMode: "Change search mode",
    clearFilter: "Clear filter",
    clearSearch: "Clear search",
    clearSort: "Clear sort",
    clickToCopy: "Click to copy",
    collapse: "Collapse",
    collapseAll: "Collapse all",
    columnActions: "Column Actions",
    copiedToClipboard: "Copied to clipboard",
    dropToGroupBy: "Drop to group by {column}",
    edit: "Edit",
    expand: "Expand",
    expandAll: "Expand all",
    filterArrIncludes: "Includes",
    filterArrIncludesAll: "Includes all",
    filterArrIncludesSome: "Includes",
    filterBetween: "Between",
    filterBetweenInclusive: "Between Inclusive",
    filterByColumn: "Filter by {column}",
    filterContains: "Contains",
    filterEmpty: "Empty",
    filterEndsWith: "Ends With",
    filterEquals: "Equals",
    filterEqualsString: "Equals",
    filterFuzzy: "Fuzzy",
    filterGreaterThan: "Greater Than",
    filterGreaterThanOrEqualTo: "Greater Than Or Equal To",
    filterInNumberRange: "Between",
    filterIncludesString: "Contains",
    filterIncludesStringSensitive: "Contains",
    filterLessThan: "Less Than",
    filterLessThanOrEqualTo: "Less Than Or Equal To",
    filterMode: "Filter Mode: {filterType}",
    filterNotEmpty: "Not Empty",
    filterNotEquals: "Not Equals",
    filterStartsWith: "Starts With",
    filterWeakEquals: "Equals",
    filteringByColumn: "Filtering by {column} - {filterType} {filterValue}",
    goToFirstPage: "Go to first page",
    goToLastPage: "Go to last page",
    goToNextPage: "Go to next page",
    goToPreviousPage: "Go to previous page",
    grab: "Grab",
    groupByColumn: "Group by {column}",
    groupedBy: "Grouped by ",
    hideAll: "Hide all",
    hideColumn: "Hide {column} column",
    max: "Max",
    min: "Min",
    move: "Move",
    noRecordsToDisplay: "No records to display",
    noResultsFound: "No results found",
    of: "of",
    or: "or",
    pinToLeft: "Pin to left",
    pinToRight: "Pin to right",
    resetColumnSize: "Reset column size",
    resetOrder: "Reset order",
    rowActions: "Row Actions",
    rowNumber: "#",
    rowNumbers: "Row Numbers",
    rowsPerPage: "Rows per page",
    save: "Save",
    search: "Search",
    selectedCountOfRowCountRowsSelected: "{selectedCount} of {rowCount} row(s) selected",
    select: "Select",
    showAll: "Show all",
    showAllColumns: "Show all columns",
    showHideColumns: "Show/Hide columns",
    showHideFilters: "Show/Hide filters",
    showHideSearch: "Show/Hide search",
    sortByColumnAsc: "Sort by {column} ascending",
    sortByColumnDesc: "Sort by {column} descending",
    sortedByColumnAsc: "Sorted by {column} ascending",
    sortedByColumnDesc: "Sorted by {column} descending",
    thenBy: ", then by ",
    toggleDensity: "Toggle density",
    toggleFullScreen: "Toggle full screen",
    toggleSelectAll: "Toggle select all",
    toggleSelectRow: "Toggle select row",
    toggleVisibility: "Toggle visibility",
    ungroupByColumn: "Ungroup by {column}",
    unpin: "Unpin",
    unpinAll: "Unpin all",
    unsorted: "Unsorted"
  };
  const MRT_ExpandAllButton = ({ table }) => {
    var _a, _b;
    const { getIsAllRowsExpanded, getIsSomeRowsExpanded, getCanSomeRowsExpand, getState, options: { icons: { KeyboardDoubleArrowDownIcon }, localization, muiExpandAllButtonProps, renderDetailPanel }, toggleAllRowsExpanded } = table;
    const { density, isLoading } = getState();
    const iconButtonProps = muiExpandAllButtonProps instanceof Function ? muiExpandAllButtonProps({ table }) : muiExpandAllButtonProps;
    const isAllRowsExpanded = getIsAllRowsExpanded();
    return jsxRuntimeExports.jsx(Tooltip, { arrow: true, enterDelay: 1e3, enterNextDelay: 1e3, title: (_a = iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.title) !== null && _a !== void 0 ? _a : isAllRowsExpanded ? localization.collapseAll : localization.expandAll, children: jsxRuntimeExports.jsx("span", { children: jsxRuntimeExports.jsx(IconButton, Object.assign({ "aria-label": localization.expandAll, disabled: isLoading || !renderDetailPanel && !getCanSomeRowsExpand(), onClick: () => toggleAllRowsExpanded(!isAllRowsExpanded) }, iconButtonProps, { sx: (theme) => Object.assign({ height: density === "compact" ? "1.75rem" : "2.25rem", width: density === "compact" ? "1.75rem" : "2.25rem", mt: density !== "compact" ? "-0.25rem" : void 0 }, (iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.sx) instanceof Function ? iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.sx(theme) : iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.sx), title: void 0, children: (_b = iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.children) !== null && _b !== void 0 ? _b : jsxRuntimeExports.jsx(KeyboardDoubleArrowDownIcon, { style: {
      transform: `rotate(${isAllRowsExpanded ? -180 : getIsSomeRowsExpanded() ? -90 : 0}deg)`,
      transition: "transform 150ms"
    } }) })) }) });
  };
  const MRT_ExpandButton = ({ row, table }) => {
    var _a, _b;
    const { getState, options: { icons: { ExpandMoreIcon }, localization, muiExpandButtonProps, renderDetailPanel } } = table;
    const { density } = getState();
    const iconButtonProps = muiExpandButtonProps instanceof Function ? muiExpandButtonProps({ table, row }) : muiExpandButtonProps;
    const canExpand = row.getCanExpand();
    const isExpanded = row.getIsExpanded();
    const handleToggleExpand = (event) => {
      var _a2;
      event.stopPropagation();
      row.toggleExpanded();
      (_a2 = iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(iconButtonProps, event);
    };
    return jsxRuntimeExports.jsx(Tooltip, { arrow: true, disableHoverListener: !canExpand && !renderDetailPanel, enterDelay: 1e3, enterNextDelay: 1e3, title: (_a = iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.title) !== null && _a !== void 0 ? _a : isExpanded ? localization.collapse : localization.expand, children: jsxRuntimeExports.jsx("span", { children: jsxRuntimeExports.jsx(IconButton, Object.assign({ "aria-label": localization.expand, disabled: !canExpand && !renderDetailPanel }, iconButtonProps, { onClick: handleToggleExpand, sx: (theme) => Object.assign({ height: density === "compact" ? "1.75rem" : "2.25rem", width: density === "compact" ? "1.75rem" : "2.25rem" }, (iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.sx) instanceof Function ? iconButtonProps.sx(theme) : iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.sx), title: void 0, children: (_b = iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.children) !== null && _b !== void 0 ? _b : jsxRuntimeExports.jsx(ExpandMoreIcon, { style: {
      transform: `rotate(${!canExpand && !renderDetailPanel ? -90 : isExpanded ? -180 : 0}deg)`,
      transition: "transform 150ms"
    } }) })) }) });
  };
  const mrtFilterOptions = (localization) => [
    {
      option: "fuzzy",
      symbol: "≈",
      label: localization.filterFuzzy,
      divider: false
    },
    {
      option: "contains",
      symbol: "*",
      label: localization.filterContains,
      divider: false
    },
    {
      option: "startsWith",
      symbol: "a",
      label: localization.filterStartsWith,
      divider: false
    },
    {
      option: "endsWith",
      symbol: "z",
      label: localization.filterEndsWith,
      divider: true
    },
    {
      option: "equals",
      symbol: "=",
      label: localization.filterEquals,
      divider: false
    },
    {
      option: "notEquals",
      symbol: "≠",
      label: localization.filterNotEquals,
      divider: true
    },
    {
      option: "between",
      symbol: "⇿",
      label: localization.filterBetween,
      divider: false
    },
    {
      option: "betweenInclusive",
      symbol: "⬌",
      label: localization.filterBetweenInclusive,
      divider: true
    },
    {
      option: "greaterThan",
      symbol: ">",
      label: localization.filterGreaterThan,
      divider: false
    },
    {
      option: "greaterThanOrEqualTo",
      symbol: "≥",
      label: localization.filterGreaterThanOrEqualTo,
      divider: false
    },
    {
      option: "lessThan",
      symbol: "<",
      label: localization.filterLessThan,
      divider: false
    },
    {
      option: "lessThanOrEqualTo",
      symbol: "≤",
      label: localization.filterLessThanOrEqualTo,
      divider: true
    },
    {
      option: "empty",
      symbol: "∅",
      label: localization.filterEmpty,
      divider: false
    },
    {
      option: "notEmpty",
      symbol: "!∅",
      label: localization.filterNotEmpty,
      divider: false
    }
  ];
  const rangeModes = ["between", "betweenInclusive", "inNumberRange"];
  const emptyModes = ["empty", "notEmpty"];
  const arrModes = ["arrIncludesSome", "arrIncludesAll", "arrIncludes"];
  const MRT_FilterOptionMenu = ({ anchorEl, header, onSelect, setAnchorEl, setFilterValue, table }) => {
    var _a, _b, _c, _d;
    const { getState, options: { columnFilterModeOptions, globalFilterModeOptions, localization, renderColumnFilterModeMenuItems, renderGlobalFilterModeMenuItems }, setColumnFilterFns, setGlobalFilterFn } = table;
    const { globalFilterFn, density } = getState();
    const { column: column2 } = header !== null && header !== void 0 ? header : {};
    const { columnDef } = column2 !== null && column2 !== void 0 ? column2 : {};
    const currentFilterValue = column2 === null || column2 === void 0 ? void 0 : column2.getFilterValue();
    let allowedColumnFilterOptions = (_a = columnDef === null || columnDef === void 0 ? void 0 : columnDef.columnFilterModeOptions) !== null && _a !== void 0 ? _a : columnFilterModeOptions;
    if ((columnDef === null || columnDef === void 0 ? void 0 : columnDef.filterVariant) === "range-slider") {
      allowedColumnFilterOptions = [
        ...rangeModes,
        ...allowedColumnFilterOptions !== null && allowedColumnFilterOptions !== void 0 ? allowedColumnFilterOptions : []
      ].filter((option) => rangeModes.includes(option));
    }
    const internalFilterOptions = React.useMemo(() => mrtFilterOptions(localization).filter((filterOption2) => columnDef ? allowedColumnFilterOptions === void 0 || (allowedColumnFilterOptions === null || allowedColumnFilterOptions === void 0 ? void 0 : allowedColumnFilterOptions.includes(filterOption2.option)) : (!globalFilterModeOptions || globalFilterModeOptions.includes(filterOption2.option)) && ["fuzzy", "contains", "startsWith"].includes(filterOption2.option)), []);
    const handleSelectFilterMode = (option) => {
      var _a2;
      const prevFilterMode = (_a2 = columnDef === null || columnDef === void 0 ? void 0 : columnDef._filterFn) !== null && _a2 !== void 0 ? _a2 : "";
      if (!header || !column2) {
        setGlobalFilterFn(option);
      } else if (option !== prevFilterMode) {
        setColumnFilterFns((prev2) => Object.assign(Object.assign({}, prev2), { [header.id]: option }));
        if (emptyModes.includes(option)) {
          if (currentFilterValue !== " " && !emptyModes.includes(prevFilterMode)) {
            column2.setFilterValue(" ");
          } else if (currentFilterValue) {
            column2.setFilterValue(currentFilterValue);
          }
        } else if ((columnDef === null || columnDef === void 0 ? void 0 : columnDef.filterVariant) === "multi-select" || arrModes.includes(option)) {
          if (currentFilterValue instanceof String || (currentFilterValue === null || currentFilterValue === void 0 ? void 0 : currentFilterValue.length)) {
            column2.setFilterValue([]);
            setFilterValue === null || setFilterValue === void 0 ? void 0 : setFilterValue([]);
          } else if (currentFilterValue) {
            column2.setFilterValue(currentFilterValue);
          }
        } else if ((columnDef === null || columnDef === void 0 ? void 0 : columnDef.filterVariant) === "range" || rangeModes.includes(option)) {
          if (!Array.isArray(currentFilterValue) || !(currentFilterValue === null || currentFilterValue === void 0 ? void 0 : currentFilterValue.every((v) => v === "")) && !rangeModes.includes(prevFilterMode)) {
            column2.setFilterValue(["", ""]);
            setFilterValue === null || setFilterValue === void 0 ? void 0 : setFilterValue("");
          } else {
            column2.setFilterValue(currentFilterValue);
          }
        } else {
          if (Array.isArray(currentFilterValue)) {
            column2.setFilterValue("");
            setFilterValue === null || setFilterValue === void 0 ? void 0 : setFilterValue("");
          } else {
            column2.setFilterValue(currentFilterValue);
          }
        }
      }
      setAnchorEl(null);
      onSelect === null || onSelect === void 0 ? void 0 : onSelect();
    };
    const filterOption = !!header && columnDef ? columnDef._filterFn : globalFilterFn;
    return jsxRuntimeExports.jsx(Menu, { anchorEl, anchorOrigin: { vertical: "center", horizontal: "right" }, onClose: () => setAnchorEl(null), open: !!anchorEl, MenuListProps: {
      dense: density === "compact"
    }, children: (_d = header && column2 && columnDef ? (_c = (_b = columnDef.renderColumnFilterModeMenuItems) === null || _b === void 0 ? void 0 : _b.call(columnDef, {
      column: column2,
      internalFilterOptions,
      onSelectFilterMode: handleSelectFilterMode,
      table
    })) !== null && _c !== void 0 ? _c : renderColumnFilterModeMenuItems === null || renderColumnFilterModeMenuItems === void 0 ? void 0 : renderColumnFilterModeMenuItems({
      column: column2,
      internalFilterOptions,
      onSelectFilterMode: handleSelectFilterMode,
      table
    }) : renderGlobalFilterModeMenuItems === null || renderGlobalFilterModeMenuItems === void 0 ? void 0 : renderGlobalFilterModeMenuItems({
      internalFilterOptions,
      onSelectFilterMode: handleSelectFilterMode,
      table
    })) !== null && _d !== void 0 ? _d : internalFilterOptions.map(({ option, label, divider, symbol }, index2) => jsxRuntimeExports.jsxs(MenuItem, { divider, onClick: () => handleSelectFilterMode(option), selected: option === filterOption, sx: {
      alignItems: "center",
      display: "flex",
      gap: "2ch",
      my: 0,
      py: "6px"
    }, value: option, children: [jsxRuntimeExports.jsx(Box, { sx: { fontSize: "1.25rem", width: "2ch" }, children: symbol }), label] }, index2)) });
  };
  const commonMenuItemStyles = {
    py: "6px",
    my: 0,
    justifyContent: "space-between",
    alignItems: "center"
  };
  const commonListItemStyles = {
    display: "flex",
    alignItems: "center"
  };
  const MRT_ColumnActionMenu = ({ anchorEl, header, setAnchorEl, table }) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    const { getState, toggleAllColumnsVisible, setColumnOrder, options: { columnFilterModeOptions, enableColumnFilterModes, enableColumnFilters, enableColumnResizing, enableGrouping, enableHiding, enablePinning, enableSorting, enableSortingRemoval, icons: { ArrowRightIcon, ClearAllIcon, ViewColumnIcon, DynamicFeedIcon, FilterListIcon, FilterListOffIcon, PushPinIcon, SortIcon, RestartAltIcon, VisibilityOffIcon }, localization, renderColumnActionsMenuItems }, refs: { filterInputRefs }, setColumnSizingInfo, setShowColumnFilters } = table;
    const { column: column2 } = header;
    const { columnDef } = column2;
    const { columnSizing, columnVisibility, density, showColumnFilters } = getState();
    const columnFilterValue = column2.getFilterValue();
    const [filterMenuAnchorEl, setFilterMenuAnchorEl] = React.useState(null);
    const handleClearSort = () => {
      column2.clearSorting();
      setAnchorEl(null);
    };
    const handleSortAsc = () => {
      column2.toggleSorting(false);
      setAnchorEl(null);
    };
    const handleSortDesc = () => {
      column2.toggleSorting(true);
      setAnchorEl(null);
    };
    const handleResetColumnSize = () => {
      setColumnSizingInfo((old) => Object.assign(Object.assign({}, old), { isResizingColumn: false }));
      column2.resetSize();
      setAnchorEl(null);
    };
    const handleHideColumn = () => {
      column2.toggleVisibility(false);
      setAnchorEl(null);
    };
    const handlePinColumn = (pinDirection) => {
      column2.pin(pinDirection);
      setAnchorEl(null);
    };
    const handleGroupByColumn = () => {
      column2.toggleGrouping();
      setColumnOrder((old) => ["mrt-row-expand", ...old]);
      setAnchorEl(null);
    };
    const handleClearFilter = () => {
      column2.setFilterValue("");
      setAnchorEl(null);
    };
    const handleFilterByColumn = () => {
      setShowColumnFilters(true);
      queueMicrotask(() => {
        var _a2;
        return (_a2 = filterInputRefs.current[`${column2.id}-0`]) === null || _a2 === void 0 ? void 0 : _a2.focus();
      });
      setAnchorEl(null);
    };
    const handleShowAllColumns = () => {
      toggleAllColumnsVisible(true);
      setAnchorEl(null);
    };
    const handleOpenFilterModeMenu = (event) => {
      event.stopPropagation();
      setFilterMenuAnchorEl(event.currentTarget);
    };
    const isSelectFilter = !!columnDef.filterSelectOptions;
    const allowedColumnFilterOptions = (_a = columnDef === null || columnDef === void 0 ? void 0 : columnDef.columnFilterModeOptions) !== null && _a !== void 0 ? _a : columnFilterModeOptions;
    const showFilterModeSubMenu = enableColumnFilterModes && columnDef.enableColumnFilterModes !== false && !isSelectFilter && (allowedColumnFilterOptions === void 0 || !!(allowedColumnFilterOptions === null || allowedColumnFilterOptions === void 0 ? void 0 : allowedColumnFilterOptions.length));
    const internalColumnMenuItems = [
      ...enableSorting && column2.getCanSort() ? [
        enableSortingRemoval !== false && jsxRuntimeExports.jsx(MenuItem, { disabled: !column2.getIsSorted(), onClick: handleClearSort, sx: commonMenuItemStyles, children: jsxRuntimeExports.jsxs(Box, { sx: commonListItemStyles, children: [jsxRuntimeExports.jsx(ListItemIcon, { children: jsxRuntimeExports.jsx(ClearAllIcon, {}) }), localization.clearSort] }) }, 0),
        jsxRuntimeExports.jsx(MenuItem, { disabled: column2.getIsSorted() === "asc", onClick: handleSortAsc, sx: commonMenuItemStyles, children: jsxRuntimeExports.jsxs(Box, { sx: commonListItemStyles, children: [jsxRuntimeExports.jsx(ListItemIcon, { children: jsxRuntimeExports.jsx(SortIcon, { style: { transform: "rotate(180deg) scaleX(-1)" } }) }), (_b = localization.sortByColumnAsc) === null || _b === void 0 ? void 0 : _b.replace("{column}", String(columnDef.header))] }) }, 1),
        jsxRuntimeExports.jsx(MenuItem, { divider: enableColumnFilters || enableGrouping || enableHiding, disabled: column2.getIsSorted() === "desc", onClick: handleSortDesc, sx: commonMenuItemStyles, children: jsxRuntimeExports.jsxs(Box, { sx: commonListItemStyles, children: [jsxRuntimeExports.jsx(ListItemIcon, { children: jsxRuntimeExports.jsx(SortIcon, {}) }), (_c = localization.sortByColumnDesc) === null || _c === void 0 ? void 0 : _c.replace("{column}", String(columnDef.header))] }) }, 2)
      ] : [],
      ...enableColumnFilters && column2.getCanFilter() ? [
        jsxRuntimeExports.jsx(MenuItem, { disabled: !columnFilterValue || Array.isArray(columnFilterValue) && !columnFilterValue.filter((value) => value).length, onClick: handleClearFilter, sx: commonMenuItemStyles, children: jsxRuntimeExports.jsxs(Box, { sx: commonListItemStyles, children: [jsxRuntimeExports.jsx(ListItemIcon, { children: jsxRuntimeExports.jsx(FilterListOffIcon, {}) }), localization.clearFilter] }) }, 3),
        jsxRuntimeExports.jsxs(MenuItem, { disabled: showColumnFilters && !enableColumnFilterModes, divider: enableGrouping || enableHiding, onClick: showColumnFilters ? handleOpenFilterModeMenu : handleFilterByColumn, sx: commonMenuItemStyles, children: [jsxRuntimeExports.jsxs(Box, { sx: commonListItemStyles, children: [jsxRuntimeExports.jsx(ListItemIcon, { children: jsxRuntimeExports.jsx(FilterListIcon, {}) }), (_d = localization.filterByColumn) === null || _d === void 0 ? void 0 : _d.replace("{column}", String(columnDef.header))] }), showFilterModeSubMenu && jsxRuntimeExports.jsx(IconButton, { onClick: handleOpenFilterModeMenu, onMouseEnter: handleOpenFilterModeMenu, size: "small", sx: { p: 0 }, children: jsxRuntimeExports.jsx(ArrowRightIcon, {}) })] }, 4),
        showFilterModeSubMenu && jsxRuntimeExports.jsx(MRT_FilterOptionMenu, { anchorEl: filterMenuAnchorEl, header, onSelect: handleFilterByColumn, setAnchorEl: setFilterMenuAnchorEl, table }, 5)
      ] : [],
      ...enableGrouping && column2.getCanGroup() ? [
        jsxRuntimeExports.jsx(MenuItem, { divider: enablePinning, onClick: handleGroupByColumn, sx: commonMenuItemStyles, children: jsxRuntimeExports.jsxs(Box, { sx: commonListItemStyles, children: [jsxRuntimeExports.jsx(ListItemIcon, { children: jsxRuntimeExports.jsx(DynamicFeedIcon, {}) }), (_e = localization[column2.getIsGrouped() ? "ungroupByColumn" : "groupByColumn"]) === null || _e === void 0 ? void 0 : _e.replace("{column}", String(columnDef.header))] }) }, 6)
      ] : [],
      ...enablePinning && column2.getCanPin() ? [
        jsxRuntimeExports.jsx(MenuItem, { disabled: column2.getIsPinned() === "left" || !column2.getCanPin(), onClick: () => handlePinColumn("left"), sx: commonMenuItemStyles, children: jsxRuntimeExports.jsxs(Box, { sx: commonListItemStyles, children: [jsxRuntimeExports.jsx(ListItemIcon, { children: jsxRuntimeExports.jsx(PushPinIcon, { style: { transform: "rotate(90deg)" } }) }), localization.pinToLeft] }) }, 7),
        jsxRuntimeExports.jsx(MenuItem, { disabled: column2.getIsPinned() === "right" || !column2.getCanPin(), onClick: () => handlePinColumn("right"), sx: commonMenuItemStyles, children: jsxRuntimeExports.jsxs(Box, { sx: commonListItemStyles, children: [jsxRuntimeExports.jsx(ListItemIcon, { children: jsxRuntimeExports.jsx(PushPinIcon, { style: { transform: "rotate(-90deg)" } }) }), localization.pinToRight] }) }, 8),
        jsxRuntimeExports.jsx(MenuItem, { disabled: !column2.getIsPinned(), divider: enableHiding, onClick: () => handlePinColumn(false), sx: commonMenuItemStyles, children: jsxRuntimeExports.jsxs(Box, { sx: commonListItemStyles, children: [jsxRuntimeExports.jsx(ListItemIcon, { children: jsxRuntimeExports.jsx(PushPinIcon, {}) }), localization.unpin] }) }, 9)
      ] : [],
      ...enableColumnResizing && column2.getCanResize() ? [
        jsxRuntimeExports.jsx(MenuItem, { disabled: !columnSizing[column2.id], onClick: handleResetColumnSize, sx: commonMenuItemStyles, children: jsxRuntimeExports.jsxs(Box, { sx: commonListItemStyles, children: [jsxRuntimeExports.jsx(ListItemIcon, { children: jsxRuntimeExports.jsx(RestartAltIcon, {}) }), localization.resetColumnSize] }) }, 10)
      ] : [],
      ...enableHiding ? [
        jsxRuntimeExports.jsx(MenuItem, { disabled: !column2.getCanHide(), onClick: handleHideColumn, sx: commonMenuItemStyles, children: jsxRuntimeExports.jsxs(Box, { sx: commonListItemStyles, children: [jsxRuntimeExports.jsx(ListItemIcon, { children: jsxRuntimeExports.jsx(VisibilityOffIcon, {}) }), (_f = localization.hideColumn) === null || _f === void 0 ? void 0 : _f.replace("{column}", String(columnDef.header))] }) }, 11),
        jsxRuntimeExports.jsx(MenuItem, { disabled: !Object.values(columnVisibility).filter((visible) => !visible).length, onClick: handleShowAllColumns, sx: commonMenuItemStyles, children: jsxRuntimeExports.jsxs(Box, { sx: commonListItemStyles, children: [jsxRuntimeExports.jsx(ListItemIcon, { children: jsxRuntimeExports.jsx(ViewColumnIcon, {}) }), (_g = localization.showAllColumns) === null || _g === void 0 ? void 0 : _g.replace("{column}", String(columnDef.header))] }) }, 12)
      ] : []
    ].filter(Boolean);
    return jsxRuntimeExports.jsx(Menu, { anchorEl, open: !!anchorEl, onClose: () => setAnchorEl(null), MenuListProps: {
      dense: density === "compact"
    }, children: (_k = (_j = (_h = columnDef.renderColumnActionsMenuItems) === null || _h === void 0 ? void 0 : _h.call(columnDef, {
      closeMenu: () => setAnchorEl(null),
      column: column2,
      internalColumnMenuItems,
      table
    })) !== null && _j !== void 0 ? _j : renderColumnActionsMenuItems === null || renderColumnActionsMenuItems === void 0 ? void 0 : renderColumnActionsMenuItems({
      closeMenu: () => setAnchorEl(null),
      column: column2,
      internalColumnMenuItems,
      table
    })) !== null && _k !== void 0 ? _k : internalColumnMenuItems });
  };
  const MRT_RowActionMenu = ({ anchorEl, handleEdit, row, setAnchorEl, table }) => {
    const { getState, options: { icons: { EditIcon }, enableEditing, localization, renderRowActionMenuItems } } = table;
    const { density } = getState();
    return jsxRuntimeExports.jsxs(Menu, { anchorEl, open: !!anchorEl, onClick: (event) => event.stopPropagation(), onClose: () => setAnchorEl(null), MenuListProps: {
      dense: density === "compact"
    }, children: [enableEditing instanceof Function ? enableEditing(row) : enableEditing && jsxRuntimeExports.jsx(MenuItem, { onClick: handleEdit, sx: commonMenuItemStyles, children: jsxRuntimeExports.jsxs(Box, { sx: commonListItemStyles, children: [jsxRuntimeExports.jsx(ListItemIcon, { children: jsxRuntimeExports.jsx(EditIcon, {}) }), localization.edit] }) }), renderRowActionMenuItems === null || renderRowActionMenuItems === void 0 ? void 0 : renderRowActionMenuItems({
      row,
      table,
      closeMenu: () => setAnchorEl(null)
    })] });
  };
  const MRT_EditActionButtons = ({ row, table, variant = "icon" }) => {
    const { getState, options: { icons: { CancelIcon: CancelIcon2, SaveIcon }, localization, onEditingRowSave, onEditingRowCancel }, refs: { editInputRefs }, setEditingRow } = table;
    const { editingRow } = getState();
    const handleCancel = () => {
      onEditingRowCancel === null || onEditingRowCancel === void 0 ? void 0 : onEditingRowCancel({ row, table });
      setEditingRow(null);
    };
    const handleSave = () => {
      var _a, _b;
      (_a = Object.values(editInputRefs === null || editInputRefs === void 0 ? void 0 : editInputRefs.current)) === null || _a === void 0 ? void 0 : _a.forEach((input) => {
        if (input.value !== void 0 && Object.hasOwn(editingRow === null || editingRow === void 0 ? void 0 : editingRow._valuesCache, input.name)) {
          editingRow._valuesCache[input.name] = input.value;
        }
      });
      onEditingRowSave === null || onEditingRowSave === void 0 ? void 0 : onEditingRowSave({
        exitEditingMode: () => setEditingRow(null),
        row: editingRow !== null && editingRow !== void 0 ? editingRow : row,
        table,
        values: (_b = editingRow === null || editingRow === void 0 ? void 0 : editingRow._valuesCache) !== null && _b !== void 0 ? _b : Object.assign({}, row.original)
      });
    };
    return jsxRuntimeExports.jsx(Box, { onClick: (e) => e.stopPropagation(), sx: { display: "flex", gap: "0.75rem" }, children: variant === "icon" ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsx(Tooltip, { arrow: true, title: localization.cancel, children: jsxRuntimeExports.jsx(IconButton, { "aria-label": localization.cancel, onClick: handleCancel, children: jsxRuntimeExports.jsx(CancelIcon2, {}) }) }), jsxRuntimeExports.jsx(Tooltip, { arrow: true, title: localization.save, children: jsxRuntimeExports.jsx(IconButton, { "aria-label": localization.save, color: "info", onClick: handleSave, children: jsxRuntimeExports.jsx(SaveIcon, {}) }) })] }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsx(Button, { onClick: handleCancel, children: localization.cancel }), jsxRuntimeExports.jsx(Button, { onClick: handleSave, variant: "contained", children: localization.save })] }) });
  };
  const commonIconButtonStyles = {
    height: "2rem",
    ml: "10px",
    opacity: 0.5,
    transition: "opacity 150ms",
    width: "2rem",
    "&:hover": {
      opacity: 1
    }
  };
  const MRT_ToggleRowActionMenuButton = ({ cell, row, table }) => {
    const { getState, options: { editingMode, enableEditing, icons: { EditIcon, MoreHorizIcon }, localization, renderRowActionMenuItems, renderRowActions }, setEditingRow } = table;
    const { editingRow } = getState();
    const [anchorEl, setAnchorEl] = React.useState(null);
    const handleOpenRowActionMenu = (event) => {
      event.stopPropagation();
      event.preventDefault();
      setAnchorEl(event.currentTarget);
    };
    const handleStartEditMode = (event) => {
      event.stopPropagation();
      setEditingRow(Object.assign({}, row));
      setAnchorEl(null);
    };
    return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: renderRowActions ? renderRowActions({ cell, row, table }) : row.id === (editingRow === null || editingRow === void 0 ? void 0 : editingRow.id) && editingMode === "row" ? jsxRuntimeExports.jsx(MRT_EditActionButtons, { row, table }) : !renderRowActionMenuItems && (enableEditing instanceof Function ? enableEditing(row) : enableEditing) ? jsxRuntimeExports.jsx(Tooltip, { placement: "right", arrow: true, title: localization.edit, children: jsxRuntimeExports.jsx(IconButton, { "aria-label": localization.edit, sx: commonIconButtonStyles, onClick: handleStartEditMode, children: jsxRuntimeExports.jsx(EditIcon, {}) }) }) : renderRowActionMenuItems ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsx(Tooltip, { arrow: true, enterDelay: 1e3, enterNextDelay: 1e3, title: localization.rowActions, children: jsxRuntimeExports.jsx(IconButton, { "aria-label": localization.rowActions, onClick: handleOpenRowActionMenu, size: "small", sx: commonIconButtonStyles, children: jsxRuntimeExports.jsx(MoreHorizIcon, {}) }) }), jsxRuntimeExports.jsx(MRT_RowActionMenu, { anchorEl, handleEdit: handleStartEditMode, row, setAnchorEl, table })] }) : null });
  };
  const MRT_SelectCheckbox = ({ row, selectAll, table }) => {
    var _a;
    const { getState, options: { localization, enableMultiRowSelection, muiSelectCheckboxProps, muiSelectAllCheckboxProps, selectAllMode } } = table;
    const { density, isLoading } = getState();
    const checkboxProps = !row ? muiSelectAllCheckboxProps instanceof Function ? muiSelectAllCheckboxProps({ table }) : muiSelectAllCheckboxProps : muiSelectCheckboxProps instanceof Function ? muiSelectCheckboxProps({ row, table }) : muiSelectCheckboxProps;
    const allRowsSelected = selectAll ? selectAllMode === "page" ? table.getIsAllPageRowsSelected() : table.getIsAllRowsSelected() : void 0;
    const commonProps = Object.assign(Object.assign({ checked: selectAll ? allRowsSelected : row === null || row === void 0 ? void 0 : row.getIsSelected(), disabled: isLoading || row && !row.getCanSelect(), inputProps: {
      "aria-label": selectAll ? localization.toggleSelectAll : localization.toggleSelectRow
    }, onChange: row ? row.getToggleSelectedHandler() : selectAllMode === "all" ? table.getToggleAllRowsSelectedHandler() : table.getToggleAllPageRowsSelectedHandler(), size: density === "compact" ? "small" : "medium" }, checkboxProps), { onClick: (e) => {
      var _a2;
      e.stopPropagation();
      (_a2 = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(checkboxProps, e);
    }, sx: (theme) => Object.assign({ height: density === "compact" ? "1.75rem" : "2.5rem", width: density === "compact" ? "1.75rem" : "2.5rem", m: density !== "compact" ? "-0.4rem" : void 0 }, (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.sx) instanceof Function ? checkboxProps.sx(theme) : checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.sx), title: void 0 });
    return jsxRuntimeExports.jsx(Tooltip, { arrow: true, enterDelay: 1e3, enterNextDelay: 1e3, title: (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.title) !== null && _a !== void 0 ? _a : selectAll ? localization.toggleSelectAll : localization.toggleSelectRow, children: enableMultiRowSelection === false ? jsxRuntimeExports.jsx(Radio, Object.assign({}, commonProps)) : jsxRuntimeExports.jsx(Checkbox, Object.assign({ indeterminate: selectAll ? table.getIsSomeRowsSelected() && !allRowsSelected : row === null || row === void 0 ? void 0 : row.getIsSomeSelected() }, commonProps)) });
  };
  const MRT_GlobalFilterTextField = ({ table }) => {
    var _a;
    const { getState, setGlobalFilter, options: { enableGlobalFilterModes, icons: { SearchIcon, CloseIcon: CloseIcon2 }, localization, manualFiltering, muiSearchTextFieldProps }, refs: { searchInputRef } } = table;
    const { globalFilter, showGlobalFilter } = getState();
    const textFieldProps = muiSearchTextFieldProps instanceof Function ? muiSearchTextFieldProps({ table }) : muiSearchTextFieldProps;
    const isMounted = React.useRef(false);
    const [anchorEl, setAnchorEl] = React.useState(null);
    const [searchValue, setSearchValue] = React.useState(globalFilter !== null && globalFilter !== void 0 ? globalFilter : "");
    const handleChangeDebounced = React.useCallback(debounce$1((event) => {
      var _a2;
      setGlobalFilter((_a2 = event.target.value) !== null && _a2 !== void 0 ? _a2 : void 0);
    }, manualFiltering ? 500 : 250), []);
    const handleChange = (event) => {
      setSearchValue(event.target.value);
      handleChangeDebounced(event);
    };
    const handleGlobalFilterMenuOpen = (event) => {
      setAnchorEl(event.currentTarget);
    };
    const handleClear = () => {
      setSearchValue("");
      setGlobalFilter(void 0);
    };
    React.useEffect(() => {
      if (isMounted.current) {
        if (globalFilter === void 0) {
          handleClear();
        } else {
          setSearchValue(globalFilter);
        }
      }
      isMounted.current = true;
    }, [globalFilter]);
    return jsxRuntimeExports.jsxs(Collapse, { in: showGlobalFilter, orientation: "horizontal", unmountOnExit: true, mountOnEnter: true, children: [jsxRuntimeExports.jsx(TextField, Object.assign({ placeholder: localization.search, onChange: handleChange, value: searchValue !== null && searchValue !== void 0 ? searchValue : "", variant: "standard", InputProps: {
      startAdornment: enableGlobalFilterModes ? jsxRuntimeExports.jsx(InputAdornment, { position: "start", children: jsxRuntimeExports.jsx(Tooltip, { arrow: true, title: localization.changeSearchMode, children: jsxRuntimeExports.jsx(IconButton, { "aria-label": localization.changeSearchMode, onClick: handleGlobalFilterMenuOpen, size: "small", sx: { height: "1.75rem", width: "1.75rem" }, children: jsxRuntimeExports.jsx(SearchIcon, {}) }) }) }) : jsxRuntimeExports.jsx(SearchIcon, { style: { marginRight: "4px" } }),
      endAdornment: jsxRuntimeExports.jsx(InputAdornment, { position: "end", children: jsxRuntimeExports.jsx(Tooltip, { arrow: true, title: (_a = localization.clearSearch) !== null && _a !== void 0 ? _a : "", children: jsxRuntimeExports.jsx("span", { children: jsxRuntimeExports.jsx(IconButton, { "aria-label": localization.clearSearch, disabled: !(searchValue === null || searchValue === void 0 ? void 0 : searchValue.length), onClick: handleClear, size: "small", children: jsxRuntimeExports.jsx(CloseIcon2, {}) }) }) }) })
    } }, textFieldProps, { inputRef: (inputRef) => {
      searchInputRef.current = inputRef;
      if (textFieldProps === null || textFieldProps === void 0 ? void 0 : textFieldProps.inputRef) {
        textFieldProps.inputRef = inputRef;
      }
    } })), jsxRuntimeExports.jsx(MRT_FilterOptionMenu, { anchorEl, setAnchorEl, table, onSelect: handleClear })] });
  };
  const MRT_LinearProgressBar = ({ isTopToolbar, table }) => {
    const { options: { muiLinearProgressProps }, getState } = table;
    const { isLoading, showProgressBars } = getState();
    const linearProgressProps = muiLinearProgressProps instanceof Function ? muiLinearProgressProps({ isTopToolbar, table }) : muiLinearProgressProps;
    return jsxRuntimeExports.jsx(Collapse, { in: isLoading || showProgressBars, mountOnEnter: true, unmountOnExit: true, sx: {
      bottom: isTopToolbar ? 0 : void 0,
      position: "absolute",
      top: !isTopToolbar ? 0 : void 0,
      width: "100%"
    }, children: jsxRuntimeExports.jsx(LinearProgress, Object.assign({ "aria-label": "Loading", "aria-busy": "true", sx: { position: "relative" } }, linearProgressProps)) });
  };
  const MRT_TablePagination = ({ table, position: position2 = "bottom" }) => {
    const { getPrePaginationRowModel, getState, setPageIndex, setPageSize, options: { muiTablePaginationProps, enableToolbarInternalActions, localization, rowCount } } = table;
    const { pagination: { pageSize: pageSize2 = 10, pageIndex = 0 }, showGlobalFilter } = getState();
    const totalRowCount = rowCount !== null && rowCount !== void 0 ? rowCount : getPrePaginationRowModel().rows.length;
    const showFirstLastPageButtons = totalRowCount / pageSize2 > 2;
    const tablePaginationProps = muiTablePaginationProps instanceof Function ? muiTablePaginationProps({ table }) : muiTablePaginationProps;
    const handleChangeRowsPerPage = (event) => {
      setPageSize(+event.target.value);
    };
    return jsxRuntimeExports.jsx(TablePagination, Object.assign({ component: "div", count: totalRowCount, getItemAriaLabel: (type) => type === "first" ? localization.goToFirstPage : type === "last" ? localization.goToLastPage : type === "next" ? localization.goToNextPage : localization.goToPreviousPage, labelDisplayedRows: ({ from: from2, to, count: count2 }) => `${from2}-${to} ${localization.of} ${count2}`, labelRowsPerPage: localization.rowsPerPage, onPageChange: (_2, newPage) => setPageIndex(newPage), onRowsPerPageChange: handleChangeRowsPerPage, page: Math.max(Math.min(pageIndex, Math.ceil(totalRowCount / pageSize2) - 1), 0), rowsPerPage: pageSize2, rowsPerPageOptions: [5, 10, 15, 20, 25, 30, 50, 100], showFirstButton: showFirstLastPageButtons, showLastButton: showFirstLastPageButtons }, tablePaginationProps, { SelectProps: Object.assign({ sx: { m: "0 1rem 0 1ch" }, MenuProps: { MenuListProps: { disablePadding: true }, sx: { m: 0 } } }, tablePaginationProps === null || tablePaginationProps === void 0 ? void 0 : tablePaginationProps.SelectProps), sx: (theme) => Object.assign({ "& .MuiTablePagination-toolbar": {
      display: "flex",
      alignItems: "center"
    }, "& .MuiTablePagination-selectLabel": {
      m: "0 -1px"
    }, "&. MuiInputBase-root": {
      m: "0 1px"
    }, "& . MuiTablePagination-select": {
      m: "0 1px"
    }, "& .MuiTablePagination-displayedRows": {
      m: "0 1px"
    }, "& .MuiTablePagination-actions": {
      m: "0 1px"
    }, mt: position2 === "top" && enableToolbarInternalActions && !showGlobalFilter ? "3.5rem" : void 0, position: "relative", zIndex: 2 }, (tablePaginationProps === null || tablePaginationProps === void 0 ? void 0 : tablePaginationProps.sx) instanceof Function ? tablePaginationProps.sx(theme) : tablePaginationProps === null || tablePaginationProps === void 0 ? void 0 : tablePaginationProps.sx) }));
  };
  const MRT_ToolbarAlertBanner = ({ stackAlertBanner, table }) => {
    var _a, _b;
    const { getPrePaginationRowModel, getSelectedRowModel, getState, options: { localization, muiToolbarAlertBannerProps, muiToolbarAlertBannerChipProps, positionToolbarAlertBanner, rowCount } } = table;
    const { grouping, showAlertBanner } = getState();
    const alertProps = muiToolbarAlertBannerProps instanceof Function ? muiToolbarAlertBannerProps({ table }) : muiToolbarAlertBannerProps;
    const chipProps = muiToolbarAlertBannerChipProps instanceof Function ? muiToolbarAlertBannerChipProps({ table }) : muiToolbarAlertBannerChipProps;
    const selectMessage = getSelectedRowModel().rows.length > 0 ? (_b = (_a = localization.selectedCountOfRowCountRowsSelected) === null || _a === void 0 ? void 0 : _a.replace("{selectedCount}", getSelectedRowModel().rows.length.toString())) === null || _b === void 0 ? void 0 : _b.replace("{rowCount}", (rowCount !== null && rowCount !== void 0 ? rowCount : getPrePaginationRowModel().rows.length).toString()) : null;
    const groupedByMessage = grouping.length > 0 ? jsxRuntimeExports.jsxs("span", { children: [localization.groupedBy, " ", grouping.map((columnId, index2) => jsxRuntimeExports.jsxs(React.Fragment, { children: [index2 > 0 ? localization.thenBy : "", jsxRuntimeExports.jsx(Chip, Object.assign({ label: table.getColumn(columnId).columnDef.header, onDelete: () => table.getColumn(columnId).toggleGrouping() }, chipProps))] }, `${index2}-${columnId}`))] }) : null;
    return jsxRuntimeExports.jsx(Collapse, { in: showAlertBanner || !!selectMessage || !!groupedByMessage, timeout: stackAlertBanner ? 200 : 0, children: jsxRuntimeExports.jsxs(Alert, Object.assign({ color: "info", icon: false }, alertProps, { sx: (theme) => Object.assign({ borderRadius: 0, fontSize: "1rem", left: 0, p: 0, position: "relative", mb: stackAlertBanner ? 0 : positionToolbarAlertBanner === "bottom" ? "-1rem" : void 0, right: 0, top: 0, width: "100%", zIndex: 2 }, (alertProps === null || alertProps === void 0 ? void 0 : alertProps.sx) instanceof Function ? alertProps.sx(theme) : alertProps === null || alertProps === void 0 ? void 0 : alertProps.sx), children: [(alertProps === null || alertProps === void 0 ? void 0 : alertProps.title) && jsxRuntimeExports.jsx(AlertTitle, { children: alertProps.title }), jsxRuntimeExports.jsxs(Box, { sx: { p: "0.5rem 1rem" }, children: [alertProps === null || alertProps === void 0 ? void 0 : alertProps.children, (alertProps === null || alertProps === void 0 ? void 0 : alertProps.children) && (selectMessage || groupedByMessage) && jsxRuntimeExports.jsx("br", {}), selectMessage, selectMessage && groupedByMessage && jsxRuntimeExports.jsx("br", {}), groupedByMessage] })] })) });
  };
  const MRT_FullScreenToggleButton = (_a) => {
    var _b;
    var { table } = _a, rest = __rest(_a, ["table"]);
    const { getState, options: { icons: { FullscreenExitIcon, FullscreenIcon }, localization }, setIsFullScreen } = table;
    const { isFullScreen } = getState();
    const handleToggleFullScreen = () => {
      setIsFullScreen(!isFullScreen);
    };
    return jsxRuntimeExports.jsx(Tooltip, { arrow: true, title: (_b = rest === null || rest === void 0 ? void 0 : rest.title) !== null && _b !== void 0 ? _b : localization.toggleFullScreen, children: jsxRuntimeExports.jsx(IconButton, Object.assign({ "aria-label": localization.toggleFullScreen, onClick: handleToggleFullScreen }, rest, { title: void 0, children: isFullScreen ? jsxRuntimeExports.jsx(FullscreenExitIcon, {}) : jsxRuntimeExports.jsx(FullscreenIcon, {}) })) });
  };
  const MRT_ColumnPinningButtons = ({ column: column2, table }) => {
    const { options: { icons: { PushPinIcon }, localization } } = table;
    const handlePinColumn = (pinDirection) => {
      column2.pin(pinDirection);
    };
    return jsxRuntimeExports.jsx(Box, { sx: { minWidth: "70px", textAlign: "center" }, children: column2.getIsPinned() ? jsxRuntimeExports.jsx(Tooltip, { arrow: true, title: localization.unpin, children: jsxRuntimeExports.jsx(IconButton, { onClick: () => handlePinColumn(false), size: "small", children: jsxRuntimeExports.jsx(PushPinIcon, {}) }) }) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsx(Tooltip, { arrow: true, title: localization.pinToLeft, children: jsxRuntimeExports.jsx(IconButton, { onClick: () => handlePinColumn("left"), size: "small", children: jsxRuntimeExports.jsx(PushPinIcon, { style: {
      transform: "rotate(90deg)"
    } }) }) }), jsxRuntimeExports.jsx(Tooltip, { arrow: true, title: localization.pinToRight, children: jsxRuntimeExports.jsx(IconButton, { onClick: () => handlePinColumn("right"), size: "small", children: jsxRuntimeExports.jsx(PushPinIcon, { style: {
      transform: "rotate(-90deg)"
    } }) }) })] }) });
  };
  const MRT_GrabHandleButton = ({ iconButtonProps, onDragEnd, onDragStart, table }) => {
    var _a;
    const { options: { icons: { DragHandleIcon }, localization } } = table;
    return jsxRuntimeExports.jsx(Tooltip, { arrow: true, enterDelay: 1e3, enterNextDelay: 1e3, placement: "top", title: (_a = iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.title) !== null && _a !== void 0 ? _a : localization.move, children: jsxRuntimeExports.jsx(IconButton, Object.assign({ disableRipple: true, draggable: "true", size: "small" }, iconButtonProps, { onClick: (e) => {
      var _a2;
      e.stopPropagation();
      (_a2 = iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(iconButtonProps, e);
    }, onDragStart, onDragEnd, sx: (theme) => Object.assign({ cursor: "grab", m: "0 -0.1rem", opacity: 0.5, p: "2px", transition: "all 150ms ease-in-out", "&:hover": {
      backgroundColor: "transparent",
      opacity: 1
    }, "&:active": {
      cursor: "grabbing"
    } }, (iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.sx) instanceof Function ? iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.sx(theme) : iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.sx), title: void 0, children: jsxRuntimeExports.jsx(DragHandleIcon, {}) })) });
  };
  const MRT_ShowHideColumnsMenuItems = ({ allColumns, hoveredColumn, setHoveredColumn, column: column2, table }) => {
    var _a;
    const { getState, options: { enableColumnOrdering, enableHiding, enablePinning, localization }, setColumnOrder } = table;
    const { columnOrder } = getState();
    const { columnDef } = column2;
    const { columnDefType } = columnDef;
    const switchChecked = columnDefType !== "group" && column2.getIsVisible() || columnDefType === "group" && column2.getLeafColumns().some((col) => col.getIsVisible());
    const handleToggleColumnHidden = (column3) => {
      var _a2, _b;
      if (columnDefType === "group") {
        (_b = (_a2 = column3 === null || column3 === void 0 ? void 0 : column3.columns) === null || _a2 === void 0 ? void 0 : _a2.forEach) === null || _b === void 0 ? void 0 : _b.call(_a2, (childColumn) => {
          childColumn.toggleVisibility(!switchChecked);
        });
      } else {
        column3.toggleVisibility();
      }
    };
    const menuItemRef = React.useRef(null);
    const [isDragging, setIsDragging] = React.useState(false);
    const handleDragStart = (e) => {
      setIsDragging(true);
      e.dataTransfer.setDragImage(menuItemRef.current, 0, 0);
    };
    const handleDragEnd = (_e) => {
      setIsDragging(false);
      setHoveredColumn(null);
      if (hoveredColumn) {
        setColumnOrder(reorderColumn(column2, hoveredColumn, columnOrder));
      }
    };
    const handleDragEnter = (_e) => {
      if (!isDragging && columnDef.enableColumnOrdering !== false) {
        setHoveredColumn(column2);
      }
    };
    return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsx(MenuItem, { disableRipple: true, ref: menuItemRef, onDragEnter: handleDragEnter, sx: (theme) => ({
      alignItems: "center",
      justifyContent: "flex-start",
      my: 0,
      opacity: isDragging ? 0.5 : 1,
      outlineOffset: "-2px",
      outline: isDragging ? `2px dashed ${theme.palette.divider}` : (hoveredColumn === null || hoveredColumn === void 0 ? void 0 : hoveredColumn.id) === column2.id ? `2px dashed ${theme.palette.primary.main}` : "none",
      pl: `${(column2.depth + 0.5) * 2}rem`,
      py: "6px"
    }), children: jsxRuntimeExports.jsxs(Box, { sx: {
      display: "flex",
      flexWrap: "nowrap",
      gap: "8px"
    }, children: [columnDefType !== "group" && enableColumnOrdering && !allColumns.some((col) => col.columnDef.columnDefType === "group") && (columnDef.enableColumnOrdering !== false ? jsxRuntimeExports.jsx(MRT_GrabHandleButton, { onDragEnd: handleDragEnd, onDragStart: handleDragStart, table }) : jsxRuntimeExports.jsx(Box, { sx: { width: "28px" } })), enablePinning && (column2.getCanPin() ? jsxRuntimeExports.jsx(MRT_ColumnPinningButtons, { column: column2, table }) : jsxRuntimeExports.jsx(Box, { sx: { width: "70px" } })), enableHiding ? jsxRuntimeExports.jsx(FormControlLabel, { componentsProps: {
      typography: {
        sx: {
          mb: 0,
          opacity: columnDefType !== "display" ? 1 : 0.5
        }
      }
    }, checked: switchChecked, control: jsxRuntimeExports.jsx(Tooltip, { arrow: true, enterDelay: 1e3, enterNextDelay: 1e3, title: localization.toggleVisibility, children: jsxRuntimeExports.jsx(Switch, {}) }), disabled: !column2.getCanHide(), label: columnDef.header, onChange: () => handleToggleColumnHidden(column2) }) : jsxRuntimeExports.jsx(Typography, { sx: { alignSelf: "center" }, children: columnDef.header })] }) }), (_a = column2.columns) === null || _a === void 0 ? void 0 : _a.map((c, i) => jsxRuntimeExports.jsx(MRT_ShowHideColumnsMenuItems, { allColumns, column: c, hoveredColumn, setHoveredColumn, table }, `${i}-${c.id}`))] });
  };
  const MRT_ShowHideColumnsMenu = ({ anchorEl, setAnchorEl, table }) => {
    const { getAllColumns, getAllLeafColumns, getCenterLeafColumns, getIsAllColumnsVisible, getIsSomeColumnsPinned, getIsSomeColumnsVisible, getLeftLeafColumns, getRightLeafColumns, getState, toggleAllColumnsVisible, options: { enableColumnOrdering, enableHiding, enablePinning, localization } } = table;
    const { density, columnOrder, columnPinning } = getState();
    const hideAllColumns = () => {
      getAllLeafColumns().filter((col) => col.columnDef.enableHiding !== false).forEach((col) => col.toggleVisibility(false));
    };
    const allColumns = React.useMemo(() => {
      const columns = getAllColumns();
      if (columnOrder.length > 0 && !columns.some((col) => col.columnDef.columnDefType === "group")) {
        return [
          ...getLeftLeafColumns(),
          ...Array.from(new Set(columnOrder)).map((colId) => getCenterLeafColumns().find((col) => (col === null || col === void 0 ? void 0 : col.id) === colId)),
          ...getRightLeafColumns()
        ].filter(Boolean);
      }
      return columns;
    }, [
      columnOrder,
      columnPinning,
      getAllColumns(),
      getCenterLeafColumns(),
      getLeftLeafColumns(),
      getRightLeafColumns()
    ]);
    const [hoveredColumn, setHoveredColumn] = React.useState(null);
    return jsxRuntimeExports.jsxs(Menu, { anchorEl, open: !!anchorEl, onClose: () => setAnchorEl(null), MenuListProps: {
      dense: density === "compact"
    }, children: [jsxRuntimeExports.jsxs(Box, { sx: {
      display: "flex",
      justifyContent: "space-between",
      p: "0.5rem",
      pt: 0
    }, children: [enableHiding && jsxRuntimeExports.jsx(Button, { disabled: !getIsSomeColumnsVisible(), onClick: hideAllColumns, children: localization.hideAll }), enableColumnOrdering && jsxRuntimeExports.jsx(Button, { onClick: () => table.setColumnOrder(getDefaultColumnOrderIds(table.options)), children: localization.resetOrder }), enablePinning && jsxRuntimeExports.jsx(Button, { disabled: !getIsSomeColumnsPinned(), onClick: () => table.resetColumnPinning(true), children: localization.unpinAll }), enableHiding && jsxRuntimeExports.jsx(Button, { disabled: getIsAllColumnsVisible(), onClick: () => toggleAllColumnsVisible(true), children: localization.showAll })] }), jsxRuntimeExports.jsx(Divider, {}), allColumns.map((column2, index2) => jsxRuntimeExports.jsx(MRT_ShowHideColumnsMenuItems, { allColumns, column: column2, hoveredColumn, setHoveredColumn, table }, `${index2}-${column2.id}`))] });
  };
  const MRT_ShowHideColumnsButton = (_a) => {
    var _b;
    var { table } = _a, rest = __rest(_a, ["table"]);
    const { options: { icons: { ViewColumnIcon }, localization } } = table;
    const [anchorEl, setAnchorEl] = React.useState(null);
    const handleClick = (event) => {
      setAnchorEl(event.currentTarget);
    };
    return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsx(Tooltip, { arrow: true, title: (_b = rest === null || rest === void 0 ? void 0 : rest.title) !== null && _b !== void 0 ? _b : localization.showHideColumns, children: jsxRuntimeExports.jsx(IconButton, Object.assign({ "aria-label": localization.showHideColumns, onClick: handleClick }, rest, { title: void 0, children: jsxRuntimeExports.jsx(ViewColumnIcon, {}) })) }), anchorEl && jsxRuntimeExports.jsx(MRT_ShowHideColumnsMenu, { anchorEl, setAnchorEl, table })] });
  };
  const MRT_ToggleDensePaddingButton = (_a) => {
    var _b;
    var { table } = _a, rest = __rest(_a, ["table"]);
    const { getState, options: { icons: { DensityLargeIcon, DensityMediumIcon, DensitySmallIcon }, localization }, setDensity } = table;
    const { density } = getState();
    const handleToggleDensePadding = () => {
      const nextDensity = density === "comfortable" ? "compact" : density === "compact" ? "spacious" : "comfortable";
      setDensity(nextDensity);
    };
    return jsxRuntimeExports.jsx(Tooltip, { arrow: true, title: (_b = rest === null || rest === void 0 ? void 0 : rest.title) !== null && _b !== void 0 ? _b : localization.toggleDensity, children: jsxRuntimeExports.jsx(IconButton, Object.assign({ "aria-label": localization.toggleDensity, onClick: handleToggleDensePadding }, rest, { title: void 0, children: density === "compact" ? jsxRuntimeExports.jsx(DensitySmallIcon, {}) : density === "comfortable" ? jsxRuntimeExports.jsx(DensityMediumIcon, {}) : jsxRuntimeExports.jsx(DensityLargeIcon, {}) })) });
  };
  const MRT_ToggleFiltersButton = (_a) => {
    var _b;
    var { table } = _a, rest = __rest(_a, ["table"]);
    const { getState, options: { icons: { FilterListIcon, FilterListOffIcon }, localization }, setShowColumnFilters } = table;
    const { showColumnFilters } = getState();
    const handleToggleShowFilters = () => {
      setShowColumnFilters(!showColumnFilters);
    };
    return jsxRuntimeExports.jsx(Tooltip, { arrow: true, title: (_b = rest === null || rest === void 0 ? void 0 : rest.title) !== null && _b !== void 0 ? _b : localization.showHideFilters, children: jsxRuntimeExports.jsx(IconButton, Object.assign({ "aria-label": localization.showHideFilters, onClick: handleToggleShowFilters }, rest, { title: void 0, children: showColumnFilters ? jsxRuntimeExports.jsx(FilterListOffIcon, {}) : jsxRuntimeExports.jsx(FilterListIcon, {}) })) });
  };
  const MRT_ToggleGlobalFilterButton = (_a) => {
    var _b, _c;
    var { table } = _a, rest = __rest(_a, ["table"]);
    const { getState, options: { icons: { SearchIcon, SearchOffIcon }, localization }, refs: { searchInputRef }, setShowGlobalFilter } = table;
    const { globalFilter, showGlobalFilter } = getState();
    const handleToggleSearch = () => {
      setShowGlobalFilter(!showGlobalFilter);
      queueMicrotask(() => {
        var _a2;
        return (_a2 = searchInputRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
      });
    };
    return jsxRuntimeExports.jsx(Tooltip, { arrow: true, title: (_b = rest === null || rest === void 0 ? void 0 : rest.title) !== null && _b !== void 0 ? _b : localization.showHideSearch, children: jsxRuntimeExports.jsx(IconButton, Object.assign({ "aria-label": (_c = rest === null || rest === void 0 ? void 0 : rest.title) !== null && _c !== void 0 ? _c : localization.showHideSearch, disabled: !!globalFilter, onClick: handleToggleSearch }, rest, { title: void 0, children: showGlobalFilter ? jsxRuntimeExports.jsx(SearchOffIcon, {}) : jsxRuntimeExports.jsx(SearchIcon, {}) })) });
  };
  const MRT_ToolbarInternalButtons = ({ table }) => {
    var _a;
    const { options: { enableColumnFilters, enableColumnOrdering, enableDensityToggle, enableFilters, enableFullScreenToggle, enableGlobalFilter, enableHiding, enablePinning, initialState, renderToolbarInternalActions } } = table;
    return jsxRuntimeExports.jsx(Box, { sx: {
      alignItems: "center",
      display: "flex",
      zIndex: 3
    }, children: (_a = renderToolbarInternalActions === null || renderToolbarInternalActions === void 0 ? void 0 : renderToolbarInternalActions({
      table
    })) !== null && _a !== void 0 ? _a : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [enableFilters && enableGlobalFilter && !(initialState === null || initialState === void 0 ? void 0 : initialState.showGlobalFilter) && jsxRuntimeExports.jsx(MRT_ToggleGlobalFilterButton, { table }), enableFilters && enableColumnFilters && jsxRuntimeExports.jsx(MRT_ToggleFiltersButton, { table }), (enableHiding || enableColumnOrdering || enablePinning) && jsxRuntimeExports.jsx(MRT_ShowHideColumnsButton, { table }), enableDensityToggle && jsxRuntimeExports.jsx(MRT_ToggleDensePaddingButton, { table }), enableFullScreenToggle && jsxRuntimeExports.jsx(MRT_FullScreenToggleButton, { table })] }) });
  };
  const MRT_ToolbarDropZone = ({ table }) => {
    var _a, _b;
    const { getState, options: { enableGrouping, localization }, setHoveredColumn, setShowToolbarDropZone } = table;
    const { draggingColumn, hoveredColumn, grouping, showToolbarDropZone } = getState();
    const handleDragEnter = (_event) => {
      setHoveredColumn({ id: "drop-zone" });
    };
    React.useEffect(() => {
      var _a2;
      if (((_a2 = table.options.state) === null || _a2 === void 0 ? void 0 : _a2.showToolbarDropZone) !== void 0) {
        setShowToolbarDropZone(!!enableGrouping && !!draggingColumn && draggingColumn.columnDef.enableGrouping !== false && !grouping.includes(draggingColumn.id));
      }
    }, [enableGrouping, draggingColumn, grouping]);
    return jsxRuntimeExports.jsx(Fade, { in: showToolbarDropZone, children: jsxRuntimeExports.jsx(Box, { className: "Mui-ToolbarDropZone", sx: (theme) => ({
      alignItems: "center",
      backgroundColor: alpha(theme.palette.info.main, (hoveredColumn === null || hoveredColumn === void 0 ? void 0 : hoveredColumn.id) === "drop-zone" ? 0.2 : 0.1),
      backdropFilter: "blur(4px)",
      boxSizing: "border-box",
      border: `dashed ${theme.palette.info.main} 2px`,
      display: "flex",
      justifyContent: "center",
      height: "100%",
      position: "absolute",
      width: "100%",
      zIndex: 4
    }), onDragEnter: handleDragEnter, children: jsxRuntimeExports.jsx(Typography, { fontStyle: "italic", children: localization.dropToGroupBy.replace("{column}", (_b = (_a = draggingColumn === null || draggingColumn === void 0 ? void 0 : draggingColumn.columnDef) === null || _a === void 0 ? void 0 : _a.header) !== null && _b !== void 0 ? _b : "") }) }) });
  };
  const commonToolbarStyles = ({ theme }) => ({
    alignItems: "flex-start",
    backgroundColor: lighten(theme.palette.background.default, 0.04),
    backgroundImage: "none",
    display: "grid",
    flexWrap: "wrap-reverse",
    minHeight: "3.5rem",
    overflow: "hidden",
    p: "0 !important",
    transition: "all 150ms ease-in-out",
    zIndex: 1
  });
  const MRT_TopToolbar = ({ table }) => {
    var _a;
    const { getState, options: { enableGlobalFilter, enablePagination, enableToolbarInternalActions, muiTopToolbarProps, positionGlobalFilter, positionPagination, positionToolbarAlertBanner, positionToolbarDropZone, renderTopToolbarCustomActions }, refs: { topToolbarRef } } = table;
    const { isFullScreen, showGlobalFilter } = getState();
    const isMobile = useMediaQuery("(max-width:720px)");
    const toolbarProps = muiTopToolbarProps instanceof Function ? muiTopToolbarProps({ table }) : muiTopToolbarProps;
    const stackAlertBanner = isMobile || !!renderTopToolbarCustomActions || showGlobalFilter;
    return jsxRuntimeExports.jsxs(Toolbar, Object.assign({ variant: "dense" }, toolbarProps, { ref: (ref) => {
      topToolbarRef.current = ref;
      if (toolbarProps === null || toolbarProps === void 0 ? void 0 : toolbarProps.ref) {
        toolbarProps.ref.current = ref;
      }
    }, sx: (theme) => Object.assign(Object.assign({ position: isFullScreen ? "sticky" : void 0, top: isFullScreen ? "0" : void 0 }, commonToolbarStyles({ theme })), (toolbarProps === null || toolbarProps === void 0 ? void 0 : toolbarProps.sx) instanceof Function ? toolbarProps.sx(theme) : toolbarProps === null || toolbarProps === void 0 ? void 0 : toolbarProps.sx), children: [positionToolbarAlertBanner === "top" && jsxRuntimeExports.jsx(MRT_ToolbarAlertBanner, { stackAlertBanner, table }), ["both", "top"].includes(positionToolbarDropZone !== null && positionToolbarDropZone !== void 0 ? positionToolbarDropZone : "") && jsxRuntimeExports.jsx(MRT_ToolbarDropZone, { table }), jsxRuntimeExports.jsxs(Box, { sx: {
      alignItems: "flex-start",
      boxSizing: "border-box",
      display: "flex",
      justifyContent: "space-between",
      p: "0.5rem",
      position: stackAlertBanner ? "relative" : "absolute",
      right: 0,
      top: 0,
      width: "100%"
    }, children: [enableGlobalFilter && positionGlobalFilter === "left" && jsxRuntimeExports.jsx(MRT_GlobalFilterTextField, { table }), (_a = renderTopToolbarCustomActions === null || renderTopToolbarCustomActions === void 0 ? void 0 : renderTopToolbarCustomActions({ table })) !== null && _a !== void 0 ? _a : jsxRuntimeExports.jsx("span", {}), enableToolbarInternalActions ? jsxRuntimeExports.jsxs(Box, { sx: {
      display: "flex",
      flexWrap: "wrap-reverse",
      justifyContent: "flex-end"
    }, children: [enableGlobalFilter && positionGlobalFilter === "right" && jsxRuntimeExports.jsx(MRT_GlobalFilterTextField, { table }), jsxRuntimeExports.jsx(MRT_ToolbarInternalButtons, { table })] }) : enableGlobalFilter && positionGlobalFilter === "right" && jsxRuntimeExports.jsx(MRT_GlobalFilterTextField, { table })] }), enablePagination && ["top", "both"].includes(positionPagination !== null && positionPagination !== void 0 ? positionPagination : "") && jsxRuntimeExports.jsx(MRT_TablePagination, { table, position: "top" }), jsxRuntimeExports.jsx(MRT_LinearProgressBar, { isTopToolbar: true, table })] }));
  };
  const MRT_BottomToolbar = ({ table }) => {
    const { getState, options: { enablePagination, muiBottomToolbarProps, positionPagination, positionToolbarAlertBanner, positionToolbarDropZone, renderBottomToolbarCustomActions }, refs: { bottomToolbarRef } } = table;
    const { isFullScreen } = getState();
    const isMobile = useMediaQuery("(max-width:720px)");
    const toolbarProps = muiBottomToolbarProps instanceof Function ? muiBottomToolbarProps({ table }) : muiBottomToolbarProps;
    const stackAlertBanner = isMobile || !!renderBottomToolbarCustomActions;
    return jsxRuntimeExports.jsxs(Toolbar, Object.assign({ variant: "dense" }, toolbarProps, { ref: (node2) => {
      if (node2) {
        bottomToolbarRef.current = node2;
        if (toolbarProps === null || toolbarProps === void 0 ? void 0 : toolbarProps.ref) {
          toolbarProps.ref.current = node2;
        }
      }
    }, sx: (theme) => Object.assign(Object.assign(Object.assign({}, commonToolbarStyles({ theme })), { bottom: isFullScreen ? "0" : void 0, boxShadow: `0 1px 2px -1px ${alpha(theme.palette.common.black, 0.1)} inset`, left: 0, position: isFullScreen ? "fixed" : "relative", right: 0 }), (toolbarProps === null || toolbarProps === void 0 ? void 0 : toolbarProps.sx) instanceof Function ? toolbarProps.sx(theme) : toolbarProps === null || toolbarProps === void 0 ? void 0 : toolbarProps.sx), children: [jsxRuntimeExports.jsx(MRT_LinearProgressBar, { isTopToolbar: false, table }), positionToolbarAlertBanner === "bottom" && jsxRuntimeExports.jsx(MRT_ToolbarAlertBanner, { stackAlertBanner, table }), ["both", "bottom"].includes(positionToolbarDropZone !== null && positionToolbarDropZone !== void 0 ? positionToolbarDropZone : "") && jsxRuntimeExports.jsx(MRT_ToolbarDropZone, { table }), jsxRuntimeExports.jsxs(Box, { sx: {
      alignItems: "center",
      boxSizing: "border-box",
      display: "flex",
      justifyContent: "space-between",
      p: "0.5rem",
      width: "100%"
    }, children: [renderBottomToolbarCustomActions ? renderBottomToolbarCustomActions({ table }) : jsxRuntimeExports.jsx("span", {}), jsxRuntimeExports.jsx(Box, { sx: {
      display: "flex",
      justifyContent: "flex-end",
      position: stackAlertBanner ? "relative" : "absolute",
      right: 0,
      top: 0
    }, children: enablePagination && ["bottom", "both"].includes(positionPagination !== null && positionPagination !== void 0 ? positionPagination : "") && jsxRuntimeExports.jsx(MRT_TablePagination, { table, position: "bottom" }) })] })] }));
  };
  const MRT_TableHeadCellColumnActionsButton = ({ header, table }) => {
    var _a;
    const { options: { icons: { MoreVertIcon }, localization, muiTableHeadCellColumnActionsButtonProps } } = table;
    const { column: column2 } = header;
    const { columnDef } = column2;
    const [anchorEl, setAnchorEl] = React.useState(null);
    const handleClick = (event) => {
      event.stopPropagation();
      event.preventDefault();
      setAnchorEl(event.currentTarget);
    };
    const mTableHeadCellColumnActionsButtonProps = muiTableHeadCellColumnActionsButtonProps instanceof Function ? muiTableHeadCellColumnActionsButtonProps({ column: column2, table }) : muiTableHeadCellColumnActionsButtonProps;
    const mcTableHeadCellColumnActionsButtonProps = columnDef.muiTableHeadCellColumnActionsButtonProps instanceof Function ? columnDef.muiTableHeadCellColumnActionsButtonProps({
      column: column2,
      table
    }) : columnDef.muiTableHeadCellColumnActionsButtonProps;
    const iconButtonProps = Object.assign(Object.assign({}, mTableHeadCellColumnActionsButtonProps), mcTableHeadCellColumnActionsButtonProps);
    return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsx(Tooltip, { arrow: true, enterDelay: 1e3, enterNextDelay: 1e3, placement: "top", title: (_a = iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.title) !== null && _a !== void 0 ? _a : localization.columnActions, children: jsxRuntimeExports.jsx(IconButton, Object.assign({ "aria-label": localization.columnActions, onClick: handleClick, size: "small" }, iconButtonProps, { sx: (theme) => Object.assign({ height: "2rem", m: "-8px -4px", opacity: 0.5, transform: "scale(0.85) translateX(-4px)", transition: "opacity 150ms", width: "2rem", "&:hover": {
      opacity: 1
    } }, (iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.sx) instanceof Function ? iconButtonProps.sx(theme) : iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.sx), title: void 0, children: jsxRuntimeExports.jsx(MoreVertIcon, {}) })) }), anchorEl && jsxRuntimeExports.jsx(MRT_ColumnActionMenu, { anchorEl, header, setAnchorEl, table })] });
  };
  const MRT_FilterTextField = ({ header, rangeFilterIndex, table }) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    const { options: { enableColumnFilterModes, columnFilterModeOptions, icons: { FilterListIcon, CloseIcon: CloseIcon2 }, localization, manualFiltering, muiTableHeadCellFilterTextFieldProps }, refs: { filterInputRefs }, setColumnFilterFns } = table;
    const { column: column2 } = header;
    const { columnDef } = column2;
    const mTableHeadCellFilterTextFieldProps = muiTableHeadCellFilterTextFieldProps instanceof Function ? muiTableHeadCellFilterTextFieldProps({
      column: column2,
      table,
      rangeFilterIndex
    }) : muiTableHeadCellFilterTextFieldProps;
    const mcTableHeadCellFilterTextFieldProps = columnDef.muiTableHeadCellFilterTextFieldProps instanceof Function ? columnDef.muiTableHeadCellFilterTextFieldProps({
      column: column2,
      table,
      rangeFilterIndex
    }) : columnDef.muiTableHeadCellFilterTextFieldProps;
    const textFieldProps = Object.assign(Object.assign({}, mTableHeadCellFilterTextFieldProps), mcTableHeadCellFilterTextFieldProps);
    const isRangeFilter = columnDef.filterVariant === "range" || rangeFilterIndex !== void 0;
    const isSelectFilter = columnDef.filterVariant === "select";
    const isMultiSelectFilter = columnDef.filterVariant === "multi-select";
    const isTextboxFilter = columnDef.filterVariant === "text" || !isSelectFilter && !isMultiSelectFilter;
    const currentFilterOption = columnDef._filterFn;
    const filterChipLabel = ["empty", "notEmpty"].includes(currentFilterOption) ? (
      //@ts-ignore
      localization[`filter${((_b = (_a = currentFilterOption === null || currentFilterOption === void 0 ? void 0 : currentFilterOption.charAt) === null || _a === void 0 ? void 0 : _a.call(currentFilterOption, 0)) === null || _b === void 0 ? void 0 : _b.toUpperCase()) + (currentFilterOption === null || currentFilterOption === void 0 ? void 0 : currentFilterOption.slice(1))}`]
    ) : "";
    const filterPlaceholder = !isRangeFilter ? (_c = textFieldProps === null || textFieldProps === void 0 ? void 0 : textFieldProps.placeholder) !== null && _c !== void 0 ? _c : (_d = localization.filterByColumn) === null || _d === void 0 ? void 0 : _d.replace("{column}", String(columnDef.header)) : rangeFilterIndex === 0 ? localization.min : rangeFilterIndex === 1 ? localization.max : "";
    const allowedColumnFilterOptions = (_e = columnDef === null || columnDef === void 0 ? void 0 : columnDef.columnFilterModeOptions) !== null && _e !== void 0 ? _e : columnFilterModeOptions;
    const showChangeModeButton = enableColumnFilterModes && columnDef.enableColumnFilterModes !== false && !rangeFilterIndex && (allowedColumnFilterOptions === void 0 || !!(allowedColumnFilterOptions === null || allowedColumnFilterOptions === void 0 ? void 0 : allowedColumnFilterOptions.length));
    const facetedUniqueValues = column2.getFacetedUniqueValues();
    const filterSelectOptions = React.useMemo(() => {
      var _a2;
      return (_a2 = columnDef.filterSelectOptions) !== null && _a2 !== void 0 ? _a2 : (isSelectFilter || isMultiSelectFilter) && facetedUniqueValues ? Array.from(facetedUniqueValues.keys()).sort((a, b) => a.localeCompare(b)) : void 0;
    }, [
      columnDef.filterSelectOptions,
      facetedUniqueValues,
      isMultiSelectFilter,
      isSelectFilter
    ]);
    const [anchorEl, setAnchorEl] = React.useState(null);
    const [filterValue, setFilterValue] = React.useState(() => {
      var _a2, _b2;
      return isMultiSelectFilter ? column2.getFilterValue() || [] : isRangeFilter ? ((_a2 = column2.getFilterValue()) === null || _a2 === void 0 ? void 0 : _a2[rangeFilterIndex]) || [] : (_b2 = column2.getFilterValue()) !== null && _b2 !== void 0 ? _b2 : "";
    });
    const handleChangeDebounced = React.useCallback(debounce$1((event) => {
      const value = textFieldProps.type === "date" ? event.target.valueAsDate : textFieldProps.type === "number" ? event.target.valueAsNumber : event.target.value;
      if (isRangeFilter) {
        column2.setFilterValue((old) => {
          const newFilterValues = old !== null && old !== void 0 ? old : ["", ""];
          newFilterValues[rangeFilterIndex] = value;
          return newFilterValues;
        });
      } else {
        column2.setFilterValue(value !== null && value !== void 0 ? value : void 0);
      }
    }, isTextboxFilter ? manualFiltering ? 400 : 200 : 1), []);
    const handleChange = (event) => {
      setFilterValue(event.target.value);
      handleChangeDebounced(event);
    };
    const handleClear = () => {
      if (isMultiSelectFilter) {
        setFilterValue([]);
        column2.setFilterValue([]);
      } else if (isRangeFilter) {
        setFilterValue("");
        column2.setFilterValue((old) => {
          const newFilterValues = Array.isArray(old) && old || ["", ""];
          newFilterValues[rangeFilterIndex] = void 0;
          return newFilterValues;
        });
      } else {
        setFilterValue("");
        column2.setFilterValue(void 0);
      }
    };
    const handleClearEmptyFilterChip = () => {
      setFilterValue("");
      column2.setFilterValue(void 0);
      setColumnFilterFns((prev2) => {
        var _a2;
        return Object.assign(Object.assign({}, prev2), { [header.id]: (_a2 = allowedColumnFilterOptions === null || allowedColumnFilterOptions === void 0 ? void 0 : allowedColumnFilterOptions[0]) !== null && _a2 !== void 0 ? _a2 : "fuzzy" });
      });
    };
    const handleFilterMenuOpen = (event) => {
      setAnchorEl(event.currentTarget);
    };
    const isMounted = React.useRef(false);
    React.useEffect(() => {
      if (isMounted.current) {
        const filterValue2 = column2.getFilterValue();
        if (filterValue2 === void 0) {
          handleClear();
        } else if (isRangeFilter && rangeFilterIndex !== void 0) {
          setFilterValue(filterValue2[rangeFilterIndex]);
        } else {
          setFilterValue(filterValue2);
        }
      }
      isMounted.current = true;
    }, [column2.getFilterValue()]);
    if (columnDef.Filter) {
      return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: (_f = columnDef.Filter) === null || _f === void 0 ? void 0 : _f.call(columnDef, { column: column2, header, rangeFilterIndex, table }) });
    }
    return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsxs(TextField, Object.assign({ fullWidth: true, inputProps: {
      disabled: !!filterChipLabel,
      sx: {
        textOverflow: "ellipsis",
        width: filterChipLabel ? 0 : void 0
      },
      title: filterPlaceholder
    }, helperText: showChangeModeButton ? jsxRuntimeExports.jsx("label", { children: localization.filterMode.replace(
      "{filterType}",
      // @ts-ignore
      localization[`filter${((_g = currentFilterOption === null || currentFilterOption === void 0 ? void 0 : currentFilterOption.charAt(0)) === null || _g === void 0 ? void 0 : _g.toUpperCase()) + (currentFilterOption === null || currentFilterOption === void 0 ? void 0 : currentFilterOption.slice(1))}`]
    ) }) : null, FormHelperTextProps: {
      sx: {
        fontSize: "0.75rem",
        lineHeight: "0.8rem",
        whiteSpace: "nowrap"
      }
    }, margin: "none", placeholder: filterChipLabel || isSelectFilter || isMultiSelectFilter ? void 0 : filterPlaceholder, onChange: handleChange, onClick: (e) => e.stopPropagation(), select: isSelectFilter || isMultiSelectFilter, value: filterValue !== null && filterValue !== void 0 ? filterValue : "", variant: "standard", InputProps: {
      startAdornment: showChangeModeButton ? jsxRuntimeExports.jsxs(InputAdornment, { position: "start", children: [jsxRuntimeExports.jsx(Tooltip, { arrow: true, title: localization.changeFilterMode, children: jsxRuntimeExports.jsx("span", { children: jsxRuntimeExports.jsx(IconButton, { "aria-label": localization.changeFilterMode, onClick: handleFilterMenuOpen, size: "small", sx: { height: "1.75rem", width: "1.75rem" }, children: jsxRuntimeExports.jsx(FilterListIcon, {}) }) }) }), filterChipLabel && jsxRuntimeExports.jsx(Chip, { onDelete: handleClearEmptyFilterChip, label: filterChipLabel })] }) : null,
      endAdornment: !filterChipLabel && jsxRuntimeExports.jsx(InputAdornment, { position: "end", children: jsxRuntimeExports.jsx(Tooltip, { arrow: true, placement: "right", title: (_h = localization.clearFilter) !== null && _h !== void 0 ? _h : "", children: jsxRuntimeExports.jsx("span", { children: jsxRuntimeExports.jsx(IconButton, { "aria-label": localization.clearFilter, disabled: !((_j = filterValue === null || filterValue === void 0 ? void 0 : filterValue.toString()) === null || _j === void 0 ? void 0 : _j.length), onClick: handleClear, size: "small", sx: {
        height: "1.75rem",
        width: "1.75rem"
      }, children: jsxRuntimeExports.jsx(CloseIcon2, {}) }) }) }) })
    }, SelectProps: {
      displayEmpty: true,
      multiple: isMultiSelectFilter,
      renderValue: isMultiSelectFilter ? (selected) => !(selected === null || selected === void 0 ? void 0 : selected.length) ? jsxRuntimeExports.jsx(Box, { sx: { opacity: 0.5 }, children: filterPlaceholder }) : jsxRuntimeExports.jsx(Box, { sx: { display: "flex", flexWrap: "wrap", gap: "2px" }, children: selected === null || selected === void 0 ? void 0 : selected.map((value) => {
        const selectedValue = filterSelectOptions === null || filterSelectOptions === void 0 ? void 0 : filterSelectOptions.find((option) => option instanceof Object ? option.value === value : option === value);
        return jsxRuntimeExports.jsx(Chip, { label: selectedValue instanceof Object ? selectedValue.text : selectedValue }, value);
      }) }) : void 0
    } }, textFieldProps, { inputRef: (inputRef) => {
      filterInputRefs.current[`${column2.id}-${rangeFilterIndex !== null && rangeFilterIndex !== void 0 ? rangeFilterIndex : 0}`] = inputRef;
      if (textFieldProps.inputRef) {
        textFieldProps.inputRef = inputRef;
      }
    }, sx: (theme) => Object.assign({ p: 0, minWidth: isRangeFilter ? "100px" : !filterChipLabel ? "120px" : "auto", width: "calc(100% + 4px)", mx: "-2px", "& .MuiSelect-icon": {
      mr: "1.5rem"
    } }, (textFieldProps === null || textFieldProps === void 0 ? void 0 : textFieldProps.sx) instanceof Function ? textFieldProps.sx(theme) : textFieldProps === null || textFieldProps === void 0 ? void 0 : textFieldProps.sx), children: [(isSelectFilter || isMultiSelectFilter) && jsxRuntimeExports.jsx(MenuItem, { divider: true, disabled: true, hidden: true, value: "", children: jsxRuntimeExports.jsx(Box, { sx: { opacity: 0.5 }, children: filterPlaceholder }) }), (_k = textFieldProps.children) !== null && _k !== void 0 ? _k : filterSelectOptions === null || filterSelectOptions === void 0 ? void 0 : filterSelectOptions.map((option) => {
      var _a2;
      if (!option)
        return "";
      let value;
      let text2;
      if (typeof option !== "object") {
        value = option;
        text2 = option;
      } else {
        value = option.value;
        text2 = option.text;
      }
      return jsxRuntimeExports.jsxs(MenuItem, { sx: {
        display: "flex",
        m: 0,
        alignItems: "center",
        gap: "0.5rem"
      }, value, children: [isMultiSelectFilter && jsxRuntimeExports.jsx(Checkbox, { checked: ((_a2 = column2.getFilterValue()) !== null && _a2 !== void 0 ? _a2 : []).includes(value), sx: { mr: "0.5rem" } }), text2, " ", !columnDef.filterSelectOptions && `(${facetedUniqueValues.get(value)})`] }, value);
    })] })), jsxRuntimeExports.jsx(MRT_FilterOptionMenu, { anchorEl, header, setAnchorEl, table, setFilterValue })] });
  };
  const MRT_FilterRangeFields = ({ header, table }) => {
    return jsxRuntimeExports.jsxs(Box, { sx: { display: "grid", gridTemplateColumns: "1fr 1fr", gap: "1rem" }, children: [jsxRuntimeExports.jsx(MRT_FilterTextField, { header, rangeFilterIndex: 0, table }), jsxRuntimeExports.jsx(MRT_FilterTextField, { header, rangeFilterIndex: 1, table })] });
  };
  const MRT_FilterCheckbox = ({ column: column2, table }) => {
    var _a, _b, _c;
    const { getState, options: { localization, muiTableHeadCellFilterCheckboxProps } } = table;
    const { density } = getState();
    const { columnDef } = column2;
    const mTableHeadCellFilterCheckboxProps = muiTableHeadCellFilterCheckboxProps instanceof Function ? muiTableHeadCellFilterCheckboxProps({
      column: column2,
      table
    }) : muiTableHeadCellFilterCheckboxProps;
    const mcTableHeadCellFilterCheckboxProps = columnDef.muiTableHeadCellFilterCheckboxProps instanceof Function ? columnDef.muiTableHeadCellFilterCheckboxProps({
      column: column2,
      table
    }) : columnDef.muiTableHeadCellFilterCheckboxProps;
    const checkboxProps = Object.assign(Object.assign({}, mTableHeadCellFilterCheckboxProps), mcTableHeadCellFilterCheckboxProps);
    const filterLabel = (_a = localization.filterByColumn) === null || _a === void 0 ? void 0 : _a.replace("{column}", columnDef.header);
    return jsxRuntimeExports.jsx(Tooltip, { arrow: true, enterDelay: 1e3, enterNextDelay: 1e3, title: (_b = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.title) !== null && _b !== void 0 ? _b : filterLabel, children: jsxRuntimeExports.jsx(FormControlLabel, { control: jsxRuntimeExports.jsx(Checkbox, Object.assign({ checked: column2.getFilterValue() === "true", indeterminate: column2.getFilterValue() === void 0, color: column2.getFilterValue() === void 0 ? "default" : "primary", size: density === "compact" ? "small" : "medium" }, checkboxProps, { onClick: (e) => {
      var _a2;
      e.stopPropagation();
      (_a2 = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(checkboxProps, e);
    }, onChange: (e, checked) => {
      var _a2;
      column2.setFilterValue(column2.getFilterValue() === void 0 ? "true" : column2.getFilterValue() === "true" ? "false" : void 0);
      (_a2 = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.onChange) === null || _a2 === void 0 ? void 0 : _a2.call(checkboxProps, e, checked);
    }, sx: (theme) => Object.assign({ height: "2.5rem", width: "2.5rem" }, (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.sx) instanceof Function ? checkboxProps.sx(theme) : checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.sx) })), disableTypography: true, label: (_c = checkboxProps.title) !== null && _c !== void 0 ? _c : filterLabel, sx: { color: "text.secondary", mt: "-4px", fontWeight: "normal" }, title: void 0 }) });
  };
  const MRT_FilterRangeSlider = ({ header, table }) => {
    var _a, _b;
    const { options: { localization, muiTableHeadCellFilterSliderProps, enableColumnFilterModes }, refs: { filterInputRefs } } = table;
    const { column: column2 } = header;
    const { columnDef } = column2;
    const currentFilterOption = columnDef._filterFn;
    const showChangeModeButton = enableColumnFilterModes && columnDef.enableColumnFilterModes !== false;
    const mTableHeadCellFilterTextFieldProps = muiTableHeadCellFilterSliderProps instanceof Function ? muiTableHeadCellFilterSliderProps({
      column: column2,
      table
    }) : muiTableHeadCellFilterSliderProps;
    const mcTableHeadCellFilterTextFieldProps = columnDef.muiTableHeadCellFilterSliderProps instanceof Function ? columnDef.muiTableHeadCellFilterSliderProps({
      column: column2,
      table
    }) : columnDef.muiTableHeadCellFilterSliderProps;
    const sliderProps = Object.assign(Object.assign({}, mTableHeadCellFilterTextFieldProps), mcTableHeadCellFilterTextFieldProps);
    let [min2, max2] = sliderProps.min !== void 0 && sliderProps.max !== void 0 ? [sliderProps.min, sliderProps.max] : (_a = column2.getFacetedMinMaxValues()) !== null && _a !== void 0 ? _a : [0, 1];
    if (Array.isArray(min2))
      min2 = min2[0];
    if (Array.isArray(max2))
      max2 = max2[0];
    if (min2 === null)
      min2 = 0;
    if (max2 === null)
      max2 = 1;
    const [filterValues, setFilterValues] = React.useState([min2, max2]);
    const columnFilterValue = column2.getFilterValue();
    const isMounted = React.useRef(false);
    React.useEffect(() => {
      if (isMounted.current) {
        if (columnFilterValue === void 0) {
          setFilterValues([min2, max2]);
        } else if (Array.isArray(columnFilterValue)) {
          setFilterValues(columnFilterValue);
        }
      }
      isMounted.current = true;
    }, [columnFilterValue, min2, max2]);
    return jsxRuntimeExports.jsxs(Stack, { children: [jsxRuntimeExports.jsx(Slider, Object.assign({ disableSwap: true, min: min2, max: max2, onChange: (_event, values2) => {
      setFilterValues(values2);
    }, onChangeCommitted: (_event, value) => {
      if (Array.isArray(value)) {
        if (value[0] <= min2 && value[1] >= max2) {
          column2.setFilterValue(void 0);
        } else {
          column2.setFilterValue(value);
        }
      }
    }, value: filterValues, valueLabelDisplay: "auto" }, sliderProps, { slotProps: {
      input: {
        ref: (node2) => {
          var _a2, _b2;
          if (node2) {
            filterInputRefs.current[`${column2.id}-0`] = node2;
            if ((_b2 = (_a2 = sliderProps === null || sliderProps === void 0 ? void 0 : sliderProps.slotProps) === null || _a2 === void 0 ? void 0 : _a2.input) === null || _b2 === void 0 ? void 0 : _b2.ref) {
              sliderProps.slotProps.input.ref = node2;
            }
          }
        }
      }
    }, sx: (theme) => Object.assign({ m: "auto", mt: !showChangeModeButton ? "10px" : "6px", px: "4px", width: "calc(100% - 8px)" }, (sliderProps === null || sliderProps === void 0 ? void 0 : sliderProps.sx) instanceof Function ? sliderProps.sx(theme) : sliderProps === null || sliderProps === void 0 ? void 0 : sliderProps.sx) })), showChangeModeButton ? jsxRuntimeExports.jsx(FormHelperText, { sx: {
      m: "-3px -6px",
      fontSize: "0.75rem",
      lineHeight: "0.8rem",
      whiteSpace: "nowrap"
    }, children: localization.filterMode.replace(
      "{filterType}",
      // @ts-ignore
      localization[`filter${((_b = currentFilterOption === null || currentFilterOption === void 0 ? void 0 : currentFilterOption.charAt(0)) === null || _b === void 0 ? void 0 : _b.toUpperCase()) + (currentFilterOption === null || currentFilterOption === void 0 ? void 0 : currentFilterOption.slice(1))}`]
    ) }) : null] });
  };
  const MRT_TableHeadCellFilterContainer = ({ header, table }) => {
    const { getState } = table;
    const { showColumnFilters } = getState();
    const { column: column2 } = header;
    const { columnDef } = column2;
    return jsxRuntimeExports.jsx(Collapse, { in: showColumnFilters, mountOnEnter: true, unmountOnExit: true, children: columnDef.filterVariant === "checkbox" ? jsxRuntimeExports.jsx(MRT_FilterCheckbox, { column: column2, table }) : columnDef.filterVariant === "range-slider" ? jsxRuntimeExports.jsx(MRT_FilterRangeSlider, { header, table }) : columnDef.filterVariant === "range" || ["between", "betweenInclusive", "inNumberRange"].includes(columnDef._filterFn) ? jsxRuntimeExports.jsx(MRT_FilterRangeFields, { header, table }) : jsxRuntimeExports.jsx(MRT_FilterTextField, { header, table }) });
  };
  const MRT_TableHeadCellFilterLabel = ({ header, table }) => {
    var _a, _b, _c, _d;
    const { options: { icons: { FilterAltIcon }, localization }, refs: { filterInputRefs }, setShowColumnFilters } = table;
    const { column: column2 } = header;
    const { columnDef } = column2;
    const isRangeFilter = ["range", "ranger-slider"].includes((_a = columnDef.filterVariant) !== null && _a !== void 0 ? _a : "") || ["between", "betweenInclusive", "inNumberRange"].includes(columnDef._filterFn);
    const currentFilterOption = columnDef._filterFn;
    const filterTooltip = localization.filteringByColumn.replace("{column}", String(columnDef.header)).replace(
      "{filterType}",
      // @ts-ignore
      localization[`filter${((_b = currentFilterOption === null || currentFilterOption === void 0 ? void 0 : currentFilterOption.charAt(0)) === null || _b === void 0 ? void 0 : _b.toUpperCase()) + (currentFilterOption === null || currentFilterOption === void 0 ? void 0 : currentFilterOption.slice(1))}`]
    ).replace("{filterValue}", `"${Array.isArray(column2.getFilterValue()) ? column2.getFilterValue().join(`" ${isRangeFilter ? localization.and : localization.or} "`) : column2.getFilterValue()}"`).replace('" "', "");
    return jsxRuntimeExports.jsx(Grow, { unmountOnExit: true, in: !!column2.getFilterValue() && !isRangeFilter || isRangeFilter && // @ts-ignore
    (!!((_c = column2.getFilterValue()) === null || _c === void 0 ? void 0 : _c[0]) || !!((_d = column2.getFilterValue()) === null || _d === void 0 ? void 0 : _d[1])), children: jsxRuntimeExports.jsx(Box, { component: "span", sx: { flex: "0 0" }, children: jsxRuntimeExports.jsx(Tooltip, { arrow: true, placement: "top", title: filterTooltip, children: jsxRuntimeExports.jsx(IconButton, { disableRipple: true, onClick: (event) => {
      setShowColumnFilters(true);
      queueMicrotask(() => {
        var _a2, _b2;
        (_a2 = filterInputRefs.current[`${column2.id}-0`]) === null || _a2 === void 0 ? void 0 : _a2.focus();
        (_b2 = filterInputRefs.current[`${column2.id}-0`]) === null || _b2 === void 0 ? void 0 : _b2.select();
      });
      event.stopPropagation();
    }, size: "small", sx: {
      height: "12px",
      m: 0,
      opacity: 0.8,
      p: "2px",
      transform: "scale(0.66)",
      width: "12px"
    }, children: jsxRuntimeExports.jsx(FilterAltIcon, {}) }) }) }) });
  };
  const MRT_TableHeadCellGrabHandle = ({ column: column2, table, tableHeadCellRef }) => {
    const { getState, options: { enableColumnOrdering, muiTableHeadCellDragHandleProps }, setColumnOrder, setDraggingColumn, setHoveredColumn } = table;
    const { columnDef } = column2;
    const { hoveredColumn, draggingColumn, columnOrder } = getState();
    const mIconButtonProps = muiTableHeadCellDragHandleProps instanceof Function ? muiTableHeadCellDragHandleProps({ column: column2, table }) : muiTableHeadCellDragHandleProps;
    const mcIconButtonProps = columnDef.muiTableHeadCellDragHandleProps instanceof Function ? columnDef.muiTableHeadCellDragHandleProps({ column: column2, table }) : columnDef.muiTableHeadCellDragHandleProps;
    const iconButtonProps = Object.assign(Object.assign({}, mIconButtonProps), mcIconButtonProps);
    const handleDragStart = (event) => {
      var _a;
      (_a = iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.onDragStart) === null || _a === void 0 ? void 0 : _a.call(iconButtonProps, event);
      setDraggingColumn(column2);
      event.dataTransfer.setDragImage(tableHeadCellRef.current, 0, 0);
    };
    const handleDragEnd = (event) => {
      var _a;
      (_a = iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.onDragEnd) === null || _a === void 0 ? void 0 : _a.call(iconButtonProps, event);
      if ((hoveredColumn === null || hoveredColumn === void 0 ? void 0 : hoveredColumn.id) === "drop-zone") {
        column2.toggleGrouping();
      } else if (enableColumnOrdering && hoveredColumn && (hoveredColumn === null || hoveredColumn === void 0 ? void 0 : hoveredColumn.id) !== (draggingColumn === null || draggingColumn === void 0 ? void 0 : draggingColumn.id)) {
        setColumnOrder(reorderColumn(column2, hoveredColumn, columnOrder));
      }
      setDraggingColumn(null);
      setHoveredColumn(null);
    };
    return jsxRuntimeExports.jsx(MRT_GrabHandleButton, { iconButtonProps, onDragStart: handleDragStart, onDragEnd: handleDragEnd, table });
  };
  const MRT_TableHeadCellResizeHandle = ({ header, table }) => {
    var _a;
    const { getState, options: { columnResizeMode }, setColumnSizingInfo } = table;
    const { density } = getState();
    const { column: column2 } = header;
    return jsxRuntimeExports.jsx(Box, { className: "Mui-TableHeadCell-ResizeHandle-Wrapper", onDoubleClick: () => {
      setColumnSizingInfo((old) => Object.assign(Object.assign({}, old), { isResizingColumn: false }));
      column2.resetSize();
    }, onMouseDown: header.getResizeHandler(), onTouchStart: header.getResizeHandler(), sx: (theme) => ({
      cursor: "col-resize",
      mr: density === "compact" ? "-0.75rem" : "-1rem",
      position: "absolute",
      right: "4px",
      px: "4px",
      "&:active > hr": {
        backgroundColor: theme.palette.info.main,
        opacity: 1
      }
    }), style: {
      transform: column2.getIsResizing() && columnResizeMode === "onEnd" ? `translateX(${(_a = getState().columnSizingInfo.deltaOffset) !== null && _a !== void 0 ? _a : 0}px)` : void 0
    }, children: jsxRuntimeExports.jsx(Divider, { className: "Mui-TableHeadCell-ResizeHandle-Divider", flexItem: true, orientation: "vertical", sx: {
      borderRadius: "2px",
      borderWidth: "2px",
      height: "24px",
      touchAction: "none",
      transition: column2.getIsResizing() ? void 0 : "all 150ms ease-in-out",
      userSelect: "none",
      zIndex: 4
    } }) });
  };
  const MRT_TableHeadCellSortLabel = ({ header, table, tableCellProps }) => {
    const { getState, options: { icons: { ArrowDownwardIcon: ArrowDownwardIcon2 }, localization } } = table;
    const { column: column2 } = header;
    const { columnDef } = column2;
    const { sorting } = getState();
    const sorted = column2.getIsSorted();
    const sortTooltip = sorted ? sorted === "desc" ? localization.sortedByColumnDesc.replace("{column}", columnDef.header) : localization.sortedByColumnAsc.replace("{column}", columnDef.header) : column2.getNextSortingOrder() === "desc" ? localization.sortByColumnDesc.replace("{column}", columnDef.header) : localization.sortByColumnAsc.replace("{column}", columnDef.header);
    return jsxRuntimeExports.jsx(Tooltip, { arrow: true, placement: "top", title: sortTooltip, children: jsxRuntimeExports.jsx(Badge, { badgeContent: sorting.length > 1 ? column2.getSortIndex() + 1 : 0, overlap: "circular", children: jsxRuntimeExports.jsx(TableSortLabel, { "aria-label": sortTooltip, active: !!sorted, direction: sorted ? sorted : void 0, sx: {
      flex: "0 0",
      width: "2.4ch",
      transform: (tableCellProps === null || tableCellProps === void 0 ? void 0 : tableCellProps.align) !== "right" ? "translateX(-0.5ch)" : void 0
    }, IconComponent: ArrowDownwardIcon2, onClick: (e) => {
      var _a;
      e.stopPropagation();
      (_a = header.column.getToggleSortingHandler()) === null || _a === void 0 ? void 0 : _a(e);
    } }) }) });
  };
  const MRT_TableHeadCell = ({ header, table }) => {
    var _a, _b, _c, _d, _f, _g;
    const theme = useTheme();
    const { getState, options: { enableColumnActions, enableColumnDragging, enableColumnOrdering, enableGrouping, enableMultiSort, layoutMode, muiTableHeadCellProps }, refs: { tableHeadCellRefs }, setHoveredColumn } = table;
    const { density, draggingColumn, grouping, hoveredColumn, showColumnFilters } = getState();
    const { column: column2 } = header;
    const { columnDef } = column2;
    const { columnDefType } = columnDef;
    const mTableHeadCellProps = muiTableHeadCellProps instanceof Function ? muiTableHeadCellProps({ column: column2, table }) : muiTableHeadCellProps;
    const mcTableHeadCellProps = columnDef.muiTableHeadCellProps instanceof Function ? columnDef.muiTableHeadCellProps({ column: column2, table }) : columnDef.muiTableHeadCellProps;
    const tableCellProps = Object.assign(Object.assign({}, mTableHeadCellProps), mcTableHeadCellProps);
    const showColumnActions = (enableColumnActions || columnDef.enableColumnActions) && columnDef.enableColumnActions !== false;
    const showDragHandle = enableColumnDragging !== false && columnDef.enableColumnDragging !== false && (enableColumnDragging || enableColumnOrdering && columnDef.enableColumnOrdering !== false || enableGrouping && columnDef.enableGrouping !== false && !grouping.includes(column2.id));
    const headerPL = React.useMemo(() => {
      let pl = 0;
      if (column2.getCanSort())
        pl++;
      if (showColumnActions)
        pl += 1.75;
      if (showDragHandle)
        pl += 1.25;
      return pl;
    }, [showColumnActions, showDragHandle]);
    const draggingBorder = React.useMemo(() => (draggingColumn === null || draggingColumn === void 0 ? void 0 : draggingColumn.id) === column2.id ? `1px dashed ${theme.palette.text.secondary}` : (hoveredColumn === null || hoveredColumn === void 0 ? void 0 : hoveredColumn.id) === column2.id ? `2px dashed ${theme.palette.primary.main}` : void 0, [draggingColumn, hoveredColumn]);
    const draggingBorders = draggingBorder ? {
      borderLeft: draggingBorder,
      borderRight: draggingBorder,
      borderTop: draggingBorder
    } : void 0;
    const handleDragEnter = (_e) => {
      if (enableGrouping && (hoveredColumn === null || hoveredColumn === void 0 ? void 0 : hoveredColumn.id) === "drop-zone") {
        setHoveredColumn(null);
      }
      if (enableColumnOrdering && draggingColumn && columnDefType !== "group") {
        setHoveredColumn(columnDef.enableColumnOrdering !== false ? column2 : null);
      }
    };
    const headerElement = (columnDef === null || columnDef === void 0 ? void 0 : columnDef.Header) instanceof Function ? (_a = columnDef === null || columnDef === void 0 ? void 0 : columnDef.Header) === null || _a === void 0 ? void 0 : _a.call(columnDef, {
      column: column2,
      header,
      table
    }) : (_b = columnDef === null || columnDef === void 0 ? void 0 : columnDef.Header) !== null && _b !== void 0 ? _b : columnDef.header;
    return jsxRuntimeExports.jsxs(TableCell, Object.assign({ align: columnDefType === "group" ? "center" : "left", colSpan: header.colSpan, onDragEnter: handleDragEnter, ref: (node2) => {
      if (node2) {
        tableHeadCellRefs.current[column2.id] = node2;
      }
    } }, tableCellProps, { sx: (theme2) => Object.assign(Object.assign({ flexDirection: layoutMode === "grid" ? "column" : void 0, fontWeight: "bold", overflow: "visible", p: density === "compact" ? "0.5rem" : density === "comfortable" ? columnDefType === "display" ? "0.75rem" : "1rem" : columnDefType === "display" ? "1rem 1.25rem" : "1.5rem", pb: columnDefType === "display" ? 0 : showColumnFilters || density === "compact" ? "0.4rem" : "0.6rem", pt: columnDefType === "group" || density === "compact" ? "0.25rem" : density === "comfortable" ? ".75rem" : "1.25rem", userSelect: enableMultiSort && column2.getCanSort() ? "none" : void 0, verticalAlign: "top", zIndex: column2.getIsResizing() || (draggingColumn === null || draggingColumn === void 0 ? void 0 : draggingColumn.id) === column2.id ? 3 : column2.getIsPinned() && columnDefType !== "group" ? 2 : 1 }, getCommonCellStyles({
      column: column2,
      header,
      table,
      tableCellProps,
      theme: theme2
    })), draggingBorders), children: [header.isPlaceholder ? null : jsxRuntimeExports.jsxs(Box, { className: "Mui-TableHeadCell-Content", sx: {
      alignItems: "center",
      display: "flex",
      flexDirection: (tableCellProps === null || tableCellProps === void 0 ? void 0 : tableCellProps.align) === "right" ? "row-reverse" : "row",
      justifyContent: columnDefType === "group" || (tableCellProps === null || tableCellProps === void 0 ? void 0 : tableCellProps.align) === "center" ? "center" : column2.getCanResize() ? "space-between" : "flex-start",
      position: "relative",
      width: "100%"
    }, children: [jsxRuntimeExports.jsxs(Box, { className: "Mui-TableHeadCell-Content-Labels", onClick: column2.getToggleSortingHandler(), sx: {
      alignItems: "center",
      cursor: column2.getCanSort() && columnDefType !== "group" ? "pointer" : void 0,
      display: "flex",
      flexDirection: (tableCellProps === null || tableCellProps === void 0 ? void 0 : tableCellProps.align) === "right" ? "row-reverse" : "row",
      overflow: columnDefType === "data" ? "hidden" : void 0,
      pl: (tableCellProps === null || tableCellProps === void 0 ? void 0 : tableCellProps.align) === "center" ? `${headerPL}rem` : void 0
    }, children: [jsxRuntimeExports.jsx(Box, { className: "Mui-TableHeadCell-Content-Wrapper", sx: {
      minWidth: `${Math.min((_d = (_c = columnDef.header) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0, 5)}ch`,
      overflow: columnDefType === "data" ? "hidden" : void 0,
      textOverflow: "ellipsis",
      whiteSpace: ((_g = (_f = columnDef.header) === null || _f === void 0 ? void 0 : _f.length) !== null && _g !== void 0 ? _g : 0) < 20 ? "nowrap" : "normal",
      "&:hover": {
        textOverflow: "clip"
      }
    }, title: columnDefType === "data" ? columnDef.header : void 0, children: headerElement }), column2.getCanSort() && jsxRuntimeExports.jsx(MRT_TableHeadCellSortLabel, { header, table, tableCellProps }), column2.getCanFilter() && jsxRuntimeExports.jsx(MRT_TableHeadCellFilterLabel, { header, table })] }), columnDefType !== "group" && jsxRuntimeExports.jsxs(Box, { className: "Mui-TableHeadCell-Content-Actions", sx: { whiteSpace: "nowrap" }, children: [showDragHandle && jsxRuntimeExports.jsx(MRT_TableHeadCellGrabHandle, { column: column2, table, tableHeadCellRef: {
      current: tableHeadCellRefs.current[column2.id]
    } }), showColumnActions && jsxRuntimeExports.jsx(MRT_TableHeadCellColumnActionsButton, { header, table })] }), column2.getCanResize() && jsxRuntimeExports.jsx(MRT_TableHeadCellResizeHandle, { header, table })] }), column2.getCanFilter() && jsxRuntimeExports.jsx(MRT_TableHeadCellFilterContainer, { header, table })] }));
  };
  const MRT_TableHeadRow = ({ headerGroup, table, virtualColumns, virtualPaddingLeft, virtualPaddingRight }) => {
    const { options: { layoutMode, muiTableHeadRowProps } } = table;
    const tableRowProps = muiTableHeadRowProps instanceof Function ? muiTableHeadRowProps({ headerGroup, table }) : muiTableHeadRowProps;
    return jsxRuntimeExports.jsxs(TableRow, Object.assign({}, tableRowProps, { sx: (theme) => Object.assign({ backgroundColor: lighten(theme.palette.background.default, 0.04), boxShadow: `4px 0 8px ${alpha(theme.palette.common.black, 0.1)}`, display: layoutMode === "grid" ? "flex" : "table-row", top: 0 }, (tableRowProps === null || tableRowProps === void 0 ? void 0 : tableRowProps.sx) instanceof Function ? tableRowProps === null || tableRowProps === void 0 ? void 0 : tableRowProps.sx(theme) : tableRowProps === null || tableRowProps === void 0 ? void 0 : tableRowProps.sx), children: [virtualPaddingLeft ? jsxRuntimeExports.jsx("th", { style: { display: "flex", width: virtualPaddingLeft } }) : null, (virtualColumns !== null && virtualColumns !== void 0 ? virtualColumns : headerGroup.headers).map((headerOrVirtualHeader) => {
      const header = virtualColumns ? headerGroup.headers[headerOrVirtualHeader.index] : headerOrVirtualHeader;
      return header ? jsxRuntimeExports.jsx(MRT_TableHeadCell, { header, table }, header.id) : null;
    }), virtualPaddingRight ? jsxRuntimeExports.jsx("th", { style: { display: "flex", width: virtualPaddingRight } }) : null] }));
  };
  const MRT_TableHead = ({ table, virtualColumns, virtualPaddingLeft, virtualPaddingRight }) => {
    const { getHeaderGroups, getState, options: { enableStickyHeader, layoutMode, muiTableHeadProps } } = table;
    const { isFullScreen } = getState();
    const tableHeadProps = muiTableHeadProps instanceof Function ? muiTableHeadProps({ table }) : muiTableHeadProps;
    const stickyHeader = enableStickyHeader || isFullScreen;
    return jsxRuntimeExports.jsx(TableHead, Object.assign({}, tableHeadProps, { sx: (theme) => Object.assign({ display: layoutMode === "grid" ? "grid" : "table-row-group", opacity: 0.97, position: stickyHeader ? "sticky" : "relative", top: stickyHeader && layoutMode === "grid" ? 0 : void 0, zIndex: stickyHeader ? 2 : void 0 }, (tableHeadProps === null || tableHeadProps === void 0 ? void 0 : tableHeadProps.sx) instanceof Function ? tableHeadProps === null || tableHeadProps === void 0 ? void 0 : tableHeadProps.sx(theme) : tableHeadProps === null || tableHeadProps === void 0 ? void 0 : tableHeadProps.sx), children: getHeaderGroups().map((headerGroup) => jsxRuntimeExports.jsx(MRT_TableHeadRow, { headerGroup, table, virtualColumns, virtualPaddingLeft, virtualPaddingRight }, headerGroup.id)) }));
  };
  const MRT_EditCellTextField = ({ cell, showLabel, table }) => {
    var _a, _b, _c;
    const { getState, options: { muiTableBodyCellEditTextFieldProps }, refs: { editInputRefs }, setEditingCell, setEditingRow } = table;
    const { column: column2, row } = cell;
    const { columnDef } = column2;
    const { editingRow } = getState();
    const [value, setValue] = React.useState(() => cell.getValue());
    const mTableBodyCellEditTextFieldProps = muiTableBodyCellEditTextFieldProps instanceof Function ? muiTableBodyCellEditTextFieldProps({ cell, column: column2, row, table }) : muiTableBodyCellEditTextFieldProps;
    const mcTableBodyCellEditTextFieldProps = columnDef.muiTableBodyCellEditTextFieldProps instanceof Function ? columnDef.muiTableBodyCellEditTextFieldProps({
      cell,
      column: column2,
      row,
      table
    }) : columnDef.muiTableBodyCellEditTextFieldProps;
    const textFieldProps = Object.assign(Object.assign({}, mTableBodyCellEditTextFieldProps), mcTableBodyCellEditTextFieldProps);
    const isSelectEdit = columnDef.editVariant === "select";
    const saveRow = (newValue) => {
      if (editingRow) {
        setEditingRow(Object.assign(Object.assign({}, editingRow), { _valuesCache: Object.assign(Object.assign({}, editingRow._valuesCache), { [column2.id]: newValue }) }));
      }
    };
    const handleChange = (event) => {
      var _a2;
      (_a2 = textFieldProps.onChange) === null || _a2 === void 0 ? void 0 : _a2.call(textFieldProps, event);
      setValue(event.target.value);
      if (textFieldProps === null || textFieldProps === void 0 ? void 0 : textFieldProps.select) {
        saveRow(event.target.value);
      }
    };
    const handleBlur2 = (event) => {
      var _a2;
      (_a2 = textFieldProps.onBlur) === null || _a2 === void 0 ? void 0 : _a2.call(textFieldProps, event);
      saveRow(value);
      setEditingCell(null);
    };
    const handleEnterKeyDown = (event) => {
      var _a2, _b2;
      (_a2 = textFieldProps.onKeyDown) === null || _a2 === void 0 ? void 0 : _a2.call(textFieldProps, event);
      if (event.key === "Enter") {
        (_b2 = editInputRefs.current[column2.id]) === null || _b2 === void 0 ? void 0 : _b2.blur();
      }
    };
    if (columnDef.Edit) {
      return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: (_a = columnDef.Edit) === null || _a === void 0 ? void 0 : _a.call(columnDef, { cell, column: column2, row, table }) });
    }
    return jsxRuntimeExports.jsx(TextField, Object.assign({ disabled: (columnDef.enableEditing instanceof Function ? columnDef.enableEditing(row) : columnDef.enableEditing) === false, fullWidth: true, inputRef: (inputRef) => {
      if (inputRef) {
        editInputRefs.current[column2.id] = inputRef;
        if (textFieldProps.inputRef) {
          textFieldProps.inputRef = inputRef;
        }
      }
    }, label: showLabel ? column2.columnDef.header : void 0, margin: "none", name: column2.id, placeholder: columnDef.header, select: isSelectEdit, value, variant: "standard" }, textFieldProps, { onClick: (e) => {
      var _a2;
      e.stopPropagation();
      (_a2 = textFieldProps === null || textFieldProps === void 0 ? void 0 : textFieldProps.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(textFieldProps, e);
    }, onBlur: handleBlur2, onChange: handleChange, onKeyDown: handleEnterKeyDown, children: (_b = textFieldProps.children) !== null && _b !== void 0 ? _b : (_c = columnDef === null || columnDef === void 0 ? void 0 : columnDef.editSelectOptions) === null || _c === void 0 ? void 0 : _c.map((option) => {
      let value2;
      let text2;
      if (typeof option !== "object") {
        value2 = option;
        text2 = option;
      } else {
        value2 = option.value;
        text2 = option.text;
      }
      return jsxRuntimeExports.jsx(MenuItem, { sx: {
        display: "flex",
        m: 0,
        alignItems: "center",
        gap: "0.5rem"
      }, value: value2, children: text2 }, value2);
    }) }));
  };
  const MRT_CopyButton = ({ cell, children, table }) => {
    var _a;
    const { options: { localization, muiTableBodyCellCopyButtonProps } } = table;
    const { column: column2, row } = cell;
    const { columnDef } = column2;
    const [copied, setCopied] = React.useState(false);
    const handleCopy = (event, text2) => {
      event.stopPropagation();
      navigator.clipboard.writeText(text2);
      setCopied(true);
      setTimeout(() => setCopied(false), 4e3);
    };
    const mTableBodyCellCopyButtonProps = muiTableBodyCellCopyButtonProps instanceof Function ? muiTableBodyCellCopyButtonProps({ cell, column: column2, row, table }) : muiTableBodyCellCopyButtonProps;
    const mcTableBodyCellCopyButtonProps = columnDef.muiTableBodyCellCopyButtonProps instanceof Function ? columnDef.muiTableBodyCellCopyButtonProps({
      cell,
      column: column2,
      row,
      table
    }) : columnDef.muiTableBodyCellCopyButtonProps;
    const buttonProps = Object.assign(Object.assign({}, mTableBodyCellCopyButtonProps), mcTableBodyCellCopyButtonProps);
    return jsxRuntimeExports.jsx(Tooltip, { arrow: true, enterDelay: 1e3, enterNextDelay: 1e3, placement: "top", title: (_a = buttonProps === null || buttonProps === void 0 ? void 0 : buttonProps.title) !== null && _a !== void 0 ? _a : copied ? localization.copiedToClipboard : localization.clickToCopy, children: jsxRuntimeExports.jsx(Button, Object.assign({ onClick: (e) => handleCopy(e, cell.getValue()), size: "small", type: "button", variant: "text" }, buttonProps, { sx: (theme) => Object.assign({ backgroundColor: "transparent", border: "none", color: "inherit", cursor: "copy", fontFamily: "inherit", fontSize: "inherit", letterSpacing: "inherit", m: "-0.25rem", minWidth: "unset", textAlign: "inherit", textTransform: "inherit" }, (buttonProps === null || buttonProps === void 0 ? void 0 : buttonProps.sx) instanceof Function ? buttonProps.sx(theme) : buttonProps === null || buttonProps === void 0 ? void 0 : buttonProps.sx), title: void 0, children })) });
  };
  const MRT_TableBodyRowGrabHandle = ({ cell, rowRef, table }) => {
    const { options: { muiTableBodyRowDragHandleProps } } = table;
    const { row } = cell;
    const iconButtonProps = muiTableBodyRowDragHandleProps instanceof Function ? muiTableBodyRowDragHandleProps({ row, table }) : muiTableBodyRowDragHandleProps;
    const handleDragStart = (event) => {
      var _a;
      (_a = iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.onDragStart) === null || _a === void 0 ? void 0 : _a.call(iconButtonProps, event);
      event.dataTransfer.setDragImage(rowRef.current, 0, 0);
      table.setDraggingRow(row);
    };
    const handleDragEnd = (event) => {
      var _a;
      (_a = iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.onDragEnd) === null || _a === void 0 ? void 0 : _a.call(iconButtonProps, event);
      table.setDraggingRow(null);
      table.setHoveredRow(null);
    };
    return jsxRuntimeExports.jsx(MRT_GrabHandleButton, { iconButtonProps, onDragStart: handleDragStart, onDragEnd: handleDragEnd, table });
  };
  const allowedTypes = ["string", "number"];
  const MRT_TableBodyCellValue = ({ cell, table }) => {
    var _a, _b, _c;
    const { getState, options: { enableFilterMatchHighlighting } } = table;
    const { column: column2, row } = cell;
    const { columnDef } = column2;
    const { globalFilter, globalFilterFn } = getState();
    const filterValue = column2.getFilterValue();
    let renderedCellValue = cell.getIsAggregated() && columnDef.AggregatedCell ? columnDef.AggregatedCell({
      cell,
      column: column2,
      row,
      table
    }) : row.getIsGrouped() && !cell.getIsGrouped() ? null : cell.getIsGrouped() && columnDef.GroupedCell ? columnDef.GroupedCell({
      cell,
      column: column2,
      row,
      table
    }) : void 0;
    const isGroupedValue = renderedCellValue !== void 0;
    if (!isGroupedValue) {
      renderedCellValue = cell.renderValue();
    }
    if (enableFilterMatchHighlighting && columnDef.enableFilterMatchHighlighting !== false && renderedCellValue && allowedTypes.includes(typeof renderedCellValue) && (filterValue && allowedTypes.includes(typeof filterValue) && columnDef.filterVariant === "text" || globalFilter && allowedTypes.includes(typeof globalFilter) && column2.getCanGlobalFilter())) {
      const chunks = highlightWords === null || highlightWords === void 0 ? void 0 : highlightWords({
        text: renderedCellValue === null || renderedCellValue === void 0 ? void 0 : renderedCellValue.toString(),
        query: ((_a = filterValue !== null && filterValue !== void 0 ? filterValue : globalFilter) !== null && _a !== void 0 ? _a : "").toString(),
        matchExactly: (filterValue ? columnDef._filterFn : globalFilterFn) !== "fuzzy"
      });
      if ((chunks === null || chunks === void 0 ? void 0 : chunks.length) > 1 || ((_b = chunks === null || chunks === void 0 ? void 0 : chunks[0]) === null || _b === void 0 ? void 0 : _b.match)) {
        renderedCellValue = jsxRuntimeExports.jsx("span", { "aria-label": renderedCellValue, role: "note", children: (_c = chunks === null || chunks === void 0 ? void 0 : chunks.map(({ key, match: match2, text: text2 }) => jsxRuntimeExports.jsx(Box, { "aria-hidden": "true", component: "span", sx: match2 ? {
          backgroundColor: (theme) => theme.palette.mode === "dark" ? darken(theme.palette.warning.dark, 0.25) : lighten(theme.palette.warning.light, 0.5),
          borderRadius: "2px",
          color: (theme) => theme.palette.mode === "dark" ? "white" : "black",
          padding: "2px 1px"
        } : void 0, children: text2 }, key))) !== null && _c !== void 0 ? _c : renderedCellValue });
      }
    }
    if (columnDef.Cell && !isGroupedValue) {
      renderedCellValue = columnDef.Cell({
        cell,
        renderedCellValue,
        column: column2,
        row,
        table
      });
    }
    return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: renderedCellValue });
  };
  const MRT_TableBodyCell = ({ cell, measureElement: measureElement2, numRows, rowIndex, rowRef, table, virtualCell }) => {
    var _a, _b, _c, _d;
    const theme = useTheme();
    const { getState, options: { editingMode, enableClickToCopy, enableColumnOrdering, enableEditing, enableGrouping, enableRowNumbers, layoutMode, muiTableBodyCellProps, muiTableBodyCellSkeletonProps, rowNumberMode }, refs: { editInputRefs }, setEditingCell, setHoveredColumn } = table;
    const { draggingColumn, draggingRow, editingCell, editingRow, hoveredColumn, hoveredRow, density, isLoading, showSkeletons } = getState();
    const { column: column2, row } = cell;
    const { columnDef } = column2;
    const { columnDefType } = columnDef;
    const mTableCellBodyProps = muiTableBodyCellProps instanceof Function ? muiTableBodyCellProps({ cell, column: column2, row, table }) : muiTableBodyCellProps;
    const mcTableCellBodyProps = columnDef.muiTableBodyCellProps instanceof Function ? columnDef.muiTableBodyCellProps({ cell, column: column2, row, table }) : columnDef.muiTableBodyCellProps;
    const tableCellProps = Object.assign(Object.assign({}, mTableCellBodyProps), mcTableCellBodyProps);
    const skeletonProps = muiTableBodyCellSkeletonProps instanceof Function ? muiTableBodyCellSkeletonProps({ cell, column: column2, row, table }) : muiTableBodyCellSkeletonProps;
    const [skeletonWidth, setSkeletonWidth] = React.useState(0);
    React.useEffect(() => setSkeletonWidth(isLoading || showSkeletons ? columnDefType === "display" ? column2.getSize() / 2 : Math.round(Math.random() * (column2.getSize() - column2.getSize() / 3) + column2.getSize() / 3) : 100), []);
    const draggingBorders = React.useMemo(() => {
      const isDraggingColumn = (draggingColumn === null || draggingColumn === void 0 ? void 0 : draggingColumn.id) === column2.id;
      const isHoveredColumn = (hoveredColumn === null || hoveredColumn === void 0 ? void 0 : hoveredColumn.id) === column2.id;
      const isDraggingRow = (draggingRow === null || draggingRow === void 0 ? void 0 : draggingRow.id) === row.id;
      const isHoveredRow = (hoveredRow === null || hoveredRow === void 0 ? void 0 : hoveredRow.id) === row.id;
      const isFirstColumn = getIsFirstColumn(column2, table);
      const isLastColumn = getIsLastColumn(column2, table);
      const isLastRow = rowIndex === numRows - 1;
      const borderStyle = isDraggingColumn || isDraggingRow ? `1px dashed ${theme.palette.text.secondary} !important` : isHoveredColumn || isHoveredRow ? `2px dashed ${theme.palette.primary.main} !important` : void 0;
      return borderStyle ? {
        borderLeft: isDraggingColumn || isHoveredColumn || (isDraggingRow || isHoveredRow) && isFirstColumn ? borderStyle : void 0,
        borderRight: isDraggingColumn || isHoveredColumn || (isDraggingRow || isHoveredRow) && isLastColumn ? borderStyle : void 0,
        borderBottom: isDraggingRow || isHoveredRow || isLastRow ? borderStyle : void 0,
        borderTop: isDraggingRow || isHoveredRow ? borderStyle : void 0
      } : void 0;
    }, [draggingColumn, draggingRow, hoveredColumn, hoveredRow, rowIndex]);
    const isEditable = (enableEditing instanceof Function ? enableEditing(row) : enableEditing) && (columnDef.enableEditing instanceof Function ? columnDef.enableEditing(row) : columnDef.enableEditing) !== false;
    const isEditing = isEditable && editingMode !== "modal" && (editingMode === "table" || (editingRow === null || editingRow === void 0 ? void 0 : editingRow.id) === row.id || (editingCell === null || editingCell === void 0 ? void 0 : editingCell.id) === cell.id) && !row.getIsGrouped();
    const handleDoubleClick = (event) => {
      var _a2;
      (_a2 = tableCellProps === null || tableCellProps === void 0 ? void 0 : tableCellProps.onDoubleClick) === null || _a2 === void 0 ? void 0 : _a2.call(tableCellProps, event);
      if (isEditable && editingMode === "cell") {
        setEditingCell(cell);
        queueMicrotask(() => {
          var _a3;
          const textField = editInputRefs.current[column2.id];
          if (textField) {
            textField.focus();
            (_a3 = textField.select) === null || _a3 === void 0 ? void 0 : _a3.call(textField);
          }
        });
      }
    };
    const handleDragEnter = (e) => {
      var _a2;
      (_a2 = tableCellProps === null || tableCellProps === void 0 ? void 0 : tableCellProps.onDragEnter) === null || _a2 === void 0 ? void 0 : _a2.call(tableCellProps, e);
      if (enableGrouping && (hoveredColumn === null || hoveredColumn === void 0 ? void 0 : hoveredColumn.id) === "drop-zone") {
        setHoveredColumn(null);
      }
      if (enableColumnOrdering && draggingColumn) {
        setHoveredColumn(columnDef.enableColumnOrdering !== false ? column2 : null);
      }
    };
    return jsxRuntimeExports.jsx(TableCell, Object.assign({ "data-index": virtualCell === null || virtualCell === void 0 ? void 0 : virtualCell.index, ref: (node2) => {
      if (node2) {
        measureElement2 === null || measureElement2 === void 0 ? void 0 : measureElement2(node2);
      }
    } }, tableCellProps, { onDragEnter: handleDragEnter, onDoubleClick: handleDoubleClick, sx: (theme2) => Object.assign(Object.assign({ alignItems: layoutMode === "grid" ? "center" : void 0, cursor: isEditable && editingMode === "cell" ? "pointer" : "inherit", justifyContent: layoutMode === "grid" ? tableCellProps.align : void 0, overflow: "hidden", p: density === "compact" ? columnDefType === "display" ? "0 0.5rem" : "0.5rem" : density === "comfortable" ? columnDefType === "display" ? "0.5rem 0.75rem" : "1rem" : columnDefType === "display" ? "1rem 1.25rem" : "1.5rem", pl: column2.id === "mrt-row-expand" ? `${row.depth + (density === "compact" ? 0.5 : density === "comfortable" ? 0.75 : 1.25)}rem` : void 0, textOverflow: columnDefType !== "display" ? "ellipsis" : void 0, whiteSpace: density === "compact" ? "nowrap" : "normal", zIndex: (draggingColumn === null || draggingColumn === void 0 ? void 0 : draggingColumn.id) === column2.id ? 2 : column2.getIsPinned() ? 1 : 0, "&:hover": {
      outline: ["table", "cell"].includes(editingMode !== null && editingMode !== void 0 ? editingMode : "") ? `1px solid ${theme2.palette.text.secondary}` : void 0,
      outlineOffset: "-1px",
      textOverflow: "clip"
    } }, getCommonCellStyles({
      column: column2,
      table,
      theme: theme2,
      tableCellProps
    })), draggingBorders), children: jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [cell.getIsPlaceholder() ? (_b = (_a = columnDef.PlaceholderCell) === null || _a === void 0 ? void 0 : _a.call(columnDef, { cell, column: column2, row, table })) !== null && _b !== void 0 ? _b : null : isLoading || showSkeletons ? jsxRuntimeExports.jsx(Skeleton, Object.assign({ animation: "wave", height: 20, width: skeletonWidth }, skeletonProps)) : enableRowNumbers && rowNumberMode === "static" && column2.id === "mrt-row-numbers" ? rowIndex + 1 : column2.id === "mrt-row-drag" ? jsxRuntimeExports.jsx(MRT_TableBodyRowGrabHandle, { cell, rowRef, table }) : columnDefType === "display" && (column2.id === "mrt-row-select" || column2.id === "mrt-row-expand" || !row.getIsGrouped()) ? (_c = columnDef.Cell) === null || _c === void 0 ? void 0 : _c.call(columnDef, {
      cell,
      renderedCellValue: cell.renderValue(),
      column: column2,
      row,
      table
    }) : isEditing ? jsxRuntimeExports.jsx(MRT_EditCellTextField, { cell, table }) : (enableClickToCopy || columnDef.enableClickToCopy) && columnDef.enableClickToCopy !== false ? jsxRuntimeExports.jsx(MRT_CopyButton, { cell, table, children: jsxRuntimeExports.jsx(MRT_TableBodyCellValue, { cell, table }) }) : jsxRuntimeExports.jsx(MRT_TableBodyCellValue, { cell, table }), cell.getIsGrouped() && !columnDef.GroupedCell && jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [" (", (_d = row.subRows) === null || _d === void 0 ? void 0 : _d.length, ")"] })] }) }));
  };
  const Memo_MRT_TableBodyCell = React.memo(MRT_TableBodyCell, (prev2, next2) => next2.cell === prev2.cell);
  const MRT_TableDetailPanel = ({ parentRowRef, row, rowIndex, table, virtualRow }) => {
    const { getVisibleLeafColumns, getState, options: { layoutMode, muiTableBodyRowProps, muiTableDetailPanelProps, renderDetailPanel } } = table;
    const { isLoading } = getState();
    const tableRowProps = muiTableBodyRowProps instanceof Function ? muiTableBodyRowProps({
      isDetailPanel: true,
      row,
      staticRowIndex: rowIndex,
      table
    }) : muiTableBodyRowProps;
    const tableCellProps = muiTableDetailPanelProps instanceof Function ? muiTableDetailPanelProps({ row, table }) : muiTableDetailPanelProps;
    return jsxRuntimeExports.jsx(TableRow, Object.assign({ className: "Mui-TableBodyCell-DetailPanel" }, tableRowProps, { sx: (theme) => {
      var _a, _b;
      return Object.assign({ display: layoutMode === "grid" ? "flex" : "table-row", position: virtualRow ? "absolute" : void 0, top: virtualRow ? `${(_b = (_a = parentRowRef.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) === null || _b === void 0 ? void 0 : _b.height}px` : void 0, transform: virtualRow ? `translateY(${virtualRow === null || virtualRow === void 0 ? void 0 : virtualRow.start}px)` : void 0, width: "100%", zIndex: virtualRow ? 2 : void 0 }, (tableRowProps === null || tableRowProps === void 0 ? void 0 : tableRowProps.sx) instanceof Function ? tableRowProps.sx(theme) : tableRowProps === null || tableRowProps === void 0 ? void 0 : tableRowProps.sx);
    }, children: jsxRuntimeExports.jsx(TableCell, Object.assign({ className: "Mui-TableBodyCell-DetailPanel", colSpan: getVisibleLeafColumns().length }, tableCellProps, { sx: (theme) => Object.assign({ backgroundColor: virtualRow ? lighten(theme.palette.background.default, 0.06) : void 0, borderBottom: !row.getIsExpanded() ? "none" : void 0, display: layoutMode === "grid" ? "flex" : "table-cell", pb: row.getIsExpanded() ? "1rem" : 0, pt: row.getIsExpanded() ? "1rem" : 0, transition: "all 150ms ease-in-out", width: `${table.getTotalSize()}px` }, (tableCellProps === null || tableCellProps === void 0 ? void 0 : tableCellProps.sx) instanceof Function ? tableCellProps.sx(theme) : tableCellProps === null || tableCellProps === void 0 ? void 0 : tableCellProps.sx), children: renderDetailPanel && jsxRuntimeExports.jsx(Collapse, { in: row.getIsExpanded(), mountOnEnter: true, unmountOnExit: true, children: !isLoading && renderDetailPanel({ row, table }) }) })) }));
  };
  const MRT_TableBodyRow = ({ columnVirtualizer, measureElement: measureElement2, numRows, row, rowIndex, table, virtualColumns, virtualPaddingLeft, virtualPaddingRight, virtualRow }) => {
    const { getState, options: { enableRowOrdering, layoutMode, memoMode, muiTableBodyRowProps, renderDetailPanel }, setHoveredRow } = table;
    const { draggingColumn, draggingRow, editingCell, editingRow, hoveredRow } = getState();
    const tableRowProps = muiTableBodyRowProps instanceof Function ? muiTableBodyRowProps({ row, staticRowIndex: rowIndex, table }) : muiTableBodyRowProps;
    const handleDragEnter = (_e) => {
      if (enableRowOrdering && draggingRow) {
        setHoveredRow(row);
      }
    };
    const rowRef = React.useRef(null);
    return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsxs(TableRow, Object.assign({ "data-index": virtualRow === null || virtualRow === void 0 ? void 0 : virtualRow.index, onDragEnter: handleDragEnter, selected: row.getIsSelected(), ref: (node2) => {
      if (node2) {
        rowRef.current = node2;
        measureElement2 === null || measureElement2 === void 0 ? void 0 : measureElement2(node2);
      }
    } }, tableRowProps, { sx: (theme) => Object.assign({ backgroundColor: lighten(theme.palette.background.default, 0.06), boxSizing: "border-box", display: layoutMode === "grid" ? "flex" : "table-row", opacity: (draggingRow === null || draggingRow === void 0 ? void 0 : draggingRow.id) === row.id || (hoveredRow === null || hoveredRow === void 0 ? void 0 : hoveredRow.id) === row.id ? 0.5 : 1, position: virtualRow ? "absolute" : void 0, transition: virtualRow ? "none" : "all 150ms ease-in-out", top: virtualRow ? 0 : void 0, width: "100%", "&:hover td": {
      backgroundColor: (tableRowProps === null || tableRowProps === void 0 ? void 0 : tableRowProps.hover) !== false ? row.getIsSelected() ? `${alpha(theme.palette.primary.main, 0.2)}` : theme.palette.mode === "dark" ? `${lighten(theme.palette.background.default, 0.12)}` : `${darken(theme.palette.background.default, 0.05)}` : void 0
    } }, (tableRowProps === null || tableRowProps === void 0 ? void 0 : tableRowProps.sx) instanceof Function ? tableRowProps.sx(theme) : tableRowProps === null || tableRowProps === void 0 ? void 0 : tableRowProps.sx), style: Object.assign({ transform: virtualRow ? `translateY(${virtualRow === null || virtualRow === void 0 ? void 0 : virtualRow.start}px)` : void 0 }, tableRowProps === null || tableRowProps === void 0 ? void 0 : tableRowProps.style), children: [virtualPaddingLeft ? jsxRuntimeExports.jsx("td", { style: { display: "flex", width: virtualPaddingLeft } }) : null, (virtualColumns !== null && virtualColumns !== void 0 ? virtualColumns : row.getVisibleCells()).map((cellOrVirtualCell) => {
      const cell = columnVirtualizer ? row.getVisibleCells()[cellOrVirtualCell.index] : cellOrVirtualCell;
      const props = {
        cell,
        measureElement: columnVirtualizer === null || columnVirtualizer === void 0 ? void 0 : columnVirtualizer.measureElement,
        numRows,
        rowIndex,
        rowRef,
        table,
        virtualCell: columnVirtualizer ? cellOrVirtualCell : void 0
      };
      return cell ? memoMode === "cells" && cell.column.columnDef.columnDefType === "data" && !draggingColumn && !draggingRow && (editingCell === null || editingCell === void 0 ? void 0 : editingCell.id) !== cell.id && (editingRow === null || editingRow === void 0 ? void 0 : editingRow.id) !== row.id ? jsxRuntimeExports.jsx(Memo_MRT_TableBodyCell, Object.assign({}, props), cell.id) : jsxRuntimeExports.jsx(MRT_TableBodyCell, Object.assign({}, props), cell.id) : null;
    }), virtualPaddingRight ? jsxRuntimeExports.jsx("td", { style: { display: "flex", width: virtualPaddingRight } }) : null] })), renderDetailPanel && !row.getIsGrouped() && jsxRuntimeExports.jsx(MRT_TableDetailPanel, { parentRowRef: rowRef, row, rowIndex, table, virtualRow })] });
  };
  const Memo_MRT_TableBodyRow = React.memo(MRT_TableBodyRow, (prev2, next2) => prev2.row === next2.row && prev2.rowIndex === next2.rowIndex);
  const MRT_TableBody = ({ columnVirtualizer, table, virtualColumns, virtualPaddingLeft, virtualPaddingRight }) => {
    var _a, _b, _c, _d;
    const { getRowModel, getPrePaginationRowModel, getState, options: { enableGlobalFilterRankedResults, enablePagination, enableRowVirtualization, layoutMode, localization, manualExpanding, manualFiltering, manualGrouping, manualPagination, manualSorting, memoMode, muiTableBodyProps, renderEmptyRowsFallback, rowVirtualizerInstanceRef, rowVirtualizerProps, virtualizerInstanceRef, virtualizerProps }, refs: { tableContainerRef, tablePaperRef } } = table;
    const { columnFilters, density, expanded, globalFilter, globalFilterFn, pagination, sorting } = getState();
    const tableBodyProps = muiTableBodyProps instanceof Function ? muiTableBodyProps({ table }) : muiTableBodyProps;
    const vProps_old = virtualizerProps instanceof Function ? virtualizerProps({ table }) : virtualizerProps;
    const vProps = rowVirtualizerProps instanceof Function ? rowVirtualizerProps({ table }) : rowVirtualizerProps;
    const shouldRankResults = React.useMemo(() => !manualExpanding && !manualFiltering && !manualGrouping && !manualSorting && enableGlobalFilterRankedResults && globalFilter && globalFilterFn === "fuzzy" && expanded !== true && !Object.values(sorting).some(Boolean) && !Object.values(expanded).some(Boolean), [
      enableGlobalFilterRankedResults,
      expanded,
      globalFilter,
      manualExpanding,
      manualFiltering,
      manualGrouping,
      manualSorting,
      sorting
    ]);
    const rows = React.useMemo(() => {
      if (!shouldRankResults)
        return getRowModel().rows;
      const rankedRows = getPrePaginationRowModel().rows.sort((a, b) => rankGlobalFuzzy(a, b));
      if (enablePagination && !manualPagination) {
        const start2 = pagination.pageIndex * pagination.pageSize;
        return rankedRows.slice(start2, start2 + pagination.pageSize);
      }
      return rankedRows;
    }, [
      shouldRankResults,
      shouldRankResults ? getPrePaginationRowModel().rows : getRowModel().rows,
      pagination.pageIndex,
      pagination.pageSize
    ]);
    const rowVirtualizer = enableRowVirtualization ? useVirtualizer(Object.assign(Object.assign({ count: rows.length, estimateSize: () => density === "compact" ? 37 : density === "comfortable" ? 58 : 73, getScrollElement: () => tableContainerRef.current, measureElement: typeof window !== "undefined" && navigator.userAgent.indexOf("Firefox") === -1 ? (element) => element === null || element === void 0 ? void 0 : element.getBoundingClientRect().height : void 0, overscan: 4 }, vProps_old), vProps)) : void 0;
    if (rowVirtualizerInstanceRef && rowVirtualizer) {
      rowVirtualizerInstanceRef.current = rowVirtualizer;
    }
    if (virtualizerInstanceRef && rowVirtualizer) {
      virtualizerInstanceRef.current = rowVirtualizer;
    }
    const virtualRows = rowVirtualizer ? rowVirtualizer.getVirtualItems() : void 0;
    return jsxRuntimeExports.jsx(TableBody, Object.assign({}, tableBodyProps, { sx: (theme) => Object.assign({ display: layoutMode === "grid" ? "grid" : "table-row-group", height: rowVirtualizer ? `${rowVirtualizer.getTotalSize()}px` : "inherit", minHeight: !rows.length ? "100px" : void 0, position: "relative" }, (tableBodyProps === null || tableBodyProps === void 0 ? void 0 : tableBodyProps.sx) instanceof Function ? tableBodyProps === null || tableBodyProps === void 0 ? void 0 : tableBodyProps.sx(theme) : tableBodyProps === null || tableBodyProps === void 0 ? void 0 : tableBodyProps.sx), children: (_a = tableBodyProps === null || tableBodyProps === void 0 ? void 0 : tableBodyProps.children) !== null && _a !== void 0 ? _a : !rows.length ? jsxRuntimeExports.jsx("tr", { style: { display: layoutMode === "grid" ? "grid" : "table-row" }, children: jsxRuntimeExports.jsx("td", { colSpan: table.getVisibleLeafColumns().length, style: {
      display: layoutMode === "grid" ? "grid" : "table-cell"
    }, children: (_b = renderEmptyRowsFallback === null || renderEmptyRowsFallback === void 0 ? void 0 : renderEmptyRowsFallback({ table })) !== null && _b !== void 0 ? _b : jsxRuntimeExports.jsx(Typography, { sx: {
      color: "text.secondary",
      fontStyle: "italic",
      maxWidth: `min(100vw, ${(_d = (_c = tablePaperRef.current) === null || _c === void 0 ? void 0 : _c.clientWidth) !== null && _d !== void 0 ? _d : 360}px)`,
      py: "2rem",
      textAlign: "center",
      width: "100%"
    }, children: globalFilter || columnFilters.length ? localization.noResultsFound : localization.noRecordsToDisplay }) }) }) : jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: (virtualRows !== null && virtualRows !== void 0 ? virtualRows : rows).map((rowOrVirtualRow, rowIndex) => {
      const row = rowVirtualizer ? rows[rowOrVirtualRow.index] : rowOrVirtualRow;
      const props = {
        columnVirtualizer,
        measureElement: rowVirtualizer === null || rowVirtualizer === void 0 ? void 0 : rowVirtualizer.measureElement,
        numRows: rows.length,
        row,
        rowIndex: rowVirtualizer ? rowOrVirtualRow.index : rowIndex,
        table,
        virtualColumns,
        virtualPaddingLeft,
        virtualPaddingRight,
        virtualRow: rowVirtualizer ? rowOrVirtualRow : void 0
      };
      return memoMode === "rows" ? jsxRuntimeExports.jsx(Memo_MRT_TableBodyRow, Object.assign({}, props), row.id) : jsxRuntimeExports.jsx(MRT_TableBodyRow, Object.assign({}, props), row.id);
    }) }) }));
  };
  const Memo_MRT_TableBody = React.memo(MRT_TableBody, (prev2, next2) => prev2.table.options.data === next2.table.options.data);
  const MRT_TableFooterCell = ({ footer, table }) => {
    var _a, _b, _c;
    const { getState, options: { layoutMode, muiTableFooterCellProps } } = table;
    const { density } = getState();
    const { column: column2 } = footer;
    const { columnDef } = column2;
    const { columnDefType } = columnDef;
    const mTableFooterCellProps = muiTableFooterCellProps instanceof Function ? muiTableFooterCellProps({ column: column2, table }) : muiTableFooterCellProps;
    const mcTableFooterCellProps = columnDef.muiTableFooterCellProps instanceof Function ? columnDef.muiTableFooterCellProps({ column: column2, table }) : columnDef.muiTableFooterCellProps;
    const tableCellProps = Object.assign(Object.assign({}, mTableFooterCellProps), mcTableFooterCellProps);
    return jsxRuntimeExports.jsx(TableCell, Object.assign({ align: columnDefType === "group" ? "center" : "left", colSpan: footer.colSpan, variant: "head" }, tableCellProps, { sx: (theme) => Object.assign({ display: layoutMode === "grid" ? "grid" : "table-cell", fontWeight: "bold", justifyContent: columnDefType === "group" ? "center" : void 0, p: density === "compact" ? "0.5rem" : density === "comfortable" ? "1rem" : "1.5rem", verticalAlign: "top", zIndex: column2.getIsPinned() && columnDefType !== "group" ? 2 : 1 }, getCommonCellStyles({
      column: column2,
      table,
      theme,
      tableCellProps
    })), children: jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: footer.isPlaceholder ? null : (_c = (_b = columnDef.Footer instanceof Function ? (_a = columnDef.Footer) === null || _a === void 0 ? void 0 : _a.call(columnDef, {
      column: column2,
      footer,
      table
    }) : columnDef.Footer) !== null && _b !== void 0 ? _b : columnDef.footer) !== null && _c !== void 0 ? _c : null }) }));
  };
  const MRT_TableFooterRow = ({ footerGroup, table, virtualColumns, virtualPaddingLeft, virtualPaddingRight }) => {
    var _a;
    const { options: { layoutMode, muiTableFooterRowProps } } = table;
    if (!((_a = footerGroup.headers) === null || _a === void 0 ? void 0 : _a.some((header) => typeof header.column.columnDef.footer === "string" && !!header.column.columnDef.footer || header.column.columnDef.Footer)))
      return null;
    const tableRowProps = muiTableFooterRowProps instanceof Function ? muiTableFooterRowProps({ footerGroup, table }) : muiTableFooterRowProps;
    return jsxRuntimeExports.jsxs(TableRow, Object.assign({}, tableRowProps, { sx: (theme) => Object.assign({ backgroundColor: lighten(theme.palette.background.default, 0.04), display: layoutMode === "grid" ? "flex" : "table-row", width: "100%" }, (tableRowProps === null || tableRowProps === void 0 ? void 0 : tableRowProps.sx) instanceof Function ? tableRowProps === null || tableRowProps === void 0 ? void 0 : tableRowProps.sx(theme) : tableRowProps === null || tableRowProps === void 0 ? void 0 : tableRowProps.sx), children: [virtualPaddingLeft ? jsxRuntimeExports.jsx("th", { style: { display: "flex", width: virtualPaddingLeft } }) : null, (virtualColumns !== null && virtualColumns !== void 0 ? virtualColumns : footerGroup.headers).map((footerOrVirtualFooter) => {
      const footer = virtualColumns ? footerGroup.headers[footerOrVirtualFooter.index] : footerOrVirtualFooter;
      return footer ? jsxRuntimeExports.jsx(MRT_TableFooterCell, { footer, table }, footer.id) : null;
    }), virtualPaddingRight ? jsxRuntimeExports.jsx("th", { style: { display: "flex", width: virtualPaddingRight } }) : null] }));
  };
  const MRT_TableFooter = ({ table, virtualColumns, virtualPaddingLeft, virtualPaddingRight }) => {
    const { getFooterGroups, getState, options: { enableStickyFooter, layoutMode, muiTableFooterProps } } = table;
    const { isFullScreen } = getState();
    const tableFooterProps = muiTableFooterProps instanceof Function ? muiTableFooterProps({ table }) : muiTableFooterProps;
    const stickFooter = (isFullScreen || enableStickyFooter) && enableStickyFooter !== false;
    return jsxRuntimeExports.jsx(TableFooter, Object.assign({}, tableFooterProps, { sx: (theme) => Object.assign({ bottom: stickFooter ? 0 : void 0, display: layoutMode === "grid" ? "grid" : "table-row-group", opacity: stickFooter ? 0.97 : void 0, outline: stickFooter ? theme.palette.mode === "light" ? `1px solid ${theme.palette.grey[300]}` : `1px solid ${theme.palette.grey[700]}` : void 0, position: stickFooter ? "sticky" : void 0, zIndex: stickFooter ? 1 : void 0 }, (tableFooterProps === null || tableFooterProps === void 0 ? void 0 : tableFooterProps.sx) instanceof Function ? tableFooterProps === null || tableFooterProps === void 0 ? void 0 : tableFooterProps.sx(theme) : tableFooterProps === null || tableFooterProps === void 0 ? void 0 : tableFooterProps.sx), children: getFooterGroups().map((footerGroup) => jsxRuntimeExports.jsx(MRT_TableFooterRow, { footerGroup, table, virtualColumns, virtualPaddingLeft, virtualPaddingRight }, footerGroup.id)) }));
  };
  const MRT_Table = ({ table }) => {
    var _a, _b, _c, _d;
    const { getFlatHeaders, getState, options: { columns, columnVirtualizerInstanceRef, columnVirtualizerProps, enableColumnResizing, enableColumnVirtualization, enablePinning, enableStickyHeader, enableTableFooter, enableTableHead, layoutMode, memoMode, muiTableProps }, refs: { tableContainerRef } } = table;
    const { columnPinning, columnSizing, columnSizingInfo, columnVisibility, isFullScreen } = getState();
    const tableProps = muiTableProps instanceof Function ? muiTableProps({ table }) : muiTableProps;
    const vProps = columnVirtualizerProps instanceof Function ? columnVirtualizerProps({ table }) : columnVirtualizerProps;
    const columnSizeVars = React.useMemo(() => {
      const headers = getFlatHeaders();
      const colSizes = {};
      for (let i = 0; i < headers.length; i++) {
        const header = headers[i];
        const colSize = header.getSize();
        colSizes[`--header-${parseCSSVarId(header.id)}-size`] = colSize;
        colSizes[`--col-${parseCSSVarId(header.column.id)}-size`] = colSize;
      }
      return colSizes;
    }, [columns, columnSizing, columnSizingInfo, columnVisibility]);
    const averageColumnWidth = React.useMemo(() => {
      var _a2, _b2, _c2, _d2;
      if (!enableColumnVirtualization)
        return 0;
      const columnsWidths = (_d2 = (_c2 = (_b2 = (_a2 = table.getRowModel().rows[0]) === null || _a2 === void 0 ? void 0 : _a2.getCenterVisibleCells()) === null || _b2 === void 0 ? void 0 : _b2.slice(0, 16)) === null || _c2 === void 0 ? void 0 : _c2.map((cell) => cell.column.getSize() * 1.2)) !== null && _d2 !== void 0 ? _d2 : [];
      return columnsWidths.reduce((a, b) => a + b, 0) / columnsWidths.length;
    }, [table.getRowModel().rows, columnPinning, columnVisibility]);
    const [leftPinnedIndexes, rightPinnedIndexes] = React.useMemo(() => enableColumnVirtualization && enablePinning ? [
      table.getLeftLeafColumns().map((c) => c.getPinnedIndex()),
      table.getRightLeafColumns().map((c) => table.getVisibleLeafColumns().length - c.getPinnedIndex() - 1)
    ] : [[], []], [columnPinning, enableColumnVirtualization, enablePinning]);
    const columnVirtualizer = enableColumnVirtualization ? useVirtualizer(Object.assign({ count: table.getVisibleLeafColumns().length, estimateSize: () => averageColumnWidth, getScrollElement: () => tableContainerRef.current, horizontal: true, overscan: 3, rangeExtractor: React.useCallback((range) => [
      .../* @__PURE__ */ new Set([
        ...leftPinnedIndexes,
        ...defaultRangeExtractor(range),
        ...rightPinnedIndexes
      ])
    ], [leftPinnedIndexes, rightPinnedIndexes]) }, vProps)) : void 0;
    if (columnVirtualizerInstanceRef && columnVirtualizer) {
      columnVirtualizerInstanceRef.current = columnVirtualizer;
    }
    const virtualColumns = columnVirtualizer ? columnVirtualizer.getVirtualItems() : void 0;
    let virtualPaddingLeft;
    let virtualPaddingRight;
    if (columnVirtualizer && (virtualColumns === null || virtualColumns === void 0 ? void 0 : virtualColumns.length)) {
      virtualPaddingLeft = (_b = (_a = virtualColumns[leftPinnedIndexes.length]) === null || _a === void 0 ? void 0 : _a.start) !== null && _b !== void 0 ? _b : 0;
      virtualPaddingRight = columnVirtualizer.getTotalSize() - ((_d = (_c = virtualColumns[virtualColumns.length - 1 - rightPinnedIndexes.length]) === null || _c === void 0 ? void 0 : _c.end) !== null && _d !== void 0 ? _d : 0);
    }
    const props = {
      table,
      virtualColumns,
      virtualPaddingLeft,
      virtualPaddingRight
    };
    return jsxRuntimeExports.jsxs(Table, Object.assign({ stickyHeader: enableStickyHeader || isFullScreen }, tableProps, { sx: (theme) => Object.assign({ borderCollapse: "separate", display: layoutMode === "grid" ? "grid" : "table", tableLayout: layoutMode !== "grid" && enableColumnResizing ? "fixed" : void 0 }, (tableProps === null || tableProps === void 0 ? void 0 : tableProps.sx) instanceof Function ? tableProps.sx(theme) : tableProps === null || tableProps === void 0 ? void 0 : tableProps.sx), style: Object.assign(Object.assign({}, columnSizeVars), tableProps === null || tableProps === void 0 ? void 0 : tableProps.style), children: [enableTableHead && jsxRuntimeExports.jsx(MRT_TableHead, Object.assign({}, props)), memoMode === "table-body" || columnSizingInfo.isResizingColumn ? jsxRuntimeExports.jsx(Memo_MRT_TableBody, Object.assign({ columnVirtualizer }, props)) : jsxRuntimeExports.jsx(MRT_TableBody, Object.assign({ columnVirtualizer }, props)), enableTableFooter && jsxRuntimeExports.jsx(MRT_TableFooter, Object.assign({}, props))] }));
  };
  const useIsomorphicLayoutEffect = typeof window !== "undefined" ? React.useLayoutEffect : React.useEffect;
  const MRT_TableContainer = ({ table }) => {
    const { getState, options: { enableStickyHeader, muiTableContainerProps }, refs: { tableContainerRef, bottomToolbarRef, topToolbarRef } } = table;
    const { isFullScreen } = getState();
    const [totalToolbarHeight, setTotalToolbarHeight] = React.useState(0);
    const tableContainerProps = muiTableContainerProps instanceof Function ? muiTableContainerProps({ table }) : muiTableContainerProps;
    useIsomorphicLayoutEffect(() => {
      var _a, _b, _c, _d;
      const topToolbarHeight = typeof document !== "undefined" ? (_b = (_a = topToolbarRef.current) === null || _a === void 0 ? void 0 : _a.offsetHeight) !== null && _b !== void 0 ? _b : 0 : 0;
      const bottomToolbarHeight = typeof document !== "undefined" ? (_d = (_c = bottomToolbarRef === null || bottomToolbarRef === void 0 ? void 0 : bottomToolbarRef.current) === null || _c === void 0 ? void 0 : _c.offsetHeight) !== null && _d !== void 0 ? _d : 0 : 0;
      setTotalToolbarHeight(topToolbarHeight + bottomToolbarHeight);
    });
    return jsxRuntimeExports.jsx(TableContainer, Object.assign({}, tableContainerProps, { ref: (node2) => {
      if (node2) {
        tableContainerRef.current = node2;
        if (tableContainerProps === null || tableContainerProps === void 0 ? void 0 : tableContainerProps.ref) {
          tableContainerProps.ref.current = node2;
        }
      }
    }, sx: (theme) => Object.assign({ maxWidth: "100%", maxHeight: enableStickyHeader ? `clamp(350px, calc(100vh - ${totalToolbarHeight}px), 9999px)` : void 0, overflow: "auto" }, (tableContainerProps === null || tableContainerProps === void 0 ? void 0 : tableContainerProps.sx) instanceof Function ? tableContainerProps.sx(theme) : tableContainerProps === null || tableContainerProps === void 0 ? void 0 : tableContainerProps.sx), style: Object.assign({ maxHeight: isFullScreen ? `calc(100vh - ${totalToolbarHeight}px)` : void 0 }, tableContainerProps === null || tableContainerProps === void 0 ? void 0 : tableContainerProps.style), children: jsxRuntimeExports.jsx(MRT_Table, { table }) }));
  };
  const MRT_TablePaper = ({ table }) => {
    const { getState, options: { enableBottomToolbar, enableTopToolbar, muiTablePaperProps, renderBottomToolbar, renderTopToolbar }, refs: { tablePaperRef } } = table;
    const { isFullScreen } = getState();
    const tablePaperProps = muiTablePaperProps instanceof Function ? muiTablePaperProps({ table }) : muiTablePaperProps;
    return jsxRuntimeExports.jsxs(Paper, Object.assign({ elevation: 2 }, tablePaperProps, { ref: (ref) => {
      tablePaperRef.current = ref;
      if (tablePaperProps === null || tablePaperProps === void 0 ? void 0 : tablePaperProps.ref) {
        tablePaperProps.ref.current = ref;
      }
    }, sx: (theme) => Object.assign({ transition: "all 150ms ease-in-out" }, (tablePaperProps === null || tablePaperProps === void 0 ? void 0 : tablePaperProps.sx) instanceof Function ? tablePaperProps === null || tablePaperProps === void 0 ? void 0 : tablePaperProps.sx(theme) : tablePaperProps === null || tablePaperProps === void 0 ? void 0 : tablePaperProps.sx), style: Object.assign(Object.assign({}, tablePaperProps === null || tablePaperProps === void 0 ? void 0 : tablePaperProps.style), isFullScreen ? {
      height: "100vh",
      margin: 0,
      maxHeight: "100vh",
      maxWidth: "100vw",
      padding: 0,
      width: "100vw"
    } : {}), children: [enableTopToolbar && (renderTopToolbar instanceof Function ? renderTopToolbar({ table }) : renderTopToolbar !== null && renderTopToolbar !== void 0 ? renderTopToolbar : jsxRuntimeExports.jsx(MRT_TopToolbar, { table })), jsxRuntimeExports.jsx(MRT_TableContainer, { table }), enableBottomToolbar && (renderBottomToolbar instanceof Function ? renderBottomToolbar({ table }) : renderBottomToolbar !== null && renderBottomToolbar !== void 0 ? renderBottomToolbar : jsxRuntimeExports.jsx(MRT_BottomToolbar, { table }))] }));
  };
  const MRT_EditRowModal = ({ open, row, table }) => {
    const { options: { localization } } = table;
    return jsxRuntimeExports.jsxs(Dialog, { open, children: [jsxRuntimeExports.jsx(DialogTitle, { textAlign: "center", children: localization.edit }), jsxRuntimeExports.jsx(DialogContent, { children: jsxRuntimeExports.jsx("form", { onSubmit: (e) => e.preventDefault(), children: jsxRuntimeExports.jsx(Stack, { sx: {
      gap: "1.5rem",
      minWidth: { xs: "300px", sm: "360px", md: "400px" },
      pt: "1rem",
      width: "100%"
    }, children: row.getAllCells().filter((cell) => cell.column.columnDef.columnDefType === "data").map((cell) => jsxRuntimeExports.jsx(MRT_EditCellTextField, { cell, showLabel: true, table }, cell.id)) }) }) }), jsxRuntimeExports.jsx(DialogActions, { sx: { p: "1.25rem" }, children: jsxRuntimeExports.jsx(MRT_EditActionButtons, { row, table, variant: "text" }) })] });
  };
  const MRT_TableRoot = (props) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t7, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13;
    const bottomToolbarRef = React.useRef(null);
    const editInputRefs = React.useRef({});
    const filterInputRefs = React.useRef({});
    const searchInputRef = React.useRef(null);
    const tableContainerRef = React.useRef(null);
    const tableHeadCellRefs = React.useRef({});
    const tablePaperRef = React.useRef(null);
    const topToolbarRef = React.useRef(null);
    const initialState = React.useMemo(() => {
      var _a2, _b2, _c2;
      const initState = (_a2 = props.initialState) !== null && _a2 !== void 0 ? _a2 : {};
      initState.columnOrder = (_b2 = initState.columnOrder) !== null && _b2 !== void 0 ? _b2 : getDefaultColumnOrderIds(props);
      initState.globalFilterFn = (_c2 = props.globalFilterFn) !== null && _c2 !== void 0 ? _c2 : "fuzzy";
      return initState;
    }, []);
    const [columnFilterFns, setColumnFilterFns] = React.useState(() => Object.assign({}, ...getAllLeafColumnDefs(props.columns).map((col) => {
      var _a2, _b2, _c2, _d2;
      return {
        [getColumnId(col)]: col.filterFn instanceof Function ? (_a2 = col.filterFn.name) !== null && _a2 !== void 0 ? _a2 : "custom" : (_d2 = (_b2 = col.filterFn) !== null && _b2 !== void 0 ? _b2 : (_c2 = initialState === null || initialState === void 0 ? void 0 : initialState.columnFilterFns) === null || _c2 === void 0 ? void 0 : _c2[getColumnId(col)]) !== null && _d2 !== void 0 ? _d2 : getDefaultColumnFilterFn(col)
      };
    })));
    const [columnOrder, setColumnOrder] = React.useState((_a = initialState.columnOrder) !== null && _a !== void 0 ? _a : []);
    const [density, setDensity] = React.useState((_b = initialState === null || initialState === void 0 ? void 0 : initialState.density) !== null && _b !== void 0 ? _b : "comfortable");
    const [draggingColumn, setDraggingColumn] = React.useState((_c = initialState.draggingColumn) !== null && _c !== void 0 ? _c : null);
    const [draggingRow, setDraggingRow] = React.useState((_d = initialState.draggingRow) !== null && _d !== void 0 ? _d : null);
    const [editingCell, setEditingCell] = React.useState((_e = initialState.editingCell) !== null && _e !== void 0 ? _e : null);
    const [editingRow, setEditingRow] = React.useState((_f = initialState.editingRow) !== null && _f !== void 0 ? _f : null);
    const [globalFilterFn, setGlobalFilterFn] = React.useState((_g = initialState.globalFilterFn) !== null && _g !== void 0 ? _g : "fuzzy");
    const [grouping, setGrouping] = React.useState((_h = initialState.grouping) !== null && _h !== void 0 ? _h : []);
    const [hoveredColumn, setHoveredColumn] = React.useState((_j = initialState.hoveredColumn) !== null && _j !== void 0 ? _j : null);
    const [hoveredRow, setHoveredRow] = React.useState((_k = initialState.hoveredRow) !== null && _k !== void 0 ? _k : null);
    const [isFullScreen, setIsFullScreen] = React.useState((_l = initialState === null || initialState === void 0 ? void 0 : initialState.isFullScreen) !== null && _l !== void 0 ? _l : false);
    const [showAlertBanner, setShowAlertBanner] = React.useState((_o = (_m = props.initialState) === null || _m === void 0 ? void 0 : _m.showAlertBanner) !== null && _o !== void 0 ? _o : false);
    const [showColumnFilters, setShowColumnFilters] = React.useState((_p = initialState === null || initialState === void 0 ? void 0 : initialState.showColumnFilters) !== null && _p !== void 0 ? _p : false);
    const [showGlobalFilter, setShowGlobalFilter] = React.useState((_q = initialState === null || initialState === void 0 ? void 0 : initialState.showGlobalFilter) !== null && _q !== void 0 ? _q : false);
    const [showToolbarDropZone, setShowToolbarDropZone] = React.useState((_r = initialState === null || initialState === void 0 ? void 0 : initialState.showToolbarDropZone) !== null && _r !== void 0 ? _r : false);
    const displayColumns = React.useMemo(() => {
      var _a2, _b2, _c2, _d2, _e2, _f2, _g2, _h2, _j2, _k2, _l2, _m2, _o2, _p2, _q2, _r2, _s2;
      return [
        ((_b2 = (_a2 = props.state) === null || _a2 === void 0 ? void 0 : _a2.columnOrder) !== null && _b2 !== void 0 ? _b2 : columnOrder).includes("mrt-row-drag") && Object.assign(Object.assign(Object.assign({ header: props.localization.move, size: 60 }, props.defaultDisplayColumn), (_c2 = props.displayColumnDefOptions) === null || _c2 === void 0 ? void 0 : _c2["mrt-row-drag"]), { id: "mrt-row-drag" }),
        ((_e2 = (_d2 = props.state) === null || _d2 === void 0 ? void 0 : _d2.columnOrder) !== null && _e2 !== void 0 ? _e2 : columnOrder).includes("mrt-row-actions") && Object.assign(Object.assign(Object.assign({ Cell: ({ cell, row }) => jsxRuntimeExports.jsx(MRT_ToggleRowActionMenuButton, { cell, row, table }), header: props.localization.actions, size: 70 }, props.defaultDisplayColumn), (_f2 = props.displayColumnDefOptions) === null || _f2 === void 0 ? void 0 : _f2["mrt-row-actions"]), { id: "mrt-row-actions" }),
        ((_h2 = (_g2 = props.state) === null || _g2 === void 0 ? void 0 : _g2.columnOrder) !== null && _h2 !== void 0 ? _h2 : columnOrder).includes("mrt-row-expand") && showExpandColumn(props, (_k2 = (_j2 = props.state) === null || _j2 === void 0 ? void 0 : _j2.grouping) !== null && _k2 !== void 0 ? _k2 : grouping) && Object.assign(Object.assign(Object.assign({ Cell: ({ row }) => jsxRuntimeExports.jsx(MRT_ExpandButton, { row, table }), Header: props.enableExpandAll ? () => jsxRuntimeExports.jsx(MRT_ExpandAllButton, { table }) : null, header: props.localization.expand, size: 60 }, props.defaultDisplayColumn), (_l2 = props.displayColumnDefOptions) === null || _l2 === void 0 ? void 0 : _l2["mrt-row-expand"]), { id: "mrt-row-expand" }),
        ((_o2 = (_m2 = props.state) === null || _m2 === void 0 ? void 0 : _m2.columnOrder) !== null && _o2 !== void 0 ? _o2 : columnOrder).includes("mrt-row-select") && Object.assign(Object.assign(Object.assign({ Cell: ({ row }) => jsxRuntimeExports.jsx(MRT_SelectCheckbox, { row, table }), Header: props.enableSelectAll && props.enableMultiRowSelection ? () => jsxRuntimeExports.jsx(MRT_SelectCheckbox, { selectAll: true, table }) : null, header: props.localization.select, size: 60 }, props.defaultDisplayColumn), (_p2 = props.displayColumnDefOptions) === null || _p2 === void 0 ? void 0 : _p2["mrt-row-select"]), { id: "mrt-row-select" }),
        ((_r2 = (_q2 = props.state) === null || _q2 === void 0 ? void 0 : _q2.columnOrder) !== null && _r2 !== void 0 ? _r2 : columnOrder).includes("mrt-row-numbers") && Object.assign(Object.assign(Object.assign({ Cell: ({ row }) => row.index + 1, Header: () => props.localization.rowNumber, header: props.localization.rowNumbers, size: 60 }, props.defaultDisplayColumn), (_s2 = props.displayColumnDefOptions) === null || _s2 === void 0 ? void 0 : _s2["mrt-row-numbers"]), { id: "mrt-row-numbers" })
      ].filter(Boolean);
    }, [
      columnOrder,
      grouping,
      props.displayColumnDefOptions,
      props.editingMode,
      props.enableColumnDragging,
      props.enableColumnFilterModes,
      props.enableColumnOrdering,
      props.enableEditing,
      props.enableExpandAll,
      props.enableExpanding,
      props.enableGrouping,
      props.enableRowActions,
      props.enableRowDragging,
      props.enableRowNumbers,
      props.enableRowOrdering,
      props.enableRowSelection,
      props.enableSelectAll,
      props.localization,
      props.positionActionsColumn,
      props.renderDetailPanel,
      props.renderRowActionMenuItems,
      props.renderRowActions,
      (_s = props.state) === null || _s === void 0 ? void 0 : _s.columnOrder,
      (_t7 = props.state) === null || _t7 === void 0 ? void 0 : _t7.grouping
    ]);
    const columnDefs = React.useMemo(() => {
      var _a2, _b2, _c2;
      return prepareColumns({
        aggregationFns: props.aggregationFns,
        columnDefs: [...displayColumns, ...props.columns],
        columnFilterFns: (_b2 = (_a2 = props.state) === null || _a2 === void 0 ? void 0 : _a2.columnFilterFns) !== null && _b2 !== void 0 ? _b2 : columnFilterFns,
        defaultDisplayColumn: (_c2 = props.defaultDisplayColumn) !== null && _c2 !== void 0 ? _c2 : {},
        filterFns: props.filterFns,
        sortingFns: props.sortingFns
      });
    }, [
      columnFilterFns,
      displayColumns,
      props.columns,
      (_u = props.state) === null || _u === void 0 ? void 0 : _u.columnFilterFns
    ]);
    const data = React.useMemo(() => {
      var _a2, _b2, _c2, _d2, _e2;
      return (((_a2 = props.state) === null || _a2 === void 0 ? void 0 : _a2.isLoading) || ((_b2 = props.state) === null || _b2 === void 0 ? void 0 : _b2.showSkeletons)) && !props.data.length ? [
        ...Array(((_d2 = (_c2 = props.state) === null || _c2 === void 0 ? void 0 : _c2.pagination) === null || _d2 === void 0 ? void 0 : _d2.pageSize) || ((_e2 = initialState === null || initialState === void 0 ? void 0 : initialState.pagination) === null || _e2 === void 0 ? void 0 : _e2.pageSize) || 10).fill(null)
      ].map(() => Object.assign({}, ...getAllLeafColumnDefs(props.columns).map((col) => ({
        [getColumnId(col)]: null
      })))) : props.data;
    }, [props.data, (_v = props.state) === null || _v === void 0 ? void 0 : _v.isLoading, (_w = props.state) === null || _w === void 0 ? void 0 : _w.showSkeletons]);
    const table = Object.assign(Object.assign({}, useReactTable(Object.assign(Object.assign({ getCoreRowModel: getCoreRowModel(), getExpandedRowModel: props.enableExpanding || props.enableGrouping ? getExpandedRowModel() : void 0, getFacetedMinMaxValues: props.enableFacetedValues ? getFacetedMinMaxValues() : void 0, getFacetedRowModel: props.enableFacetedValues ? getFacetedRowModel() : void 0, getFacetedUniqueValues: props.enableFacetedValues ? getFacetedUniqueValues() : void 0, getFilteredRowModel: props.enableColumnFilters || props.enableGlobalFilter || props.enableFilters ? getFilteredRowModel() : void 0, getGroupedRowModel: props.enableGrouping ? getGroupedRowModel() : void 0, getPaginationRowModel: props.enablePagination ? getPaginationRowModel() : void 0, getSortedRowModel: props.enableSorting ? getSortedRowModel() : void 0, onColumnOrderChange: setColumnOrder, onGroupingChange: setGrouping, getSubRows: (row) => row === null || row === void 0 ? void 0 : row.subRows }, props), {
      //@ts-ignore
      columns: columnDefs,
      data,
      globalFilterFn: (_y = (_x = props.filterFns) === null || _x === void 0 ? void 0 : _x[globalFilterFn]) !== null && _y !== void 0 ? _y : (_z = props.filterFns) === null || _z === void 0 ? void 0 : _z.fuzzy,
      initialState,
      state: Object.assign({
        columnFilterFns,
        columnOrder,
        density,
        draggingColumn,
        draggingRow,
        editingCell,
        editingRow,
        globalFilterFn,
        grouping,
        hoveredColumn,
        hoveredRow,
        isFullScreen,
        showAlertBanner,
        showColumnFilters,
        showGlobalFilter,
        showToolbarDropZone
      }, props.state)
    }))), { refs: {
      bottomToolbarRef,
      editInputRefs,
      filterInputRefs,
      searchInputRef,
      tableContainerRef,
      tableHeadCellRefs,
      tablePaperRef,
      topToolbarRef
    }, setColumnFilterFns: (_0 = props.onColumnFilterFnsChange) !== null && _0 !== void 0 ? _0 : setColumnFilterFns, setDensity: (_1 = props.onDensityChange) !== null && _1 !== void 0 ? _1 : setDensity, setDraggingColumn: (_2 = props.onDraggingColumnChange) !== null && _2 !== void 0 ? _2 : setDraggingColumn, setDraggingRow: (_3 = props.onDraggingRowChange) !== null && _3 !== void 0 ? _3 : setDraggingRow, setEditingCell: (_4 = props.onEditingCellChange) !== null && _4 !== void 0 ? _4 : setEditingCell, setEditingRow: (_5 = props.onEditingRowChange) !== null && _5 !== void 0 ? _5 : setEditingRow, setGlobalFilterFn: (_6 = props.onGlobalFilterFnChange) !== null && _6 !== void 0 ? _6 : setGlobalFilterFn, setHoveredColumn: (_7 = props.onHoveredColumnChange) !== null && _7 !== void 0 ? _7 : setHoveredColumn, setHoveredRow: (_8 = props.onHoveredRowChange) !== null && _8 !== void 0 ? _8 : setHoveredRow, setIsFullScreen: (_9 = props.onIsFullScreenChange) !== null && _9 !== void 0 ? _9 : setIsFullScreen, setShowAlertBanner: (_10 = props.onShowAlertBannerChange) !== null && _10 !== void 0 ? _10 : setShowAlertBanner, setShowColumnFilters: (_11 = props.onShowColumnFiltersChange) !== null && _11 !== void 0 ? _11 : setShowColumnFilters, setShowGlobalFilter: (_12 = props.onShowGlobalFilterChange) !== null && _12 !== void 0 ? _12 : setShowGlobalFilter, setShowToolbarDropZone: (_13 = props.onShowToolbarDropZoneChange) !== null && _13 !== void 0 ? _13 : setShowToolbarDropZone });
    if (props.tableFeatures) {
      props.tableFeatures.forEach((feature) => {
        Object.assign(table, feature(table));
      });
    }
    if (props.tableInstanceRef) {
      props.tableInstanceRef.current = table;
    }
    const initialBodyHeight = React.useRef();
    React.useEffect(() => {
      if (typeof window !== "undefined") {
        initialBodyHeight.current = document.body.style.height;
      }
    }, []);
    React.useEffect(() => {
      if (typeof window !== "undefined") {
        if (table.getState().isFullScreen) {
          document.body.style.height = "100vh";
        } else {
          document.body.style.height = initialBodyHeight.current;
        }
      }
    }, [table.getState().isFullScreen]);
    React.useEffect(() => {
      var _a2;
      const { pageIndex, pageSize: pageSize2 } = table.getState().pagination;
      const totalRowCount = (_a2 = props.rowCount) !== null && _a2 !== void 0 ? _a2 : table.getPrePaginationRowModel().rows.length;
      const firstVisibleRowIndex = pageIndex * pageSize2;
      if (firstVisibleRowIndex > totalRowCount) {
        table.setPageIndex(Math.floor(totalRowCount / pageSize2));
      }
    }, [props.rowCount, table.getPrePaginationRowModel().rows.length]);
    return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsx(Dialog, { PaperComponent: Box, TransitionComponent: !props.enableRowVirtualization ? Grow : void 0, disablePortal: true, fullScreen: true, keepMounted: false, onClose: () => table.setIsFullScreen(false), open: table.getState().isFullScreen, transitionDuration: 400, children: jsxRuntimeExports.jsx(MRT_TablePaper, { table }) }), !table.getState().isFullScreen && jsxRuntimeExports.jsx(MRT_TablePaper, { table }), editingRow && props.editingMode === "modal" && jsxRuntimeExports.jsx(MRT_EditRowModal, { row: editingRow, table, open: true })] });
  };
  const MaterialReactTable = (_a) => {
    var _b;
    var { aggregationFns: aggregationFns2, autoResetExpanded = false, columnResizeMode = "onChange", defaultColumn, defaultDisplayColumn, editingMode = "modal", enableBottomToolbar = true, enableColumnActions = true, enableColumnFilters = true, enableColumnOrdering = false, enableColumnResizing = false, enableDensityToggle = true, enableExpandAll = true, enableExpanding, enableFilterMatchHighlighting = true, enableFilters = true, enableFullScreenToggle = true, enableGlobalFilter = true, enableGlobalFilterRankedResults = true, enableGrouping = false, enableHiding = true, enableMultiRowSelection = true, enableMultiSort = true, enablePagination = true, enablePinning = false, enableRowSelection = false, enableSelectAll = true, enableSorting = true, enableStickyHeader = false, enableTableFooter = true, enableTableHead = true, enableToolbarInternalActions = true, enableTopToolbar = true, filterFns: filterFns2, icons, layoutMode = "semantic", localization, manualFiltering, manualGrouping, manualPagination, manualSorting, positionActionsColumn = "first", positionExpandColumn = "first", positionGlobalFilter = "right", positionPagination = "bottom", positionToolbarAlertBanner = "top", positionToolbarDropZone = "top", rowNumberMode = "original", selectAllMode = "page", sortingFns: sortingFns2 } = _a, rest = __rest(_a, ["aggregationFns", "autoResetExpanded", "columnResizeMode", "defaultColumn", "defaultDisplayColumn", "editingMode", "enableBottomToolbar", "enableColumnActions", "enableColumnFilters", "enableColumnOrdering", "enableColumnResizing", "enableDensityToggle", "enableExpandAll", "enableExpanding", "enableFilterMatchHighlighting", "enableFilters", "enableFullScreenToggle", "enableGlobalFilter", "enableGlobalFilterRankedResults", "enableGrouping", "enableHiding", "enableMultiRowSelection", "enableMultiSort", "enablePagination", "enablePinning", "enableRowSelection", "enableSelectAll", "enableSorting", "enableStickyHeader", "enableTableFooter", "enableTableHead", "enableToolbarInternalActions", "enableTopToolbar", "filterFns", "icons", "layoutMode", "localization", "manualFiltering", "manualGrouping", "manualPagination", "manualSorting", "positionActionsColumn", "positionExpandColumn", "positionGlobalFilter", "positionPagination", "positionToolbarAlertBanner", "positionToolbarDropZone", "rowNumberMode", "selectAllMode", "sortingFns"]);
    const _icons = React.useMemo(() => Object.assign(Object.assign({}, MRT_Default_Icons), icons), [icons]);
    const _localization = React.useMemo(() => Object.assign(Object.assign({}, MRT_Localization_EN), localization), [localization]);
    const _aggregationFns = React.useMemo(() => Object.assign(Object.assign({}, MRT_AggregationFns), aggregationFns2), []);
    const _filterFns = React.useMemo(() => Object.assign(Object.assign({}, MRT_FilterFns), filterFns2), []);
    const _sortingFns = React.useMemo(() => Object.assign(Object.assign({}, MRT_SortingFns), sortingFns2), []);
    const _defaultColumn = React.useMemo(() => Object.assign(Object.assign({}, MRT_DefaultColumn), defaultColumn), [defaultColumn]);
    const _defaultDisplayColumn = React.useMemo(() => Object.assign(Object.assign({}, MRT_DefaultDisplayColumn), defaultDisplayColumn), [defaultDisplayColumn]);
    if (rest.enableRowVirtualization || rest.enableColumnVirtualization) {
      layoutMode = "grid";
    }
    if (rest.enableRowVirtualization) {
      enableStickyHeader = true;
    }
    if (enablePagination === false && manualPagination === void 0) {
      manualPagination = true;
    }
    if (!((_b = rest.data) === null || _b === void 0 ? void 0 : _b.length)) {
      manualFiltering = true;
      manualGrouping = true;
      manualPagination = true;
      manualSorting = true;
    }
    return jsxRuntimeExports.jsx(MRT_TableRoot, Object.assign({ aggregationFns: _aggregationFns, autoResetExpanded, columnResizeMode, defaultColumn: _defaultColumn, defaultDisplayColumn: _defaultDisplayColumn, editingMode, enableBottomToolbar, enableColumnActions, enableColumnFilters, enableColumnOrdering, enableColumnResizing, enableDensityToggle, enableExpandAll, enableExpanding, enableFilterMatchHighlighting, enableFilters, enableFullScreenToggle, enableGlobalFilter, enableGlobalFilterRankedResults, enableGrouping, enableHiding, enableMultiRowSelection, enableMultiSort, enablePagination, enablePinning, enableRowSelection, enableSelectAll, enableSorting, enableStickyHeader, enableTableFooter, enableTableHead, enableToolbarInternalActions, enableTopToolbar, filterFns: _filterFns, icons: _icons, layoutMode, localization: _localization, manualFiltering, manualGrouping, manualPagination, manualSorting, positionActionsColumn, positionExpandColumn, positionGlobalFilter, positionPagination, positionToolbarAlertBanner, positionToolbarDropZone, rowNumberMode, selectAllMode, sortingFns: _sortingFns }, rest));
  };
  function BasicList(props) {
    var _a, _b;
    const {
      ctx,
      onRowClick = () => {
      },
      onEditingRowSave = () => {
      },
      data,
      columns,
      initialState = {},
      sx = {},
      spec,
      isLoading,
      action
    } = props;
    const theme = ctx().theme;
    const editingMode = ((_a = spec.content.def.subview[action]) == null ? void 0 : _a.editingMode) || "none";
    const enableColumnFilters = ((_b = spec.content.def.subview[action]) == null ? void 0 : _b.enableColumnFilters) || false;
    const cmpKey = spec.content.key;
    const handleSaveRow = (_0) => __async(this, [_0], function* ({ exitEditingMode, row, values: values2 }) {
      onEditingRowSave(row, values2);
      exitEditingMode();
    });
    const handleRowClick = ({ row }) => ({
      onClick: (event) => {
        let selitem = __spreadValues({}, data[Number(row.id)]);
        onRowClick(event, selitem);
      },
      sx: { cursor: "pointer" }
    });
    const commonTableProps = {
      enableColumnActions: false,
      enableColumnFilters,
      enableSorting: true,
      enableBottomToolbar: true,
      enableTopToolbar: false,
      columns,
      data,
      initialState: {
        columnVisibility: spec.content.def.columnVisibility
      }
    };
    let specificProps = {};
    if (editingMode === "row") {
      specificProps = {
        editingMode: "row",
        enableEditing: true,
        enablePagination: true,
        onEditingRowSave: handleSaveRow
      };
    } else if (editingMode === "form") {
      specificProps = {
        editingMode: "custom",
        enablePagination: true,
        muiTableBodyRowProps: handleRowClick
      };
    } else {
      specificProps = {
        enablePagination: true
      };
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx(ThemeProvider, { theme, children: /* @__PURE__ */ jsxRuntimeExports.jsx(material.Box, { className: "BasicList", style: __spreadValues({}, sx), children: /* @__PURE__ */ React.createElement(
      MaterialReactTable,
      __spreadProps(__spreadValues(__spreadValues({}, commonTableProps), specificProps), {
        state: { isLoading },
        key: cmpKey
      })
    ) }) });
  }
  var isCheckBoxInput = (element) => element.type === "checkbox";
  var isDateObject = (value) => value instanceof Date;
  var isNullOrUndefined = (value) => value == null;
  const isObjectType = (value) => typeof value === "object";
  var isObject = (value) => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value);
  var getEventValue = (event) => isObject(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;
  var getNodeParentName = (name) => name.substring(0, name.search(/\.\d+(\.|$)/)) || name;
  var isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));
  var isPlainObject = (tempObject) => {
    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;
    return isObject(prototypeCopy) && prototypeCopy.hasOwnProperty("isPrototypeOf");
  };
  var isWeb = typeof window !== "undefined" && typeof window.HTMLElement !== "undefined" && typeof document !== "undefined";
  function cloneObject(data) {
    let copy2;
    const isArray = Array.isArray(data);
    if (data instanceof Date) {
      copy2 = new Date(data);
    } else if (data instanceof Set) {
      copy2 = new Set(data);
    } else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) && (isArray || isObject(data))) {
      copy2 = isArray ? [] : {};
      if (!isArray && !isPlainObject(data)) {
        copy2 = data;
      } else {
        for (const key in data) {
          if (data.hasOwnProperty(key)) {
            copy2[key] = cloneObject(data[key]);
          }
        }
      }
    } else {
      return data;
    }
    return copy2;
  }
  var compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];
  var isUndefined$1 = (val) => val === void 0;
  var get = (object, path, defaultValue) => {
    if (!path || !isObject(object)) {
      return defaultValue;
    }
    const result = compact(path.split(/[,[\].]+?/)).reduce((result2, key) => isNullOrUndefined(result2) ? result2 : result2[key], object);
    return isUndefined$1(result) || result === object ? isUndefined$1(object[path]) ? defaultValue : object[path] : result;
  };
  var isBoolean = (value) => typeof value === "boolean";
  const EVENTS = {
    BLUR: "blur",
    FOCUS_OUT: "focusout",
    CHANGE: "change"
  };
  const VALIDATION_MODE = {
    onBlur: "onBlur",
    onChange: "onChange",
    onSubmit: "onSubmit",
    onTouched: "onTouched",
    all: "all"
  };
  const INPUT_VALIDATION_RULES = {
    max: "max",
    min: "min",
    maxLength: "maxLength",
    minLength: "minLength",
    pattern: "pattern",
    required: "required",
    validate: "validate"
  };
  const HookFormContext = React.createContext(null);
  const useFormContext = () => React.useContext(HookFormContext);
  const FormProvider = (props) => {
    const _a = props, { children } = _a, data = __objRest(_a, ["children"]);
    return React.createElement(HookFormContext.Provider, { value: data }, children);
  };
  var getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {
    const result = {
      defaultValues: control._defaultValues
    };
    for (const key in formState) {
      Object.defineProperty(result, key, {
        get: () => {
          const _key = key;
          if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {
            control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;
          }
          localProxyFormState && (localProxyFormState[_key] = true);
          return formState[_key];
        }
      });
    }
    return result;
  };
  var isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;
  var shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {
    updateFormState(formStateData);
    const _a = formStateData, { name } = _a, formState = __objRest(_a, ["name"]);
    return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(_proxyFormState).length || Object.keys(formState).find((key) => _proxyFormState[key] === (!isRoot || VALIDATION_MODE.all));
  };
  var convertToArrayPayload = (value) => Array.isArray(value) ? value : [value];
  var shouldSubscribeByName = (name, signalName, exact) => !name || !signalName || name === signalName || convertToArrayPayload(name).some((currentName) => currentName && (exact ? currentName === signalName : currentName.startsWith(signalName) || signalName.startsWith(currentName)));
  function useSubscribe(props) {
    const _props = React.useRef(props);
    _props.current = props;
    React.useEffect(() => {
      const subscription = !props.disabled && _props.current.subject && _props.current.subject.subscribe({
        next: _props.current.next
      });
      return () => {
        subscription && subscription.unsubscribe();
      };
    }, [props.disabled]);
  }
  function useFormState(props) {
    const methods = useFormContext();
    const { control = methods.control, disabled, name, exact } = props || {};
    const [formState, updateFormState] = React.useState(control._formState);
    const _mounted = React.useRef(true);
    const _localProxyFormState = React.useRef({
      isDirty: false,
      isLoading: false,
      dirtyFields: false,
      touchedFields: false,
      isValidating: false,
      isValid: false,
      errors: false
    });
    const _name = React.useRef(name);
    _name.current = name;
    useSubscribe({
      disabled,
      next: (value) => _mounted.current && shouldSubscribeByName(_name.current, value.name, exact) && shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) && updateFormState(__spreadValues(__spreadValues({}, control._formState), value)),
      subject: control._subjects.state
    });
    React.useEffect(() => {
      _mounted.current = true;
      _localProxyFormState.current.isValid && control._updateValid(true);
      return () => {
        _mounted.current = false;
      };
    }, [control]);
    return getProxyFormState(formState, control, _localProxyFormState.current, false);
  }
  var isString = (value) => typeof value === "string";
  var generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {
    if (isString(names)) {
      isGlobal && _names.watch.add(names);
      return get(formValues, names, defaultValue);
    }
    if (Array.isArray(names)) {
      return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));
    }
    isGlobal && (_names.watchAll = true);
    return formValues;
  };
  function useWatch(props) {
    const methods = useFormContext();
    const { control = methods.control, name, defaultValue, disabled, exact } = props || {};
    const _name = React.useRef(name);
    _name.current = name;
    useSubscribe({
      disabled,
      subject: control._subjects.values,
      next: (formState) => {
        if (shouldSubscribeByName(_name.current, formState.name, exact)) {
          updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));
        }
      }
    });
    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));
    React.useEffect(() => control._removeUnmounted());
    return value;
  }
  var isKey = (value) => /^\w*$/.test(value);
  var stringToPath = (input) => compact(input.replace(/["|']|\]/g, "").split(/\.|\[/));
  var set = (object, path, value) => {
    let index2 = -1;
    const tempPath = isKey(path) ? [path] : stringToPath(path);
    const length2 = tempPath.length;
    const lastIndex = length2 - 1;
    while (++index2 < length2) {
      const key = tempPath[index2];
      let newValue = value;
      if (index2 !== lastIndex) {
        const objValue = object[key];
        newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index2 + 1]) ? [] : {};
      }
      object[key] = newValue;
      object = object[key];
    }
    return object;
  };
  function useController(props) {
    const methods = useFormContext();
    const { name, disabled, control = methods.control, shouldUnregister } = props;
    const isArrayField = isNameInFieldArray(control._names.array, name);
    const value = useWatch({
      control,
      name,
      defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),
      exact: true
    });
    const formState = useFormState({
      control,
      name
    });
    const _registerProps = React.useRef(control.register(name, __spreadValues(__spreadProps(__spreadValues({}, props.rules), {
      value
    }), isBoolean(props.disabled) ? { disabled: props.disabled } : {})));
    React.useEffect(() => {
      const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;
      const updateMounted = (name2, value2) => {
        const field = get(control._fields, name2);
        if (field) {
          field._f.mount = value2;
        }
      };
      updateMounted(name, true);
      if (_shouldUnregisterField) {
        const value2 = cloneObject(get(control._options.defaultValues, name));
        set(control._defaultValues, name, value2);
        if (isUndefined$1(get(control._formValues, name))) {
          set(control._formValues, name, value2);
        }
      }
      return () => {
        (isArrayField ? _shouldUnregisterField && !control._state.action : _shouldUnregisterField) ? control.unregister(name) : updateMounted(name, false);
      };
    }, [name, control, isArrayField, shouldUnregister]);
    React.useEffect(() => {
      if (get(control._fields, name)) {
        control._updateDisabledField({
          disabled,
          fields: control._fields,
          name,
          value: get(control._fields, name)._f.value
        });
      }
    }, [disabled, name, control]);
    return {
      field: __spreadProps(__spreadValues({
        name,
        value
      }, isBoolean(disabled) || formState.disabled ? { disabled: formState.disabled || disabled } : {}), {
        onChange: React.useCallback((event) => _registerProps.current.onChange({
          target: {
            value: getEventValue(event),
            name
          },
          type: EVENTS.CHANGE
        }), [name]),
        onBlur: React.useCallback(() => _registerProps.current.onBlur({
          target: {
            value: get(control._formValues, name),
            name
          },
          type: EVENTS.BLUR
        }), [name, control]),
        ref: (elm) => {
          const field = get(control._fields, name);
          if (field && elm) {
            field._f.ref = {
              focus: () => elm.focus(),
              select: () => elm.select(),
              setCustomValidity: (message) => elm.setCustomValidity(message),
              reportValidity: () => elm.reportValidity()
            };
          }
        }
      }),
      formState,
      fieldState: Object.defineProperties({}, {
        invalid: {
          enumerable: true,
          get: () => !!get(formState.errors, name)
        },
        isDirty: {
          enumerable: true,
          get: () => !!get(formState.dirtyFields, name)
        },
        isTouched: {
          enumerable: true,
          get: () => !!get(formState.touchedFields, name)
        },
        error: {
          enumerable: true,
          get: () => get(formState.errors, name)
        }
      })
    };
  }
  const Controller = (props) => props.render(useController(props));
  const POST_REQUEST = "post";
  function Form(props) {
    const methods = useFormContext();
    const [mounted, setMounted] = React.useState(false);
    const _a = props, { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus } = _a, rest = __objRest(_a, ["control", "onSubmit", "children", "action", "method", "headers", "encType", "onError", "render", "onSuccess", "validateStatus"]);
    const submit = (event) => __async(this, null, function* () {
      let hasError = false;
      let type = "";
      yield control.handleSubmit((data) => __async(this, null, function* () {
        const formData = new FormData();
        let formDataJson = "";
        try {
          formDataJson = JSON.stringify(data);
        } catch (_a2) {
        }
        for (const name of control._names.mount) {
          formData.append(name, get(data, name));
        }
        if (onSubmit) {
          yield onSubmit({
            data,
            event,
            method,
            formData,
            formDataJson
          });
        }
        if (action) {
          try {
            const shouldStringifySubmissionData = [
              headers && headers["Content-Type"],
              encType
            ].some((value) => value && value.includes("json"));
            const response = yield fetch(action, {
              method,
              headers: __spreadValues(__spreadValues({}, headers), encType ? { "Content-Type": encType } : {}),
              body: shouldStringifySubmissionData ? formDataJson : formData
            });
            if (response && (validateStatus ? !validateStatus(response.status) : response.status < 200 || response.status >= 300)) {
              hasError = true;
              onError && onError({ response });
              type = String(response.status);
            } else {
              onSuccess && onSuccess({ response });
            }
          } catch (error) {
            hasError = true;
            onError && onError({ error });
          }
        }
      }))(event);
      if (hasError && props.control) {
        props.control._subjects.state.next({
          isSubmitSuccessful: false
        });
        props.control.setError("root.server", {
          type
        });
      }
    });
    React.useEffect(() => {
      setMounted(true);
    }, []);
    return render ? React.createElement(React.Fragment, null, render({
      submit
    })) : React.createElement("form", __spreadValues({ noValidate: mounted, action, method, encType, onSubmit: submit }, rest), children);
  }
  var appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria ? __spreadProps(__spreadValues({}, errors[name]), {
    types: __spreadProps(__spreadValues({}, errors[name] && errors[name].types ? errors[name].types : {}), {
      [type]: message || true
    })
  }) : {};
  var generateId = () => {
    const d = typeof performance === "undefined" ? Date.now() : performance.now() * 1e3;
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
      const r2 = (Math.random() * 16 + d) % 16 | 0;
      return (c == "x" ? r2 : r2 & 3 | 8).toString(16);
    });
  };
  var getFocusFieldName = (name, index2, options = {}) => options.shouldFocus || isUndefined$1(options.shouldFocus) ? options.focusName || `${name}.${isUndefined$1(options.focusIndex) ? index2 : options.focusIndex}.` : "";
  var getValidationModes = (mode) => ({
    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,
    isOnBlur: mode === VALIDATION_MODE.onBlur,
    isOnChange: mode === VALIDATION_MODE.onChange,
    isOnAll: mode === VALIDATION_MODE.all,
    isOnTouch: mode === VALIDATION_MODE.onTouched
  });
  var isWatched = (name, _names, isBlurEvent) => !isBlurEvent && (_names.watchAll || _names.watch.has(name) || [..._names.watch].some((watchName) => name.startsWith(watchName) && /^\.\w+/.test(name.slice(watchName.length))));
  const iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {
    for (const key of fieldsNames || Object.keys(fields)) {
      const field = get(fields, key);
      if (field) {
        const _a = field, { _f } = _a, currentField = __objRest(_a, ["_f"]);
        if (_f) {
          if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {
            break;
          } else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {
            break;
          } else {
            iterateFieldsByAction(currentField, action);
          }
        } else if (isObject(currentField)) {
          iterateFieldsByAction(currentField, action);
        }
      }
    }
  };
  var updateFieldArrayRootError = (errors, error, name) => {
    const fieldArrayErrors = compact(get(errors, name));
    set(fieldArrayErrors, "root", error[name]);
    set(errors, name, fieldArrayErrors);
    return errors;
  };
  var isFileInput = (element) => element.type === "file";
  var isFunction = (value) => typeof value === "function";
  var isHTMLElement = (value) => {
    if (!isWeb) {
      return false;
    }
    const owner = value ? value.ownerDocument : 0;
    return value instanceof (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement);
  };
  var isMessage = (value) => isString(value);
  var isRadioInput = (element) => element.type === "radio";
  var isRegex = (value) => value instanceof RegExp;
  const defaultResult = {
    value: false,
    isValid: false
  };
  const validResult = { value: true, isValid: true };
  var getCheckboxValue = (options) => {
    if (Array.isArray(options)) {
      if (options.length > 1) {
        const values2 = options.filter((option) => option && option.checked && !option.disabled).map((option) => option.value);
        return { value: values2, isValid: !!values2.length };
      }
      return options[0].checked && !options[0].disabled ? (
        // @ts-expect-error expected to work in the browser
        options[0].attributes && !isUndefined$1(options[0].attributes.value) ? isUndefined$1(options[0].value) || options[0].value === "" ? validResult : { value: options[0].value, isValid: true } : validResult
      ) : defaultResult;
    }
    return defaultResult;
  };
  const defaultReturn = {
    isValid: false,
    value: null
  };
  var getRadioValue = (options) => Array.isArray(options) ? options.reduce((previous, option) => option && option.checked && !option.disabled ? {
    isValid: true,
    value: option.value
  } : previous, defaultReturn) : defaultReturn;
  function getValidateError(result, ref, type = "validate") {
    if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {
      return {
        type,
        message: isMessage(result) ? result : "",
        ref
      };
    }
  }
  var getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData) ? validationData : {
    value: validationData,
    message: ""
  };
  var validateField = (field, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => __async(this, null, function* () {
    const { ref, refs, required, maxLength, minLength, min: min2, max: max2, pattern, validate, name, valueAsNumber, mount, disabled } = field._f;
    const inputValue = get(formValues, name);
    if (!mount || disabled) {
      return {};
    }
    const inputRef = refs ? refs[0] : ref;
    const setCustomValidity = (message) => {
      if (shouldUseNativeValidation && inputRef.reportValidity) {
        inputRef.setCustomValidity(isBoolean(message) ? "" : message || "");
        inputRef.reportValidity();
      }
    };
    const error = {};
    const isRadio = isRadioInput(ref);
    const isCheckBox = isCheckBoxInput(ref);
    const isRadioOrCheckbox2 = isRadio || isCheckBox;
    const isEmpty2 = (valueAsNumber || isFileInput(ref)) && isUndefined$1(ref.value) && isUndefined$1(inputValue) || isHTMLElement(ref) && ref.value === "" || inputValue === "" || Array.isArray(inputValue) && !inputValue.length;
    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);
    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {
      const message = exceedMax ? maxLengthMessage : minLengthMessage;
      error[name] = __spreadValues({
        type: exceedMax ? maxType : minType,
        message,
        ref
      }, appendErrorsCurry(exceedMax ? maxType : minType, message));
    };
    if (isFieldArray ? !Array.isArray(inputValue) || !inputValue.length : required && (!isRadioOrCheckbox2 && (isEmpty2 || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid)) {
      const { value, message } = isMessage(required) ? { value: !!required, message: required } : getValueAndMessage(required);
      if (value) {
        error[name] = __spreadValues({
          type: INPUT_VALIDATION_RULES.required,
          message,
          ref: inputRef
        }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));
        if (!validateAllFieldCriteria) {
          setCustomValidity(message);
          return error;
        }
      }
    }
    if (!isEmpty2 && (!isNullOrUndefined(min2) || !isNullOrUndefined(max2))) {
      let exceedMax;
      let exceedMin;
      const maxOutput = getValueAndMessage(max2);
      const minOutput = getValueAndMessage(min2);
      if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {
        const valueNumber = ref.valueAsNumber || (inputValue ? +inputValue : inputValue);
        if (!isNullOrUndefined(maxOutput.value)) {
          exceedMax = valueNumber > maxOutput.value;
        }
        if (!isNullOrUndefined(minOutput.value)) {
          exceedMin = valueNumber < minOutput.value;
        }
      } else {
        const valueDate = ref.valueAsDate || new Date(inputValue);
        const convertTimeToDate = (time) => /* @__PURE__ */ new Date((/* @__PURE__ */ new Date()).toDateString() + " " + time);
        const isTime = ref.type == "time";
        const isWeek = ref.type == "week";
        if (isString(maxOutput.value) && inputValue) {
          exceedMax = isTime ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value) : isWeek ? inputValue > maxOutput.value : valueDate > new Date(maxOutput.value);
        }
        if (isString(minOutput.value) && inputValue) {
          exceedMin = isTime ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value) : isWeek ? inputValue < minOutput.value : valueDate < new Date(minOutput.value);
        }
      }
      if (exceedMax || exceedMin) {
        getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);
        if (!validateAllFieldCriteria) {
          setCustomValidity(error[name].message);
          return error;
        }
      }
    }
    if ((maxLength || minLength) && !isEmpty2 && (isString(inputValue) || isFieldArray && Array.isArray(inputValue))) {
      const maxLengthOutput = getValueAndMessage(maxLength);
      const minLengthOutput = getValueAndMessage(minLength);
      const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > +maxLengthOutput.value;
      const exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < +minLengthOutput.value;
      if (exceedMax || exceedMin) {
        getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);
        if (!validateAllFieldCriteria) {
          setCustomValidity(error[name].message);
          return error;
        }
      }
    }
    if (pattern && !isEmpty2 && isString(inputValue)) {
      const { value: patternValue, message } = getValueAndMessage(pattern);
      if (isRegex(patternValue) && !inputValue.match(patternValue)) {
        error[name] = __spreadValues({
          type: INPUT_VALIDATION_RULES.pattern,
          message,
          ref
        }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));
        if (!validateAllFieldCriteria) {
          setCustomValidity(message);
          return error;
        }
      }
    }
    if (validate) {
      if (isFunction(validate)) {
        const result = yield validate(inputValue, formValues);
        const validateError = getValidateError(result, inputRef);
        if (validateError) {
          error[name] = __spreadValues(__spreadValues({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));
          if (!validateAllFieldCriteria) {
            setCustomValidity(validateError.message);
            return error;
          }
        }
      } else if (isObject(validate)) {
        let validationResult = {};
        for (const key in validate) {
          if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {
            break;
          }
          const validateError = getValidateError(yield validate[key](inputValue, formValues), inputRef, key);
          if (validateError) {
            validationResult = __spreadValues(__spreadValues({}, validateError), appendErrorsCurry(key, validateError.message));
            setCustomValidity(validateError.message);
            if (validateAllFieldCriteria) {
              error[name] = validationResult;
            }
          }
        }
        if (!isEmptyObject(validationResult)) {
          error[name] = __spreadValues({
            ref: inputRef
          }, validationResult);
          if (!validateAllFieldCriteria) {
            return error;
          }
        }
      }
    }
    setCustomValidity(true);
    return error;
  });
  var appendAt = (data, value) => [
    ...data,
    ...convertToArrayPayload(value)
  ];
  var fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => void 0) : void 0;
  function insert(data, index2, value) {
    return [
      ...data.slice(0, index2),
      ...convertToArrayPayload(value),
      ...data.slice(index2)
    ];
  }
  var moveArrayAt = (data, from2, to) => {
    if (!Array.isArray(data)) {
      return [];
    }
    if (isUndefined$1(data[to])) {
      data[to] = void 0;
    }
    data.splice(to, 0, data.splice(from2, 1)[0]);
    return data;
  };
  var prependAt = (data, value) => [
    ...convertToArrayPayload(value),
    ...convertToArrayPayload(data)
  ];
  function removeAtIndexes(data, indexes) {
    let i = 0;
    const temp = [...data];
    for (const index2 of indexes) {
      temp.splice(index2 - i, 1);
      i++;
    }
    return compact(temp).length ? temp : [];
  }
  var removeArrayAt = (data, index2) => isUndefined$1(index2) ? [] : removeAtIndexes(data, convertToArrayPayload(index2).sort((a, b) => a - b));
  var swapArrayAt = (data, indexA, indexB) => {
    [data[indexA], data[indexB]] = [data[indexB], data[indexA]];
  };
  function baseGet(object, updatePath) {
    const length2 = updatePath.slice(0, -1).length;
    let index2 = 0;
    while (index2 < length2) {
      object = isUndefined$1(object) ? index2++ : object[updatePath[index2++]];
    }
    return object;
  }
  function isEmptyArray(obj) {
    for (const key in obj) {
      if (obj.hasOwnProperty(key) && !isUndefined$1(obj[key])) {
        return false;
      }
    }
    return true;
  }
  function unset(object, path) {
    const paths = Array.isArray(path) ? path : isKey(path) ? [path] : stringToPath(path);
    const childObject = paths.length === 1 ? object : baseGet(object, paths);
    const index2 = paths.length - 1;
    const key = paths[index2];
    if (childObject) {
      delete childObject[key];
    }
    if (index2 !== 0 && (isObject(childObject) && isEmptyObject(childObject) || Array.isArray(childObject) && isEmptyArray(childObject))) {
      unset(object, paths.slice(0, -1));
    }
    return object;
  }
  var updateAt = (fieldValues, index2, value) => {
    fieldValues[index2] = value;
    return fieldValues;
  };
  function useFieldArray(props) {
    const methods = useFormContext();
    const { control = methods.control, name, keyName = "id", shouldUnregister } = props;
    const [fields, setFields] = React.useState(control._getFieldArray(name));
    const ids = React.useRef(control._getFieldArray(name).map(generateId));
    const _fieldIds = React.useRef(fields);
    const _name = React.useRef(name);
    const _actioned = React.useRef(false);
    _name.current = name;
    _fieldIds.current = fields;
    control._names.array.add(name);
    props.rules && control.register(name, props.rules);
    useSubscribe({
      next: ({ values: values2, name: fieldArrayName }) => {
        if (fieldArrayName === _name.current || !fieldArrayName) {
          const fieldValues = get(values2, _name.current);
          if (Array.isArray(fieldValues)) {
            setFields(fieldValues);
            ids.current = fieldValues.map(generateId);
          }
        }
      },
      subject: control._subjects.array
    });
    const updateValues = React.useCallback((updatedFieldArrayValues) => {
      _actioned.current = true;
      control._updateFieldArray(name, updatedFieldArrayValues);
    }, [control, name]);
    const append2 = (value, options) => {
      const appendValue = convertToArrayPayload(cloneObject(value));
      const updatedFieldArrayValues = appendAt(control._getFieldArray(name), appendValue);
      control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);
      ids.current = appendAt(ids.current, appendValue.map(generateId));
      updateValues(updatedFieldArrayValues);
      setFields(updatedFieldArrayValues);
      control._updateFieldArray(name, updatedFieldArrayValues, appendAt, {
        argA: fillEmptyArray(value)
      });
    };
    const prepend = (value, options) => {
      const prependValue = convertToArrayPayload(cloneObject(value));
      const updatedFieldArrayValues = prependAt(control._getFieldArray(name), prependValue);
      control._names.focus = getFocusFieldName(name, 0, options);
      ids.current = prependAt(ids.current, prependValue.map(generateId));
      updateValues(updatedFieldArrayValues);
      setFields(updatedFieldArrayValues);
      control._updateFieldArray(name, updatedFieldArrayValues, prependAt, {
        argA: fillEmptyArray(value)
      });
    };
    const remove = (index2) => {
      const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index2);
      ids.current = removeArrayAt(ids.current, index2);
      updateValues(updatedFieldArrayValues);
      setFields(updatedFieldArrayValues);
      control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {
        argA: index2
      });
    };
    const insert$1 = (index2, value, options) => {
      const insertValue = convertToArrayPayload(cloneObject(value));
      const updatedFieldArrayValues = insert(control._getFieldArray(name), index2, insertValue);
      control._names.focus = getFocusFieldName(name, index2, options);
      ids.current = insert(ids.current, index2, insertValue.map(generateId));
      updateValues(updatedFieldArrayValues);
      setFields(updatedFieldArrayValues);
      control._updateFieldArray(name, updatedFieldArrayValues, insert, {
        argA: index2,
        argB: fillEmptyArray(value)
      });
    };
    const swap = (indexA, indexB) => {
      const updatedFieldArrayValues = control._getFieldArray(name);
      swapArrayAt(updatedFieldArrayValues, indexA, indexB);
      swapArrayAt(ids.current, indexA, indexB);
      updateValues(updatedFieldArrayValues);
      setFields(updatedFieldArrayValues);
      control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {
        argA: indexA,
        argB: indexB
      }, false);
    };
    const move = (from2, to) => {
      const updatedFieldArrayValues = control._getFieldArray(name);
      moveArrayAt(updatedFieldArrayValues, from2, to);
      moveArrayAt(ids.current, from2, to);
      updateValues(updatedFieldArrayValues);
      setFields(updatedFieldArrayValues);
      control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {
        argA: from2,
        argB: to
      }, false);
    };
    const update = (index2, value) => {
      const updateValue = cloneObject(value);
      const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index2, updateValue);
      ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index2 ? generateId() : ids.current[i]);
      updateValues(updatedFieldArrayValues);
      setFields([...updatedFieldArrayValues]);
      control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {
        argA: index2,
        argB: updateValue
      }, true, false);
    };
    const replace2 = (value) => {
      const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));
      ids.current = updatedFieldArrayValues.map(generateId);
      updateValues([...updatedFieldArrayValues]);
      setFields([...updatedFieldArrayValues]);
      control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);
    };
    React.useEffect(() => {
      control._state.action = false;
      isWatched(name, control._names) && control._subjects.state.next(__spreadValues({}, control._formState));
      if (_actioned.current && (!getValidationModes(control._options.mode).isOnSubmit || control._formState.isSubmitted)) {
        if (control._options.resolver) {
          control._executeSchema([name]).then((result) => {
            const error = get(result.errors, name);
            const existingError = get(control._formState.errors, name);
            if (existingError ? !error && existingError.type || error && (existingError.type !== error.type || existingError.message !== error.message) : error && error.type) {
              error ? set(control._formState.errors, name, error) : unset(control._formState.errors, name);
              control._subjects.state.next({
                errors: control._formState.errors
              });
            }
          });
        } else {
          const field = get(control._fields, name);
          if (field && field._f && !(getValidationModes(control._options.reValidateMode).isOnSubmit && getValidationModes(control._options.mode).isOnSubmit)) {
            validateField(field, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) && control._subjects.state.next({
              errors: updateFieldArrayRootError(control._formState.errors, error, name)
            }));
          }
        }
      }
      control._subjects.values.next({
        name,
        values: __spreadValues({}, control._formValues)
      });
      control._names.focus && iterateFieldsByAction(control._fields, (ref, key) => {
        if (control._names.focus && key.startsWith(control._names.focus) && ref.focus) {
          ref.focus();
          return 1;
        }
        return;
      });
      control._names.focus = "";
      control._updateValid();
      _actioned.current = false;
    }, [fields, name, control]);
    React.useEffect(() => {
      !get(control._formValues, name) && control._updateFieldArray(name);
      return () => {
        (control._options.shouldUnregister || shouldUnregister) && control.unregister(name);
      };
    }, [name, control, keyName, shouldUnregister]);
    return {
      swap: React.useCallback(swap, [updateValues, name, control]),
      move: React.useCallback(move, [updateValues, name, control]),
      prepend: React.useCallback(prepend, [updateValues, name, control]),
      append: React.useCallback(append2, [updateValues, name, control]),
      remove: React.useCallback(remove, [updateValues, name, control]),
      insert: React.useCallback(insert$1, [updateValues, name, control]),
      update: React.useCallback(update, [updateValues, name, control]),
      replace: React.useCallback(replace2, [updateValues, name, control]),
      fields: React.useMemo(() => fields.map((field, index2) => __spreadProps(__spreadValues({}, field), {
        [keyName]: ids.current[index2] || generateId()
      })), [fields, keyName])
    };
  }
  var createSubject = () => {
    let _observers = [];
    const next2 = (value) => {
      for (const observer of _observers) {
        observer.next && observer.next(value);
      }
    };
    const subscribe = (observer) => {
      _observers.push(observer);
      return {
        unsubscribe: () => {
          _observers = _observers.filter((o) => o !== observer);
        }
      };
    };
    const unsubscribe = () => {
      _observers = [];
    };
    return {
      get observers() {
        return _observers;
      },
      next: next2,
      subscribe,
      unsubscribe
    };
  };
  var isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);
  function deepEqual(object1, object2) {
    if (isPrimitive(object1) || isPrimitive(object2)) {
      return object1 === object2;
    }
    if (isDateObject(object1) && isDateObject(object2)) {
      return object1.getTime() === object2.getTime();
    }
    const keys1 = Object.keys(object1);
    const keys2 = Object.keys(object2);
    if (keys1.length !== keys2.length) {
      return false;
    }
    for (const key of keys1) {
      const val1 = object1[key];
      if (!keys2.includes(key)) {
        return false;
      }
      if (key !== "ref") {
        const val2 = object2[key];
        if (isDateObject(val1) && isDateObject(val2) || isObject(val1) && isObject(val2) || Array.isArray(val1) && Array.isArray(val2) ? !deepEqual(val1, val2) : val1 !== val2) {
          return false;
        }
      }
    }
    return true;
  }
  var isMultipleSelect = (element) => element.type === `select-multiple`;
  var isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);
  var live = (ref) => isHTMLElement(ref) && ref.isConnected;
  var objectHasFunction = (data) => {
    for (const key in data) {
      if (isFunction(data[key])) {
        return true;
      }
    }
    return false;
  };
  function markFieldsDirty(data, fields = {}) {
    const isParentNodeArray = Array.isArray(data);
    if (isObject(data) || isParentNodeArray) {
      for (const key in data) {
        if (Array.isArray(data[key]) || isObject(data[key]) && !objectHasFunction(data[key])) {
          fields[key] = Array.isArray(data[key]) ? [] : {};
          markFieldsDirty(data[key], fields[key]);
        } else if (!isNullOrUndefined(data[key])) {
          fields[key] = true;
        }
      }
    }
    return fields;
  }
  function getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {
    const isParentNodeArray = Array.isArray(data);
    if (isObject(data) || isParentNodeArray) {
      for (const key in data) {
        if (Array.isArray(data[key]) || isObject(data[key]) && !objectHasFunction(data[key])) {
          if (isUndefined$1(formValues) || isPrimitive(dirtyFieldsFromValues[key])) {
            dirtyFieldsFromValues[key] = Array.isArray(data[key]) ? markFieldsDirty(data[key], []) : __spreadValues({}, markFieldsDirty(data[key]));
          } else {
            getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);
          }
        } else {
          dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);
        }
      }
    }
    return dirtyFieldsFromValues;
  }
  var getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));
  var getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined$1(value) ? value : valueAsNumber ? value === "" ? NaN : value ? +value : value : valueAsDate && isString(value) ? new Date(value) : setValueAs ? setValueAs(value) : value;
  function getFieldValue(_f) {
    const ref = _f.ref;
    if (_f.refs ? _f.refs.every((ref2) => ref2.disabled) : ref.disabled) {
      return;
    }
    if (isFileInput(ref)) {
      return ref.files;
    }
    if (isRadioInput(ref)) {
      return getRadioValue(_f.refs).value;
    }
    if (isMultipleSelect(ref)) {
      return [...ref.selectedOptions].map(({ value }) => value);
    }
    if (isCheckBoxInput(ref)) {
      return getCheckboxValue(_f.refs).value;
    }
    return getFieldValueAs(isUndefined$1(ref.value) ? _f.ref.value : ref.value, _f);
  }
  var getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {
    const fields = {};
    for (const name of fieldsNames) {
      const field = get(_fields, name);
      field && set(fields, name, field._f);
    }
    return {
      criteriaMode,
      names: [...fieldsNames],
      fields,
      shouldUseNativeValidation
    };
  };
  var getRuleValue = (rule) => isUndefined$1(rule) ? rule : isRegex(rule) ? rule.source : isObject(rule) ? isRegex(rule.value) ? rule.value.source : rule.value : rule;
  var hasValidation = (options) => options.mount && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);
  function schemaErrorLookup(errors, _fields, name) {
    const error = get(errors, name);
    if (error || isKey(name)) {
      return {
        error,
        name
      };
    }
    const names = name.split(".");
    while (names.length) {
      const fieldName = names.join(".");
      const field = get(_fields, fieldName);
      const foundError = get(errors, fieldName);
      if (field && !Array.isArray(field) && name !== fieldName) {
        return { name };
      }
      if (foundError && foundError.type) {
        return {
          name: fieldName,
          error: foundError
        };
      }
      names.pop();
    }
    return {
      name
    };
  }
  var skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {
    if (mode.isOnAll) {
      return false;
    } else if (!isSubmitted && mode.isOnTouch) {
      return !(isTouched || isBlurEvent);
    } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {
      return !isBlurEvent;
    } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {
      return isBlurEvent;
    }
    return true;
  };
  var unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);
  const defaultOptions = {
    mode: VALIDATION_MODE.onSubmit,
    reValidateMode: VALIDATION_MODE.onChange,
    shouldFocusError: true
  };
  function createFormControl(props = {}, flushRootRender) {
    let _options = __spreadValues(__spreadValues({}, defaultOptions), props);
    let _formState = {
      submitCount: 0,
      isDirty: false,
      isLoading: isFunction(_options.defaultValues),
      isValidating: false,
      isSubmitted: false,
      isSubmitting: false,
      isSubmitSuccessful: false,
      isValid: false,
      touchedFields: {},
      dirtyFields: {},
      errors: _options.errors || {},
      disabled: _options.disabled || false
    };
    let _fields = {};
    let _defaultValues = isObject(_options.values) || isObject(_options.defaultValues) ? cloneObject(_options.values || _options.defaultValues) || {} : {};
    let _formValues = _options.shouldUnregister ? {} : cloneObject(_defaultValues);
    let _state = {
      action: false,
      mount: false,
      watch: false
    };
    let _names = {
      mount: /* @__PURE__ */ new Set(),
      unMount: /* @__PURE__ */ new Set(),
      array: /* @__PURE__ */ new Set(),
      watch: /* @__PURE__ */ new Set()
    };
    let delayErrorCallback;
    let timer = 0;
    const _proxyFormState = {
      isDirty: false,
      dirtyFields: false,
      touchedFields: false,
      isValidating: false,
      isValid: false,
      errors: false
    };
    const _subjects = {
      values: createSubject(),
      array: createSubject(),
      state: createSubject()
    };
    const validationModeBeforeSubmit = getValidationModes(_options.mode);
    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);
    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;
    const debounce2 = (callback) => (wait) => {
      clearTimeout(timer);
      timer = setTimeout(callback, wait);
    };
    const _updateValid = (shouldUpdateValid) => __async(this, null, function* () {
      if (_proxyFormState.isValid || shouldUpdateValid) {
        const isValid = _options.resolver ? isEmptyObject((yield _executeSchema()).errors) : yield executeBuiltInValidation(_fields, true);
        if (isValid !== _formState.isValid) {
          _subjects.state.next({
            isValid
          });
        }
      }
    });
    const _updateIsValidating = (value) => _proxyFormState.isValidating && _subjects.state.next({
      isValidating: value
    });
    const _updateFieldArray = (name, values2 = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {
      if (args && method) {
        _state.action = true;
        if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {
          const fieldValues = method(get(_fields, name), args.argA, args.argB);
          shouldSetValues && set(_fields, name, fieldValues);
        }
        if (shouldUpdateFieldsAndState && Array.isArray(get(_formState.errors, name))) {
          const errors = method(get(_formState.errors, name), args.argA, args.argB);
          shouldSetValues && set(_formState.errors, name, errors);
          unsetEmptyArray(_formState.errors, name);
        }
        if (_proxyFormState.touchedFields && shouldUpdateFieldsAndState && Array.isArray(get(_formState.touchedFields, name))) {
          const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);
          shouldSetValues && set(_formState.touchedFields, name, touchedFields);
        }
        if (_proxyFormState.dirtyFields) {
          _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);
        }
        _subjects.state.next({
          name,
          isDirty: _getDirty(name, values2),
          dirtyFields: _formState.dirtyFields,
          errors: _formState.errors,
          isValid: _formState.isValid
        });
      } else {
        set(_formValues, name, values2);
      }
    };
    const updateErrors = (name, error) => {
      set(_formState.errors, name, error);
      _subjects.state.next({
        errors: _formState.errors
      });
    };
    const _setErrors = (errors) => {
      _formState.errors = errors;
      _subjects.state.next({
        errors: _formState.errors,
        isValid: false
      });
    };
    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {
      const field = get(_fields, name);
      if (field) {
        const defaultValue = get(_formValues, name, isUndefined$1(value) ? get(_defaultValues, name) : value);
        isUndefined$1(defaultValue) || ref && ref.defaultChecked || shouldSkipSetValueAs ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f)) : setFieldValue(name, defaultValue);
        _state.mount && _updateValid();
      }
    };
    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {
      let shouldUpdateField = false;
      let isPreviousDirty = false;
      const output = {
        name
      };
      const disabledField = !!(get(_fields, name) && get(_fields, name)._f.disabled);
      if (!isBlurEvent || shouldDirty) {
        if (_proxyFormState.isDirty) {
          isPreviousDirty = _formState.isDirty;
          _formState.isDirty = output.isDirty = _getDirty();
          shouldUpdateField = isPreviousDirty !== output.isDirty;
        }
        const isCurrentFieldPristine = disabledField || deepEqual(get(_defaultValues, name), fieldValue);
        isPreviousDirty = !!(!disabledField && get(_formState.dirtyFields, name));
        isCurrentFieldPristine || disabledField ? unset(_formState.dirtyFields, name) : set(_formState.dirtyFields, name, true);
        output.dirtyFields = _formState.dirtyFields;
        shouldUpdateField = shouldUpdateField || _proxyFormState.dirtyFields && isPreviousDirty !== !isCurrentFieldPristine;
      }
      if (isBlurEvent) {
        const isPreviousFieldTouched = get(_formState.touchedFields, name);
        if (!isPreviousFieldTouched) {
          set(_formState.touchedFields, name, isBlurEvent);
          output.touchedFields = _formState.touchedFields;
          shouldUpdateField = shouldUpdateField || _proxyFormState.touchedFields && isPreviousFieldTouched !== isBlurEvent;
        }
      }
      shouldUpdateField && shouldRender && _subjects.state.next(output);
      return shouldUpdateField ? output : {};
    };
    const shouldRenderByError = (name, isValid, error, fieldState) => {
      const previousFieldError = get(_formState.errors, name);
      const shouldUpdateValid = _proxyFormState.isValid && isBoolean(isValid) && _formState.isValid !== isValid;
      if (props.delayError && error) {
        delayErrorCallback = debounce2(() => updateErrors(name, error));
        delayErrorCallback(props.delayError);
      } else {
        clearTimeout(timer);
        delayErrorCallback = null;
        error ? set(_formState.errors, name, error) : unset(_formState.errors, name);
      }
      if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) || !isEmptyObject(fieldState) || shouldUpdateValid) {
        const updatedFormState = __spreadProps(__spreadValues(__spreadValues({}, fieldState), shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}), {
          errors: _formState.errors,
          name
        });
        _formState = __spreadValues(__spreadValues({}, _formState), updatedFormState);
        _subjects.state.next(updatedFormState);
      }
      _updateIsValidating(false);
    };
    const _executeSchema = (name) => __async(this, null, function* () {
      return _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));
    });
    const executeSchemaAndUpdateState = (names) => __async(this, null, function* () {
      const { errors } = yield _executeSchema(names);
      if (names) {
        for (const name of names) {
          const error = get(errors, name);
          error ? set(_formState.errors, name, error) : unset(_formState.errors, name);
        }
      } else {
        _formState.errors = errors;
      }
      return errors;
    });
    const executeBuiltInValidation = (_0, _1, ..._2) => __async(this, [_0, _1, ..._2], function* (fields, shouldOnlyCheckValid, context = {
      valid: true
    }) {
      for (const name in fields) {
        const field = fields[name];
        if (field) {
          const _a = field, { _f } = _a, fieldValue = __objRest(_a, ["_f"]);
          if (_f) {
            const isFieldArrayRoot = _names.array.has(_f.name);
            const fieldError = yield validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);
            if (fieldError[_f.name]) {
              context.valid = false;
              if (shouldOnlyCheckValid) {
                break;
              }
            }
            !shouldOnlyCheckValid && (get(fieldError, _f.name) ? isFieldArrayRoot ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name) : set(_formState.errors, _f.name, fieldError[_f.name]) : unset(_formState.errors, _f.name));
          }
          fieldValue && (yield executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));
        }
      }
      return context.valid;
    });
    const _removeUnmounted = () => {
      for (const name of _names.unMount) {
        const field = get(_fields, name);
        field && (field._f.refs ? field._f.refs.every((ref) => !live(ref)) : !live(field._f.ref)) && unregister(name);
      }
      _names.unMount = /* @__PURE__ */ new Set();
    };
    const _getDirty = (name, data) => (name && data && set(_formValues, name, data), !deepEqual(getValues(), _defaultValues));
    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, __spreadValues({}, _state.mount ? _formValues : isUndefined$1(defaultValue) ? _defaultValues : isString(names) ? { [names]: defaultValue } : defaultValue), isGlobal, defaultValue);
    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));
    const setFieldValue = (name, value, options = {}) => {
      const field = get(_fields, name);
      let fieldValue = value;
      if (field) {
        const fieldReference = field._f;
        if (fieldReference) {
          !fieldReference.disabled && set(_formValues, name, getFieldValueAs(value, fieldReference));
          fieldValue = isHTMLElement(fieldReference.ref) && isNullOrUndefined(value) ? "" : value;
          if (isMultipleSelect(fieldReference.ref)) {
            [...fieldReference.ref.options].forEach((optionRef) => optionRef.selected = fieldValue.includes(optionRef.value));
          } else if (fieldReference.refs) {
            if (isCheckBoxInput(fieldReference.ref)) {
              fieldReference.refs.length > 1 ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) && (checkboxRef.checked = Array.isArray(fieldValue) ? !!fieldValue.find((data) => data === checkboxRef.value) : fieldValue === checkboxRef.value)) : fieldReference.refs[0] && (fieldReference.refs[0].checked = !!fieldValue);
            } else {
              fieldReference.refs.forEach((radioRef) => radioRef.checked = radioRef.value === fieldValue);
            }
          } else if (isFileInput(fieldReference.ref)) {
            fieldReference.ref.value = "";
          } else {
            fieldReference.ref.value = fieldValue;
            if (!fieldReference.ref.type) {
              _subjects.values.next({
                name,
                values: __spreadValues({}, _formValues)
              });
            }
          }
        }
      }
      (options.shouldDirty || options.shouldTouch) && updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);
      options.shouldValidate && trigger(name);
    };
    const setValues = (name, value, options) => {
      for (const fieldKey in value) {
        const fieldValue = value[fieldKey];
        const fieldName = `${name}.${fieldKey}`;
        const field = get(_fields, fieldName);
        (_names.array.has(name) || !isPrimitive(fieldValue) || field && !field._f) && !isDateObject(fieldValue) ? setValues(fieldName, fieldValue, options) : setFieldValue(fieldName, fieldValue, options);
      }
    };
    const setValue = (name, value, options = {}) => {
      const field = get(_fields, name);
      const isFieldArray = _names.array.has(name);
      const cloneValue = cloneObject(value);
      set(_formValues, name, cloneValue);
      if (isFieldArray) {
        _subjects.array.next({
          name,
          values: __spreadValues({}, _formValues)
        });
        if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) && options.shouldDirty) {
          _subjects.state.next({
            name,
            dirtyFields: getDirtyFields(_defaultValues, _formValues),
            isDirty: _getDirty(name, cloneValue)
          });
        }
      } else {
        field && !field._f && !isNullOrUndefined(cloneValue) ? setValues(name, cloneValue, options) : setFieldValue(name, cloneValue, options);
      }
      isWatched(name, _names) && _subjects.state.next(__spreadValues({}, _formState));
      _subjects.values.next({
        name,
        values: __spreadValues({}, _formValues)
      });
      !_state.mount && flushRootRender();
    };
    const onChange = (event) => __async(this, null, function* () {
      const target = event.target;
      let name = target.name;
      let isFieldValueUpdated = true;
      const field = get(_fields, name);
      const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);
      const _updateIsFieldValueUpdated = (fieldValue) => {
        isFieldValueUpdated = Number.isNaN(fieldValue) || fieldValue === get(_formValues, name, fieldValue);
      };
      if (field) {
        let error;
        let isValid;
        const fieldValue = getCurrentFieldValue();
        const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;
        const shouldSkipValidation = !hasValidation(field._f) && !_options.resolver && !get(_formState.errors, name) && !field._f.deps || skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);
        const watched = isWatched(name, _names, isBlurEvent);
        set(_formValues, name, fieldValue);
        if (isBlurEvent) {
          field._f.onBlur && field._f.onBlur(event);
          delayErrorCallback && delayErrorCallback(0);
        } else if (field._f.onChange) {
          field._f.onChange(event);
        }
        const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);
        const shouldRender = !isEmptyObject(fieldState) || watched;
        !isBlurEvent && _subjects.values.next({
          name,
          type: event.type,
          values: __spreadValues({}, _formValues)
        });
        if (shouldSkipValidation) {
          _proxyFormState.isValid && _updateValid();
          return shouldRender && _subjects.state.next(__spreadValues({ name }, watched ? {} : fieldState));
        }
        !isBlurEvent && watched && _subjects.state.next(__spreadValues({}, _formState));
        _updateIsValidating(true);
        if (_options.resolver) {
          const { errors } = yield _executeSchema([name]);
          _updateIsFieldValueUpdated(fieldValue);
          if (isFieldValueUpdated) {
            const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);
            const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);
            error = errorLookupResult.error;
            name = errorLookupResult.name;
            isValid = isEmptyObject(errors);
          }
        } else {
          error = (yield validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];
          _updateIsFieldValueUpdated(fieldValue);
          if (isFieldValueUpdated) {
            if (error) {
              isValid = false;
            } else if (_proxyFormState.isValid) {
              isValid = yield executeBuiltInValidation(_fields, true);
            }
          }
        }
        if (isFieldValueUpdated) {
          field._f.deps && trigger(field._f.deps);
          shouldRenderByError(name, isValid, error, fieldState);
        }
      }
    });
    const _focusInput = (ref, key) => {
      if (get(_formState.errors, key) && ref.focus) {
        ref.focus();
        return 1;
      }
      return;
    };
    const trigger = (_0, ..._1) => __async(this, [_0, ..._1], function* (name, options = {}) {
      let isValid;
      let validationResult;
      const fieldNames = convertToArrayPayload(name);
      _updateIsValidating(true);
      if (_options.resolver) {
        const errors = yield executeSchemaAndUpdateState(isUndefined$1(name) ? name : fieldNames);
        isValid = isEmptyObject(errors);
        validationResult = name ? !fieldNames.some((name2) => get(errors, name2)) : isValid;
      } else if (name) {
        validationResult = (yield Promise.all(fieldNames.map((fieldName) => __async(this, null, function* () {
          const field = get(_fields, fieldName);
          return yield executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);
        })))).every(Boolean);
        !(!validationResult && !_formState.isValid) && _updateValid();
      } else {
        validationResult = isValid = yield executeBuiltInValidation(_fields);
      }
      _subjects.state.next(__spreadProps(__spreadValues(__spreadValues({}, !isString(name) || _proxyFormState.isValid && isValid !== _formState.isValid ? {} : { name }), _options.resolver || !name ? { isValid } : {}), {
        errors: _formState.errors,
        isValidating: false
      }));
      options.shouldFocus && !validationResult && iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);
      return validationResult;
    });
    const getValues = (fieldNames) => {
      const values2 = __spreadValues(__spreadValues({}, _defaultValues), _state.mount ? _formValues : {});
      return isUndefined$1(fieldNames) ? values2 : isString(fieldNames) ? get(values2, fieldNames) : fieldNames.map((name) => get(values2, name));
    };
    const getFieldState = (name, formState) => ({
      invalid: !!get((formState || _formState).errors, name),
      isDirty: !!get((formState || _formState).dirtyFields, name),
      isTouched: !!get((formState || _formState).touchedFields, name),
      error: get((formState || _formState).errors, name)
    });
    const clearErrors = (name) => {
      name && convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));
      _subjects.state.next({
        errors: name ? _formState.errors : {}
      });
    };
    const setError = (name, error, options) => {
      const ref = (get(_fields, name, { _f: {} })._f || {}).ref;
      set(_formState.errors, name, __spreadProps(__spreadValues({}, error), {
        ref
      }));
      _subjects.state.next({
        name,
        errors: _formState.errors,
        isValid: false
      });
      options && options.shouldFocus && ref && ref.focus && ref.focus();
    };
    const watch = (name, defaultValue) => isFunction(name) ? _subjects.values.subscribe({
      next: (payload) => name(_getWatch(void 0, defaultValue), payload)
    }) : _getWatch(name, defaultValue, true);
    const unregister = (name, options = {}) => {
      for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {
        _names.mount.delete(fieldName);
        _names.array.delete(fieldName);
        if (!options.keepValue) {
          unset(_fields, fieldName);
          unset(_formValues, fieldName);
        }
        !options.keepError && unset(_formState.errors, fieldName);
        !options.keepDirty && unset(_formState.dirtyFields, fieldName);
        !options.keepTouched && unset(_formState.touchedFields, fieldName);
        !_options.shouldUnregister && !options.keepDefaultValue && unset(_defaultValues, fieldName);
      }
      _subjects.values.next({
        values: __spreadValues({}, _formValues)
      });
      _subjects.state.next(__spreadValues(__spreadValues({}, _formState), !options.keepDirty ? {} : { isDirty: _getDirty() }));
      !options.keepIsValid && _updateValid();
    };
    const _updateDisabledField = ({ disabled, name, field, fields, value }) => {
      if (isBoolean(disabled)) {
        const inputValue = disabled ? void 0 : isUndefined$1(value) ? getFieldValue(field ? field._f : get(fields, name)._f) : value;
        set(_formValues, name, inputValue);
        updateTouchAndDirty(name, inputValue, false, false, true);
      }
    };
    const register = (name, options = {}) => {
      let field = get(_fields, name);
      const disabledIsDefined = isBoolean(options.disabled);
      set(_fields, name, __spreadProps(__spreadValues({}, field || {}), {
        _f: __spreadValues(__spreadProps(__spreadValues({}, field && field._f ? field._f : { ref: { name } }), {
          name,
          mount: true
        }), options)
      }));
      _names.mount.add(name);
      if (field) {
        _updateDisabledField({
          field,
          disabled: options.disabled,
          name,
          value: options.value
        });
      } else {
        updateValidAndValue(name, true, options.value);
      }
      return __spreadProps(__spreadValues(__spreadValues({}, disabledIsDefined ? { disabled: options.disabled } : {}), _options.progressive ? {
        required: !!options.required,
        min: getRuleValue(options.min),
        max: getRuleValue(options.max),
        minLength: getRuleValue(options.minLength),
        maxLength: getRuleValue(options.maxLength),
        pattern: getRuleValue(options.pattern)
      } : {}), {
        name,
        onChange,
        onBlur: onChange,
        ref: (ref) => {
          if (ref) {
            register(name, options);
            field = get(_fields, name);
            const fieldRef = isUndefined$1(ref.value) ? ref.querySelectorAll ? ref.querySelectorAll("input,select,textarea")[0] || ref : ref : ref;
            const radioOrCheckbox = isRadioOrCheckbox(fieldRef);
            const refs = field._f.refs || [];
            if (radioOrCheckbox ? refs.find((option) => option === fieldRef) : fieldRef === field._f.ref) {
              return;
            }
            set(_fields, name, {
              _f: __spreadValues(__spreadValues({}, field._f), radioOrCheckbox ? {
                refs: [
                  ...refs.filter(live),
                  fieldRef,
                  ...Array.isArray(get(_defaultValues, name)) ? [{}] : []
                ],
                ref: { type: fieldRef.type, name }
              } : { ref: fieldRef })
            });
            updateValidAndValue(name, false, void 0, fieldRef);
          } else {
            field = get(_fields, name, {});
            if (field._f) {
              field._f.mount = false;
            }
            (_options.shouldUnregister || options.shouldUnregister) && !(isNameInFieldArray(_names.array, name) && _state.action) && _names.unMount.add(name);
          }
        }
      });
    };
    const _focusError = () => _options.shouldFocusError && iterateFieldsByAction(_fields, _focusInput, _names.mount);
    const _disableForm = (disabled) => {
      if (isBoolean(disabled)) {
        _subjects.state.next({ disabled });
        iterateFieldsByAction(_fields, (ref, name) => {
          let requiredDisabledState = disabled;
          const currentField = get(_fields, name);
          if (currentField && isBoolean(currentField._f.disabled)) {
            requiredDisabledState || (requiredDisabledState = currentField._f.disabled);
          }
          ref.disabled = requiredDisabledState;
        }, 0, false);
      }
    };
    const handleSubmit = (onValid, onInvalid) => (e) => __async(this, null, function* () {
      let onValidError = void 0;
      if (e) {
        e.preventDefault && e.preventDefault();
        e.persist && e.persist();
      }
      let fieldValues = cloneObject(_formValues);
      _subjects.state.next({
        isSubmitting: true
      });
      if (_options.resolver) {
        const { errors, values: values2 } = yield _executeSchema();
        _formState.errors = errors;
        fieldValues = values2;
      } else {
        yield executeBuiltInValidation(_fields);
      }
      unset(_formState.errors, "root");
      if (isEmptyObject(_formState.errors)) {
        _subjects.state.next({
          errors: {}
        });
        try {
          yield onValid(fieldValues, e);
        } catch (error) {
          onValidError = error;
        }
      } else {
        if (onInvalid) {
          yield onInvalid(__spreadValues({}, _formState.errors), e);
        }
        _focusError();
        setTimeout(_focusError);
      }
      _subjects.state.next({
        isSubmitted: true,
        isSubmitting: false,
        isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,
        submitCount: _formState.submitCount + 1,
        errors: _formState.errors
      });
      if (onValidError) {
        throw onValidError;
      }
    });
    const resetField = (name, options = {}) => {
      if (get(_fields, name)) {
        if (isUndefined$1(options.defaultValue)) {
          setValue(name, cloneObject(get(_defaultValues, name)));
        } else {
          setValue(name, options.defaultValue);
          set(_defaultValues, name, cloneObject(options.defaultValue));
        }
        if (!options.keepTouched) {
          unset(_formState.touchedFields, name);
        }
        if (!options.keepDirty) {
          unset(_formState.dirtyFields, name);
          _formState.isDirty = options.defaultValue ? _getDirty(name, cloneObject(get(_defaultValues, name))) : _getDirty();
        }
        if (!options.keepError) {
          unset(_formState.errors, name);
          _proxyFormState.isValid && _updateValid();
        }
        _subjects.state.next(__spreadValues({}, _formState));
      }
    };
    const _reset = (formValues, keepStateOptions = {}) => {
      const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;
      const cloneUpdatedValues = cloneObject(updatedValues);
      const values2 = formValues && !isEmptyObject(formValues) ? cloneUpdatedValues : _defaultValues;
      if (!keepStateOptions.keepDefaultValues) {
        _defaultValues = updatedValues;
      }
      if (!keepStateOptions.keepValues) {
        if (keepStateOptions.keepDirtyValues) {
          for (const fieldName of _names.mount) {
            get(_formState.dirtyFields, fieldName) ? set(values2, fieldName, get(_formValues, fieldName)) : setValue(fieldName, get(values2, fieldName));
          }
        } else {
          if (isWeb && isUndefined$1(formValues)) {
            for (const name of _names.mount) {
              const field = get(_fields, name);
              if (field && field._f) {
                const fieldReference = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;
                if (isHTMLElement(fieldReference)) {
                  const form = fieldReference.closest("form");
                  if (form) {
                    form.reset();
                    break;
                  }
                }
              }
            }
          }
          _fields = {};
        }
        _formValues = props.shouldUnregister ? keepStateOptions.keepDefaultValues ? cloneObject(_defaultValues) : {} : cloneObject(values2);
        _subjects.array.next({
          values: __spreadValues({}, values2)
        });
        _subjects.values.next({
          values: __spreadValues({}, values2)
        });
      }
      _names = {
        mount: /* @__PURE__ */ new Set(),
        unMount: /* @__PURE__ */ new Set(),
        array: /* @__PURE__ */ new Set(),
        watch: /* @__PURE__ */ new Set(),
        watchAll: false,
        focus: ""
      };
      !_state.mount && flushRootRender();
      _state.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid || !!keepStateOptions.keepDirtyValues;
      _state.watch = !!props.shouldUnregister;
      _subjects.state.next({
        submitCount: keepStateOptions.keepSubmitCount ? _formState.submitCount : 0,
        isDirty: keepStateOptions.keepDirty ? _formState.isDirty : !!(keepStateOptions.keepDefaultValues && !deepEqual(formValues, _defaultValues)),
        isSubmitted: keepStateOptions.keepIsSubmitted ? _formState.isSubmitted : false,
        dirtyFields: keepStateOptions.keepDirtyValues ? keepStateOptions.keepDefaultValues && _formValues ? getDirtyFields(_defaultValues, _formValues) : _formState.dirtyFields : keepStateOptions.keepDefaultValues && formValues ? getDirtyFields(_defaultValues, formValues) : {},
        touchedFields: keepStateOptions.keepTouched ? _formState.touchedFields : {},
        errors: keepStateOptions.keepErrors ? _formState.errors : {},
        isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful ? _formState.isSubmitSuccessful : false,
        isSubmitting: false
      });
    };
    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues) ? formValues(_formValues) : formValues, keepStateOptions);
    const setFocus = (name, options = {}) => {
      const field = get(_fields, name);
      const fieldReference = field && field._f;
      if (fieldReference) {
        const fieldRef = fieldReference.refs ? fieldReference.refs[0] : fieldReference.ref;
        if (fieldRef.focus) {
          fieldRef.focus();
          options.shouldSelect && fieldRef.select();
        }
      }
    };
    const _updateFormState = (updatedFormState) => {
      _formState = __spreadValues(__spreadValues({}, _formState), updatedFormState);
    };
    const _resetDefaultValues = () => isFunction(_options.defaultValues) && _options.defaultValues().then((values2) => {
      reset(values2, _options.resetOptions);
      _subjects.state.next({
        isLoading: false
      });
    });
    return {
      control: {
        register,
        unregister,
        getFieldState,
        handleSubmit,
        setError,
        _executeSchema,
        _getWatch,
        _getDirty,
        _updateValid,
        _removeUnmounted,
        _updateFieldArray,
        _updateDisabledField,
        _getFieldArray,
        _reset,
        _resetDefaultValues,
        _updateFormState,
        _disableForm,
        _subjects,
        _proxyFormState,
        _setErrors,
        get _fields() {
          return _fields;
        },
        get _formValues() {
          return _formValues;
        },
        get _state() {
          return _state;
        },
        set _state(value) {
          _state = value;
        },
        get _defaultValues() {
          return _defaultValues;
        },
        get _names() {
          return _names;
        },
        set _names(value) {
          _names = value;
        },
        get _formState() {
          return _formState;
        },
        set _formState(value) {
          _formState = value;
        },
        get _options() {
          return _options;
        },
        set _options(value) {
          _options = __spreadValues(__spreadValues({}, _options), value);
        }
      },
      trigger,
      register,
      handleSubmit,
      watch,
      setValue,
      getValues,
      reset,
      resetField,
      clearErrors,
      unregister,
      setError,
      setFocus,
      getFieldState
    };
  }
  function useForm(props = {}) {
    const _formControl = React.useRef();
    const _values = React.useRef();
    const [formState, updateFormState] = React.useState({
      isDirty: false,
      isValidating: false,
      isLoading: isFunction(props.defaultValues),
      isSubmitted: false,
      isSubmitting: false,
      isSubmitSuccessful: false,
      isValid: false,
      submitCount: 0,
      dirtyFields: {},
      touchedFields: {},
      errors: props.errors || {},
      disabled: props.disabled || false,
      defaultValues: isFunction(props.defaultValues) ? void 0 : props.defaultValues
    });
    if (!_formControl.current) {
      _formControl.current = __spreadProps(__spreadValues({}, createFormControl(props, () => updateFormState((formState2) => __spreadValues({}, formState2)))), {
        formState
      });
    }
    const control = _formControl.current.control;
    control._options = props;
    useSubscribe({
      subject: control._subjects.state,
      next: (value) => {
        if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {
          updateFormState(__spreadValues({}, control._formState));
        }
      }
    });
    React.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);
    React.useEffect(() => {
      if (control._proxyFormState.isDirty) {
        const isDirty = control._getDirty();
        if (isDirty !== formState.isDirty) {
          control._subjects.state.next({
            isDirty
          });
        }
      }
    }, [control, formState.isDirty]);
    React.useEffect(() => {
      if (props.values && !deepEqual(props.values, _values.current)) {
        control._reset(props.values, control._options.resetOptions);
        _values.current = props.values;
        updateFormState((state) => __spreadValues({}, state));
      } else {
        control._resetDefaultValues();
      }
    }, [props.values, control]);
    React.useEffect(() => {
      if (props.errors) {
        control._setErrors(props.errors);
      }
    }, [props.errors, control]);
    React.useEffect(() => {
      if (!control._state.mount) {
        control._updateValid();
        control._state.mount = true;
      }
      if (control._state.watch) {
        control._state.watch = false;
        control._subjects.state.next(__spreadValues({}, control._formState));
      }
      control._removeUnmounted();
    });
    React.useEffect(() => {
      props.shouldUnregister && control._subjects.values.next({
        values: control._getWatch()
      });
    }, [props.shouldUnregister, control]);
    _formControl.current.formState = getProxyFormState(formState, control);
    return _formControl.current;
  }
  const filter = material.createFilterOptions();
  function BasicEdit(props) {
    const {
      item,
      itemFields,
      onClose: onClose2 = () => {
      },
      onSubmit = () => {
      },
      children = []
    } = props;
    React.useEffect(() => {
      for (const [key, field] of Object.entries(itemFields)) {
        setValue(field.name, item[field.name] || field.defaultValue || "");
      }
    }, [item]);
    const forms = useForm({
      defaultValues: {}
    });
    const { handleSubmit, setValue, control } = forms;
    return /* @__PURE__ */ jsxRuntimeExports.jsx(material.Box, { className: "BasicEdit", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
      "form",
      {
        className: "vxg-form-field",
        onSubmit: handleSubmit((data) => __async(this, null, function* () {
          const selitem = __spreadValues({}, item);
          for (const k in data) {
            selitem[k] = data[k];
          }
          onSubmit(selitem);
        })),
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs(material.Grid, { container: true, spacing: 3, children: [
          Object.entries(itemFields).map(([index2, field]) => {
            return /* @__PURE__ */ jsxRuntimeExports.jsx(material.Grid, { item: true, xs: field.size, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              Controller,
              {
                name: index2,
                control,
                defaultValue: item[index2] || "",
                render: ({
                  field: { onChange, onBlur, value },
                  fieldState: { error }
                }) => field.type === "selection" ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                  material.Autocomplete,
                  {
                    freeSolo: true,
                    id: "combo-box",
                    options: field.options,
                    fullWidth: true,
                    selectOnFocus: true,
                    onBlur,
                    handleHomeEndKeys: true,
                    disableClearable: value == "",
                    disabled: !field.editable,
                    value,
                    getOptionLabel: (option) => option || "",
                    filterOptions: (options, params) => {
                      const filtered = filter(options, params);
                      const { inputValue } = params;
                      const isExisting = options.some(
                        (option) => inputValue === option
                      );
                      if (inputValue != "" && !isExisting) {
                        setTimeout(() => {
                          onChange(inputValue);
                        }, 0);
                        return filtered;
                      }
                      return filtered;
                    },
                    onChange: (event, selectedValue) => {
                      onChange(selectedValue || "");
                    },
                    renderInput: (params) => /* @__PURE__ */ jsxRuntimeExports.jsx(
                      material.TextField,
                      __spreadProps(__spreadValues({}, params), {
                        label: field.label,
                        onBlur,
                        error: !(error == null),
                        helperText: error != null ? error.message : null
                      })
                    )
                  }
                ) : /* @__PURE__ */ jsxRuntimeExports.jsx(
                  material.TextField,
                  {
                    label: field.label,
                    fullWidth: true,
                    select: field.inputType === "select",
                    disabled: !field.editable,
                    onChange,
                    value,
                    onBlur,
                    error: !(error == null),
                    helperText: error != null ? error.message : null,
                    sx: {
                      textAlign: "left"
                    },
                    children: field.inputType === "select" ? Object.keys(field.options).map((option) => {
                      var _a;
                      return /* @__PURE__ */ jsxRuntimeExports.jsx(material.MenuItem, { value: option, children: (_a = field.options[option]) == null ? void 0 : _a.label }, option);
                    }) : null
                  },
                  index2
                ),
                rules: field.required ? {
                  required: field.required,
                  validate: field.validate || ((value) => true)
                } : {}
              }
            ) }, index2);
          }),
          children.length != 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx(material.Grid, { item: true, xs: 12, children }) : null,
          /* @__PURE__ */ jsxRuntimeExports.jsx(material.Grid, { item: true, xs: 12, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
            material.Grid,
            {
              container: true,
              justifyContent: "space-between",
              alignItems: "center",
              marginTop: 2,
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(material.Grid, { item: true, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  BasicButton,
                  {
                    variant: "outlined",
                    size: "large",
                    onClick: () => onClose2(),
                    children: "Cancel"
                  }
                ) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(material.Grid, { item: true, children: /* @__PURE__ */ jsxRuntimeExports.jsx(BasicButton, { type: "submit", variant: "outlined", size: "large", children: "SAVE" }) })
              ]
            }
          ) })
        ] })
      }
    ) });
  }
  var Defaults = {
    defaultAmount: 0,
    defaultCurrency: "USD",
    defaultPrecision: 2
  };
  var Globals = {
    globalLocale: "en-US",
    globalFormat: "$0,0.00",
    globalRoundingMode: "HALF_EVEN",
    globalFormatRoundingMode: "HALF_AWAY_FROM_ZERO",
    globalExchangeRatesApi: {
      endpoint: void 0,
      headers: void 0,
      propertyPath: void 0
    }
  };
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof = function(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof(obj);
  }
  function _toArray(arr) {
    return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
      return Array.from(iter);
  }
  function _unsupportedIterableToArray(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++)
      arr2[i] = arr[i];
    return arr2;
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var Static = {
    /**
     * Returns an array of Dinero objects, normalized to the same precision (the highest).
     *
     * @memberof module:Dinero
     * @method
     *
     * @param {Dinero[]} objects - An array of Dinero objects
     *
     * @example
     * // returns an array of Dinero objects
     * // both with a precision of 3
     * // and an amount of 1000
     * Dinero.normalizePrecision([
     *   Dinero({ amount: 100, precision: 2 }),
     *   Dinero({ amount: 1000, precision: 3 })
     * ])
     *
     * @return {Dinero[]}
     */
    normalizePrecision: function normalizePrecision(objects) {
      var highestPrecision = objects.reduce(function(a, b) {
        return Math.max(a.getPrecision(), b.getPrecision());
      });
      return objects.map(function(object) {
        return object.getPrecision() !== highestPrecision ? object.convertPrecision(highestPrecision) : object;
      });
    },
    /**
     * Returns the smallest Dinero object from an array of Dinero objects
     *
     * @memberof module:Dinero
     * @method
     *
     * @param {Dinero[]} objects - An array of Dinero objects
     *
     * @example
     * // returns the smallest Dinero object with amount of 500 from an array of Dinero objects with different precisions
     * Dinero.minimum([
     *   Dinero({ amount: 500, precision: 3 }),
     *   Dinero({ amount: 100, precision: 2 })
     * ])
     * @example
     * // returns the smallest Dinero object with amount of 50 from an array of Dinero objects
     * Dinero.minimum([
     *   Dinero({ amount: 50 }),
     *   Dinero({ amount: 100 })
     * ])
     *
     * @return {Dinero[]}
     */
    minimum: function minimum(objects) {
      var _objects = _toArray(objects), firstObject = _objects[0], tailObjects = _objects.slice(1);
      var currentMinimum = firstObject;
      tailObjects.forEach(function(obj) {
        currentMinimum = currentMinimum.lessThan(obj) ? currentMinimum : obj;
      });
      return currentMinimum;
    },
    /**
     * Returns the biggest Dinero object from an array of Dinero objects
     *
     * @memberof module:Dinero
     * @method
     *
     * @param {Dinero[]} objects - An array of Dinero objects
     *
     * @example
     * // returns the biggest Dinero object with amount of 20, from an array of Dinero objects with different precisions
     * Dinero.maximum([
     *   Dinero({ amount: 20, precision: 2 }),
     *   Dinero({ amount: 150, precision: 3 })
     * ])
     * @example
     * // returns the biggest Dinero object with amount of 100, from an array of Dinero objects
     * Dinero.maximum([
     *   Dinero({ amount: 100 }),
     *   Dinero({ amount: 50 })
     * ])
     *
     * @return {Dinero[]}
     */
    maximum: function maximum(objects) {
      var _objects2 = _toArray(objects), firstObject = _objects2[0], tailObjects = _objects2.slice(1);
      var currentMaximum = firstObject;
      tailObjects.forEach(function(obj) {
        currentMaximum = currentMaximum.greaterThan(obj) ? currentMaximum : obj;
      });
      return currentMaximum;
    }
  };
  function isNumeric(value) {
    return !isNaN(parseInt(value)) && isFinite(value);
  }
  function isPercentage(percentage) {
    return isNumeric(percentage) && percentage <= 100 && percentage >= 0;
  }
  function areValidRatios(ratios) {
    return ratios.length > 0 && ratios.every(function(ratio) {
      return ratio >= 0;
    }) && ratios.some(function(ratio) {
      return ratio > 0;
    });
  }
  function isEven(value) {
    return value % 2 === 0;
  }
  function isFloat(value) {
    return isNumeric(value) && !Number.isInteger(value);
  }
  function countFractionDigits() {
    var number = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
    var stringRepresentation = number.toString();
    if (stringRepresentation.indexOf("e-") > 0) {
      return parseInt(stringRepresentation.split("e-")[1]);
    } else {
      var fractionDigits = stringRepresentation.split(".")[1];
      return fractionDigits ? fractionDigits.length : 0;
    }
  }
  function isHalf(number) {
    return Math.abs(number) % 1 === 0.5;
  }
  function getJSON(url) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return new Promise(function(resolve, reject) {
      var request = Object.assign(new XMLHttpRequest(), {
        onreadystatechange: function onreadystatechange() {
          if (request.readyState === 4) {
            if (request.status >= 200 && request.status < 400)
              resolve(JSON.parse(request.responseText));
            else
              reject(new Error(request.statusText));
          }
        },
        onerror: function onerror() {
          reject(new Error("Network error"));
        }
      });
      request.open("GET", url, true);
      setXHRHeaders(request, options.headers);
      request.send();
    });
  }
  function setXHRHeaders(xhr) {
    var headers = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    for (var header in headers) {
      xhr.setRequestHeader(header, headers[header]);
    }
    return xhr;
  }
  function isUndefined(value) {
    return typeof value === "undefined";
  }
  function flattenObject(object) {
    var separator = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : ".";
    var finalObject = {};
    Object.entries(object).forEach(function(item) {
      if (_typeof(item[1]) === "object") {
        var flatObject = flattenObject(item[1]);
        Object.entries(flatObject).forEach(function(node2) {
          finalObject[item[0] + separator + node2[0]] = node2[1];
        });
      } else {
        finalObject[item[0]] = item[1];
      }
    });
    return finalObject;
  }
  function isThenable(value) {
    return Boolean(value) && (_typeof(value) === "object" || typeof value === "function") && typeof value.then === "function";
  }
  function Calculator() {
    var floatMultiply = function floatMultiply2(a, b) {
      var getFactor = function getFactor2(number) {
        return Math.pow(10, countFractionDigits(number));
      };
      var factor = Math.max(getFactor(a), getFactor(b));
      return Math.round(a * factor) * Math.round(b * factor) / (factor * factor);
    };
    var roundingModes = {
      HALF_ODD: function HALF_ODD(number) {
        var rounded = Math.round(number);
        return isHalf(number) ? isEven(rounded) ? rounded - 1 : rounded : rounded;
      },
      HALF_EVEN: function HALF_EVEN(number) {
        var rounded = Math.round(number);
        return isHalf(number) ? isEven(rounded) ? rounded : rounded - 1 : rounded;
      },
      HALF_UP: function HALF_UP(number) {
        return Math.round(number);
      },
      HALF_DOWN: function HALF_DOWN(number) {
        return isHalf(number) ? Math.floor(number) : Math.round(number);
      },
      HALF_TOWARDS_ZERO: function HALF_TOWARDS_ZERO(number) {
        return isHalf(number) ? Math.sign(number) * Math.floor(Math.abs(number)) : Math.round(number);
      },
      HALF_AWAY_FROM_ZERO: function HALF_AWAY_FROM_ZERO(number) {
        return isHalf(number) ? Math.sign(number) * Math.ceil(Math.abs(number)) : Math.round(number);
      },
      DOWN: function DOWN(number) {
        return Math.floor(number);
      }
    };
    return {
      /**
       * Returns the sum of two numbers.
       * @ignore
       *
       * @param {Number} a - The first number to add.
       * @param {Number} b - The second number to add.
       *
       * @return {Number}
       */
      add: function add(a, b) {
        return a + b;
      },
      /**
       * Returns the difference of two numbers.
       * @ignore
       *
       * @param {Number} a - The first number to subtract.
       * @param {Number} b - The second number to subtract.
       *
       * @return {Number}
       */
      subtract: function subtract(a, b) {
        return a - b;
      },
      /**
       * Returns the product of two numbers.
       * @ignore
       *
       * @param {Number} a - The first number to multiply.
       * @param {Number} b - The second number to multiply.
       *
       * @return {Number}
       */
      multiply: function multiply(a, b) {
        return isFloat(a) || isFloat(b) ? floatMultiply(a, b) : a * b;
      },
      /**
       * Returns the quotient of two numbers.
       * @ignore
       *
       * @param {Number} a - The first number to divide.
       * @param {Number} b - The second number to divide.
       *
       * @return {Number}
       */
      divide: function divide(a, b) {
        return a / b;
      },
      /**
       * Returns the remainder of two numbers.
       * @ignore
       *
       * @param  {Number} a - The first number to divide.
       * @param  {Number} b - The second number to divide.
       *
       * @return {Number}
       */
      modulo: function modulo(a, b) {
        return a % b;
      },
      /**
       * Returns a rounded number based off a specific rounding mode.
       * @ignore
       *
       * @param {Number} number - The number to round.
       * @param {String} [roundingMode='HALF_EVEN'] - The rounding mode to use.
       *
       * @returns {Number}
       */
      round: function round2(number) {
        var roundingMode = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "HALF_EVEN";
        return roundingModes[roundingMode](number);
      }
    };
  }
  var calculator = Calculator();
  function Format(format) {
    var matches = /^(?:(\$|USD)?0(?:(,)0)?(\.)?(0+)?|0(?:(,)0)?(\.)?(0+)?\s?(dollar)?)$/gm.exec(format);
    return {
      /**
       * Returns the matches.
       * @ignore
       *
       * @return {Array}
       */
      getMatches: function getMatches() {
        return matches !== null ? matches.slice(1).filter(function(match2) {
          return !isUndefined(match2);
        }) : [];
      },
      /**
       * Returns the amount of fraction digits to display.
       * @ignore
       *
       * @return {Number}
       */
      getMinimumFractionDigits: function getMinimumFractionDigits() {
        var decimalPosition = function decimalPosition2(match2) {
          return match2 === ".";
        };
        return !isUndefined(this.getMatches().find(decimalPosition)) ? this.getMatches()[calculator.add(this.getMatches().findIndex(decimalPosition), 1)].split("").length : 0;
      },
      /**
       * Returns the currency display mode.
       * @ignore
       *
       * @return {String}
       */
      getCurrencyDisplay: function getCurrencyDisplay() {
        var modes2 = {
          USD: "code",
          dollar: "name",
          $: "symbol"
        };
        return modes2[this.getMatches().find(function(match2) {
          return match2 === "USD" || match2 === "dollar" || match2 === "$";
        })];
      },
      /**
       * Returns the formatting style.
       * @ignore
       *
       * @return {String}
       */
      getStyle: function getStyle() {
        return !isUndefined(this.getCurrencyDisplay(this.getMatches())) ? "currency" : "decimal";
      },
      /**
       * Returns whether grouping should be used or not.
       * @ignore
       *
       * @return {Boolean}
       */
      getUseGrouping: function getUseGrouping() {
        return !isUndefined(this.getMatches().find(function(match2) {
          return match2 === ",";
        }));
      }
    };
  }
  function CurrencyConverter(options) {
    var mergeTags = function mergeTags2() {
      var string = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
      var tags = arguments.length > 1 ? arguments[1] : void 0;
      for (var tag in tags) {
        string = string.replace("{{".concat(tag, "}}"), tags[tag]);
      }
      return string;
    };
    var getRatesFromRestApi = function getRatesFromRestApi2(from2, to) {
      return getJSON(mergeTags(options.endpoint, {
        from: from2,
        to
      }), {
        headers: options.headers
      });
    };
    return {
      /**
       * Returns the exchange rate.
       * @ignore
       *
       * @param  {String} from - The base currency.
       * @param  {String} to   - The destination currency.
       *
       * @return {Promise}
       */
      getExchangeRate: function getExchangeRate(from2, to) {
        return (isThenable(options.endpoint) ? options.endpoint : getRatesFromRestApi(from2, to)).then(function(data) {
          return flattenObject(data)[mergeTags(options.propertyPath, {
            from: from2,
            to
          })];
        });
      }
    };
  }
  function assert(condition, errorMessage) {
    var ErrorType = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : Error;
    if (!condition)
      throw new ErrorType(errorMessage);
  }
  function assertPercentage(percentage) {
    assert(isPercentage(percentage), "You must provide a numeric value between 0 and 100.", RangeError);
  }
  function assertValidRatios(ratios) {
    assert(areValidRatios(ratios), "You must provide a non-empty array of numeric values greater than 0.", TypeError);
  }
  function assertInteger(number) {
    assert(Number.isInteger(number), "You must provide an integer.", TypeError);
  }
  var calculator$1 = Calculator();
  var Dinero = function Dinero2(options) {
    var _Object$assign = Object.assign({}, {
      amount: Dinero2.defaultAmount,
      currency: Dinero2.defaultCurrency,
      precision: Dinero2.defaultPrecision
    }, options), amount = _Object$assign.amount, currency = _Object$assign.currency, precision = _Object$assign.precision;
    assertInteger(amount);
    assertInteger(precision);
    var globalLocale = Dinero2.globalLocale, globalFormat = Dinero2.globalFormat, globalRoundingMode = Dinero2.globalRoundingMode, globalFormatRoundingMode = Dinero2.globalFormatRoundingMode;
    var globalExchangeRatesApi = Object.assign({}, Dinero2.globalExchangeRatesApi);
    var create = function create2(options2) {
      var obj = Object.assign({}, Object.assign({}, {
        amount,
        currency,
        precision
      }, options2), Object.assign({}, {
        locale: this.locale
      }, options2));
      return Object.assign(Dinero2({
        amount: obj.amount,
        currency: obj.currency,
        precision: obj.precision
      }), {
        locale: obj.locale
      });
    };
    var assertSameCurrency = function assertSameCurrency2(comparator) {
      assert(this.hasSameCurrency(comparator), "You must provide a Dinero instance with the same currency.", TypeError);
    };
    return {
      /**
       * Returns the amount.
       *
       * @example
       * // returns 500
       * Dinero({ amount: 500 }).getAmount()
       *
       * @return {Number}
       */
      getAmount: function getAmount() {
        return amount;
      },
      /**
       * Returns the currency.
       *
       * @example
       * // returns 'EUR'
       * Dinero({ currency: 'EUR' }).getCurrency()
       *
       * @return {String}
       */
      getCurrency: function getCurrency() {
        return currency;
      },
      /**
       * Returns the locale.
       *
       * @example
       * // returns 'fr-FR'
       * Dinero().setLocale('fr-FR').getLocale()
       *
       * @return {String}
       */
      getLocale: function getLocale() {
        return this.locale || globalLocale;
      },
      /**
       * Returns a new Dinero object with an embedded locale.
       *
       * @param {String} newLocale - The new locale as an {@link http://tools.ietf.org/html/rfc5646 BCP 47 language tag}.
       *
       * @example
       * // Returns a Dinero object with locale 'ja-JP'
       * Dinero().setLocale('ja-JP')
       *
       * @return {Dinero}
       */
      setLocale: function setLocale(newLocale) {
        return create.call(this, {
          locale: newLocale
        });
      },
      /**
       * Returns the precision.
       *
       * @example
       * // returns 3
       * Dinero({ precision: 3 }).getPrecision()
       *
       * @return {Number}
       */
      getPrecision: function getPrecision() {
        return precision;
      },
      /**
       * Returns a new Dinero object with a new precision and a converted amount.
       *
       * By default, fractional minor currency units are rounded using the **half to even** rule ([banker's rounding](http://wiki.c2.com/?BankersRounding)).
       * This can be necessary when you need to convert objects to a smaller precision.
       *
       * Rounding *can* lead to accuracy issues as you chain many times. Consider a minimal amount of subsequent conversions for safer results.
       * You can also specify a different `roundingMode` to better fit your needs.
       *
       * @param {Number} newPrecision - The new precision.
       * @param {String} [roundingMode='HALF_EVEN'] - The rounding mode to use: `'HALF_ODD'`, `'HALF_EVEN'`, `'HALF_UP'`, `'HALF_DOWN'`, `'HALF_TOWARDS_ZERO'`, `'HALF_AWAY_FROM_ZERO'` or `'DOWN'`.
       *
       * @example
       * // Returns a Dinero object with precision 3 and amount 1000
       * Dinero({ amount: 100, precision: 2 }).convertPrecision(3)
       *
       * @throws {TypeError} If `newPrecision` is invalid.
       *
       * @return {Dinero}
       */
      convertPrecision: function convertPrecision(newPrecision) {
        var roundingMode = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : globalFormatRoundingMode;
        assertInteger(newPrecision);
        var precision2 = this.getPrecision();
        var isNewPrecisionLarger = newPrecision > precision2;
        var operation = isNewPrecisionLarger ? calculator$1.multiply : calculator$1.divide;
        var terms = isNewPrecisionLarger ? [newPrecision, precision2] : [precision2, newPrecision];
        var factor = Math.pow(10, calculator$1.subtract.apply(calculator$1, terms));
        return create.call(this, {
          amount: calculator$1.round(operation(this.getAmount(), factor), roundingMode),
          precision: newPrecision
        });
      },
      /**
       * Returns a new Dinero object that represents the sum of this and an other Dinero object.
       *
       * If Dinero objects have a different `precision`, they will be first converted to the highest.
       *
       * @param {Dinero} addend - The Dinero object to add.
       *
       * @example
       * // returns a Dinero object with amount 600
       * Dinero({ amount: 400 }).add(Dinero({ amount: 200 }))
       * @example
       * // returns a Dinero object with amount 144545 and precision 4
       * Dinero({ amount: 400 }).add(Dinero({ amount: 104545, precision: 4 }))
       *
       * @throws {TypeError} If `addend` has a different currency.
       *
       * @return {Dinero}
       */
      add: function add(addend) {
        assertSameCurrency.call(this, addend);
        var addends = Dinero2.normalizePrecision([this, addend]);
        return create.call(this, {
          amount: calculator$1.add(addends[0].getAmount(), addends[1].getAmount()),
          precision: addends[0].getPrecision()
        });
      },
      /**
       * Returns a new Dinero object that represents the difference of this and an other Dinero object.
       *
       * If Dinero objects have a different `precision`, they will be first converted to the highest.
       *
       * @param  {Dinero} subtrahend - The Dinero object to subtract.
       *
       * @example
       * // returns a Dinero object with amount 200
       * Dinero({ amount: 400 }).subtract(Dinero({ amount: 200 }))
       * @example
       * // returns a Dinero object with amount 64545 and precision 4
       * Dinero({ amount: 104545, precision: 4 }).subtract(Dinero({ amount: 400 }))
       *
       * @throws {TypeError} If `subtrahend` has a different currency.
       *
       * @return {Dinero}
       */
      subtract: function subtract(subtrahend) {
        assertSameCurrency.call(this, subtrahend);
        var subtrahends = Dinero2.normalizePrecision([this, subtrahend]);
        return create.call(this, {
          amount: calculator$1.subtract(subtrahends[0].getAmount(), subtrahends[1].getAmount()),
          precision: subtrahends[0].getPrecision()
        });
      },
      /**
       * Returns a new Dinero object that represents the multiplied value by the given factor.
       *
       * By default, fractional minor currency units are rounded using the **half to even** rule ([banker's rounding](http://wiki.c2.com/?BankersRounding)).
       *
       * Rounding *can* lead to accuracy issues as you chain many times. Consider a minimal amount of subsequent calculations for safer results.
       * You can also specify a different `roundingMode` to better fit your needs.
       *
       * @param  {Number} multiplier - The factor to multiply by.
       * @param  {String} [roundingMode='HALF_EVEN'] - The rounding mode to use: `'HALF_ODD'`, `'HALF_EVEN'`, `'HALF_UP'`, `'HALF_DOWN'`, `'HALF_TOWARDS_ZERO'`, `'HALF_AWAY_FROM_ZERO'` or `'DOWN'`.
       *
       * @example
       * // returns a Dinero object with amount 1600
       * Dinero({ amount: 400 }).multiply(4)
       * @example
       * // returns a Dinero object with amount 800
       * Dinero({ amount: 400 }).multiply(2.001)
       * @example
       * // returns a Dinero object with amount 801
       * Dinero({ amount: 400 }).multiply(2.00125, 'HALF_UP')
       *
       * @return {Dinero}
       */
      multiply: function multiply(multiplier) {
        var roundingMode = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : globalRoundingMode;
        return create.call(this, {
          amount: calculator$1.round(calculator$1.multiply(this.getAmount(), multiplier), roundingMode)
        });
      },
      /**
       * Returns a new Dinero object that represents the divided value by the given factor.
       *
       * By default, fractional minor currency units are rounded using the **half to even** rule ([banker's rounding](http://wiki.c2.com/?BankersRounding)).
       *
       * Rounding *can* lead to accuracy issues as you chain many times. Consider a minimal amount of subsequent calculations for safer results.
       * You can also specify a different `roundingMode` to better fit your needs.
       *
       * As rounding is applied, precision may be lost in the process. If you want to accurately split a Dinero object, use {@link module:Dinero~allocate allocate} instead.
       *
       * @param  {Number} divisor - The factor to divide by.
       * @param  {String} [roundingMode='HALF_EVEN'] - The rounding mode to use: `'HALF_ODD'`, `'HALF_EVEN'`, `'HALF_UP'`, `'HALF_DOWN'`, `'HALF_TOWARDS_ZERO'`, `'HALF_AWAY_FROM_ZERO'` or `'DOWN'`.
       *
       * @example
       * // returns a Dinero object with amount 100
       * Dinero({ amount: 400 }).divide(4)
       * @example
       * // returns a Dinero object with amount 52
       * Dinero({ amount: 105 }).divide(2)
       * @example
       * // returns a Dinero object with amount 53
       * Dinero({ amount: 105 }).divide(2, 'HALF_UP')
       *
       * @return {Dinero}
       */
      divide: function divide(divisor) {
        var roundingMode = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : globalRoundingMode;
        return create.call(this, {
          amount: calculator$1.round(calculator$1.divide(this.getAmount(), divisor), roundingMode)
        });
      },
      /**
       * Returns a new Dinero object that represents a percentage of this.
       *
       * As rounding is applied, precision may be lost in the process. If you want to accurately split a Dinero object, use {@link module:Dinero~allocate allocate} instead.
       *
       * @param  {Number} percentage - The percentage to extract (between 0 and 100).
       * @param  {String} [roundingMode='HALF_EVEN'] - The rounding mode to use: `'HALF_ODD'`, `'HALF_EVEN'`, `'HALF_UP'`, `'HALF_DOWN'`, `'HALF_TOWARDS_ZERO'`, `'HALF_AWAY_FROM_ZERO'` or `'DOWN'`.
       *
       * @example
       * // returns a Dinero object with amount 5000
       * Dinero({ amount: 10000 }).percentage(50)
       * @example
       * // returns a Dinero object with amount 29
       * Dinero({ amount: 57 }).percentage(50, "HALF_ODD")
       *
       * @throws {RangeError} If `percentage` is out of range.
       *
       * @return {Dinero}
       */
      percentage: function percentage(_percentage) {
        var roundingMode = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : globalRoundingMode;
        assertPercentage(_percentage);
        return this.multiply(calculator$1.divide(_percentage, 100), roundingMode);
      },
      /**
       * Allocates the amount of a Dinero object according to a list of ratios.
       *
       * Sometimes you need to split monetary values but percentages can't cut it without adding or losing pennies.
       * A good example is invoicing: let's say you need to bill $1,000.03 and you want a 50% downpayment.
       * If you use {@link module:Dinero~percentage percentage}, you'll get an accurate Dinero object but the amount won't be billable: you can't split a penny.
       * If you round it, you'll bill a penny extra.
       * With {@link module:Dinero~allocate allocate}, you can split a monetary amount then distribute the remainder as evenly as possible.
       *
       * You can use percentage style or ratio style for `ratios`: `[25, 75]` and `[1, 3]` will do the same thing.
       *
       * Since v1.8.0, you can use zero ratios (such as [0, 50, 50]). If there's a remainder to distribute, zero ratios are skipped and return a Dinero object with amount zero.
       *
       * @param  {Number[]} ratios - The ratios to allocate the money to.
       *
       * @example
       * // returns an array of two Dinero objects
       * // the first one with an amount of 502
       * // the second one with an amount of 501
       * Dinero({ amount: 1003 }).allocate([50, 50])
       * @example
       * // returns an array of two Dinero objects
       * // the first one with an amount of 25
       * // the second one with an amount of 75
       * Dinero({ amount: 100 }).allocate([1, 3])
       * @example
       * // since version 1.8.0
       * // returns an array of three Dinero objects
       * // the first one with an amount of 0
       * // the second one with an amount of 502
       * // the third one with an amount of 501
       * Dinero({ amount: 1003 }).allocate([0, 50, 50])
       *
       * @throws {TypeError} If ratios are invalid.
       *
       * @return {Dinero[]}
       */
      allocate: function allocate(ratios) {
        var _this = this;
        assertValidRatios(ratios);
        var total = ratios.reduce(function(a, b) {
          return calculator$1.add(a, b);
        });
        var remainder = this.getAmount();
        var shares = ratios.map(function(ratio) {
          var share = Math.floor(calculator$1.divide(calculator$1.multiply(_this.getAmount(), ratio), total));
          remainder = calculator$1.subtract(remainder, share);
          return create.call(_this, {
            amount: share
          });
        });
        var i = 0;
        while (remainder > 0) {
          if (ratios[i] > 0) {
            shares[i] = shares[i].add(create.call(this, {
              amount: 1
            }));
            remainder = calculator$1.subtract(remainder, 1);
          }
          i += 1;
        }
        return shares;
      },
      /**
       * Returns a Promise containing a new Dinero object converted to another currency.
       *
       * You have two options to provide the exchange rates:
       *
       * 1. **Use an exchange rate REST API, and let Dinero handle the fetching and conversion.**
       *   This is a simple option if you have access to an exchange rate REST API and want Dinero to do the rest.
       * 2. **Fetch the exchange rates on your own and provide them directly.**
       *   This is useful if you're fetching your rates from somewhere else (a file, a database), use a different protocol or query language than REST (SOAP, GraphQL) or want to fetch rates once and cache them instead of making new requests every time.
       *
       * **If you want to use a REST API**, you must provide a third-party endpoint yourself. Dinero doesn't come bundled with an exchange rates endpoint.
       *
       * Here are some exchange rate APIs you can use:
       *
       * * [Fixer](https://fixer.io)
       * * [Open Exchange Rates](https://openexchangerates.org)
       * * [Coinbase](https://api.coinbase.com/v2/exchange-rates)
       * * More [foreign](https://github.com/toddmotto/public-apis#currency-exchange) and [crypto](https://github.com/toddmotto/public-apis#cryptocurrency) exchange rate APIs.
       *
       * **If you want to fetch your own rates and provide them directly**, you need to pass a promise that resolves to the exchanges rates.
       *
       * In both cases, you need to specify at least:
       *
       * * a **destination currency**: the currency in which you want to convert your Dinero object. You can specify it with `currency`.
       * * an **endpoint**: the API URL to query exchange rates, with parameters, or a promise that resolves to the exchange rates. You can specify it with `options.endpoint`.
       * * a **property path**: the path to access the wanted rate in your API's JSON response (or the custom promise's payload). For example, with a response of:
       * ```json
       * {
       *     "data": {
       *       "base": "USD",
       *       "destination": "EUR",
       *       "rate": "0.827728919"
       *     }
       * }
       * ```
       * Then the property path is `'data.rate'`. You can specify it with `options.propertyPath`.
       *
       * The base currency (the one of your Dinero object) and the destination currency can be used as "merge tags" with the mustache syntax, respectively `{{from}}` and `{{to}}`.
       * You can use these tags to refer to these values in `options.endpoint` and `options.propertyPath`.
       *
       * For example, if you need to specify the base currency as a query parameter, you can do the following:
       *
       * ```js
       * {
       *   endpoint: 'https://yourexchangerates.api/latest?base={{from}}'
       * }
       * ```
       *
       * @param  {String} currency - The destination currency, expressed as an {@link https://en.wikipedia.org/wiki/ISO_4217#Active_codes ISO 4217 currency code}.
       * @param  {(String|Promise)} options.endpoint - The API endpoint to retrieve exchange rates. You can substitute this with a promise that resolves to the exchanges rates if you already have them.
       * @param  {String} [options.propertyPath='rates.{{to}}'] - The property path to the rate.
       * @param  {Object} [options.headers] - The HTTP headers to provide, if needed.
       * @param  {String} [options.roundingMode='HALF_EVEN'] - The rounding mode to use: `'HALF_ODD'`, `'HALF_EVEN'`, `'HALF_UP'`, `'HALF_DOWN'`, `'HALF_TOWARDS_ZERO'`, `'HALF_AWAY_FROM_ZERO'` or `'DOWN'`.
       *
       * @example
       * // your global API parameters
       * Dinero.globalExchangeRatesApi = { ... }
       *
       * // returns a Promise containing a Dinero object with the destination currency
       * // and the initial amount converted to the new currency.
       * Dinero({ amount: 500 }).convert('EUR')
       * @example
       * // returns a Promise containing a Dinero object,
       * // with specific API parameters and rounding mode for this specific instance.
       * Dinero({ amount: 500 })
       *   .convert('XBT', {
       *     endpoint: 'https://yourexchangerates.api/latest?base={{from}}',
       *     propertyPath: 'data.rates.{{to}}',
       *     headers: {
       *       'user-key': 'xxxxxxxxx'
       *     },
       *     roundingMode: 'HALF_UP'
       *   })
       * @example
       * // usage with exchange rates provided as a custom promise
       * // using the default `propertyPath` format (so it doesn't have to be specified)
       * const rates = {
       *   rates: {
       *     EUR: 0.81162
       *   }
       * }
       *
       * Dinero({ amount: 500 })
       *   .convert('EUR', {
       *     endpoint: new Promise(resolve => resolve(rates))
       *   })
       * @example
       * // usage with Promise.prototype.then and Promise.prototype.catch
       * Dinero({ amount: 500 })
       *   .convert('EUR')
       *   .then(dinero => {
       *     dinero.getCurrency() // returns 'EUR'
       *   })
       *   .catch(err => {
       *     // handle errors
       *   })
       * @example
       * // usage with async/await
       * (async () => {
       *   const price = await Dinero({ amount: 500 }).convert('EUR')
       *   price.getCurrency() // returns 'EUR'
       * })()
       *
       * @return {Promise}
       */
      convert: function convert(currency2) {
        var _this2 = this;
        var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$endpoint = _ref.endpoint, endpoint = _ref$endpoint === void 0 ? globalExchangeRatesApi.endpoint : _ref$endpoint, _ref$propertyPath = _ref.propertyPath, propertyPath = _ref$propertyPath === void 0 ? globalExchangeRatesApi.propertyPath || "rates.{{to}}" : _ref$propertyPath, _ref$headers = _ref.headers, headers = _ref$headers === void 0 ? globalExchangeRatesApi.headers : _ref$headers, _ref$roundingMode = _ref.roundingMode, roundingMode = _ref$roundingMode === void 0 ? globalRoundingMode : _ref$roundingMode;
        var options2 = Object.assign({}, {
          endpoint,
          propertyPath,
          headers,
          roundingMode
        });
        return CurrencyConverter(options2).getExchangeRate(this.getCurrency(), currency2).then(function(rate) {
          assert(!isUndefined(rate), 'No rate was found for the destination currency "'.concat(currency2, '".'), TypeError);
          return create.call(_this2, {
            amount: calculator$1.round(calculator$1.multiply(_this2.getAmount(), parseFloat(rate)), options2.roundingMode),
            currency: currency2
          });
        });
      },
      /**
       * Checks whether the value represented by this object equals to the other.
       *
       * @param  {Dinero} comparator - The Dinero object to compare to.
       *
       * @example
       * // returns true
       * Dinero({ amount: 500, currency: 'EUR' }).equalsTo(Dinero({ amount: 500, currency: 'EUR' }))
       * @example
       * // returns false
       * Dinero({ amount: 500, currency: 'EUR' }).equalsTo(Dinero({ amount: 800, currency: 'EUR' }))
       * @example
       * // returns false
       * Dinero({ amount: 500, currency: 'USD' }).equalsTo(Dinero({ amount: 500, currency: 'EUR' }))
       * @example
       * // returns false
       * Dinero({ amount: 500, currency: 'USD' }).equalsTo(Dinero({ amount: 800, currency: 'EUR' }))
       * @example
       * // returns true
       * Dinero({ amount: 1000, currency: 'EUR', precision: 2 }).equalsTo(Dinero({ amount: 10000, currency: 'EUR', precision: 3 }))
       * @example
       * // returns false
       * Dinero({ amount: 10000, currency: 'EUR', precision: 2 }).equalsTo(Dinero({ amount: 10000, currency: 'EUR', precision: 3 }))
       *
       * @return {Boolean}
       */
      equalsTo: function equalsTo(comparator) {
        return this.hasSameAmount(comparator) && this.hasSameCurrency(comparator);
      },
      /**
       * Checks whether the value represented by this object is less than the other.
       *
       * @param  {Dinero} comparator - The Dinero object to compare to.
       *
       * @example
       * // returns true
       * Dinero({ amount: 500 }).lessThan(Dinero({ amount: 800 }))
       * @example
       * // returns false
       * Dinero({ amount: 800 }).lessThan(Dinero({ amount: 500 }))
       * @example
       * // returns true
       * Dinero({ amount: 5000, precision: 3 }).lessThan(Dinero({ amount: 800 }))
       * @example
       * // returns false
       * Dinero({ amount: 800 }).lessThan(Dinero({ amount: 5000, precision: 3 }))
       *
       * @throws {TypeError} If `comparator` has a different currency.
       *
       * @return {Boolean}
       */
      lessThan: function lessThan2(comparator) {
        assertSameCurrency.call(this, comparator);
        var comparators = Dinero2.normalizePrecision([this, comparator]);
        return comparators[0].getAmount() < comparators[1].getAmount();
      },
      /**
       * Checks whether the value represented by this object is less than or equal to the other.
       *
       * @param  {Dinero} comparator - The Dinero object to compare to.
       *
       * @example
       * // returns true
       * Dinero({ amount: 500 }).lessThanOrEqual(Dinero({ amount: 800 }))
       * @example
       * // returns true
       * Dinero({ amount: 500 }).lessThanOrEqual(Dinero({ amount: 500 }))
       * @example
       * // returns false
       * Dinero({ amount: 500 }).lessThanOrEqual(Dinero({ amount: 300 }))
       * @example
       * // returns true
       * Dinero({ amount: 5000, precision: 3 }).lessThanOrEqual(Dinero({ amount: 800 }))
       * @example
       * // returns true
       * Dinero({ amount: 5000, precision: 3 }).lessThanOrEqual(Dinero({ amount: 500 }))
       * @example
       * // returns false
       * Dinero({ amount: 800 }).lessThanOrEqual(Dinero({ amount: 5000, precision: 3 }))
       *
       * @throws {TypeError} If `comparator` has a different currency.
       *
       * @return {Boolean}
       */
      lessThanOrEqual: function lessThanOrEqual(comparator) {
        assertSameCurrency.call(this, comparator);
        var comparators = Dinero2.normalizePrecision([this, comparator]);
        return comparators[0].getAmount() <= comparators[1].getAmount();
      },
      /**
       * Checks whether the value represented by this object is greater than the other.
       *
       * @param  {Dinero} comparator - The Dinero object to compare to.
       *
       * @example
       * // returns false
       * Dinero({ amount: 500 }).greaterThan(Dinero({ amount: 800 }))
       * @example
       * // returns true
       * Dinero({ amount: 800 }).greaterThan(Dinero({ amount: 500 }))
       * @example
       * // returns true
       * Dinero({ amount: 800 }).greaterThan(Dinero({ amount: 5000, precision: 3 }))
       * @example
       * // returns false
       * Dinero({ amount: 5000, precision: 3 }).greaterThan(Dinero({ amount: 800 }))
       *
       * @throws {TypeError} If `comparator` has a different currency.
       *
       * @return {Boolean}
       */
      greaterThan: function greaterThan2(comparator) {
        assertSameCurrency.call(this, comparator);
        var comparators = Dinero2.normalizePrecision([this, comparator]);
        return comparators[0].getAmount() > comparators[1].getAmount();
      },
      /**
       * Checks whether the value represented by this object is greater than or equal to the other.
       *
       * @param  {Dinero} comparator - The Dinero object to compare to.
       *
       * @example
       * // returns true
       * Dinero({ amount: 500 }).greaterThanOrEqual(Dinero({ amount: 300 }))
       * @example
       * // returns true
       * Dinero({ amount: 500 }).greaterThanOrEqual(Dinero({ amount: 500 }))
       * @example
       * // returns false
       * Dinero({ amount: 500 }).greaterThanOrEqual(Dinero({ amount: 800 }))
       * @example
       * // returns true
       * Dinero({ amount: 800 }).greaterThanOrEqual(Dinero({ amount: 5000, precision: 3 }))
       * @example
       * // returns true
       * Dinero({ amount: 500 }).greaterThanOrEqual(Dinero({ amount: 5000, precision: 3 }))
       * @example
       * // returns false
       * Dinero({ amount: 5000, precision: 3 }).greaterThanOrEqual(Dinero({ amount: 800 }))
       *
       * @throws {TypeError} If `comparator` has a different currency.
       *
       * @return {Boolean}
       */
      greaterThanOrEqual: function greaterThanOrEqual(comparator) {
        assertSameCurrency.call(this, comparator);
        var comparators = Dinero2.normalizePrecision([this, comparator]);
        return comparators[0].getAmount() >= comparators[1].getAmount();
      },
      /**
       * Checks if the value represented by this object is zero.
       *
       * @example
       * // returns true
       * Dinero({ amount: 0 }).isZero()
       * @example
       * // returns false
       * Dinero({ amount: 100 }).isZero()
       *
       * @return {Boolean}
       */
      isZero: function isZero() {
        return this.getAmount() === 0;
      },
      /**
       * Checks if the value represented by this object is positive.
       *
       * @example
       * // returns false
       * Dinero({ amount: -10 }).isPositive()
       * @example
       * // returns true
       * Dinero({ amount: 10 }).isPositive()
       * @example
       * // returns true
       * Dinero({ amount: 0 }).isPositive()
       *
       * @return {Boolean}
       */
      isPositive: function isPositive() {
        return this.getAmount() >= 0;
      },
      /**
       * Checks if the value represented by this object is negative.
       *
       * @example
       * // returns true
       * Dinero({ amount: -10 }).isNegative()
       * @example
       * // returns false
       * Dinero({ amount: 10 }).isNegative()
       * @example
       * // returns false
       * Dinero({ amount: 0 }).isNegative()
       *
       * @return {Boolean}
       */
      isNegative: function isNegative() {
        return this.getAmount() < 0;
      },
      /**
       * Checks if this has minor currency units.
       * Deprecates {@link module:Dinero~hasCents hasCents}.
       *
       * @example
       * // returns false
       * Dinero({ amount: 1100 }).hasSubUnits()
       * @example
       * // returns true
       * Dinero({ amount: 1150 }).hasSubUnits()
       *
       * @return {Boolean}
       */
      hasSubUnits: function hasSubUnits() {
        return calculator$1.modulo(this.getAmount(), Math.pow(10, precision)) !== 0;
      },
      /**
       * Checks if this has minor currency units.
       *
       * @deprecated since version 1.4.0, will be removed in 2.0.0
       * Use {@link module:Dinero~hasSubUnits hasSubUnits} instead.
       *
       * @example
       * // returns false
       * Dinero({ amount: 1100 }).hasCents()
       * @example
       * // returns true
       * Dinero({ amount: 1150 }).hasCents()
       *
       * @return {Boolean}
       */
      hasCents: function hasCents() {
        return calculator$1.modulo(this.getAmount(), Math.pow(10, precision)) !== 0;
      },
      /**
       * Checks whether the currency represented by this object equals to the other.
       *
       * @param  {Dinero}  comparator - The Dinero object to compare to.
       *
       * @example
       * // returns true
       * Dinero({ amount: 2000, currency: 'EUR' }).hasSameCurrency(Dinero({ amount: 1000, currency: 'EUR' }))
       * @example
       * // returns false
       * Dinero({ amount: 1000, currency: 'EUR' }).hasSameCurrency(Dinero({ amount: 1000, currency: 'USD' }))
       *
       * @return {Boolean}
       */
      hasSameCurrency: function hasSameCurrency(comparator) {
        return this.getCurrency() === comparator.getCurrency();
      },
      /**
       * Checks whether the amount represented by this object equals to the other.
       *
       * @param  {Dinero}  comparator - The Dinero object to compare to.
       *
       * @example
       * // returns true
       * Dinero({ amount: 1000, currency: 'EUR' }).hasSameAmount(Dinero({ amount: 1000 }))
       * @example
       * // returns false
       * Dinero({ amount: 2000, currency: 'EUR' }).hasSameAmount(Dinero({ amount: 1000, currency: 'EUR' }))
       * @example
       * // returns true
       * Dinero({ amount: 1000, currency: 'EUR', precision: 2 }).hasSameAmount(Dinero({ amount: 10000, precision: 3 }))
       * @example
       * // returns false
       * Dinero({ amount: 10000, currency: 'EUR', precision: 2 }).hasSameAmount(Dinero({ amount: 10000, precision: 3 }))
       *
       * @return {Boolean}
       */
      hasSameAmount: function hasSameAmount(comparator) {
        var comparators = Dinero2.normalizePrecision([this, comparator]);
        return comparators[0].getAmount() === comparators[1].getAmount();
      },
      /**
       * Returns this object formatted as a string.
       *
       * The format is a mask which defines how the output string will be formatted.
       * It defines whether to display a currency, in what format, how many fraction digits to display and whether to use grouping separators.
       * The output is formatted according to the applying locale.
       *
       * Object                       | Format            | String
       * :--------------------------- | :---------------- | :---
       * `Dinero({ amount: 500050 })` | `'$0,0.00'`       | $5,000.50
       * `Dinero({ amount: 500050 })` | `'$0,0'`          | $5,001
       * `Dinero({ amount: 500050 })` | `'$0'`            | $5001
       * `Dinero({ amount: 500050 })` | `'$0.0'`          | $5000.5
       * `Dinero({ amount: 500050 })` | `'USD0,0.0'`      | USD5,000.5
       * `Dinero({ amount: 500050 })` | `'0,0.0 dollar'`  | 5,000.5 dollars
       *
       * Don't try to substitute the `$` sign or the `USD` code with your target currency, nor adapt the format string to the exact format you want.
       * The format is a mask which defines a pattern and returns a valid, localized currency string.
       * If you want to display the object in a custom way, either use {@link module:Dinero~getAmount getAmount}, {@link module:Dinero~toUnit toUnit} or {@link module:Dinero~toRoundedUnit toRoundedUnit} and manipulate the output string as you wish.
       *
       * {@link module:Dinero~toFormat toFormat} wraps around `Number.prototype.toLocaleString`. For that reason, **format will vary depending on how it's implemented in the end user's environment**.
       *
       * You can also use `toLocaleString` directly:
       * `Dinero().toRoundedUnit(digits, roundingMode).toLocaleString(locale, options)`.
       *
       * By default, amounts are rounded using the **half away from zero** rule ([commercial rounding](https://en.wikipedia.org/wiki/Rounding#Round_half_away_from_zero)).
       * You can also specify a different `roundingMode` to better fit your needs.
       *
       * @param  {String} [format='$0,0.00'] - The format mask to format to.
       * @param  {String} [roundingMode='HALF_AWAY_FROM_ZERO'] - The rounding mode to use: `'HALF_ODD'`, `'HALF_EVEN'`, `'HALF_UP'`, `'HALF_DOWN'`, `'HALF_TOWARDS_ZERO'`, `'HALF_AWAY_FROM_ZERO'` or `'DOWN'`.
       *
       * @example
       * // returns $2,000
       * Dinero({ amount: 200000 }).toFormat('$0,0')
       * @example
       * // returns €50.5
       * Dinero({ amount: 5050, currency: 'EUR' }).toFormat('$0,0.0')
       * @example
       * // returns 100 euros
       * Dinero({ amount: 10000, currency: 'EUR' }).setLocale('fr-FR').toFormat('0,0 dollar')
       * @example
       * // returns 2000
       * Dinero({ amount: 200000, currency: 'EUR' }).toFormat()
       * @example
       * // returns $10
       * Dinero({ amount: 1050 }).toFormat('$0', 'HALF_EVEN')
       *
       * @return {String}
       */
      toFormat: function toFormat() {
        var format = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : globalFormat;
        var roundingMode = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : globalFormatRoundingMode;
        var formatter = Format(format);
        return this.toRoundedUnit(formatter.getMinimumFractionDigits(), roundingMode).toLocaleString(this.getLocale(), {
          currencyDisplay: formatter.getCurrencyDisplay(),
          useGrouping: formatter.getUseGrouping(),
          minimumFractionDigits: formatter.getMinimumFractionDigits(),
          style: formatter.getStyle(),
          currency: this.getCurrency()
        });
      },
      /**
       * Returns the amount represented by this object in units.
       *
       * @example
       * // returns 10.5
       * Dinero({ amount: 1050 }).toUnit()
       * @example
       * // returns 10.545
       * Dinero({ amount: 10545, precision: 3 }).toUnit()
       *
       * @return {Number}
       */
      toUnit: function toUnit() {
        return calculator$1.divide(this.getAmount(), Math.pow(10, precision));
      },
      /**
       * Returns the amount represented by this object in rounded units.
       *
       * By default, the method uses the **half away from zero** rule ([commercial rounding](https://en.wikipedia.org/wiki/Rounding#Round_half_away_from_zero)).
       * You can also specify a different `roundingMode` to better fit your needs.
       *
       * @example
       * // returns 10.6
       * Dinero({ amount: 1055 }).toRoundedUnit(1)
       * @example
       * // returns 10
       * Dinero({ amount: 1050 }).toRoundedUnit(0, 'HALF_EVEN')
       *
       * @param  {Number} digits - The number of fraction digits to round to.
       * @param  {String} [roundingMode='HALF_AWAY_FROM_ZERO'] - The rounding mode to use: `'HALF_ODD'`, `'HALF_EVEN'`, `'HALF_UP'`, `'HALF_DOWN'`, `'HALF_TOWARDS_ZERO'`, `'HALF_AWAY_FROM_ZERO'` or `'DOWN'`.
       *
       * @return {Number}
       */
      toRoundedUnit: function toRoundedUnit(digits) {
        var roundingMode = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : globalFormatRoundingMode;
        var factor = Math.pow(10, digits);
        return calculator$1.divide(calculator$1.round(calculator$1.multiply(this.toUnit(), factor), roundingMode), factor);
      },
      /**
       * Returns the object's data as an object literal.
       *
       * @example
       * // returns { amount: 500, currency: 'EUR', precision: 2 }
       * Dinero({ amount: 500, currency: 'EUR', precision: 2 }).toObject()
       *
       * @return {Object}
       */
      toObject: function toObject() {
        return {
          amount,
          currency,
          precision
        };
      },
      /**
       * Returns the object's data as an object literal.
       *
       * Alias of {@link module:Dinero~toObject toObject}.
       * It is defined so that calling `JSON.stringify` on a Dinero object will automatically extract the relevant data.
       *
       * @example
       * // returns '{"amount":500,"currency":"EUR","precision":2}'
       * JSON.stringify(Dinero({ amount: 500, currency: 'EUR', precision: 2 }))
       *
       * @return {Object}
       */
      toJSON: function toJSON() {
        return this.toObject();
      }
    };
  };
  var dinero = Object.assign(Dinero, Defaults, Globals, Static);
  const { Skip: Skip$1 } = gubu_minExports.Gubu;
  const BasicLedSpecShape = gubu_minExports.Gubu({
    title: String,
    name: String,
    paramId: Skip$1(String),
    content: {
      cmp: Skip$1(String),
      def: {
        canon: String,
        add: Skip$1({
          active: Boolean
        }),
        subview: {},
        id: Skip$1({
          field: String
        }),
        field: {},
        columnVisibility: Skip$1({})
      }
    }
  });
  function BasicLed(props) {
    var _a, _b, _c;
    const { ctx, action } = props;
    const { seneca, custom } = ctx();
    const [item, setItem] = React.useState({});
    const location2 = reactRouterDom.useLocation();
    const navigate = reactRouterDom.useNavigate();
    const [data, setData] = React.useState([]);
    const [isLoading, setIsLoading] = React.useState(false);
    let [triggerLed, setTriggerLed] = React.useState(0);
    const basicLedSpec = BasicLedSpecShape(props.spec);
    const viewName = basicLedSpec.name;
    const def = basicLedSpec.content.def;
    const canon = def.canon;
    const fields = basicLedSpec.content.def.field;
    const cmpState = reactRedux.useSelector((state) => state.main.vxg.cmp);
    const entState = reactRedux.useSelector(
      (state) => state.main.vxg.ent.meta.main[canon].state
    );
    const entlist = reactRedux.useSelector(
      (state) => state.main.vxg.ent.list.main[canon]
    );
    const led_add = reactRedux.useSelector((state) => state.main.vxg.trigger.led.add);
    React.useEffect(() => {
      setIsLoading(true);
    }, []);
    React.useEffect(() => {
      if ("none" === entState) {
        setIsLoading(true);
        let q = custom.BasicLed.query(basicLedSpec, cmpState);
      }
    }, [entState]);
    React.useEffect(() => {
      if ("loaded" === entState) {
        setIsLoading(false);
        if ("fox/bom" === canon) {
          const filters = cmpState.AssignSuppliersHead.filters;
          const supplierId = filters.supplier.selected;
          const ceid = filters.ceid.selected;
          const toolId = filters.tool.selected;
          const startDate = filters.prefacStart.selected;
          const endDate = filters.prefacEnd.selected;
          const unallocatedOnly = filters.unallocated.selected;
          const currentProject = cmpState.BasicHead.tool.project.selected;
          const filteredData = entlist.filter((item2) => {
            const isSupplierMatch = supplierId === "" || item2.suppliers.includes(supplierId);
            const isCEIDMatch = ceid === "" || item2.ceids.includes(ceid);
            const isToolIdMatch = toolId === "" || item2.tools.includes(toolId);
            const isDateRangeMatch = (startDate === "" || item2.earlirestPrefac >= startDate) && (endDate === "" || item2.earlirestPrefac <= endDate);
            const isUnallocatedMatch = !unallocatedOnly || item2.qtyasn < 100;
            const isProjectMatch = currentProject.id === item2.project_id;
            return isSupplierMatch && isCEIDMatch && isToolIdMatch && isDateRangeMatch && isUnallocatedMatch && isProjectMatch;
          });
          setData(filteredData);
        } else if ("fox/supplierorder" === canon) {
          const currentProject = cmpState.BasicHead.tool.project.selected;
          const filteredData = entlist.filter((item2) => {
            const isProjectMatch = currentProject.id === item2.project_id;
            return isProjectMatch;
          });
          setData(filteredData);
        } else {
          setData(entlist);
        }
      }
    }, [entState, entlist, cmpState]);
    React.useEffect(() => {
      setItem({});
    }, [location2.pathname]);
    React.useEffect(() => {
      if (triggerLed >= 2) {
        setItem({ entity$: "-/" + def.canon });
      }
      setTriggerLed(++triggerLed);
    }, [led_add]);
    console.log("BasicLed", "fields", Object.entries(fields));
    const basicListColumns = Object.entries(fields).map(
      ([key, field]) => ({
        accessorFn: (row) => row[key],
        accessorKey: key,
        header: field.label,
        enableEditing: field.editable,
        editVariant: field.inputType,
        editSelectOptions: "select" === field.inputType ? Object.keys(field.options) : null,
        Header: () => /* @__PURE__ */ jsxRuntimeExports.jsx(
          material.Box,
          {
            sx: {
              display: "flex",
              width: "100%",
              justifyContent: field.headerAlign || "left"
            },
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(material.Typography, { variant: "body2", fontWeight: "bold", children: field.label })
          }
        ),
        Cell: ({ cell, row }) => renderCell({ cell, field, row }),
        size: field.size || 40
      })
    );
    const renderCell = ({ cell, field, row }) => {
      var _a2;
      const cellValue = cell.getValue();
      let entityId, action2, textAlign2;
      switch (field.displayType) {
        case "link":
          const target = field.target;
          entityId = row.original[(target == null ? void 0 : target.idName) || "id"];
          const entityName = (target == null ? void 0 : target.entity) || viewName;
          return /* @__PURE__ */ jsxRuntimeExports.jsx(reactRouterDom.Link, { to: `/view/${entityName}/${entityId}/show`, children: /* @__PURE__ */ jsxRuntimeExports.jsx(material.Typography, { variant: "body2", textTransform: "capitalize", children: cellValue }) });
        case "image":
          return /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: cellValue, alt: "Cell Content" });
        case "navbutton":
          return /* @__PURE__ */ jsxRuntimeExports.jsx(
            BasicButton,
            {
              type: "submit",
              variant: "outlined",
              size: "medium",
              onClick: () => {
                navigate(`/view/${viewName}/${row.original.id}/${field.action}`);
              },
              children: field.actionLabel
            }
          );
        case "button":
          const approveButton = ctx().cmp[field.action];
          return approveButton({
            field,
            row,
            data,
            seneca
          });
        case "action":
          entityId = row.original.id;
          action2 = field.action;
          return /* @__PURE__ */ jsxRuntimeExports.jsx(reactRouterDom.Link, { to: `/view/${viewName}/${entityId}/${action2}`, children: field.actionLabel });
        case "chip":
          if (cellValue === "Low") {
            return /* @__PURE__ */ jsxRuntimeExports.jsx(material.Chip, { sx: { color: "white" }, label: cellValue, color: "success" });
          } else if (cellValue === "Med") {
            return /* @__PURE__ */ jsxRuntimeExports.jsx(material.Chip, { sx: { color: "white" }, label: cellValue, color: "warning" });
          } else if (cellValue === "High") {
            return /* @__PURE__ */ jsxRuntimeExports.jsx(material.Chip, { sx: { color: "white" }, label: cellValue, color: "error" });
          }
        case "progressBar":
          const suppliersNumber = ((_a2 = row.original.suppliers) == null ? void 0 : _a2.length) || 0;
          let progressValue = 0;
          if (suppliersNumber > 0) {
            const rawValue = cellValue / suppliersNumber;
            progressValue = rawValue > 100 ? 100 : rawValue;
          }
          return /* @__PURE__ */ jsxRuntimeExports.jsx(
            material.LinearProgress,
            {
              variant: "determinate",
              value: progressValue,
              color: "success",
              sx: { height: "9px", border: "2px solid #ccc", width: "80%" }
            }
          );
        case "currency":
          const currency = field.currency || "EUR";
          textAlign2 = field.textAlign || "right";
          if (isNaN(cellValue)) {
            return /* @__PURE__ */ jsxRuntimeExports.jsx(material.Box, { sx: { textAlign: textAlign2 }, children: field.defaultValue });
          } else {
            const valueCurrency = Number(cellValue);
            const dineroObject = dinero({
              amount: Math.round(valueCurrency * 100),
              currency: "EUR"
            });
            const formattedValue = dineroObject.toFormat("$0,0.00");
            return /* @__PURE__ */ jsxRuntimeExports.jsx(material.Box, { sx: { textAlign: textAlign2 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(material.Typography, { variant: "body2", children: formattedValue }) });
          }
        case "number":
          textAlign2 = field.textAlign || "right";
          const valueNumber = Number(cellValue);
          if (isNaN(valueNumber)) {
            return /* @__PURE__ */ jsxRuntimeExports.jsx(material.Box, { sx: { textAlign: textAlign2 }, children: field.defaultValue });
          }
          return /* @__PURE__ */ jsxRuntimeExports.jsx(
            material.Box,
            {
              display: "flex",
              justifyContent: "flex-end",
              width: "100%",
              sx: {
                textAlign: textAlign2
              },
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(material.Typography, { variant: "body2", children: valueNumber.toLocaleString() })
            }
          );
        case "percentage":
          return /* @__PURE__ */ jsxRuntimeExports.jsx(
            material.Box,
            {
              display: "flex",
              justifyContent: "flex-end",
              sx: {
                textAlign: "right"
              },
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs(material.Typography, { variant: "body2", children: [
                cellValue,
                "%"
              ] })
            }
          );
        case "t_c":
          if (!cellValue) {
            return /* @__PURE__ */ jsxRuntimeExports.jsx(material.Box, { sx: { textAlign: "left" }, children: "-" });
          }
          const date = new Date(cellValue);
          if (isNaN(date.getTime())) {
            return /* @__PURE__ */ jsxRuntimeExports.jsx(material.Box, { sx: { textAlign: "left" }, children: "Invalid date" });
          }
          const dateStr = date.toISOString();
          return /* @__PURE__ */ jsxRuntimeExports.jsx(material.Box, { sx: { textAlign: "left" }, children: dateStr });
        default:
          textAlign2 = field.textAlign || "left";
          return /* @__PURE__ */ jsxRuntimeExports.jsx(material.Box, { sx: { textAlign: textAlign2 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(material.Typography, { variant: "body2", children: cellValue }) });
      }
    };
    const currentSubview = (_a = basicLedSpec.content.def) == null ? void 0 : _a.subview[action];
    const headComponent = (_b = currentSubview == null ? void 0 : currentSubview.head) == null ? void 0 : _b.cmp;
    const footComponent = (_c = currentSubview == null ? void 0 : currentSubview.foot) == null ? void 0 : _c.cmp;
    const HeadCmp = ctx().cmp[headComponent];
    const FootCmp = ctx().cmp[footComponent];
    return /* @__PURE__ */ jsxRuntimeExports.jsx(material.Box, { className: "BasicLed", children: "-/" + canon !== item.entity$ ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      HeadCmp ? /* @__PURE__ */ jsxRuntimeExports.jsx(HeadCmp, { ctx }) : null,
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        BasicList,
        {
          ctx,
          spec: basicLedSpec,
          data: data || [],
          columns: basicListColumns,
          isLoading,
          action,
          onRowClick: (event, item2) => {
            setItem(item2);
          },
          onEditingRowSave: (row, values2) => __async(this, null, function* () {
            let selectedItem = __spreadValues({}, data[row.index]);
            for (let k in values2) {
              selectedItem[k] = values2[k];
            }
            yield seneca.entity(canon).save$(selectedItem);
            setItem({});
          })
        },
        canon
      ),
      FootCmp ? /* @__PURE__ */ jsxRuntimeExports.jsx(FootCmp, { ctx }) : null
    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx(
      BasicEdit,
      {
        ctx,
        spec: basicLedSpec,
        item,
        itemFields: fields,
        onClose: () => {
          setItem({});
        },
        onSubmit: (item2) => __async(this, null, function* () {
          yield seneca.entity(canon).save$(item2);
          setItem({});
        })
      }
    ) });
  }
  const { Child, Optional, Skip } = gubu_minExports.Gubu;
  const BasicMainSpecShape = gubu_minExports.Gubu({
    main: {
      title: String,
      default: String
    },
    view: Child({
      title: String,
      paramId: Skip(String),
      name: String,
      content: {
        def: {
          canon: Skip(String),
          add: {
            active: true
          },
          subview: Child({
            render: "collection",
            default: false,
            kind: "led",
            active: Skip(Boolean),
            cmp: Skip(String),
            editingMode: "none",
            head: {
              cmp: Skip(String)
            },
            foot: {
              cmp: Skip(String)
            },
            linkPath: Skip(String),
            enableColumnFilters: false
          }),
          id: Skip({
            field: String
          }),
          field: Skip({}),
          columnVisibility: Skip({})
        }
      }
    })
  });
  function BasicMain(props) {
    var _a, _b, _c, _d;
    const { vxg, ctx } = props;
    const theme = material.useTheme();
    const basicMainSpec = BasicMainSpecShape(props.spec);
    const views = Object.values(basicMainSpec.view);
    const defaultRoute = basicMainSpec.main.default;
    const sideOpen = reactRedux.useSelector(
      (state) => state.main.vxg.cmp.BasicSide.show
    );
    const navigate = reactRouterDom.useNavigate();
    React.useEffect(() => {
      if (location.pathname === "/" && defaultRoute !== void 0) {
        navigate(defaultRoute);
      }
    }, [location, navigate]);
    const paddingLeft = ((_d = (_c = (_b = (_a = theme.components) == null ? void 0 : _a.MuiDrawer) == null ? void 0 : _b.styleOverrides) == null ? void 0 : _c.paper) == null ? void 0 : _d.width) || "16rem";
    const basicMainStyle = {
      paddingLeft: sideOpen ? paddingLeft : "0rem",
      backgroundColor: theme.palette.background.default
    };
    const basicMainContainerStyle = {
      height: "100%"
    };
    return /* @__PURE__ */ jsxRuntimeExports.jsx(material.Box, { className: "BasicMain", sx: basicMainStyle, children: /* @__PURE__ */ jsxRuntimeExports.jsx(material.Box, { className: "BasicMain-container", sx: basicMainContainerStyle, children: /* @__PURE__ */ jsxRuntimeExports.jsx(reactRouterDom.Routes, { children: renderRoutes(views, vxg, ctx, theme) }) }) });
  }
  const renderRoutes = (views, vxg, ctx, theme) => {
    return views.map((view) => /* @__PURE__ */ jsxRuntimeExports.jsx(React.Fragment, { children: Object.entries(view.content.def.subview).map(([key, subview]) => {
      const Cmp = subview.kind === "custom" ? ctx().cmp[subview.cmp] : BasicLed;
      let routePath;
      if (subview.render === "member") {
        routePath = `/view/${view.name}/:${view.paramId}/${key}`;
      } else {
        routePath = `/view/${view.name}/${key}`;
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsx(React.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        reactRouterDom.Route,
        {
          path: routePath,
          element: /* @__PURE__ */ jsxRuntimeExports.jsx(material.ThemeProvider, { theme, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Cmp, { action: key, vxg, ctx, spec: view }, key) })
        }
      ) }, key);
    }) }, view.name));
  };
  const BasicFootSpecShape = gubu_minExports.Gubu({
    foot: {
      title: ""
    },
    view: {}
  });
  function BasicFoot(props) {
    const { vxg, ctx } = props;
    const basicFootSpec = BasicFootSpecShape(props.spec);
    const part = basicFootSpec.foot;
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      material.Box,
      {
        sx: {
          width: "100%",
          height: "auto",
          paddingTop: "0.5rem",
          paddingBottom: "0.5rem",
          borderTop: "1px solid #CCC"
        },
        className: "BasicFoot",
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(material.Container, { maxWidth: "lg", children: /* @__PURE__ */ jsxRuntimeExports.jsx(material.Grid, { container: true, direction: "column", children: /* @__PURE__ */ jsxRuntimeExports.jsx(material.Grid, { item: true, xs: 12, sx: { textAlign: "right" }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(material.Typography, { color: "#CCC", variant: "body2", children: part.title }) }) }) })
      }
    );
  }
  const BasicAdminSpecShape = gubu_minExports.Gubu({
    frame: String
  });
  function BasicAdmin(props) {
    const { vxg, ctx } = props;
    const model = ctx().model;
    const basicAdminSpec = BasicAdminSpecShape(props.spec);
    const { frame } = basicAdminSpec;
    const frameModel = model.app.web.frame[frame];
    const view = frameModel.view;
    const headSpec = { head: frameModel.part.head, view };
    const sideSpec = { side: frameModel.part.side, view };
    const mainSpec = { main: frameModel.part.main, view };
    const footSpec = { foot: frameModel.part.foot, view };
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(material.Box, { className: "BasicAdmin", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(BasicHead, { vxg, ctx, spec: headSpec }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(BasicSide, { vxg, ctx, spec: sideSpec }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(BasicMain, { vxg, ctx, spec: mainSpec }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(BasicFoot, { vxg, ctx, spec: footSpec })
    ] });
  }
  var patrun_min$1 = { exports: {} };
  var patrun_min = patrun_min$1.exports;
  (function(module2, exports3) {
    !function(e) {
      if (true)
        module2.exports = e();
      else if (false)
        (void 0)([], e);
      else {
        ("undefined" != typeof window ? window : "undefined" != typeof commonjsGlobal ? commonjsGlobal : "undefined" != typeof self ? self : this).Patrun = e();
      }
    }(function() {
      var e = { exports: {} };
      (function(t2) {
        (function() {
          !function(n2) {
            "object" == typeof e.exports ? e.exports = n2() : ("undefined" != typeof window ? window : void 0 !== t2 ? t2 : "undefined" != typeof self ? self : this).Gex = n2();
          }(function() {
            var e2 = { exports: {} };
            Object.defineProperty(e2.exports, "__esModule", { value: true }), e2.exports.Gex = void 0;
            class t3 {
              constructor(e3) {
                this.desc = "", this.gexmap = {}, null != e3 && (Array.isArray(e3) ? e3 : [e3]).forEach((e4) => {
                  this.gexmap[e4] = this.re(this.clean(e4));
                });
              }
              dodgy(e3) {
                return null == e3 || Number.isNaN(e3);
              }
              clean(e3) {
                let t4 = "" + e3;
                return this.dodgy(e3) ? "" : t4;
              }
              match(e3) {
                e3 = "" + e3;
                let t4 = false, n3 = Object.keys(this.gexmap);
                for (let r3 = 0; r3 < n3.length && !t4; r3++)
                  t4 = !!this.gexmap[n3[r3]].exec(e3);
                return t4;
              }
              on(e3) {
                if (null == e3)
                  return null;
                let t4 = typeof e3;
                if ("string" === t4 || "number" === t4 || "boolean" === t4 || e3 instanceof Date || e3 instanceof RegExp)
                  return this.match(e3) ? e3 : null;
                if (Array.isArray(e3)) {
                  let t5 = [];
                  for (let n3 = 0; n3 < e3.length; n3++)
                    !this.dodgy(e3[n3]) && this.match(e3[n3]) && t5.push(e3[n3]);
                  return t5;
                }
                {
                  let t5 = {};
                  for (let n3 in e3)
                    Object.prototype.hasOwnProperty.call(e3, n3) && this.match(n3) && (t5[n3] = e3[n3]);
                  return t5;
                }
              }
              esc(e3) {
                let t4 = this.clean(e3);
                return (t4 = t4.replace(/\*/g, "**")).replace(/\?/g, "*?");
              }
              escregexp(e3) {
                return e3 ? ("" + e3).replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&") : "";
              }
              re(e3) {
                if ("" === e3 || e3)
                  return e3 = "^" + (e3 = (e3 = (e3 = (e3 = (e3 = this.escregexp(e3)).replace(/\\\*/g, "[\\s\\S]*")).replace(/\\\?/g, "[\\s\\S]")).replace(/\[\\s\\S\]\*\[\\s\\S\]\*/g, "\\*")).replace(/\[\\s\\S\]\*\[\\s\\S\]/g, "\\?")) + "$", new RegExp(e3);
                {
                  let e4 = Object.keys(this.gexmap);
                  return 1 == e4.length ? this.gexmap[e4[0]] : __spreadValues({}, this.gexmap);
                }
              }
              toString() {
                let e3 = this.desc;
                return "" != e3 ? e3 : this.desc = "Gex[" + Object.keys(this.gexmap) + "]";
              }
              inspect() {
                return this.toString();
              }
            }
            function n2(e3) {
              return new t3(e3);
            }
            return e2.exports.Gex = n2, e2.exports = n2, e2.exports.Gex = n2, e2.exports.default = n2, e2.exports;
          });
        }).call(this);
      }).call(this, "undefined" != typeof commonjsGlobal ? commonjsGlobal : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}), e = e.exports;
      var t, n, r2, s, i, o, l, u, a, f = {}, p = this && this.__classPrivateFieldGet || function(e2, t2, n2, r3) {
        if ("a" === n2 && !r3)
          throw new TypeError("Private accessor was defined without a getter");
        if ("function" == typeof t2 ? e2 !== t2 || !r3 : !t2.has(e2))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return "m" === n2 ? r3 : "a" === n2 ? r3.call(e2) : r3 ? r3.value : t2.get(e2);
      };
      Object.defineProperty(f, "__esModule", { value: true }), f.IntervalMatcher = f.GexMatcher = void 0, f.GexMatcher = class {
        constructor() {
        }
        make(t2, n2) {
          if ("string" == typeof n2 && n2.match(/[*?]/)) {
            let t3 = (0, e.Gex)(n2);
            return { kind: "gex", match: (e2) => null != t3.on(e2), fix: n2, meta: {}, same(e2) {
              return null != e2 && e2.kind === this.kind && e2.fix === this.fix;
            } };
          }
        }
        scan(e2, t2) {
          let n2 = e2.filter((e3) => "*" === e3.fix).length > 0;
          return { complete: n2, sound: n2, gaps: [], overs: [], why: "no-star" };
        }
      };
      const h = new RegExp(["^/s*", "(=*[<>/(/[]?=*)?/s*([-+0-9a-fA-FeEoOxX]+(/.([0-9a-fA-FeEoOxX]+))?)([/)/]]?)(/s*(,|&+|/|+|/./.)/s*(=*[<>]?=*)/s*([-+.0-9a-fA-FeEoOxX]+)/s*([/)/]]?))?/s*$"].join("").replace(/\//g, "\\"));
      class c {
        constructor() {
          this.kind = "interval", t.set(this, (e2, t2) => function(n2) {
            return e2(n2) && t2(n2);
          }), n.set(this, (e2, t2) => function(n2) {
            return e2(n2) || t2(n2);
          }), r2.set(this, (e2) => function(e3) {
            return false;
          }), s.set(this, (e2) => function(e3) {
            return false;
          }), i.set(this, (e2) => function(t2) {
            return t2 > e2;
          }), o.set(this, (e2) => function(t2) {
            return t2 >= e2;
          }), l.set(this, (e2) => function(t2) {
            return t2 < e2;
          }), u.set(this, (e2) => function(t2) {
            return t2 <= e2;
          }), a.set(this, (e2) => function(t2) {
            return t2 === e2;
          });
        }
        make(e2, f2) {
          if ("string" == typeof f2 && f2.match(/[=<>.[()\]]/)) {
            let e3 = f2.match(h), d2 = { jo: "and", o0: "err", n0: NaN, o1: "err", n1: NaN }, g2 = (e4) => false;
            if (null != e3) {
              let h2 = c.normop(e3[1]) || c.normop(e3[5]), m2 = c.normop(e3[8]) || c.normop(e3[10]), v = p(this, "=" === h2 ? a : "<" === h2 || ")" === h2 ? l : "<=" === h2 || "]" === h2 ? u : ">" === h2 || "(" === h2 ? i : ">=" === h2 || "[" === h2 ? o : s, "f"), x = Number(e3[2]), k = null == e3[9] ? NaN : Number(e3[9]), y = e3[7], w = null == y ? p(this, n, "f") : "&" === y.substring(0, 1) || "," === y.substring(0, 1) ? p(this, t, "f") : p(this, n, "f");
              ".." === y && (w = p(this, t, "f"), v = p(this, s, "f") === v ? p(this, o, "f") : v, m2 = "" === m2 ? "<=" : m2);
              let N = p(this, null == m2 ? r2 : "=" === m2 ? a : "<" === m2 || ")" === m2 ? l : "<=" === m2 || "]" === m2 ? u : ">" === m2 ? i : ">=" === m2 ? o : s, "f");
              if (x === k && ("=" === h2 && null != m2 ? (k = NaN, N = p(this, r2, "f"), v = m2.includes("<") ? p(this, u, "f") : m2.includes(">") ? p(this, o, "f") : m2.includes("=") ? p(this, a, "f") : p(this, s, "f")) : "=" === m2 && null != h2 && (k = NaN, N = p(this, r2, "f"), v = h2.includes("<") ? p(this, u, "f") : h2.includes(">") ? p(this, o, "f") : p(this, s, "f"))), p(this, s, "f") !== v && p(this, r2, "f") === N && (p(this, l, "f") === v || p(this, u, "f") === v ? (N = v, k = x, v = p(this, o, "f"), x = Number.NEGATIVE_INFINITY, w = p(this, t, "f")) : p(this, i, "f") !== v && p(this, o, "f") !== v || (N = p(this, u, "f"), k = Number.POSITIVE_INFINITY, w = p(this, t, "f"))), !isNaN(k) && k < x) {
                let e4 = N, t2 = k;
                k = x, x = t2, ".." !== y && (N = v, v = e4);
              }
              let b = v(x), O = N(k), j = w(b, O);
              return { kind: "interval", fix: f2, meta: d2 = { jo: j.name, o0: b.name, n0: x, o1: O.name, n1: k }, match: g2 = (e4) => {
                let t2 = false, n2 = parseFloat(e4);
                return isNaN(n2) || (t2 = j(n2)), t2;
              }, same(e4) {
                return null != e4 && e4.kind === this.kind && e4.meta.jo === this.meta.jo && e4.meta.o0 === this.meta.o0 && e4.meta.n0 === this.meta.n0 && e4.meta.o1 === this.meta.o1 && e4.meta.n1 === this.meta.n1;
              } };
            }
          }
        }
        scan(e2, t2) {
          let n2 = { complete: false, sound: false, gaps: [], overs: [], lower: null, upper: null }, r3 = Number.NEGATIVE_INFINITY, s2 = Number.POSITIVE_INFINITY, i2 = this.half_intervals(e2);
          i2.reduce((e3, t3) => {
            let n3 = "eq" === t3.o, s3 = "lt" === t3.o, i3 = "lte" === t3.o, o3 = "gt" === t3.o, l2 = "gte" === t3.o, u2 = t3.n;
            if (null == e3.lower) {
              let s4 = { n: r3, o: "gte" };
              e3.lower = s4, e3.upper = t3, r3 == u2 && l2 || (o3 || l2 ? e3.gaps.push([s4, { n: u2, o: o3 ? "lte" : "lt", m: 0 }]) : n3 && e3.gaps.push([s4, { n: u2, o: "lte", m: 1 }]));
            } else {
              let r4 = "eq" === e3.upper.o, a2 = "lt" === e3.upper.o, f2 = "lte" === e3.upper.o, p2 = (e3.upper.o, e3.upper.o, e3.upper.n), h2 = e3.upper;
              u2 === p2 ? a2 && (l2 || n3) || (f2 || r4) && o3 || (r4 || a2 || f2) && e3.gaps.push([{ n: p2, o: r4 || f2 ? "gt" : "gte", m: 2, d: { u: h2, h: t3 } }, { n: u2, o: n3 || l2 ? "lt" : "lte", m: 3 }]) : p2 < u2 ? s3 || i3 || (r4 || a2 || f2) && e3.gaps.push([{ n: p2, o: r4 || f2 ? "gt" : "gte", m: 4 }, { n: u2, o: n3 || l2 ? "lt" : "lte", m: 5 }]) : e3.overs.push([{ n: u2, o: n3 || l2 ? "gte" : "gt", m: 10 }, { n: p2, o: r4 || f2 ? "lte" : "lt", m: 11 }]), e3.upper = t3;
            }
            return e3;
          }, n2);
          let o2 = 0 < i2.length && i2[i2.length - 1];
          return o2 && s2 !== o2.n && "gt" !== o2.o && "gte" !== o2.o && n2.gaps.push([{ n: o2.n, o: "eq" === o2.o || "lte" === o2.o ? "gt" : "gte", m: 6 }, { n: s2, o: "lte", m: 7 }]), n2.complete = 0 === n2.gaps.length, n2.sound = 0 === n2.overs.length, n2;
        }
        half_intervals(e2) {
          let t2 = [];
          for (let r3 of e2)
            t2.push([{ n: r3.meta.n0, o: r3.meta.o0 }, { n: r3.meta.n1, o: r3.meta.o1 }]);
          var n2 = ["lt", "lte", "eq", "gte", "gt"];
          return t2.map((e3) => [isNaN(e3[0].n) || null == e3[0].n ? null : e3[0], isNaN(e3[1].n) || null == e3[1].n ? null : e3[1]].filter((e4) => null != e4)).sort((e3, t3) => {
            if (e3[0].n < t3[0].n)
              return -1;
            if (t3[0].n < e3[0].n)
              return 1;
            var r3 = n2.indexOf(e3[0].o), s2 = n2.indexOf(t3[0].o);
            if (r3 < s2)
              return -1;
            if (s2 < r3)
              return 1;
            if (e3[1].n < t3[1].n)
              return -1;
            if (t3[1].n < e3[1].n)
              return 1;
            var i2 = n2.indexOf(e3[1].o), o2 = n2.indexOf(t3[1].o);
            return i2 < o2 ? -1 : o2 < i2 ? 1 : 0;
          }).reduce((e3, t3) => e3.concat(...t3), []);
        }
      }
      f.IntervalMatcher = c, t = /* @__PURE__ */ new WeakMap(), n = /* @__PURE__ */ new WeakMap(), r2 = /* @__PURE__ */ new WeakMap(), s = /* @__PURE__ */ new WeakMap(), i = /* @__PURE__ */ new WeakMap(), o = /* @__PURE__ */ new WeakMap(), l = /* @__PURE__ */ new WeakMap(), u = /* @__PURE__ */ new WeakMap(), a = /* @__PURE__ */ new WeakMap(), c.normop = (e2) => null == e2 ? null : ((e2.match(/([<>\(\)\[\]])/) || [])[1] || "") + ((e2.match(/(=)/) || [])[1] || "");
      var d = { exports: {} };
      function g(t2) {
        var n2 = {}, r3 = {};
        let s2 = [];
        return (t2 = t2 || {}).gex && s2.push(new f.GexMatcher()), t2.interval && s2.push(new f.IntervalMatcher()), n2.top = function() {
          return r3;
        }, n2.add = function(e2, i2) {
          e2 = __spreadValues({}, e2);
          var o2 = "function" == typeof t2 ? t2.call(n2, e2, i2) : null, l2 = Object.keys(e2).filter((t3) => null != e2[t3]).sort();
          l2.forEach(function(t3) {
            e2[t3] = String(e2[t3]);
          });
          for (var u2, a2 = r3, f2 = 0; f2 < l2.length; f2++) {
            var p2 = l2[f2], h2 = e2[p2];
            let t3 = s2.reduce((e3, t4) => e3 || t4.make(p2, h2), void 0);
            if ((u2 = a2.v) && p2 == a2.k)
              if (t3) {
                var c2 = (g2 = a2.g = a2.g || {})[p2] = g2[p2] || [];
                a2 = (t3 = c2.find((e3) => e3.same(t3)) || (c2.push(t3), t3)).keymap || (t3.keymap = {});
              } else
                a2 = u2[h2] || (u2[h2] = {});
            else if (a2.k)
              if (p2 < a2.k) {
                var d2 = a2.s;
                g2 = a2.g, a2.s = { k: a2.k, v: a2.v }, d2 && (a2.s.s = d2), g2 && (a2.s.g = g2), a2.g && (a2.g = {}), a2.k = p2, a2.v = {}, t3 ? (c2 = (g2 = a2.g = a2.g || {})[p2] = g2[p2] || [], a2 = (t3 = c2.find((e3) => e3.same(t3)) || (c2.push(t3), t3)).keymap || (t3.keymap = {})) : a2 = a2.v[h2] = {};
              } else
                a2 = a2.s || (a2.s = {}), f2--;
            else if (a2.k = p2, a2.v = {}, t3) {
              var g2;
              c2 = (g2 = a2.g = a2.g || {})[p2] = g2[p2] || [];
              a2 = (t3 = c2.find((e3) => e3.same(t3)) || (c2.push(t3), t3)).keymap || (t3.keymap = {});
            } else
              a2 = a2.v[h2] = {};
          }
          return void 0 !== i2 && a2 && (a2.d = i2, o2 && (a2.f = "function" == typeof o2 ? o2 : o2.find, a2.r = "function" == typeof o2.remove ? o2.remove : void 0)), n2;
        }, n2.findexact = function(e2) {
          return n2.find(e2, true);
        }, n2.find = function(e2, t3, s3) {
          if (null == e2)
            return null;
          var i2 = r3, o2 = void 0 === r3.d ? null : r3.d, l2 = r3.f, u2 = null, a2 = [], f2 = {}, p2 = Object.keys(e2).length, h2 = [];
          void 0 !== r3.d && h2.push(r3.d);
          do {
            if (u2 = i2.k, i2.v) {
              var c2 = e2[u2], d2 = i2.v[c2];
              if (!d2 && i2.g && i2.g[u2]) {
                for (var g2 = i2.g[u2], m2 = 0; m2 < g2.length; m2++)
                  if (g2[m2].match(c2)) {
                    d2 = g2[m2].keymap;
                    break;
                  }
              }
              d2 ? (f2[u2] = true, i2.s && a2.push(i2.s), o2 = void 0 === d2.d ? t3 ? null : o2 : d2.d, s3 && void 0 !== d2.d && h2.push(d2.d), l2 = d2.f, i2 = d2) : i2 = i2.s;
            } else
              i2 = null;
            null == i2 && 0 < a2.length && (null == o2 || s3 && !t3) && (i2 = a2.pop());
          } while (i2);
          return t3 ? Object.keys(f2).length !== p2 && (o2 = null) : null == o2 && void 0 !== r3.d && (o2 = r3.d), l2 && (o2 = l2.call(n2, e2, o2)), s3 ? h2 : o2;
        }, n2.remove = function(e2) {
          var t3, n3 = r3, s3 = null, i2 = [];
          do {
            if (t3 = n3.k, n3.v || n3.g) {
              if (n3.v) {
                var o2 = n3.v[e2[t3]];
                o2 && i2.push({ km: n3, v: e2[t3] });
              }
              if (null == o2 && n3.g) {
                let r4 = n3.g[t3] || [];
                for (let s4 = 0; s4 < r4.length; s4++)
                  if (r4[s4].fix === e2[t3]) {
                    i2.push({ km: n3, v: e2[t3], mv: r4[s4] }), o2 = r4[s4].keymap;
                    break;
                  }
              }
              o2 ? (s3 = o2.d, n3 = o2) : n3 = n3.s;
            } else
              n3 = null;
          } while (n3);
          if (void 0 !== s3) {
            var l2 = i2[i2.length - 1];
            if (l2 && l2.km && l2.km.v) {
              var u2 = l2.km.v[l2.v] || l2.mv && l2.mv.keymap;
              !u2 || u2.r && !u2.r(e2, u2.d) || delete u2.d;
            }
          }
        }, n2.list = function(t3, n3) {
          t3 = t3 || {};
          var s3 = [];
          return r3.d && s3.push({ match: {}, data: r3.d, find: r3.f }), function r4(s4, i2, o2, l2) {
            if (s4.v) {
              var u2, a2 = s4.k, f2 = (0, e.Gex)(t3 ? null == t3[a2] ? n3 ? null : "*" : t3[a2] : "*"), p2 = __spreadValues({}, i2), h2 = __spreadValues({}, o2);
              for (var c2 in s4.v)
                if (c2 === t3[a2] || !n3 && null == t3[a2] || f2.on(c2)) {
                  var d2 = __spreadValues({}, p2);
                  d2[a2] = c2;
                  var g2 = __spreadValues({}, h2);
                  delete g2[a2], u2 = s4.v[c2], 0 === Object.keys(g2).length && u2 && u2.d && l2.push({ match: d2, data: u2.d, find: u2.f }), u2 && null != u2.v && r4(u2, __spreadValues({}, d2), __spreadValues({}, g2), l2);
                }
              (u2 = s4.s) && r4(u2, __spreadValues({}, p2), __spreadValues({}, h2), l2);
            }
          }(r3, {}, __spreadValues({}, t3), s3), s3;
        }, n2.toString = function(e2, t3) {
          var n3 = true === e2 || !!t3, s3 = "function" == typeof e2 ? e2 : function(e3) {
            return "function" == typeof e3 ? "<" + e3.name + ">" : "<" + e3 + ">";
          };
          function i2(e3, t4) {
            for (var n4 = 0; n4 < t4; n4++)
              e3.push(" ");
          }
          var o2 = [], l2 = [];
          return function e3(t4, n4, r4, l3) {
            var u2;
            if (void 0 !== t4.d && (n4.push(" " + s3(t4.d)), o2.push(l3.join(", ") + " -> " + s3(t4.d))), t4.k && (n4.push("\n"), i2(n4, r4), n4.push(t4.k + ":")), (t4.v || t4.s || t4.g) && r4++, t4.v)
              for (var a2 = Object.keys(t4.v).sort(), f2 = 0; f2 < a2.length; f2++) {
                var p2 = a2[f2];
                n4.push("\n"), i2(n4, r4), n4.push(p2 + " ->"), (u2 = l3.slice()).push(t4.k + "=" + p2), e3(t4.v[p2], n4, r4 + 1, u2);
              }
            if (t4.g)
              for (a2 = Object.keys(t4.g).sort(), f2 = 0; f2 < a2.length; f2++)
                for (var h2 = t4.g[a2[f2]], c2 = 0; c2 < h2.length; c2++) {
                  var d2 = h2[c2];
                  n4.push("\n"), i2(n4, r4), n4.push(d2.fix + " ~>"), (u2 = l3.slice()).push(t4.k + "~" + d2.fix), e3(d2.keymap, n4, r4 + 1, u2);
                }
            t4.s && (n4.push("\n"), i2(n4, r4), n4.push("|"), u2 = l3.slice(), e3(t4.s, n4, r4 + 1, u2));
          }(r3, l2, 0, []), n3 ? l2.join("") : o2.join("\n");
        }, n2.inspect = n2.toString, n2.toJSON = function(e2) {
          return JSON.stringify(r3, function(e3, t3) {
            return "function" == typeof t3 ? "[Function]" : t3;
          }, e2);
        }, n2;
      }
      function m(e2) {
        return new g(e2);
      }
      return Object.defineProperty(d.exports, "__esModule", { value: true }), d.exports.Gex = d.exports.Patrun = void 0, Object.defineProperty(d.exports, "Gex", { enumerable: true, get: function() {
        return e.Gex;
      } }), d.exports.Patrun = g, d.exports = m, d.exports.Patrun = g, d.exports.Gex = e.Gex, d.exports.default = m, d = d.exports;
    });
  })(patrun_min$1, patrun_min$1.exports);
  var patrun_minExports = patrun_min$1.exports;
  const Patrun = /* @__PURE__ */ getDefaultExportFromCjs(patrun_minExports);
  var jsonic$1 = { exports: {} };
  var types = {};
  "use strict";
  Object.defineProperty(types, "__esModule", { value: true });
  var STRING = types.STRING = INSPECT = types.INSPECT = EMPTY = types.EMPTY = AFTER = types.AFTER = BEFORE = types.BEFORE = CLOSE = types.CLOSE = OPEN = types.OPEN = void 0;
  var OPEN = types.OPEN = "o";
  var CLOSE = types.CLOSE = "c";
  var BEFORE = types.BEFORE = "b";
  var AFTER = types.AFTER = "a";
  var EMPTY = types.EMPTY = "";
  var INSPECT = types.INSPECT = Symbol.for("nodejs.util.inspect.custom");
  STRING = types.STRING = "string";
  var utility = {};
  var lexer = {};
  var hasRequiredLexer;
  function requireLexer() {
    if (hasRequiredLexer)
      return lexer;
    hasRequiredLexer = 1;
    "use strict";
    Object.defineProperty(lexer, "__esModule", { value: true });
    lexer.makeTextMatcher = lexer.makeNumberMatcher = lexer.makeCommentMatcher = lexer.makeStringMatcher = lexer.makeLineMatcher = lexer.makeSpaceMatcher = lexer.makeFixedMatcher = lexer.makeMatchMatcher = lexer.makeToken = lexer.makePoint = lexer.makeLex = lexer.makeNoToken = void 0;
    const types_12 = types;
    const utility_12 = requireUtility();
    class PointImpl {
      constructor(len, sI, rI, cI) {
        this.len = -1;
        this.sI = 0;
        this.rI = 1;
        this.cI = 1;
        this.token = [];
        this.len = len;
        if (null != sI) {
          this.sI = sI;
        }
        if (null != rI) {
          this.rI = rI;
        }
        if (null != cI) {
          this.cI = cI;
        }
      }
      toString() {
        return "Point[" + [this.sI + "/" + this.len, this.rI, this.cI] + (0 < this.token.length ? " " + this.token : "") + "]";
      }
      [types_12.INSPECT]() {
        return this.toString();
      }
    }
    const makePoint = (...params) => new PointImpl(...params);
    lexer.makePoint = makePoint;
    class TokenImpl {
      constructor(name, tin, val, src, pnt, use, why) {
        this.isToken = true;
        this.name = types_12.EMPTY;
        this.tin = -1;
        this.val = void 0;
        this.src = types_12.EMPTY;
        this.sI = -1;
        this.rI = -1;
        this.cI = -1;
        this.len = -1;
        this.name = name;
        this.tin = tin;
        this.src = src;
        this.val = val;
        this.sI = pnt.sI;
        this.rI = pnt.rI;
        this.cI = pnt.cI;
        this.use = use;
        this.why = why;
        this.len = null == src ? 0 : src.length;
      }
      resolveVal(rule, ctx) {
        let out = "function" === typeof this.val ? this.val(rule, ctx) : this.val;
        return out;
      }
      bad(err, details) {
        this.err = err;
        if (null != details) {
          this.use = (0, utility_12.deep)(this.use || {}, details);
        }
        return this;
      }
      toString() {
        return "Token[" + this.name + "=" + this.tin + " " + (0, utility_12.snip)(this.src) + (void 0 === this.val || "#ST" === this.name || "#TX" === this.name ? "" : "=" + (0, utility_12.snip)(this.val)) + " " + [this.sI, this.rI, this.cI] + (null == this.use ? "" : " " + (0, utility_12.snip)("" + JSON.stringify(this.use).replace(/"/g, ""), 22)) + (null == this.err ? "" : " " + this.err) + (null == this.why ? "" : " " + (0, utility_12.snip)("" + this.why, 22)) + "]";
      }
      [types_12.INSPECT]() {
        return this.toString();
      }
    }
    const makeToken = (...params) => new TokenImpl(...params);
    lexer.makeToken = makeToken;
    const makeNoToken = () => makeToken("", -1, void 0, types_12.EMPTY, makePoint(-1));
    lexer.makeNoToken = makeNoToken;
    let makeFixedMatcher = (cfg, _opts) => {
      let fixed = (0, utility_12.regexp)(null, "^(", cfg.rePart.fixed, ")");
      return function fixedMatcher(lex) {
        let mcfg = cfg.fixed;
        if (!mcfg.lex)
          return void 0;
        if (cfg.fixed.check) {
          let check = cfg.fixed.check(lex);
          if (check && check.done) {
            return check.token;
          }
        }
        let pnt = lex.pnt;
        let fwd = lex.src.substring(pnt.sI);
        let m = fwd.match(fixed);
        if (m) {
          let msrc = m[1];
          let mlen = msrc.length;
          if (0 < mlen) {
            let tkn = void 0;
            let tin = mcfg.token[msrc];
            if (null != tin) {
              tkn = lex.token(tin, void 0, msrc, pnt);
              pnt.sI += mlen;
              pnt.cI += mlen;
            }
            return tkn;
          }
        }
      };
    };
    lexer.makeFixedMatcher = makeFixedMatcher;
    let makeMatchMatcher = (cfg, _opts) => {
      let valueMatchers = (0, utility_12.values)(cfg.match.value);
      let tokenMatchers = (0, utility_12.values)(cfg.match.token);
      if (0 === valueMatchers.length && 0 === tokenMatchers.length) {
        return null;
      }
      return function matchMatcher(lex, rule, tI = 0) {
        let mcfg = cfg.match;
        if (!mcfg.lex)
          return void 0;
        if (cfg.match.check) {
          let check = cfg.match.check(lex);
          if (check && check.done) {
            return check.token;
          }
        }
        let pnt = lex.pnt;
        let fwd = lex.src.substring(pnt.sI);
        let oc = "o" === rule.state ? 0 : 1;
        for (let valueMatcher of valueMatchers) {
          if (valueMatcher.match instanceof RegExp) {
            let m = fwd.match(valueMatcher.match);
            if (m) {
              let msrc = m[0];
              let mlen = msrc.length;
              if (0 < mlen) {
                let tkn = void 0;
                let val = valueMatcher.val ? valueMatcher.val(m) : msrc;
                tkn = lex.token("#VL", val, msrc, pnt);
                pnt.sI += mlen;
                pnt.cI += mlen;
                return tkn;
              }
            }
          } else {
            let tkn = valueMatcher.match(lex, rule);
            if (null != tkn) {
              return tkn;
            }
          }
        }
        for (let tokenMatcher of tokenMatchers) {
          if (tokenMatcher.tin$ && !rule.spec.def.tcol[oc][tI].includes(tokenMatcher.tin$)) {
            continue;
          }
          if (tokenMatcher instanceof RegExp) {
            let m = fwd.match(tokenMatcher);
            if (m) {
              let msrc = m[0];
              let mlen = msrc.length;
              if (0 < mlen) {
                let tkn = void 0;
                let tin = tokenMatcher.tin$;
                tkn = lex.token(tin, msrc, msrc, pnt);
                pnt.sI += mlen;
                pnt.cI += mlen;
                return tkn;
              }
            }
          } else {
            let tkn = tokenMatcher(lex, rule);
            if (null != tkn) {
              return tkn;
            }
          }
        }
      };
    };
    lexer.makeMatchMatcher = makeMatchMatcher;
    let makeCommentMatcher = (cfg, opts) => {
      let oc = opts.comment;
      cfg.comment = {
        lex: oc ? !!oc.lex : false,
        def: ((oc === null || oc === void 0 ? void 0 : oc.def) ? (0, utility_12.entries)(oc.def) : []).reduce((def, [name, om]) => {
          if (null == om || false === om) {
            return def;
          }
          let cm = {
            name,
            start: om.start,
            end: om.end,
            line: !!om.line,
            lex: !!om.lex,
            eatline: !!om.eatline
          };
          def[name] = cm;
          return def;
        }, {})
      };
      let lineComments = cfg.comment.lex ? (0, utility_12.values)(cfg.comment.def).filter((c) => c.lex && c.line) : [];
      let blockComments = cfg.comment.lex ? (0, utility_12.values)(cfg.comment.def).filter((c) => c.lex && !c.line) : [];
      return function matchComment(lex, _rule) {
        let mcfg = cfg.comment;
        if (!mcfg.lex)
          return void 0;
        if (cfg.comment.check) {
          let check = cfg.comment.check(lex);
          if (check && check.done) {
            return check.token;
          }
        }
        let pnt = lex.pnt;
        let fwd = lex.src.substring(pnt.sI);
        let rI = pnt.rI;
        let cI = pnt.cI;
        for (let mc of lineComments) {
          if (fwd.startsWith(mc.start)) {
            let fwdlen = fwd.length;
            let fI = mc.start.length;
            cI += mc.start.length;
            while (fI < fwdlen && !cfg.line.chars[fwd[fI]]) {
              cI++;
              fI++;
            }
            if (mc.eatline) {
              while (fI < fwdlen && cfg.line.chars[fwd[fI]]) {
                if (cfg.line.rowChars[fwd[fI]]) {
                  rI++;
                }
                fI++;
              }
            }
            let csrc = fwd.substring(0, fI);
            let tkn = lex.token("#CM", void 0, csrc, pnt);
            pnt.sI += csrc.length;
            pnt.cI = cI;
            pnt.rI = rI;
            return tkn;
          }
        }
        for (let mc of blockComments) {
          if (fwd.startsWith(mc.start)) {
            let fwdlen = fwd.length;
            let fI = mc.start.length;
            let end2 = mc.end;
            cI += mc.start.length;
            while (fI < fwdlen && !fwd.substring(fI).startsWith(end2)) {
              if (cfg.line.rowChars[fwd[fI]]) {
                rI++;
                cI = 0;
              }
              cI++;
              fI++;
            }
            if (fwd.substring(fI).startsWith(end2)) {
              cI += end2.length;
              if (mc.eatline) {
                while (fI < fwdlen && cfg.line.chars[fwd[fI]]) {
                  if (cfg.line.rowChars[fwd[fI]]) {
                    rI++;
                  }
                  fI++;
                }
              }
              let csrc = fwd.substring(0, fI + end2.length);
              let tkn = lex.token("#CM", void 0, csrc, pnt);
              pnt.sI += csrc.length;
              pnt.rI = rI;
              pnt.cI = cI;
              return tkn;
            } else {
              return lex.bad(utility_12.S.unterminated_comment, pnt.sI, pnt.sI + 9 * mc.start.length);
            }
          }
        }
      };
    };
    lexer.makeCommentMatcher = makeCommentMatcher;
    let makeTextMatcher = (cfg, opts) => {
      let ender = (0, utility_12.regexp)(cfg.line.lex ? null : "s", "^(.*?)", ...cfg.rePart.ender);
      return function textMatcher(lex) {
        if (cfg.text.check) {
          let check = cfg.text.check(lex);
          if (check && check.done) {
            return check.token;
          }
        }
        let mcfg = cfg.text;
        let pnt = lex.pnt;
        let fwd = lex.src.substring(pnt.sI);
        let def = cfg.value.def;
        let defre = cfg.value.defre;
        let m = fwd.match(ender);
        if (m) {
          let msrc = m[1];
          let tsrc = m[2];
          let out = void 0;
          if (null != msrc) {
            let mlen = msrc.length;
            if (0 < mlen) {
              let vs = void 0;
              if (cfg.value.lex) {
                if (void 0 !== (vs = def[msrc])) {
                  out = lex.token("#VL", vs.val, msrc, pnt);
                  pnt.sI += mlen;
                  pnt.cI += mlen;
                } else {
                  for (let vname in defre) {
                    let vspec = defre[vname];
                    if (vspec.match) {
                      let res = vspec.match.exec(vspec.consume ? fwd : msrc);
                      if (res && (vspec.consume || res[0].length === msrc.length)) {
                        let remsrc = res[0];
                        if (null == vspec.val) {
                          out = lex.token("#VL", remsrc, remsrc, pnt);
                        } else {
                          let val = vspec.val(res);
                          out = lex.token("#VL", val, remsrc, pnt);
                        }
                        pnt.sI += remsrc.length;
                        pnt.cI += remsrc.length;
                      }
                    }
                  }
                }
              }
              if (null == out && mcfg.lex) {
                out = lex.token("#TX", msrc, msrc, pnt);
                pnt.sI += mlen;
                pnt.cI += mlen;
              }
            }
          }
          if (out) {
            out = subMatchFixed(lex, out, tsrc);
          }
          if (out && 0 < cfg.text.modify.length) {
            const modify = cfg.text.modify;
            for (let mI = 0; mI < modify.length; mI++) {
              out.val = modify[mI](out.val, lex, cfg, opts);
            }
          }
          return out;
        }
      };
    };
    lexer.makeTextMatcher = makeTextMatcher;
    let makeNumberMatcher = (cfg, _opts) => {
      let mcfg = cfg.number;
      let ender = (0, utility_12.regexp)(null, [
        "^([-+]?(0(",
        [
          mcfg.hex ? "x[0-9a-fA-F_]+" : null,
          mcfg.oct ? "o[0-7_]+" : null,
          mcfg.bin ? "b[01_]+" : null
        ].filter((s) => null != s).join("|"),
        // ')|[.0-9]+([0-9_]*[0-9])?)',
        ")|\\.?[0-9]+([0-9_]*[0-9])?)",
        "(\\.[0-9]?([0-9_]*[0-9])?)?",
        "([eE][-+]?[0-9]+([0-9_]*[0-9])?)?"
      ].join("").replace(/_/g, mcfg.sep ? (0, utility_12.escre)(mcfg.sepChar) : ""), ")", ...cfg.rePart.ender);
      let numberSep = mcfg.sep ? (0, utility_12.regexp)("g", (0, utility_12.escre)(mcfg.sepChar)) : void 0;
      return function matchNumber(lex) {
        mcfg = cfg.number;
        if (!mcfg.lex)
          return void 0;
        if (cfg.number.check) {
          let check = cfg.number.check(lex);
          if (check && check.done) {
            return check.token;
          }
        }
        let pnt = lex.pnt;
        let fwd = lex.src.substring(pnt.sI);
        let valdef = cfg.value.def;
        let m = fwd.match(ender);
        if (m) {
          let msrc = m[1];
          let tsrc = m[9];
          let out = void 0;
          let included = true;
          if (null != msrc && (included = !cfg.number.exclude || !msrc.match(cfg.number.exclude))) {
            let mlen = msrc.length;
            if (0 < mlen) {
              let vs = void 0;
              if (cfg.value.lex && void 0 !== (vs = valdef[msrc])) {
                out = lex.token("#VL", vs.val, msrc, pnt);
              } else {
                let nstr = numberSep ? msrc.replace(numberSep, "") : msrc;
                let num = +nstr;
                if (isNaN(num)) {
                  let first = nstr[0];
                  if ("-" === first || "+" === first) {
                    num = ("-" === first ? -1 : 1) * +nstr.substring(1);
                  }
                }
                if (!isNaN(num)) {
                  out = lex.token("#NR", num, msrc, pnt);
                  pnt.sI += mlen;
                  pnt.cI += mlen;
                }
              }
            }
          }
          if (included) {
            out = subMatchFixed(lex, out, tsrc);
          }
          return out;
        }
      };
    };
    lexer.makeNumberMatcher = makeNumberMatcher;
    let makeStringMatcher = (cfg, opts) => {
      let os = opts.string || {};
      cfg.string = cfg.string || {};
      cfg.string = (0, utility_12.deep)(cfg.string, {
        lex: !!(os === null || os === void 0 ? void 0 : os.lex),
        quoteMap: (0, utility_12.charset)(os.chars),
        multiChars: (0, utility_12.charset)(os.multiChars),
        escMap: __spreadValues({}, os.escape),
        escChar: os.escapeChar,
        escCharCode: null == os.escapeChar ? void 0 : os.escapeChar.charCodeAt(0),
        allowUnknown: !!os.allowUnknown,
        replaceCodeMap: (0, utility_12.omap)((0, utility_12.clean)(__spreadValues({}, os.replace)), ([c, r2]) => [
          c.charCodeAt(0),
          r2
        ]),
        hasReplace: false,
        abandon: !!os.abandon
      });
      cfg.string.escMap = (0, utility_12.clean)(cfg.string.escMap);
      cfg.string.hasReplace = 0 < (0, utility_12.keys)(cfg.string.replaceCodeMap).length;
      return function stringMatcher(lex) {
        let mcfg = cfg.string;
        if (!mcfg.lex)
          return void 0;
        if (cfg.string.check) {
          let check = cfg.string.check(lex);
          if (check && check.done) {
            return check.token;
          }
        }
        let { quoteMap, escMap, escChar, escCharCode, multiChars, allowUnknown, replaceCodeMap, hasReplace } = mcfg;
        let { pnt, src } = lex;
        let { sI, rI, cI } = pnt;
        let srclen = src.length;
        if (quoteMap[src[sI]]) {
          const q = src[sI];
          const qI = sI;
          const qrI = rI;
          const isMultiLine = multiChars[q];
          ++sI;
          ++cI;
          let s = [];
          let rs;
          for (sI; sI < srclen; sI++) {
            cI++;
            let c = src[sI];
            rs = void 0;
            if (q === c) {
              sI++;
              break;
            } else if (escChar === c) {
              sI++;
              cI++;
              let es = escMap[src[sI]];
              if (null != es) {
                s.push(es);
              } else if ("x" === src[sI]) {
                sI++;
                let cc = parseInt(src.substring(sI, sI + 2), 16);
                if (isNaN(cc)) {
                  if (mcfg.abandon) {
                    return void 0;
                  }
                  sI = sI - 2;
                  cI -= 2;
                  pnt.sI = sI;
                  pnt.cI = cI;
                  return lex.bad(utility_12.S.invalid_ascii, sI, sI + 4);
                }
                let us = String.fromCharCode(cc);
                s.push(us);
                sI += 1;
                cI += 2;
              } else if ("u" === src[sI]) {
                sI++;
                let ux = "{" === src[sI] ? (sI++, 1) : 0;
                let ulen = ux ? 6 : 4;
                let cc = parseInt(src.substring(sI, sI + ulen), 16);
                if (isNaN(cc)) {
                  if (mcfg.abandon) {
                    return void 0;
                  }
                  sI = sI - 2 - ux;
                  cI -= 2;
                  pnt.sI = sI;
                  pnt.cI = cI;
                  return lex.bad(utility_12.S.invalid_unicode, sI, sI + ulen + 2 + 2 * ux);
                }
                let us = String.fromCodePoint(cc);
                s.push(us);
                sI += ulen - 1 + ux;
                cI += ulen + ux;
              } else if (allowUnknown) {
                s.push(src[sI]);
              } else {
                if (mcfg.abandon) {
                  return void 0;
                }
                pnt.sI = sI;
                pnt.cI = cI - 1;
                return lex.bad(utility_12.S.unexpected, sI, sI + 1);
              }
            } else if (hasReplace && void 0 !== (rs = replaceCodeMap[src.charCodeAt(sI)])) {
              s.push(rs);
              cI++;
            } else {
              let bI = sI;
              let qc = q.charCodeAt(0);
              let cc = src.charCodeAt(sI);
              while ((!hasReplace || void 0 === (rs = replaceCodeMap[cc])) && sI < srclen && 32 <= cc && qc !== cc && escCharCode !== cc) {
                cc = src.charCodeAt(++sI);
                cI++;
              }
              cI--;
              if (void 0 === rs && cc < 32) {
                if (isMultiLine && cfg.line.chars[src[sI]]) {
                  if (cfg.line.rowChars[src[sI]]) {
                    pnt.rI = ++rI;
                  }
                  cI = 1;
                  s.push(src.substring(bI, sI + 1));
                } else {
                  if (mcfg.abandon) {
                    return void 0;
                  }
                  pnt.sI = sI;
                  pnt.cI = cI;
                  return lex.bad(utility_12.S.unprintable, sI, sI + 1);
                }
              } else {
                s.push(src.substring(bI, sI));
                sI--;
              }
            }
          }
          if (src[sI - 1] !== q || pnt.sI === sI - 1) {
            if (mcfg.abandon) {
              return void 0;
            }
            pnt.rI = qrI;
            return lex.bad(utility_12.S.unterminated_string, qI, sI);
          }
          const tkn = lex.token("#ST", s.join(types_12.EMPTY), src.substring(pnt.sI, sI), pnt);
          pnt.sI = sI;
          pnt.rI = rI;
          pnt.cI = cI;
          return tkn;
        }
      };
    };
    lexer.makeStringMatcher = makeStringMatcher;
    let makeLineMatcher = (cfg, _opts) => {
      return function matchLine(lex) {
        if (!cfg.line.lex)
          return void 0;
        if (cfg.line.check) {
          let check = cfg.line.check(lex);
          if (check && check.done) {
            return check.token;
          }
        }
        let { chars: chars2, rowChars } = cfg.line;
        let { pnt, src } = lex;
        let { sI, rI } = pnt;
        let single = cfg.line.single;
        let counts = void 0;
        if (single) {
          counts = {};
        }
        while (chars2[src[sI]]) {
          if (counts) {
            counts[src[sI]] = (counts[src[sI]] || 0) + 1;
            if (single) {
              if (1 < counts[src[sI]]) {
                break;
              }
            }
          }
          rI += rowChars[src[sI]] ? 1 : 0;
          sI++;
        }
        if (pnt.sI < sI) {
          let msrc = src.substring(pnt.sI, sI);
          const tkn = lex.token("#LN", void 0, msrc, pnt);
          pnt.sI += msrc.length;
          pnt.rI = rI;
          pnt.cI = 1;
          return tkn;
        }
      };
    };
    lexer.makeLineMatcher = makeLineMatcher;
    let makeSpaceMatcher = (cfg, _opts) => {
      return function spaceMatcher(lex) {
        if (!cfg.space.lex)
          return void 0;
        if (cfg.space.check) {
          let check = cfg.space.check(lex);
          if (check && check.done) {
            return check.token;
          }
        }
        let { chars: chars2 } = cfg.space;
        let { pnt, src } = lex;
        let { sI, cI } = pnt;
        while (chars2[src[sI]]) {
          sI++;
          cI++;
        }
        if (pnt.sI < sI) {
          let msrc = src.substring(pnt.sI, sI);
          const tkn = lex.token("#SP", void 0, msrc, pnt);
          pnt.sI += msrc.length;
          pnt.cI = cI;
          return tkn;
        }
      };
    };
    lexer.makeSpaceMatcher = makeSpaceMatcher;
    function subMatchFixed(lex, first, tsrc) {
      let pnt = lex.pnt;
      let out = first;
      if (lex.cfg.fixed.lex && null != tsrc) {
        let tknlen = tsrc.length;
        if (0 < tknlen) {
          let tkn = void 0;
          let tin = lex.cfg.fixed.token[tsrc];
          if (null != tin) {
            tkn = lex.token(tin, void 0, tsrc, pnt);
          }
          if (null != tkn) {
            pnt.sI += tkn.src.length;
            pnt.cI += tkn.src.length;
            if (null == first) {
              out = tkn;
            } else {
              pnt.token.push(tkn);
            }
          }
        }
      }
      return out;
    }
    class LexImpl {
      constructor(ctx) {
        this.src = types_12.EMPTY;
        this.ctx = {};
        this.cfg = {};
        this.pnt = makePoint(-1);
        this.ctx = ctx;
        this.src = ctx.src();
        this.cfg = ctx.cfg;
        this.pnt = makePoint(this.src.length);
      }
      token(ref, val, src, pnt, use, why) {
        let tin;
        let name;
        if ("string" === typeof ref) {
          name = ref;
          tin = (0, utility_12.tokenize)(name, this.cfg);
        } else {
          tin = ref;
          name = (0, utility_12.tokenize)(ref, this.cfg);
        }
        let tkn = makeToken(name, tin, val, src, pnt || this.pnt, use, why);
        return tkn;
      }
      next(rule, alt, altI, tI) {
        let tkn;
        let pnt = this.pnt;
        let sI = pnt.sI;
        let match2 = void 0;
        if (pnt.end) {
          tkn = pnt.end;
        } else if (0 < pnt.token.length) {
          tkn = pnt.token.shift();
        } else if (pnt.len <= pnt.sI) {
          pnt.end = this.token("#ZZ", void 0, "", pnt);
          tkn = pnt.end;
        } else {
          try {
            for (let mat of this.cfg.lex.match) {
              if (tkn = mat(this, rule, tI)) {
                match2 = mat;
                break;
              }
            }
          } catch (err) {
            tkn = tkn || this.token("#BD", void 0, this.src[pnt.sI], pnt, { err }, err.code || utility_12.S.unexpected);
          }
          tkn = tkn || this.token("#BD", void 0, this.src[pnt.sI], pnt, void 0, utility_12.S.unexpected);
        }
        this.ctx.log && this.ctx.log(utility_12.S.lex, this.ctx, rule, this, pnt, sI, match2, tkn, alt, altI, tI);
        if (this.ctx.sub.lex) {
          this.ctx.sub.lex.map((sub) => sub(tkn, rule, this.ctx));
        }
        return tkn;
      }
      tokenize(ref) {
        return (0, utility_12.tokenize)(ref, this.cfg);
      }
      bad(why, pstart, pend) {
        return this.token("#BD", void 0, 0 <= pstart && pstart <= pend ? this.src.substring(pstart, pend) : this.src[this.pnt.sI], void 0, void 0, why);
      }
    }
    const makeLex = (...params) => new LexImpl(...params);
    lexer.makeLex = makeLex;
    return lexer;
  }
  var hasRequiredUtility;
  function requireUtility() {
    if (hasRequiredUtility)
      return utility;
    hasRequiredUtility = 1;
    "use strict";
    Object.defineProperty(utility, "__esModule", { value: true });
    utility.modlist = utility.findTokenSet = utility.values = utility.keys = utility.omap = utility.str = utility.prop = utility.parserwrap = utility.trimstk = utility.tokenize = utility.srcfmt = utility.snip = utility.regexp = utility.mesc = utility.makelog = utility.isarr = utility.filterRules = utility.extract = utility.escre = utility.errinject = utility.errdesc = utility.entries = utility.defprop = utility.deep = utility.configure = utility.clone = utility.clean = utility.charset = utility.badlex = utility.assign = utility.S = utility.JsonicError = void 0;
    const types_12 = types;
    const lexer_12 = requireLexer();
    const keys = (x) => null == x ? [] : Object.keys(x);
    utility.keys = keys;
    const values2 = (x) => null == x ? [] : Object.values(x);
    utility.values = values2;
    const entries = (x) => null == x ? [] : Object.entries(x);
    utility.entries = entries;
    const assign2 = (x, ...r2) => Object.assign(null == x ? {} : x, ...r2);
    utility.assign = assign2;
    const isarr = (x) => Array.isArray(x);
    utility.isarr = isarr;
    const defprop = Object.defineProperty;
    utility.defprop = defprop;
    const omap = (o, f) => {
      return Object.entries(o || {}).reduce((o2, e) => {
        let me = f ? f(e) : e;
        if (void 0 === me[0]) {
          delete o2[e[0]];
        } else {
          o2[me[0]] = me[1];
        }
        let i = 2;
        while (void 0 !== me[i]) {
          o2[me[i]] = me[i + 1];
          i += 2;
        }
        return o2;
      }, {});
    };
    utility.omap = omap;
    const S = {
      indent: ". ",
      logindent: "  ",
      space: " ",
      gap: "  ",
      Object: "Object",
      Array: "Array",
      object: "object",
      string: "string",
      function: "function",
      unexpected: "unexpected",
      map: "map",
      list: "list",
      elem: "elem",
      pair: "pair",
      val: "val",
      node: "node",
      no_re_flags: types_12.EMPTY,
      unprintable: "unprintable",
      invalid_ascii: "invalid_ascii",
      invalid_unicode: "invalid_unicode",
      invalid_lex_state: "invalid_lex_state",
      unterminated_string: "unterminated_string",
      unterminated_comment: "unterminated_comment",
      lex: "lex",
      parse: "parse",
      error: "error",
      none: "none",
      imp_map: "imp,map",
      imp_list: "imp,list",
      imp_null: "imp,null",
      end: "end",
      open: "open",
      close: "close",
      rule: "rule",
      stack: "stack",
      nUll: "null",
      name: "name",
      make: "make",
      colon: ":"
    };
    utility.S = S;
    class JsonicError extends SyntaxError {
      constructor(code, details, token2, rule, ctx) {
        details = deep({}, details);
        let desc = errdesc(code, details, token2, rule, ctx);
        super(desc.message);
        assign2(this, desc);
        trimstk(this);
      }
      toJSON() {
        return __spreadProps(__spreadValues({}, this), {
          __error: true,
          name: this.name,
          message: this.message,
          stack: this.stack
        });
      }
    }
    utility.JsonicError = JsonicError;
    function configure(jsonic2, incfg, opts) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _o, _p, _q, _r, _s, _t7, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26;
      const cfg = incfg || {};
      cfg.t = cfg.t || {};
      cfg.tI = cfg.tI || 1;
      const t = (tn) => tokenize2(tn, cfg);
      if (false !== opts.standard$) {
        t("#BD");
        t("#ZZ");
        t("#UK");
        t("#AA");
        t("#SP");
        t("#LN");
        t("#CM");
        t("#NR");
        t("#ST");
        t("#TX");
        t("#VL");
      }
      cfg.safe = {
        key: false === ((_a = opts.safe) === null || _a === void 0 ? void 0 : _a.key) ? false : true
      };
      cfg.fixed = {
        lex: !!((_b = opts.fixed) === null || _b === void 0 ? void 0 : _b.lex),
        token: opts.fixed ? omap(clean(opts.fixed.token), ([name, src]) => [
          src,
          tokenize2(name, cfg)
        ]) : {},
        ref: void 0,
        check: (_c = opts.fixed) === null || _c === void 0 ? void 0 : _c.check
      };
      cfg.fixed.ref = omap(cfg.fixed.token, ([tin, src]) => [
        tin,
        src
      ]);
      cfg.fixed.ref = Object.assign(cfg.fixed.ref, omap(cfg.fixed.ref, ([tin, src]) => [src, tin]));
      cfg.match = {
        lex: !!((_d = opts.match) === null || _d === void 0 ? void 0 : _d.lex),
        value: opts.match ? omap(clean(opts.match.value), ([name, spec]) => [
          name,
          spec
        ]) : {},
        token: opts.match ? omap(clean(opts.match.token), ([name, matcher]) => [
          tokenize2(name, cfg),
          matcher
        ]) : {},
        check: (_e = opts.match) === null || _e === void 0 ? void 0 : _e.check
      };
      omap(cfg.match.token, ([tin, matcher]) => [
        tin,
        (matcher.tin$ = +tin, matcher)
      ]);
      const tokenSet = opts.tokenSet ? Object.keys(opts.tokenSet).reduce((a, n) => (a[n] = opts.tokenSet[n].filter((x) => null != x).map((n2) => t(n2)), a), {}) : {};
      cfg.tokenSet = cfg.tokenSet || {};
      entries(tokenSet).map((entry) => {
        let name = entry[0];
        let tinset = entry[1];
        if (cfg.tokenSet[name]) {
          cfg.tokenSet[name].length = 0;
          cfg.tokenSet[name].push(...tinset);
        } else {
          cfg.tokenSet[name] = tinset;
        }
      });
      cfg.tokenSetTins = entries(cfg.tokenSet).reduce((a, en) => (a[en[0]] = a[en[0]] || {}, en[1].map((tin) => a[en[0]][tin] = true), a), {});
      cfg.tokenSetTins.IGNORE = cfg.tokenSetTins.IGNORE || {};
      cfg.space = {
        lex: !!((_f = opts.space) === null || _f === void 0 ? void 0 : _f.lex),
        chars: charset((_g = opts.space) === null || _g === void 0 ? void 0 : _g.chars),
        check: (_h = opts.space) === null || _h === void 0 ? void 0 : _h.check
      };
      cfg.line = {
        lex: !!((_j = opts.line) === null || _j === void 0 ? void 0 : _j.lex),
        chars: charset((_k = opts.line) === null || _k === void 0 ? void 0 : _k.chars),
        rowChars: charset((_l = opts.line) === null || _l === void 0 ? void 0 : _l.rowChars),
        single: !!((_o = opts.line) === null || _o === void 0 ? void 0 : _o.single),
        check: (_p = opts.line) === null || _p === void 0 ? void 0 : _p.check
      };
      cfg.text = {
        lex: !!((_q = opts.text) === null || _q === void 0 ? void 0 : _q.lex),
        modify: (((_r = cfg.text) === null || _r === void 0 ? void 0 : _r.modify) || []).concat([(_s = opts.text) === null || _s === void 0 ? void 0 : _s.modify].flat()).filter((m) => null != m),
        check: (_t7 = opts.text) === null || _t7 === void 0 ? void 0 : _t7.check
      };
      cfg.number = {
        lex: !!((_u = opts.number) === null || _u === void 0 ? void 0 : _u.lex),
        hex: !!((_v = opts.number) === null || _v === void 0 ? void 0 : _v.hex),
        oct: !!((_w = opts.number) === null || _w === void 0 ? void 0 : _w.oct),
        bin: !!((_x = opts.number) === null || _x === void 0 ? void 0 : _x.bin),
        sep: null != ((_y = opts.number) === null || _y === void 0 ? void 0 : _y.sep) && "" !== opts.number.sep,
        exclude: (_z = opts.number) === null || _z === void 0 ? void 0 : _z.exclude,
        sepChar: (_0 = opts.number) === null || _0 === void 0 ? void 0 : _0.sep,
        check: (_1 = opts.number) === null || _1 === void 0 ? void 0 : _1.check
      };
      cfg.value = {
        lex: !!((_2 = opts.value) === null || _2 === void 0 ? void 0 : _2.lex),
        def: entries(((_3 = opts.value) === null || _3 === void 0 ? void 0 : _3.def) || {}).reduce((a, e) => (null == e[1] || false === e[1] || e[1].match || (a[e[0]] = e[1]), a), {}),
        defre: entries(((_4 = opts.value) === null || _4 === void 0 ? void 0 : _4.def) || {}).reduce((a, e) => (e[1] && e[1].match && (a[e[0]] = e[1], a[e[0]].consume = !!a[e[0]].consume), a), {})
        // TODO: just testing, move to a plugin for extended values
        // 'undefined': { v: undefined },
        // 'NaN': { v: NaN },
        // 'Infinity': { v: Infinity },
        // '+Infinity': { v: +Infinity },
        // '-Infinity': { v: -Infinity },
      };
      cfg.rule = {
        start: null == ((_5 = opts.rule) === null || _5 === void 0 ? void 0 : _5.start) ? "val" : opts.rule.start,
        maxmul: null == ((_6 = opts.rule) === null || _6 === void 0 ? void 0 : _6.maxmul) ? 3 : opts.rule.maxmul,
        finish: !!((_7 = opts.rule) === null || _7 === void 0 ? void 0 : _7.finish),
        include: ((_8 = opts.rule) === null || _8 === void 0 ? void 0 : _8.include) ? opts.rule.include.split(/\s*,+\s*/).filter((g) => "" !== g) : [],
        exclude: ((_9 = opts.rule) === null || _9 === void 0 ? void 0 : _9.exclude) ? opts.rule.exclude.split(/\s*,+\s*/).filter((g) => "" !== g) : []
      };
      cfg.map = {
        extend: !!((_10 = opts.map) === null || _10 === void 0 ? void 0 : _10.extend),
        merge: (_11 = opts.map) === null || _11 === void 0 ? void 0 : _11.merge
      };
      cfg.list = {
        property: !!((_12 = opts.list) === null || _12 === void 0 ? void 0 : _12.property)
      };
      let fixedSorted = Object.keys(cfg.fixed.token).sort((a, b) => b.length - a.length);
      let fixedRE = fixedSorted.map((fixed) => escre(fixed)).join("|");
      let commentStartRE = ((_13 = opts.comment) === null || _13 === void 0 ? void 0 : _13.lex) ? (opts.comment.def ? values2(opts.comment.def) : []).filter((c) => c && c.lex).map((c) => escre(c.start)).join("|") : "";
      let enderRE = [
        "([",
        escre(keys(charset(cfg.space.lex && cfg.space.chars, cfg.line.lex && cfg.line.chars)).join("")),
        "]",
        ("string" === typeof opts.ender ? opts.ender.split("") : Array.isArray(opts.ender) ? opts.ender : []).map((c) => "|" + escre(c)).join(""),
        "" === fixedRE ? "" : "|",
        fixedRE,
        "" === commentStartRE ? "" : "|",
        commentStartRE,
        "|$)"
        // EOF case
      ];
      cfg.rePart = {
        fixed: fixedRE,
        ender: enderRE,
        commentStart: commentStartRE
      };
      cfg.re = {
        ender: regexp(null, ...enderRE),
        // TODO: prebuild these using a property on matcher?
        rowChars: regexp(null, escre((_14 = opts.line) === null || _14 === void 0 ? void 0 : _14.rowChars)),
        columns: regexp(null, "[" + escre((_15 = opts.line) === null || _15 === void 0 ? void 0 : _15.chars) + "]", "(.*)$")
      };
      cfg.lex = {
        empty: !!((_16 = opts.lex) === null || _16 === void 0 ? void 0 : _16.empty),
        emptyResult: (_17 = opts.lex) === null || _17 === void 0 ? void 0 : _17.emptyResult,
        match: ((_18 = opts.lex) === null || _18 === void 0 ? void 0 : _18.match) ? entries(opts.lex.match).reduce((list, entry) => {
          let name = entry[0];
          let matchspec = entry[1];
          if (matchspec) {
            let matcher = matchspec.make(cfg, opts);
            if (matcher) {
              matcher.matcher = name;
              matcher.make = matchspec.make;
              matcher.order = matchspec.order;
            }
            list.push(matcher);
          }
          return list;
        }, []).filter((m) => null != m && false !== m && -1 < +m.order).sort((a, b) => a.order - b.order) : []
      };
      cfg.parse = {
        prepare: values2((_19 = opts.parse) === null || _19 === void 0 ? void 0 : _19.prepare)
      };
      cfg.debug = {
        get_console: ((_20 = opts.debug) === null || _20 === void 0 ? void 0 : _20.get_console) || (() => console),
        maxlen: null == ((_21 = opts.debug) === null || _21 === void 0 ? void 0 : _21.maxlen) ? 99 : opts.debug.maxlen,
        print: {
          config: !!((_23 = (_22 = opts.debug) === null || _22 === void 0 ? void 0 : _22.print) === null || _23 === void 0 ? void 0 : _23.config),
          src: (_25 = (_24 = opts.debug) === null || _24 === void 0 ? void 0 : _24.print) === null || _25 === void 0 ? void 0 : _25.src
        }
      };
      cfg.error = opts.error || {};
      cfg.hint = opts.hint || {};
      if ((_26 = opts.config) === null || _26 === void 0 ? void 0 : _26.modify) {
        keys(opts.config.modify).forEach((modifer) => opts.config.modify[modifer](cfg, opts));
      }
      if (cfg.debug.print.config) {
        cfg.debug.get_console().dir(cfg, { depth: null });
      }
      cfg.result = {
        fail: []
      };
      if (opts.result) {
        cfg.result.fail = [...opts.result.fail];
      }
      assign2(jsonic2.options, opts);
      assign2(jsonic2.token, cfg.t);
      assign2(jsonic2.tokenSet, cfg.tokenSet);
      assign2(jsonic2.fixed, cfg.fixed.ref);
      return cfg;
    }
    utility.configure = configure;
    function tokenize2(ref, cfg, jsonic2) {
      let tokenmap = cfg.t;
      let token2 = tokenmap[ref];
      if (null == token2 && types_12.STRING === typeof ref) {
        token2 = cfg.tI++;
        tokenmap[token2] = ref;
        tokenmap[ref] = token2;
        tokenmap[ref.substring(1)] = token2;
        if (null != jsonic2) {
          assign2(jsonic2.token, cfg.t);
        }
      }
      return token2;
    }
    utility.tokenize = tokenize2;
    function findTokenSet(ref, cfg) {
      let tokenSetMap = cfg.tokenSet;
      let found = tokenSetMap[ref];
      return found;
    }
    utility.findTokenSet = findTokenSet;
    function mesc(s, _2) {
      return _2 = new String(s), _2.esc = true, _2;
    }
    utility.mesc = mesc;
    function regexp(flags, ...parts) {
      return new RegExp(parts.map((p) => p.esc ? (
        //p.replace(/[-\\|\]{}()[^$+*?.!=]/g, '\\$&')
        escre(p.toString())
      ) : p).join(types_12.EMPTY), null == flags ? "" : flags);
    }
    utility.regexp = regexp;
    function escre(s) {
      return null == s ? "" : s.replace(/[-\\|\]{}()[^$+*?.!=]/g, "\\$&").replace(/\t/g, "\\t").replace(/\r/g, "\\r").replace(/\n/g, "\\n");
    }
    utility.escre = escre;
    function deep(base, ...rest) {
      let base_isf = S.function === typeof base;
      let base_iso = null != base && (S.object === typeof base || base_isf);
      for (let over of rest) {
        let over_isf = S.function === typeof over;
        let over_iso = null != over && (S.object === typeof over || over_isf);
        let over_ctor;
        if (base_iso && over_iso && !over_isf && Array.isArray(base) === Array.isArray(over)) {
          for (let k in over) {
            base[k] = deep(base[k], over[k]);
          }
        } else {
          base = void 0 === over ? base : over_isf ? over : over_iso ? S.function === typeof (over_ctor = over.constructor) && S.Object !== over_ctor.name && S.Array !== over_ctor.name ? over : deep(Array.isArray(over) ? [] : {}, over) : over;
          base_isf = S.function === typeof base;
          base_iso = null != base && (S.object === typeof base || base_isf);
        }
      }
      return base;
    }
    utility.deep = deep;
    function errinject(s, code, details, token2, rule, ctx) {
      let ref = { code, details, token: token2, rule, ctx };
      return null == s ? "" : s.replace(/\$(\{?)([\w_0-9]+)(\}?)/g, (_m, ob, name, cb) => {
        let inject = null != ref[name] ? ref[name] : null != details[name] ? details[name] : ctx.meta && null != ctx.meta[name] ? ctx.meta[name] : null != token2[name] ? token2[name] : null != rule[name] ? rule[name] : null != ctx.opts[name] ? ctx.opts[name] : null != ctx.cfg[name] ? ctx.cfg[name] : null != ctx[name] ? ctx[name] : "$" + name;
        let instr = ob && cb ? inject : JSON.stringify(inject);
        instr = null == instr ? "" : instr;
        return instr.replace(/\n/g, "\n  ");
      });
    }
    utility.errinject = errinject;
    function trimstk(err) {
      if (err.stack) {
        err.stack = err.stack.split("\n").filter((s) => !s.includes("jsonic/jsonic")).map((s) => s.replace(/    at /, "at ")).join("\n");
      }
    }
    utility.trimstk = trimstk;
    function extract(src, errtxt, token2) {
      let loc = 0 < token2.sI ? token2.sI : 0;
      let row = 0 < token2.rI ? token2.rI : 1;
      let col = 0 < token2.cI ? token2.cI : 1;
      let tsrc = null == token2.src ? types_12.EMPTY : token2.src;
      let behind = src.substring(Math.max(0, loc - 333), loc).split("\n");
      let ahead = src.substring(loc, loc + 333).split("\n");
      let pad = 2 + (types_12.EMPTY + (row + 2)).length;
      let rc = row < 3 ? 1 : row - 2;
      let ln = (s) => "\x1B[34m" + (types_12.EMPTY + rc++).padStart(pad, " ") + " | \x1B[0m" + (null == s ? types_12.EMPTY : s);
      let blen = behind.length;
      let lines = [
        2 < blen ? ln(behind[blen - 3]) : null,
        1 < blen ? ln(behind[blen - 2]) : null,
        ln(behind[blen - 1] + ahead[0]),
        " ".repeat(pad) + "   " + " ".repeat(col - 1) + "\x1B[31m" + "^".repeat(tsrc.length || 1) + " " + errtxt + "\x1B[0m",
        ln(ahead[1]),
        ln(ahead[2])
      ].filter((line2) => null != line2).join("\n");
      return lines;
    }
    utility.extract = extract;
    function errdesc(code, details, token2, rule, ctx) {
      var _a, _b, _c;
      try {
        let cfg = ctx.cfg;
        let meta = ctx.meta;
        let errtxt = errinject(cfg.error[code] || ((_a = details === null || details === void 0 ? void 0 : details.use) === null || _a === void 0 ? void 0 : _a.err) && (details.use.err.code || details.use.err.message) || cfg.error.unknown, code, details, token2, rule, ctx);
        if (S.function === typeof cfg.hint) {
          cfg.hint = __spreadValues(__spreadValues({}, cfg.hint()), cfg.hint);
        }
        let message = [
          "\x1B[31m[jsonic/" + code + "]:\x1B[0m " + errtxt,
          "  \x1B[34m-->\x1B[0m " + (meta && meta.fileName || "<no-file>") + ":" + token2.rI + ":" + token2.cI,
          extract(ctx.src(), errtxt, token2),
          "",
          errinject((cfg.hint[code] || ((_c = (_b = details.use) === null || _b === void 0 ? void 0 : _b.err) === null || _c === void 0 ? void 0 : _c.message) || cfg.hint.unknown || "").trim().split("\n").map((s) => "  " + s).join("\n"), code, details, token2, rule, ctx),
          "",
          "  \x1B[2mhttps://jsonic.senecajs.org\x1B[0m",
          "  \x1B[2m--internal: rule=" + rule.name + "~" + rule.state + "; token=" + tokenize2(token2.tin, ctx.cfg) + (null == token2.why ? "" : "~" + token2.why) + "; plugins=" + ctx.plgn().map((p) => p.name).join(",") + "--\x1B[0m\n"
        ].join("\n");
        let desc = {
          internal: {
            token: token2,
            ctx
          }
        };
        desc = __spreadProps(__spreadValues({}, Object.create(desc)), {
          message,
          code,
          details,
          meta,
          fileName: meta ? meta.fileName : void 0,
          lineNumber: token2.rI,
          columnNumber: token2.cI
        });
        return desc;
      } catch (e) {
        console.log(e);
        return {};
      }
    }
    utility.errdesc = errdesc;
    function badlex(lex, BD, ctx) {
      let next2 = lex.next.bind(lex);
      lex.next = (rule, alt, altI, tI) => {
        let token2 = next2(rule, alt, altI, tI);
        if (BD === token2.tin) {
          let details = {};
          if (null != token2.use) {
            details.use = token2.use;
          }
          throw new JsonicError(token2.why || S.unexpected, details, token2, rule, ctx);
        }
        return token2;
      };
      return lex;
    }
    utility.badlex = badlex;
    function makelog(ctx, meta) {
      var _a, _b, _c;
      let trace = (_c = (_b = (_a = ctx.opts) === null || _a === void 0 ? void 0 : _a.plugin) === null || _b === void 0 ? void 0 : _b.debug) === null || _c === void 0 ? void 0 : _c.trace;
      if (meta || trace) {
        if ("number" === typeof (meta === null || meta === void 0 ? void 0 : meta.log) || trace) {
          let exclude_objects = false;
          let logdepth = meta === null || meta === void 0 ? void 0 : meta.log;
          if (-1 === logdepth || trace) {
            logdepth = 1;
            exclude_objects = true;
          }
          ctx.log = (...rest) => {
            if (exclude_objects) {
              let logstr = rest.filter((item) => S.object != typeof item).map((item) => S.function == typeof item ? item.name : item).join(S.gap);
              ctx.cfg.debug.get_console().log(logstr);
            } else {
              ctx.cfg.debug.get_console().dir(rest, { depth: logdepth });
            }
            return void 0;
          };
        } else if ("function" === typeof meta.log) {
          ctx.log = meta.log;
        }
      }
      return ctx.log;
    }
    utility.makelog = makelog;
    function srcfmt(config2) {
      return "function" === typeof config2.debug.print.src ? config2.debug.print.src : (s) => {
        let out = null == s ? types_12.EMPTY : Array.isArray(s) ? JSON.stringify(s).replace(/]$/, entries(s).filter((en) => isNaN(en[0])).map((en, i) => (0 === i ? ", " : "") + en[0] + ": " + JSON.stringify(en[1])) + // Just one level of array props!
        "]") : JSON.stringify(s);
        out = out.substring(0, config2.debug.maxlen) + (config2.debug.maxlen < out.length ? "..." : types_12.EMPTY);
        return out;
      };
    }
    utility.srcfmt = srcfmt;
    function str(o, len = 44) {
      let s;
      try {
        s = "object" === typeof o ? JSON.stringify(o) : "" + o;
      } catch (e) {
        s = "" + o;
      }
      return snip(len < s.length ? s.substring(0, len - 3) + "..." : s, len);
    }
    utility.str = str;
    function snip(s, len = 5) {
      return void 0 === s ? "" : ("" + s).substring(0, len).replace(/[\r\n\t]/g, ".");
    }
    utility.snip = snip;
    function clone(class_instance) {
      return deep(Object.create(Object.getPrototypeOf(class_instance)), class_instance);
    }
    utility.clone = clone;
    function charset(...parts) {
      return null == parts ? {} : parts.filter((p) => false !== p).map((p) => "object" === typeof p ? keys(p).join(types_12.EMPTY) : p).join(types_12.EMPTY).split(types_12.EMPTY).reduce((a, c) => (a[c] = c.charCodeAt(0), a), {});
    }
    utility.charset = charset;
    function clean(o) {
      for (let p in o) {
        if (null == o[p]) {
          delete o[p];
        }
      }
      return o;
    }
    utility.clean = clean;
    function filterRules(rs, cfg) {
      let rsnames = ["open", "close"];
      for (let rsn of rsnames) {
        ;
        rs.def[rsn] = rs.def[rsn].map((as) => (as.g = "string" === typeof as.g ? (as.g || "").split(/\s*,+\s*/) : as.g || [], as)).filter((as) => cfg.rule.include.reduce((a, g) => a || null != as.g && -1 !== as.g.indexOf(g), 0 === cfg.rule.include.length)).filter((as) => cfg.rule.exclude.reduce((a, g) => a && (null == as.g || -1 === as.g.indexOf(g)), true));
      }
      return rs;
    }
    utility.filterRules = filterRules;
    function prop(obj, path, val) {
      let root = obj;
      try {
        let parts = path.split(".");
        let pn;
        for (let pI = 0; pI < parts.length; pI++) {
          pn = parts[pI];
          if (pI < parts.length - 1) {
            obj = obj[pn] = obj[pn] || {};
          }
        }
        if (void 0 !== val) {
          obj[pn] = val;
        }
        return obj[pn];
      } catch (e) {
        throw new Error("Cannot " + (void 0 === val ? "get" : "set") + " path " + path + " on object: " + str(root) + (void 0 === val ? "" : " to value: " + str(val, 22)));
      }
    }
    utility.prop = prop;
    function modlist(list, mods) {
      if (mods && list) {
        if (0 < list.length) {
          if (mods.delete && 0 < mods.delete.length) {
            for (let i = 0; i < mods.delete.length; i++) {
              let mdI = mods.delete[i];
              if (mdI < 0 ? -1 * mdI <= list.length : mdI < list.length) {
                let dI = (list.length + mdI) % list.length;
                list[dI] = null;
              }
            }
          }
          if (mods.move) {
            for (let i = 0; i < mods.move.length; i += 2) {
              let fromI = (list.length + mods.move[i]) % list.length;
              let toI = (list.length + mods.move[i + 1]) % list.length;
              let entry = list[fromI];
              list.splice(fromI, 1);
              list.splice(toI, 0, entry);
            }
          }
          let filtered = list.filter((entry) => null != entry);
          if (filtered.length !== list.length) {
            list.length = 0;
            list.push(...filtered);
          }
        }
        if (mods.custom) {
          let newlist = mods.custom(list);
          if (null != newlist) {
            list = newlist;
          }
        }
      }
      return list;
    }
    utility.modlist = modlist;
    function parserwrap(parser2) {
      return {
        start: function(src, jsonic2, meta, parent_ctx) {
          try {
            return parser2.start(src, jsonic2, meta, parent_ctx);
          } catch (ex) {
            if ("SyntaxError" === ex.name) {
              let loc = 0;
              let row = 0;
              let col = 0;
              let tsrc = types_12.EMPTY;
              let errloc = ex.message.match(/^Unexpected token (.) .*position\s+(\d+)/i);
              if (errloc) {
                tsrc = errloc[1];
                loc = parseInt(errloc[2]);
                row = src.substring(0, loc).replace(/[^\n]/g, types_12.EMPTY).length;
                let cI = loc - 1;
                while (-1 < cI && "\n" !== src.charAt(cI))
                  cI--;
                col = Math.max(src.substring(cI, loc).length, 0);
              }
              let token2 = ex.token || (0, lexer_12.makeToken)(
                "#UK",
                // tokenize('#UK', jsonic.config),
                tokenize2("#UK", jsonic2.internal().config),
                void 0,
                tsrc,
                (0, lexer_12.makePoint)(tsrc.length, loc, ex.lineNumber || row, ex.columnNumber || col)
              );
              throw new JsonicError(
                ex.code || "json",
                ex.details || {
                  msg: ex.message
                },
                token2,
                {},
                // TODO: this smells
                ex.ctx || {
                  uI: -1,
                  opts: jsonic2.options,
                  cfg: jsonic2.internal().config,
                  token: token2,
                  meta,
                  src: () => src,
                  root: () => void 0,
                  plgn: () => jsonic2.internal().plugins,
                  inst: () => jsonic2,
                  rule: { name: "no-rule" },
                  sub: {},
                  xs: -1,
                  v2: token2,
                  v1: token2,
                  t0: token2,
                  t1: token2,
                  tC: -1,
                  kI: -1,
                  rs: [],
                  rsI: 0,
                  rsm: {},
                  n: {},
                  log: meta ? meta.log : void 0,
                  F: srcfmt(jsonic2.internal().config),
                  u: {},
                  NORULE: { name: "no-rule" },
                  NOTOKEN: { name: "no-token" }
                }
              );
            } else {
              throw ex;
            }
          }
        }
      };
    }
    utility.parserwrap = parserwrap;
    return utility;
  }
  var defaults$1 = {};
  "use strict";
  Object.defineProperty(defaults$1, "__esModule", { value: true });
  var defaults_2 = defaults$1.defaults = void 0;
  const lexer_1 = requireLexer();
  const defaults = {
    // Prevent prototype pollution
    safe: {
      key: true
    },
    // Default tag - set your own!
    tag: "-",
    // Fixed token lexing.
    fixed: {
      // Recognize fixed tokens in the Lexer.
      lex: true,
      // Token names.
      token: {
        "#OB": "{",
        "#CB": "}",
        "#OS": "[",
        "#CS": "]",
        "#CL": ":",
        "#CA": ","
      }
    },
    match: {
      lex: true,
      token: {}
    },
    // Token sets.
    tokenSet: {
      IGNORE: ["#SP", "#LN", "#CM"],
      VAL: ["#TX", "#NR", "#ST", "#VL"],
      KEY: ["#TX", "#NR", "#ST", "#VL"]
    },
    // Recognize space characters in the lexer.
    space: {
      // Recognize space in the Lexer.
      lex: true,
      // Space characters are kept to a minimal set.
      // Add more from https://en.wikipedia.org/wiki/Whitespace_character as needed.
      chars: " 	"
    },
    // Line lexing.
    line: {
      // Recognize lines in the Lexer.
      lex: true,
      // Line characters.
      chars: "\r\n",
      // Increments row (aka line) counter.
      rowChars: "\n",
      // Generate separate lexer tokens for each newline.
      // Note: '\r\n' counts as one newline.
      single: false
    },
    // Text formats.
    text: {
      // Recognize text (non-quoted strings) in the Lexer.
      lex: true
    },
    // Control number formats.
    number: {
      // Recognize numbers in the Lexer.
      lex: true,
      // Recognize hex numbers (eg. 10 === 0x0a).
      hex: true,
      // Recognize octal numbers (eg. 10 === 0o12).
      oct: true,
      // Recognize ninary numbers (eg. 10 === 0b1010).
      bin: true,
      // All possible number chars. |+-|0|xob|0-9a-fA-F|.e|+-|0-9a-fA-F|
      // digital: '-1023456789._xoeEaAbBcCdDfF+',
      // Allow embedded separator. `null` to disable.
      sep: "_",
      // Exclude number strings matching this RegExp
      exclude: void 0
    },
    // Comment markers.
    // <mark-char>: true -> single line comments
    // <mark-start>: <mark-end> -> multiline comments
    comment: {
      // Recognize comments in the Lexer.
      lex: true,
      // TODO: plugin
      // Balance multiline comments.
      // balance: true,
      // Comment markers.
      def: {
        hash: { line: true, start: "#", lex: true, eatline: false },
        slash: { line: true, start: "//", lex: true, eatline: false },
        multi: {
          line: false,
          start: "/*",
          end: "*/",
          lex: true,
          eatline: false
        }
      }
    },
    // String formats.
    string: {
      // Recognize strings in the Lexer.
      lex: true,
      // Quote characters
      chars: "'\"`",
      // Multiline quote chars.
      multiChars: "`",
      // Escape character.
      escapeChar: "\\",
      // String escape chars.
      // Denoting char (follows escape char) => actual char.
      escape: {
        b: "\b",
        f: "\f",
        n: "\n",
        r: "\r",
        t: "	",
        v: "\v",
        // These preserve standard escapes when allowUnknown=false.
        '"': '"',
        "'": "'",
        "`": "`",
        "\\": "\\",
        "/": "/"
      },
      // Allow unknown escape characters - they are copied to output: '\w' -> 'w'.
      allowUnknown: true,
      // If string lexing fails, instead of error, allow other matchers to try.
      abandon: false
    },
    // Object formats.
    map: {
      // TODO: or trigger error?
      // Later duplicates extend earlier ones, rather than replacing them.
      extend: true,
      // Custom merge function for duplicates (optional).
      // TODO: needs function signature
      merge: void 0
    },
    // Array formats.
    list: {
      // Allow arrays to have properties: `[a:9,0,1]`
      property: true
    },
    // Keyword values.
    value: {
      lex: true,
      def: {
        true: { val: true },
        false: { val: false },
        null: { val: null }
      }
    },
    // Additional text ending characters
    ender: [],
    // Plugin custom options, (namespace by plugin name).
    plugin: {},
    // Debug settings
    debug: {
      // Default console for logging.
      get_console: () => console,
      // Max length of parse value to print.
      maxlen: 99,
      // Print internal structures
      print: {
        // Print config built from options.
        config: false,
        // Custom string formatter for src and node values.
        src: void 0
      }
    },
    // Error messages.
    error: {
      unknown: "unknown error: $code",
      unexpected: "unexpected character(s): $src",
      invalid_unicode: "invalid unicode escape: $src",
      invalid_ascii: "invalid ascii escape: $src",
      unprintable: "unprintable character: $src",
      unterminated_string: "unterminated string: $src",
      unterminated_comment: "unterminated comment: $src",
      unknown_rule: "unknown rule: $rulename"
    },
    // Error hints: {error-code: hint-text}.
    hint: make_hint,
    // Lexer
    lex: {
      match: {
        match: { order: 1e6, make: lexer_1.makeMatchMatcher },
        fixed: { order: 2e6, make: lexer_1.makeFixedMatcher },
        space: { order: 3e6, make: lexer_1.makeSpaceMatcher },
        line: { order: 4e6, make: lexer_1.makeLineMatcher },
        string: { order: 5e6, make: lexer_1.makeStringMatcher },
        comment: { order: 6e6, make: lexer_1.makeCommentMatcher },
        number: { order: 7e6, make: lexer_1.makeNumberMatcher },
        text: { order: 8e6, make: lexer_1.makeTextMatcher }
      },
      // Empty string is allowed and returns undefined
      empty: true,
      emptyResult: void 0
    },
    // Parser
    parse: {
      // Plugin custom functions to prepare parser context.
      prepare: {}
    },
    // Parser rule options.
    rule: {
      // Name of the starting rule.
      start: "val",
      // Automatically close remaining structures at EOF.
      finish: true,
      // Multiplier to increase the maximum number of rule occurences.
      maxmul: 3,
      // Include only those alts with matching group tags (comma sep).
      // NOTE: applies universally, thus also for subsequent rules.
      include: "",
      // Exclude alts with matching group tags (comma sep).
      // NOTE: applies universally, thus also for subsequent rules.
      exclude: ""
    },
    // Result value options.
    result: {
      // Fail if result matches any of these.
      fail: []
    },
    // Configuration options.
    config: {
      // Configuration modifiers.
      modify: {}
    },
    // Provide a custom parser.
    parser: {
      start: void 0
    }
  };
  defaults_2 = defaults$1.defaults = defaults;
  function make_hint(d = (t, r2 = "replace") => t[r2](/[A-Z]/g, (m) => " " + m.toLowerCase())[r2](/[~%][a-z]/g, (m) => ("~" == m[0] ? " " : "") + m[1].toUpperCase()), s = "~sinceTheErrorIsUnknown,ThisIsProbablyABugInsideJsonic\nitself,OrAPlugin.~pleaseConsiderPostingAGithubIssue -Thanks!\n\n~code: $code,~details: \n$details|~theCharacter(s) $srcWereNotExpectedAtThisPointAsTheyDoNot\nmatchTheExpectedSyntax,EvenUnderTheRelaxedJsonicRules.~ifIt\nisNotObviouslyWrong,TheActualSyntaxErrorMayBeElsewhere.~try\ncommentingOutLargerAreasAroundThisPointUntilYouGetNoErrors,\nthenRemoveTheCommentsInSmallSectionsUntilYouFindThe\noffendingSyntax.~n%o%t%e:~alsoCheckIfAnyPluginsYouAreUsing\nexpectDifferentSyntaxInThisCase.|~theEscapeSequence $srcDoesNotEncodeAValidUnicodeCodePoint\nnumber.~youMayNeedToValidateYourStringDataManuallyUsingTest\ncodeToSeeHow~javaScriptWillInterpretIt.~alsoConsiderThatYour\ndataMayHaveBecomeCorrupted,OrTheEscapeSequenceHasNotBeen\ngeneratedCorrectly.|~theEscapeSequence $srcDoesNotEncodeAValid~a%s%c%i%iCharacter.~you\nmayNeedToValidateYourStringDataManuallyUsingTestCodeToSee\nhow~javaScriptWillInterpretIt.~alsoConsiderThatYourDataMay\nhaveBecomeCorrupted,OrTheEscapeSequenceHasNotBeenGenerated\ncorrectly.|~stringValuesCannotContainUnprintableCharacters (characterCodes\nbelow 32).~theCharacter $srcIsUnprintable.~youMayNeedToRemove\ntheseCharactersFromYourSourceData.~alsoCheckThatItHasNot\nbecomeCorrupted.|~thisStringHasNoEndQuote.|~thisCommentIsNeverClosed.|~noRuleNamed $rulenameIsDefined.~thisIsProbablyAnErrorInThe\ngrammarOfAPlugin.".split("|")) {
    return "unknown|unexpected|invalid_unicode|invalid_ascii|unprintable|unterminated_string|unterminated_comment|unknown_rule".split("|").reduce((a, n, i) => (a[n] = d(s[i]), a), {});
  }
  var parser$1 = {};
  var rules = {};
  "use strict";
  Object.defineProperty(rules, "__esModule", { value: true });
  var makeRuleSpec_1 = rules.makeRuleSpec = makeNoRule_1 = rules.makeNoRule = makeRule_1 = rules.makeRule = void 0;
  const types_1 = types;
  const utility_1 = requireUtility();
  class RuleImpl {
    constructor(spec, ctx, node2) {
      this.i = -1;
      this.name = types_1.EMPTY;
      this.node = null;
      this.state = types_1.OPEN;
      this.n = /* @__PURE__ */ Object.create(null);
      this.d = -1;
      this.u = /* @__PURE__ */ Object.create(null);
      this.k = /* @__PURE__ */ Object.create(null);
      this.bo = false;
      this.ao = false;
      this.bc = false;
      this.ac = false;
      this.os = 0;
      this.cs = 0;
      this.need = 0;
      this.i = ctx.uI++;
      this.name = spec.name;
      this.spec = spec;
      this.child = ctx.NORULE;
      this.parent = ctx.NORULE;
      this.prev = ctx.NORULE;
      this.o0 = ctx.NOTOKEN;
      this.o1 = ctx.NOTOKEN;
      this.c0 = ctx.NOTOKEN;
      this.c1 = ctx.NOTOKEN;
      this.node = node2;
      this.d = ctx.rsI;
      this.bo = null != spec.def.bo;
      this.ao = null != spec.def.ao;
      this.bc = null != spec.def.bc;
      this.ac = null != spec.def.ac;
    }
    process(ctx, lex) {
      let rule = this.spec.process(this, ctx, lex, this.state);
      return rule;
    }
    eq(counter, limit = 0) {
      let value = this.n[counter];
      return null == value || value === limit;
    }
    lt(counter, limit = 0) {
      let value = this.n[counter];
      return null == value || value < limit;
    }
    gt(counter, limit = 0) {
      let value = this.n[counter];
      return null == value || value > limit;
    }
    lte(counter, limit = 0) {
      let value = this.n[counter];
      return null == value || value <= limit;
    }
    gte(counter, limit = 0) {
      let value = this.n[counter];
      return null == value || value >= limit;
    }
    toString() {
      return "[Rule " + this.name + "~" + this.i + "]";
    }
  }
  const makeRule = (...params) => new RuleImpl(...params);
  var makeRule_1 = rules.makeRule = makeRule;
  const makeNoRule = (ctx) => makeRule(makeRuleSpec(ctx.cfg, {}), ctx);
  var makeNoRule_1 = rules.makeNoRule = makeNoRule;
  class AltMatchImpl {
    constructor() {
      this.p = types_1.EMPTY;
      this.r = types_1.EMPTY;
      this.b = 0;
    }
  }
  const makeAltMatch = (...params) => new AltMatchImpl(...params);
  const PALT = makeAltMatch();
  const EMPTY_ALT = makeAltMatch();
  class RuleSpecImpl {
    // TODO: is def param used?
    constructor(cfg, def) {
      this.name = types_1.EMPTY;
      this.def = {
        open: [],
        close: [],
        bo: [],
        bc: [],
        ao: [],
        ac: [],
        tcol: []
      };
      this.cfg = cfg;
      this.def = Object.assign(this.def, def);
      this.def.open = (this.def.open || []).filter((alt) => null != alt);
      this.def.close = (this.def.close || []).filter((alt) => null != alt);
      for (let alt of [...this.def.open, ...this.def.close]) {
        normalt(alt);
      }
    }
    // Convenience access to token Tins
    tin(ref) {
      return (0, utility_1.tokenize)(ref, this.cfg);
    }
    add(state, a, mods) {
      let inject = (mods === null || mods === void 0 ? void 0 : mods.append) ? "push" : "unshift";
      let aa = ((0, utility_1.isarr)(a) ? a : [a]).filter((alt) => null != alt && "object" === typeof alt).map((a2) => normalt(a2));
      let altState = "o" === state ? "open" : "close";
      let alts = this.def[altState];
      alts[inject](...aa);
      alts = this.def[altState] = (0, utility_1.modlist)(alts, mods);
      (0, utility_1.filterRules)(this, this.cfg);
      this.norm();
      return this;
    }
    open(a, mods) {
      return this.add("o", a, mods);
    }
    close(a, mods) {
      return this.add("c", a, mods);
    }
    action(append2, step, state, action) {
      let actions = this.def[step + state];
      if (append2) {
        actions.push(action);
      } else {
        actions.unshift(action);
      }
      return this;
    }
    bo(append2, action) {
      return this.action(action ? !!append2 : true, types_1.BEFORE, types_1.OPEN, action || append2);
    }
    ao(append2, action) {
      return this.action(action ? !!append2 : true, types_1.AFTER, types_1.OPEN, action || append2);
    }
    bc(first, second) {
      return this.action(second ? !!first : true, types_1.BEFORE, types_1.CLOSE, second || first);
    }
    ac(first, second) {
      return this.action(second ? !!first : true, types_1.AFTER, types_1.CLOSE, second || first);
    }
    clear() {
      this.def.open.length = 0;
      this.def.close.length = 0;
      this.def.bo.length = 0;
      this.def.ao.length = 0;
      this.def.bc.length = 0;
      this.def.ac.length = 0;
      return this;
    }
    norm() {
      this.def.open.map((alt) => normalt(alt));
      this.def.close.map((alt) => normalt(alt));
      const columns = [];
      this.def.open.reduce(...collate(0, 0, columns));
      this.def.open.reduce(...collate(0, 1, columns));
      this.def.close.reduce(...collate(1, 0, columns));
      this.def.close.reduce(...collate(1, 1, columns));
      this.def.tcol = columns;
      function collate(stateI, tokenI, columns2) {
        columns2[stateI] = columns2[stateI] || [];
        let tins = columns2[stateI][tokenI] = columns2[stateI][tokenI] || [];
        return [
          function(tins2, alt) {
            if (alt.s && alt.s[tokenI]) {
              let newtins = [...new Set(tins2.concat(alt.s[tokenI]))];
              tins2.length = 0;
              tins2.push(...newtins);
            }
            return tins2;
          },
          tins
        ];
      }
      return this;
    }
    process(rule, ctx, lex, state) {
      ctx.log && ctx.log(utility_1.S.rule, ctx, rule, lex);
      let is_open = state === "o";
      let next2 = is_open ? rule : ctx.NORULE;
      let why = is_open ? "O" : "C";
      let def = this.def;
      let alts = is_open ? def.open : def.close;
      let befores = is_open ? rule.bo ? def.bo : null : rule.bc ? def.bc : null;
      if (befores) {
        let bout = void 0;
        for (let bI = 0; bI < befores.length; bI++) {
          bout = befores[bI].call(this, rule, ctx, next2, bout);
          if ((bout === null || bout === void 0 ? void 0 : bout.isToken) && (bout === null || bout === void 0 ? void 0 : bout.err)) {
            return this.bad(bout, rule, ctx, { is_open });
          }
        }
      }
      let alt = 0 < alts.length ? parse_alts(is_open, alts, lex, rule, ctx) : EMPTY_ALT;
      if (alt.h) {
        alt = alt.h(rule, ctx, alt, next2) || alt;
        why += "H";
      }
      if (alt.e) {
        return this.bad(alt.e, rule, ctx, { is_open });
      }
      if (alt.n) {
        for (let cn in alt.n) {
          rule.n[cn] = // 0 reverts counter to 0.
          0 === alt.n[cn] ? 0 : (
            // First seen, set to 0.
            (null == rule.n[cn] ? 0 : (
              // Increment counter.
              rule.n[cn]
            )) + alt.n[cn]
          );
        }
      }
      if (alt.u) {
        rule.u = Object.assign(rule.u, alt.u);
      }
      if (alt.k) {
        rule.k = Object.assign(rule.k, alt.k);
      }
      if (alt.a) {
        why += "A";
        let tout = alt.a(rule, ctx, alt);
        if (tout && tout.isToken && tout.err) {
          return this.bad(tout, rule, ctx, { is_open });
        }
      }
      if (alt.p) {
        ctx.rs[ctx.rsI++] = rule;
        let rulespec = ctx.rsm[alt.p];
        if (rulespec) {
          next2 = rule.child = makeRule(rulespec, ctx, rule.node);
          next2.parent = rule;
          next2.n = __spreadValues({}, rule.n);
          if (0 < Object.keys(rule.k).length) {
            next2.k = __spreadValues({}, rule.k);
          }
          why += "P`" + alt.p + "`";
        } else
          return this.bad(this.unknownRule(ctx.t0, alt.p), rule, ctx, { is_open });
      } else if (alt.r) {
        let rulespec = ctx.rsm[alt.r];
        if (rulespec) {
          next2 = makeRule(rulespec, ctx, rule.node);
          next2.parent = rule.parent;
          next2.prev = rule;
          next2.n = __spreadValues({}, rule.n);
          if (0 < Object.keys(rule.k).length) {
            next2.k = __spreadValues({}, rule.k);
          }
          why += "R`" + alt.r + "`";
        } else
          return this.bad(this.unknownRule(ctx.t0, alt.r), rule, ctx, { is_open });
      } else if (!is_open) {
        next2 = ctx.rs[--ctx.rsI] || ctx.NORULE;
      }
      let afters = is_open ? rule.ao ? def.ao : null : rule.ac ? def.ac : null;
      if (afters) {
        let aout = void 0;
        for (let aI = 0; aI < afters.length; aI++) {
          aout = afters[aI](rule, ctx, next2, aout);
          if ((aout === null || aout === void 0 ? void 0 : aout.isToken) && (aout === null || aout === void 0 ? void 0 : aout.err)) {
            return this.bad(aout, rule, ctx, { is_open });
          }
        }
      }
      next2.why = why;
      ctx.log && ctx.log(utility_1.S.node, ctx, rule, lex, next2);
      if (types_1.OPEN === rule.state) {
        rule.state = types_1.CLOSE;
      }
      let consumed = rule[is_open ? "os" : "cs"] - (alt.b || 0);
      if (1 === consumed) {
        ctx.v2 = ctx.v1;
        ctx.v1 = ctx.t0;
        ctx.t0 = ctx.t1;
        ctx.t1 = ctx.NOTOKEN;
      } else if (2 == consumed) {
        ctx.v2 = ctx.t1;
        ctx.v1 = ctx.t0;
        ctx.t0 = ctx.NOTOKEN;
        ctx.t1 = ctx.NOTOKEN;
      }
      return next2;
    }
    bad(tkn, rule, ctx, parse2) {
      throw new utility_1.JsonicError(tkn.err || utility_1.S.unexpected, __spreadProps(__spreadValues({}, tkn.use), {
        state: parse2.is_open ? utility_1.S.open : utility_1.S.close
      }), tkn, rule, ctx);
    }
    unknownRule(tkn, name) {
      tkn.err = "unknown_rule";
      tkn.use = tkn.use || {};
      tkn.use.rulename = name;
      return tkn;
    }
  }
  const makeRuleSpec = (...params) => new RuleSpecImpl(...params);
  makeRuleSpec_1 = rules.makeRuleSpec = makeRuleSpec;
  function parse_alts(is_open, alts, lex, rule, ctx) {
    let out = PALT;
    out.b = 0;
    out.p = types_1.EMPTY;
    out.r = types_1.EMPTY;
    out.n = void 0;
    out.h = void 0;
    out.a = void 0;
    out.u = void 0;
    out.k = void 0;
    out.e = void 0;
    let alt = null;
    let altI = 0;
    let t = ctx.cfg.t;
    let cond = true;
    let bitAA = 1 << t.AA - 1;
    let IGNORE = ctx.cfg.tokenSetTins.IGNORE;
    function next2(r2, alt2, altI2, tI) {
      let tkn;
      do {
        tkn = lex.next(r2, alt2, altI2, tI);
        ctx.tC++;
      } while (IGNORE[tkn.tin]);
      return tkn;
    }
    let len = alts.length;
    for (altI = 0; altI < len; altI++) {
      alt = alts[altI];
      let has0 = false;
      let has1 = false;
      cond = true;
      if (alt.S0) {
        let tin0 = (ctx.t0 = ctx.NOTOKEN !== ctx.t0 ? ctx.t0 : ctx.t0 = next2(rule, alt, altI, 0)).tin;
        has0 = true;
        cond = !!(alt.S0[tin0 / 31 | 0] & (1 << tin0 % 31 - 1 | bitAA));
        if (cond) {
          has1 = null != alt.S1;
          if (alt.S1) {
            let tin1 = (ctx.t1 = ctx.NOTOKEN !== ctx.t1 ? ctx.t1 : ctx.t1 = next2(rule, alt, altI, 1)).tin;
            has1 = true;
            cond = !!(alt.S1[tin1 / 31 | 0] & (1 << tin1 % 31 - 1 | bitAA));
          }
        }
      }
      if (is_open) {
        rule.o0 = has0 ? ctx.t0 : ctx.NOTOKEN;
        rule.o1 = has1 ? ctx.t1 : ctx.NOTOKEN;
        rule.os = (has0 ? 1 : 0) + (has1 ? 1 : 0);
      } else {
        rule.c0 = has0 ? ctx.t0 : ctx.NOTOKEN;
        rule.c1 = has1 ? ctx.t1 : ctx.NOTOKEN;
        rule.cs = (has0 ? 1 : 0) + (has1 ? 1 : 0);
      }
      if (cond && alt.c) {
        cond = cond && alt.c(rule, ctx, out);
      }
      if (cond) {
        break;
      } else {
        alt = null;
      }
    }
    if (!cond) {
      out.e = ctx.t0;
    }
    if (alt) {
      out.n = null != alt.n ? alt.n : out.n;
      out.h = null != alt.h ? alt.h : out.h;
      out.a = null != alt.a ? alt.a : out.a;
      out.u = null != alt.u ? alt.u : out.u;
      out.k = null != alt.k ? alt.k : out.k;
      out.g = null != alt.g ? alt.g : out.g;
      out.e = alt.e && alt.e(rule, ctx, out) || void 0;
      out.p = null != alt.p && false !== alt.p ? "string" === typeof alt.p ? alt.p : alt.p(rule, ctx, out) : out.p;
      out.r = null != alt.r && false !== alt.r ? "string" === typeof alt.r ? alt.r : alt.r(rule, ctx, out) : out.r;
      out.b = null != alt.b && false !== alt.b ? "number" === typeof alt.b ? alt.b : alt.b(rule, ctx, out) : out.b;
    }
    let match2 = altI < alts.length;
    ctx.log && ctx.log(utility_1.S.parse, ctx, rule, lex, match2, cond, altI, alt, out);
    return out;
  }
  function normalt(a) {
    if (types_1.STRING === typeof a.g) {
      a.g = a.g.split(/\s*,\s*/);
    } else if (null == a.g) {
      a.g = [];
    }
    a.g = a.g.sort();
    if (!a.s || 0 === a.s.length) {
      a.s = null;
    } else {
      const tinsify = (s) => s.flat().filter((tin) => "number" === typeof tin);
      const partify = (tins, part) => tins.filter((tin) => 31 * part <= tin && tin < 31 * (part + 1));
      const bitify = (s, part) => s.reduce((bits, tin) => 1 << tin - (31 * part + 1) | bits, 0);
      const tins0 = tinsify([a.s[0]]);
      const tins1 = tinsify([a.s[1]]);
      const aa = a;
      aa.S0 = 0 < tins0.length ? new Array(Math.max(...tins0.map((tin) => 1 + tin / 31 | 0))).fill(null).map((_2, i) => i).map((part) => bitify(partify(tins0, part), part)) : null;
      aa.S1 = 0 < tins1.length ? new Array(Math.max(...tins1.map((tin) => 1 + tin / 31 | 0))).fill(null).map((_2, i) => i).map((part) => bitify(partify(tins1, part), part)) : null;
    }
    if (!a.p) {
      a.p = null;
    }
    if (!a.r) {
      a.r = null;
    }
    if (!a.b) {
      a.b = null;
    }
    return a;
  }
  (function(exports3) {
    "use strict";
    Object.defineProperty(exports3, "__esModule", { value: true });
    exports3.makeParser = exports3.makeRuleSpec = exports3.makeRule = void 0;
    const types_12 = types;
    const utility_12 = requireUtility();
    const lexer_12 = requireLexer();
    const rules_1 = rules;
    Object.defineProperty(exports3, "makeRule", { enumerable: true, get: function() {
      return rules_1.makeRule;
    } });
    Object.defineProperty(exports3, "makeRuleSpec", { enumerable: true, get: function() {
      return rules_1.makeRuleSpec;
    } });
    class ParserImpl {
      constructor(options, cfg) {
        this.rsm = {};
        this.options = options;
        this.cfg = cfg;
      }
      // TODO: ensure chains properly, both for create and extend rule
      // Multi-functional get/set for rules.
      rule(name, define2) {
        if (null == name) {
          return this.rsm;
        }
        let rs = this.rsm[name];
        if (null === define2) {
          delete this.rsm[name];
        } else if (void 0 !== define2) {
          rs = this.rsm[name] = this.rsm[name] || (0, rules_1.makeRuleSpec)(this.cfg, {});
          rs = this.rsm[name] = define2(this.rsm[name], this) || this.rsm[name];
          rs.name = name;
          return void 0;
        }
        return rs;
      }
      start(src, jsonic2, meta, parent_ctx) {
        let root;
        let endtkn = (0, lexer_12.makeToken)("#ZZ", (0, utility_12.tokenize)("#ZZ", this.cfg), void 0, types_12.EMPTY, (0, lexer_12.makePoint)(-1));
        let notoken = (0, lexer_12.makeNoToken)();
        let ctx = {
          uI: 0,
          opts: this.options,
          cfg: this.cfg,
          meta: meta || {},
          src: () => src,
          root: () => root,
          plgn: () => jsonic2.internal().plugins,
          inst: () => jsonic2,
          rule: {},
          sub: jsonic2.internal().sub,
          xs: -1,
          v2: endtkn,
          v1: endtkn,
          t0: notoken,
          t1: notoken,
          tC: -2,
          kI: -1,
          rs: [],
          rsI: 0,
          rsm: this.rsm,
          log: void 0,
          F: (0, utility_12.srcfmt)(this.cfg),
          u: {},
          NOTOKEN: notoken,
          NORULE: {}
        };
        ctx = (0, utility_12.deep)(ctx, parent_ctx);
        let norule = (0, rules_1.makeNoRule)(ctx);
        ctx.NORULE = norule;
        ctx.rule = norule;
        if (meta && utility_12.S.function === typeof meta.log) {
          ctx.log = meta.log;
        }
        this.cfg.parse.prepare.forEach((prep) => prep(jsonic2, ctx, meta));
        if ("" === src) {
          if (this.cfg.lex.empty) {
            return this.cfg.lex.emptyResult;
          } else {
            throw new utility_12.JsonicError(utility_12.S.unexpected, { src }, ctx.t0, norule, ctx);
          }
        }
        let lex = (0, utility_12.badlex)((0, lexer_12.makeLex)(ctx), (0, utility_12.tokenize)("#BD", this.cfg), ctx);
        let startspec = this.rsm[this.cfg.rule.start];
        if (null == startspec) {
          return void 0;
        }
        let rule = (0, rules_1.makeRule)(startspec, ctx);
        root = rule;
        let maxr = 2 * (0, utility_12.keys)(this.rsm).length * lex.src.length * 2 * ctx.cfg.rule.maxmul;
        let kI = 0;
        while (norule !== rule && kI < maxr) {
          ctx.kI = kI;
          ctx.rule = rule;
          ctx.log && ctx.log("", ctx.kI + ":");
          if (ctx.sub.rule) {
            ctx.sub.rule.map((sub) => sub(rule, ctx));
          }
          rule = rule.process(ctx, lex);
          ctx.log && ctx.log(utility_12.S.stack, ctx, rule, lex);
          kI++;
        }
        if (endtkn.tin !== lex.next(rule).tin) {
          throw new utility_12.JsonicError(utility_12.S.unexpected, {}, ctx.t0, norule, ctx);
        }
        const result = ctx.root().node;
        if (this.cfg.result.fail.includes(result)) {
          throw new utility_12.JsonicError(utility_12.S.unexpected, {}, ctx.t0, norule, ctx);
        }
        return result;
      }
      clone(options, config2) {
        let parser2 = new ParserImpl(options, config2);
        parser2.rsm = Object.keys(this.rsm).reduce((a, rn) => (a[rn] = (0, utility_12.filterRules)(this.rsm[rn], this.cfg), a), {});
        parser2.norm();
        return parser2;
      }
      norm() {
        (0, utility_12.values)(this.rsm).map((rs) => rs.norm());
      }
    }
    const makeParser = (...params) => new ParserImpl(...params);
    exports3.makeParser = makeParser;
  })(parser$1);
  const parser = /* @__PURE__ */ getDefaultExportFromCjs(parser$1);
  var grammar$1 = {};
  "use strict";
  Object.defineProperty(grammar$1, "__esModule", { value: true });
  var makeJSON_1 = grammar$1.makeJSON = grammar_2 = grammar$1.grammar = void 0;
  function grammar(jsonic2) {
    const { deep } = jsonic2.util;
    const {
      // Fixed tokens
      OB,
      // Open Brace `{`
      CB,
      // Close Brace `}`
      OS,
      // Open Square `[`
      CS,
      // Close Square `]`
      CL,
      // Colon `:`
      CA,
      // Comma `,`
      // Complex tokens
      TX,
      // Text (unquoted character sequence)
      ST,
      // String (quoted character sequence)
      // Control tokens
      ZZ
      // End-of-source
    } = jsonic2.token;
    const {
      VAL,
      // All tokens that make up values
      KEY
      // All tokens that make up keys
    } = jsonic2.tokenSet;
    const finish = (_rule, ctx) => {
      if (!ctx.cfg.rule.finish) {
        ctx.t0.src = "END_OF_SOURCE";
        return ctx.t0;
      }
    };
    const pairkey = (r2) => {
      const key_token = r2.o0;
      const key = ST === key_token.tin || TX === key_token.tin ? key_token.val : key_token.src;
      r2.u.key = key;
    };
    jsonic2.rule("val", (rs) => {
      rs.bo((rule) => rule.node = void 0).open([
        // A map: `{ ...`
        { s: [OB], p: "map", b: 1, g: "map,json" },
        // A list: `[ ...`
        { s: [OS], p: "list", b: 1, g: "list,json" },
        // A plain value: `x` `"x"` `1` `true` ....
        { s: [VAL], g: "val,json" }
      ]).close([
        // End of input.
        { s: [ZZ], g: "end,json" },
        // There's more JSON.
        { b: 1, g: "more,json" }
      ]).bc((r2, ctx) => {
        r2.node = // If there's no node,
        void 0 === r2.node ? (
          // ... or no child node (child map or list),
          void 0 === r2.child.node ? (
            // ... or no matched tokens,
            0 === r2.os ? (
              // ... then the node has no value
              void 0
            ) : (
              // .. otherwise use the token value
              r2.o0.resolveVal(r2, ctx)
            )
          ) : r2.child.node
        ) : r2.node;
      });
    });
    jsonic2.rule("map", (rs) => {
      rs.bo((r2) => {
        r2.node = /* @__PURE__ */ Object.create(null);
      }).open([
        // An empty map: {}.
        { s: [OB, CB], b: 1, n: { pk: 0 }, g: "map,json" },
        // Start matching map key-value pairs: a:1.
        // Reset counter n.pk as new map (for extensions).
        { s: [OB], p: "pair", n: { pk: 0 }, g: "map,json,pair" }
      ]).close([
        // End of map.
        { s: [CB], g: "end,json" }
      ]);
    });
    jsonic2.rule("list", (rs) => {
      rs.bo((r2) => {
        r2.node = [];
      }).open([
        // An empty list: [].
        { s: [OS, CS], b: 1, g: "list,json" },
        // Start matching list elements: 1,2.
        { s: [OS], p: "elem", g: "list,elem,json" }
      ]).close([
        // End of map.
        { s: [CS], g: "end,json" }
      ]);
    });
    jsonic2.rule("pair", (rs) => {
      rs.open([
        // Match key-colon start of pair. Marker `pair=true` allows flexibility.
        {
          s: [KEY, CL],
          p: "val",
          u: { pair: true },
          a: pairkey,
          g: "map,pair,key,json"
        }
      ]).bc((r2, _ctx) => {
        if (r2.u.pair) {
          r2.u.prev = r2.node[r2.u.key];
          r2.node[r2.u.key] = r2.child.node;
        }
      }).close([
        // Comma means a new pair at same pair-key level.
        { s: [CA], r: "pair", g: "map,pair,json" },
        // End of map.
        { s: [CB], b: 1, g: "map,pair,json" }
      ]);
    });
    jsonic2.rule("elem", (rs) => {
      rs.open([
        // List elements are values.
        { p: "val", g: "list,elem,val,json" }
      ]).bc((r2) => {
        if (true !== r2.u.done) {
          r2.node.push(r2.child.node);
        }
      }).close([
        // Next element.
        { s: [CA], r: "elem", g: "list,elem,json" },
        // End of list.
        { s: [CS], b: 1, g: "list,elem,json" }
      ]);
    });
    const pairval = (r2, ctx) => {
      let key = r2.u.key;
      let val = r2.child.node;
      const prev2 = r2.u.prev;
      val = void 0 === val ? null : val;
      if (r2.u.list && ctx.cfg.safe.key) {
        if ("__proto__" === key || "constructor" === key) {
          return;
        }
      }
      r2.node[key] = null == prev2 ? val : ctx.cfg.map.merge ? ctx.cfg.map.merge(prev2, val, r2, ctx) : ctx.cfg.map.extend ? deep(prev2, val) : val;
    };
    jsonic2.rule("val", (rs) => {
      rs.open([
        // A pair key: `a: ...`
        // Increment counter n.pk to indicate pair-key state (for extensions).
        {
          s: [KEY, CL],
          p: "map",
          b: 2,
          n: { pk: 1 },
          g: "pair,jsonic"
        },
        // A plain value: `x` `"x"` `1` `true` ....
        { s: [VAL], g: "val,json" },
        // Implicit ends `{a:}` -> {"a":null}, `[a:]` -> [{"a":null}]
        {
          s: [[CB, CS]],
          b: 1,
          c: (r2) => 0 < r2.d,
          g: "val,imp,null,jsonic"
        },
        // Implicit list at top level: a,b.
        {
          s: [CA],
          c: (r2) => 0 === r2.d,
          // c: { n: { dlist: 0 } },
          p: "list",
          b: 1,
          g: "list,imp,jsonic"
        },
        // Value is implicitly null when empty before commas.
        { s: [CA], b: 1, g: "list,val,imp,null,jsonic" },
        { s: [ZZ], g: "jsonic" }
      ], { append: true, delete: [2] }).close([
        // Explicitly close map or list: `}`, `]`
        {
          s: [[CB, CS]],
          b: 1,
          g: "val,json,close",
          e: (r2, c) => 0 === r2.d ? c.t0 : void 0
        },
        // Implicit list (comma sep) only allowed at top level: `1,2`.
        {
          s: [CA],
          // c: { n: { dlist: 0, dmap: 0 } },
          c: (r2) => r2.lte("dlist") && r2.lte("dmap"),
          r: "list",
          u: { implist: true },
          g: "list,val,imp,comma,jsonic"
        },
        // Implicit list (space sep) only allowed at top level: `1 2`.
        {
          // c: { n: { dlist: 0, dmap: 0 } },
          c: (r2) => r2.lte("dlist") && r2.lte("dmap"),
          r: "list",
          u: { implist: true },
          g: "list,val,imp,space,jsonic",
          b: 1
        },
        { s: [ZZ], g: "jsonic" }
      ], {
        append: true,
        // Move "There's more JSON" to end.
        move: [1, -1]
      });
    });
    jsonic2.rule("map", (rs) => {
      rs.bo((r2) => {
        r2.n.dmap = 1 + (r2.n.dmap ? r2.n.dmap : 0);
      }).open([
        // Auto-close; fail if rule.finish option is false.
        { s: [OB, ZZ], b: 1, e: finish, g: "end,jsonic" }
      ]).open([
        // Pair from implicit map.
        { s: [KEY, CL], p: "pair", b: 2, g: "pair,list,val,imp,jsonic" }
      ], { append: true }).close([
        // Normal end of map, no path dive.
        {
          s: [CB],
          // c: { n: { pk: 0 } },
          c: (r2) => r2.lte("pk"),
          g: "end,json"
        },
        // Not yet at end of path dive, keep ascending.
        { s: [CB], b: 1, g: "path,jsonic" },
        // End of implicit path
        { s: [[CA, CS, ...VAL]], b: 1, g: "end,path,jsonic" },
        // Auto-close; fail if rule.finish option is false.
        { s: [ZZ], e: finish, g: "end,jsonic" }
      ], { append: true, delete: [0] });
    });
    jsonic2.rule("list", (rs) => {
      rs.bo((r2) => {
        r2.n.dlist = 1 + (r2.n.dlist ? r2.n.dlist : 0);
        if (r2.prev.u.implist) {
          r2.node.push(r2.prev.node);
          r2.prev.node = r2.node;
        }
      }).open({
        c: (r2) => r2.prev.u.implist,
        p: "elem"
      }).open([
        // Initial comma [, will insert null as [null,
        { s: [CA], p: "elem", b: 1, g: "list,elem,val,imp,jsonic" },
        // Another element.
        { p: "elem", g: "list,elem.jsonic" }
      ], { append: true }).close([
        // Fail if rule.finish option is false.
        { s: [ZZ], e: finish, g: "end,jsonic" }
      ], { append: true });
    });
    jsonic2.rule("pair", (rs, _p) => {
      rs.open([
        // Ignore initial comma: {,a:1.
        { s: [CA], g: "map,pair,comma,jsonic" }
      ], { append: true }).bc((r2, ctx) => {
        if (r2.u.pair) {
          pairval(r2, ctx);
        }
      }).close([
        // End of map, reset implicit depth counter so that
        // a:b:c:1,d:2 -> {a:{b:{c:1}},d:2}
        {
          s: [CB],
          // c: { n: { pk: 0 } },
          c: (r2) => r2.lte("pk"),
          b: 1,
          g: "map,pair,json"
        },
        // Ignore trailing comma at end of map.
        {
          s: [CA, CB],
          // c: { n: { pk: 0 } },
          c: (r2) => r2.lte("pk"),
          b: 1,
          g: "map,pair,comma,jsonic"
        },
        { s: [CA, ZZ], g: "end,jsonic" },
        // Comma means a new pair at same pair-key level.
        {
          s: [CA],
          // c: { n: { pk: 0 } },
          c: (r2) => r2.lte("pk"),
          r: "pair",
          g: "map,pair,json"
        },
        // TODO: try CA VAL ? works anywhere?
        // Comma means a new pair if implicit top level map.
        {
          s: [CA],
          // c: { n: { dmap: 1 } },
          c: (r2) => r2.lte("dmap", 1),
          r: "pair",
          g: "map,pair,jsonic"
        },
        // TODO: try VAL CL ? works anywhere?
        // Value means a new pair if implicit top level map.
        {
          // s: [VAL],
          s: [KEY],
          // c: { n: { dmap: 1 } },
          c: (r2) => r2.lte("dmap", 1),
          r: "pair",
          b: 1,
          g: "map,pair,imp,jsonic"
        },
        // End of implicit path (eg. a:b:1), keep closing until pk=0.
        {
          s: [[CB, CA, CS, ...KEY]],
          c: (r2) => 0 < r2.n.pk,
          b: 1,
          g: "map,pair,imp,path,jsonic"
        },
        // Can't close a map with `]`
        { s: [CS], e: (r2) => r2.c0, g: "end,jsonic" },
        // Fail if auto-close option is false.
        { s: [ZZ], e: finish, g: "map,pair,json" },
        // Who needs commas anyway?
        {
          r: "pair",
          b: 1,
          g: "map,pair,imp,jsonic"
        }
      ], { append: true, delete: [0, 1] });
    });
    jsonic2.rule("elem", (rs, p) => {
      rs.open([
        // Empty commas insert null elements.
        // Note that close consumes a comma, so b:2 works.
        {
          s: [CA, CA],
          b: 2,
          u: { done: true },
          a: (r2) => r2.node.push(null),
          g: "list,elem,imp,null,jsonic"
        },
        {
          s: [CA],
          u: { done: true },
          a: (r2) => r2.node.push(null),
          g: "list,elem,imp,null,jsonic"
        },
        {
          s: [KEY, CL],
          e: p.cfg.list.property ? void 0 : (_r, ctx) => ctx.t0,
          p: "val",
          n: { pk: 1, dmap: 1 },
          u: { done: true, pair: true, list: true },
          a: pairkey,
          g: "elem,pair,jsonic"
        }
      ]).bc((r2, ctx) => {
        if (true === r2.u.pair) {
          r2.u.prev = r2.node[r2.u.key];
          pairval(r2, ctx);
        }
      }).close([
        // Ignore trailing comma.
        { s: [CA, [CS, ZZ]], b: 1, g: "list,elem,comma,jsonic" },
        // Next element.
        { s: [CA], r: "elem", g: "list,elem,json" },
        // End of list.
        { s: [CS], b: 1, g: "list,elem,json" },
        // Fail if auto-close option is false.
        { s: [ZZ], e: finish, g: "list,elem,json" },
        // Can't close a list with `}`
        { s: [CB], e: (r2) => r2.c0, g: "end,jsonic" },
        // Who needs commas anyway?
        { r: "elem", b: 1, g: "list,elem,imp,jsonic" }
      ], { delete: [-1, -2] });
    });
  }
  var grammar_2 = grammar$1.grammar = grammar;
  function makeJSON(jsonic2) {
    let justJSON = jsonic2.make({
      grammar$: false,
      text: { lex: false },
      number: {
        hex: false,
        oct: false,
        bin: false,
        sep: null,
        exclude: /^00+/
      },
      string: {
        chars: '"',
        multiChars: "",
        allowUnknown: false,
        escape: { v: null }
      },
      comment: { lex: false },
      map: { extend: false },
      lex: { empty: false },
      rule: { finish: false, include: "json" },
      result: { fail: [void 0, NaN] },
      tokenSet: {
        KEY: ["#ST", null, null, null]
      }
    });
    grammar(justJSON);
    return justJSON;
  }
  makeJSON_1 = grammar$1.makeJSON = makeJSON;
  var jsonic = jsonic$1.exports;
  (function(module2, exports3) {
    "use strict";
    Object.defineProperty(exports3, "__esModule", { value: true });
    exports3.root = exports3.S = exports3.EMPTY = exports3.AFTER = exports3.BEFORE = exports3.CLOSE = exports3.OPEN = exports3.makeTextMatcher = exports3.makeNumberMatcher = exports3.makeCommentMatcher = exports3.makeStringMatcher = exports3.makeLineMatcher = exports3.makeSpaceMatcher = exports3.makeFixedMatcher = exports3.makeParser = exports3.makeLex = exports3.makeRuleSpec = exports3.makeRule = exports3.makePoint = exports3.makeToken = exports3.make = exports3.util = exports3.JsonicError = exports3.Jsonic = void 0;
    const types_12 = types;
    Object.defineProperty(exports3, "OPEN", { enumerable: true, get: function() {
      return types_12.OPEN;
    } });
    Object.defineProperty(exports3, "CLOSE", { enumerable: true, get: function() {
      return types_12.CLOSE;
    } });
    Object.defineProperty(exports3, "BEFORE", { enumerable: true, get: function() {
      return types_12.BEFORE;
    } });
    Object.defineProperty(exports3, "AFTER", { enumerable: true, get: function() {
      return types_12.AFTER;
    } });
    Object.defineProperty(exports3, "EMPTY", { enumerable: true, get: function() {
      return types_12.EMPTY;
    } });
    const utility_12 = requireUtility();
    Object.defineProperty(exports3, "JsonicError", { enumerable: true, get: function() {
      return utility_12.JsonicError;
    } });
    Object.defineProperty(exports3, "S", { enumerable: true, get: function() {
      return utility_12.S;
    } });
    const defaults_1 = defaults$1;
    const lexer_12 = requireLexer();
    Object.defineProperty(exports3, "makePoint", { enumerable: true, get: function() {
      return lexer_12.makePoint;
    } });
    Object.defineProperty(exports3, "makeToken", { enumerable: true, get: function() {
      return lexer_12.makeToken;
    } });
    Object.defineProperty(exports3, "makeLex", { enumerable: true, get: function() {
      return lexer_12.makeLex;
    } });
    Object.defineProperty(exports3, "makeFixedMatcher", { enumerable: true, get: function() {
      return lexer_12.makeFixedMatcher;
    } });
    Object.defineProperty(exports3, "makeSpaceMatcher", { enumerable: true, get: function() {
      return lexer_12.makeSpaceMatcher;
    } });
    Object.defineProperty(exports3, "makeLineMatcher", { enumerable: true, get: function() {
      return lexer_12.makeLineMatcher;
    } });
    Object.defineProperty(exports3, "makeStringMatcher", { enumerable: true, get: function() {
      return lexer_12.makeStringMatcher;
    } });
    Object.defineProperty(exports3, "makeCommentMatcher", { enumerable: true, get: function() {
      return lexer_12.makeCommentMatcher;
    } });
    Object.defineProperty(exports3, "makeNumberMatcher", { enumerable: true, get: function() {
      return lexer_12.makeNumberMatcher;
    } });
    Object.defineProperty(exports3, "makeTextMatcher", { enumerable: true, get: function() {
      return lexer_12.makeTextMatcher;
    } });
    const parser_1 = parser$1;
    Object.defineProperty(exports3, "makeRule", { enumerable: true, get: function() {
      return parser_1.makeRule;
    } });
    Object.defineProperty(exports3, "makeRuleSpec", { enumerable: true, get: function() {
      return parser_1.makeRuleSpec;
    } });
    Object.defineProperty(exports3, "makeParser", { enumerable: true, get: function() {
      return parser_1.makeParser;
    } });
    const grammar_1 = grammar$1;
    const util2 = {
      tokenize: utility_12.tokenize,
      srcfmt: utility_12.srcfmt,
      clone: utility_12.clone,
      charset: utility_12.charset,
      trimstk: utility_12.trimstk,
      makelog: utility_12.makelog,
      badlex: utility_12.badlex,
      extract: utility_12.extract,
      errinject: utility_12.errinject,
      errdesc: utility_12.errdesc,
      configure: utility_12.configure,
      parserwrap: utility_12.parserwrap,
      mesc: utility_12.mesc,
      escre: utility_12.escre,
      regexp: utility_12.regexp,
      prop: utility_12.prop,
      str: utility_12.str,
      clean: utility_12.clean,
      // TODO: validated to include in util API:
      deep: utility_12.deep,
      omap: utility_12.omap,
      keys: utility_12.keys,
      values: utility_12.values,
      entries: utility_12.entries
    };
    exports3.util = util2;
    function make(param_options, parent) {
      let injectFullAPI = true;
      if ("jsonic" === param_options) {
        injectFullAPI = false;
      } else if ("json" === param_options) {
        return (0, grammar_1.makeJSON)(root);
      }
      param_options = "string" === typeof param_options ? {} : param_options;
      let internal = {
        parser: null,
        config: null,
        plugins: [],
        sub: {
          lex: void 0,
          rule: void 0
        },
        mark: Math.random()
      };
      let merged_options = (0, utility_12.deep)({}, parent ? __spreadValues({}, parent.options) : false === (param_options === null || param_options === void 0 ? void 0 : param_options.defaults$) ? {} : defaults_1.defaults, param_options ? param_options : {});
      let jsonic2 = function Jsonic3(src, meta, parent_ctx) {
        var _a;
        if (utility_12.S.string === typeof src) {
          let internal2 = jsonic2.internal();
          let parser2 = ((_a = options.parser) === null || _a === void 0 ? void 0 : _a.start) ? (0, utility_12.parserwrap)(options.parser) : internal2.parser;
          return parser2.start(src, jsonic2, meta, parent_ctx);
        }
        return src;
      };
      let options = (change_options) => {
        if (null != change_options && utility_12.S.object === typeof change_options) {
          (0, utility_12.deep)(merged_options, change_options);
          (0, utility_12.configure)(jsonic2, internal.config, merged_options);
          let parser2 = jsonic2.internal().parser;
          internal.parser = parser2.clone(merged_options, internal.config);
        }
        return __spreadValues({}, jsonic2.options);
      };
      let api = {
        token: (ref) => (0, utility_12.tokenize)(ref, internal.config, jsonic2),
        tokenSet: (ref) => (0, utility_12.findTokenSet)(ref, internal.config),
        fixed: (ref) => internal.config.fixed.ref[ref],
        options: (0, utility_12.deep)(options, merged_options),
        config: () => (0, utility_12.deep)(internal.config),
        parse: jsonic2,
        // TODO: how to handle null plugin?
        use: function use(plugin, plugin_options) {
          if (utility_12.S.function !== typeof plugin) {
            throw new Error("Jsonic.use: the first argument must be a function defining a plugin. See https://jsonic.senecajs.org/plugin");
          }
          const plugin_name = plugin.name.toLowerCase();
          const full_plugin_options = (0, utility_12.deep)({}, plugin.defaults || {}, plugin_options || {});
          jsonic2.options({
            plugin: {
              [plugin_name]: full_plugin_options
            }
          });
          let merged_plugin_options = jsonic2.options.plugin[plugin_name];
          jsonic2.internal().plugins.push(plugin);
          plugin.options = merged_plugin_options;
          return plugin(jsonic2, merged_plugin_options) || jsonic2;
        },
        rule: (name, define2) => {
          return jsonic2.internal().parser.rule(name, define2) || jsonic2;
        },
        make: (options2) => {
          return make(options2, jsonic2);
        },
        empty: (options2) => make(__spreadValues({
          defaults$: false,
          standard$: false,
          grammar$: false
        }, options2 || {})),
        id: "Jsonic/" + Date.now() + "/" + ("" + Math.random()).substring(2, 8).padEnd(6, "0") + (null == options.tag ? "" : "/" + options.tag),
        toString: () => {
          return api.id;
        },
        sub: (spec) => {
          if (spec.lex) {
            internal.sub.lex = internal.sub.lex || [];
            internal.sub.lex.push(spec.lex);
          }
          if (spec.rule) {
            internal.sub.rule = internal.sub.rule || [];
            internal.sub.rule.push(spec.rule);
          }
          return jsonic2;
        },
        util: util2
      };
      (0, utility_12.defprop)(api.make, utility_12.S.name, { value: utility_12.S.make });
      if (injectFullAPI) {
        (0, utility_12.assign)(jsonic2, api);
      } else {
        (0, utility_12.assign)(jsonic2, {
          empty: api.empty,
          parse: api.parse,
          sub: api.sub,
          id: api.id,
          toString: api.toString
        });
      }
      (0, utility_12.defprop)(jsonic2, "internal", { value: () => internal });
      if (parent) {
        for (let k in parent) {
          if (void 0 === jsonic2[k]) {
            jsonic2[k] = parent[k];
          }
        }
        jsonic2.parent = parent;
        let parent_internal = parent.internal();
        internal.config = (0, utility_12.deep)({}, parent_internal.config);
        (0, utility_12.configure)(jsonic2, internal.config, merged_options);
        (0, utility_12.assign)(jsonic2.token, internal.config.t);
        internal.plugins = [...parent_internal.plugins];
        internal.parser = parent_internal.parser.clone(merged_options, internal.config);
      } else {
        let rootWithAPI = __spreadValues(__spreadValues({}, jsonic2), api);
        internal.config = (0, utility_12.configure)(rootWithAPI, void 0, merged_options);
        internal.plugins = [];
        internal.parser = (0, parser_1.makeParser)(merged_options, internal.config);
        if (false !== merged_options.grammar$) {
          (0, grammar_1.grammar)(rootWithAPI);
        }
      }
      return jsonic2;
    }
    exports3.make = make;
    let root = void 0;
    exports3.root = root;
    let Jsonic2 = exports3.root = root = make("jsonic");
    exports3.Jsonic = Jsonic2;
    root.Jsonic = root;
    root.JsonicError = utility_12.JsonicError;
    root.makeLex = lexer_12.makeLex;
    root.makeParser = parser_1.makeParser;
    root.makeToken = lexer_12.makeToken;
    root.makePoint = lexer_12.makePoint;
    root.makeRule = parser_1.makeRule;
    root.makeRuleSpec = parser_1.makeRuleSpec;
    root.makeFixedMatcher = lexer_12.makeFixedMatcher;
    root.makeSpaceMatcher = lexer_12.makeSpaceMatcher;
    root.makeLineMatcher = lexer_12.makeLineMatcher;
    root.makeStringMatcher = lexer_12.makeStringMatcher;
    root.makeCommentMatcher = lexer_12.makeCommentMatcher;
    root.makeNumberMatcher = lexer_12.makeNumberMatcher;
    root.makeTextMatcher = lexer_12.makeTextMatcher;
    root.OPEN = types_12.OPEN;
    root.CLOSE = types_12.CLOSE;
    root.BEFORE = types_12.BEFORE;
    root.AFTER = types_12.AFTER;
    root.EMPTY = types_12.EMPTY;
    root.util = util2;
    root.make = make;
    root.S = utility_12.S;
    exports3.default = Jsonic2;
    if (true) {
      module2.exports = Jsonic2;
    }
  })(jsonic$1, jsonic$1.exports);
  var jsonicExports = jsonic$1.exports;
  const Jsonic = /* @__PURE__ */ getDefaultExportFromCjs(jsonicExports);
  const config_defaults = {};
  const util = {};
  class Vxg {
    constructor(config2) {
      __publicField(this, "match");
      __publicField(this, "cmp");
      __publicField(this, "util");
      this.match = {
        allow: new Patrun({ gex: true })
      };
      this.cmp = {};
      this.config(config2);
      this.util = util;
    }
    config(custom_config) {
      Object.assign(this.config, config_defaults, custom_config || {});
      this.config.allow = this.config.allow || {};
      this.config.allow.modify = this.config.allow.modify || ((x) => x);
      this.config.allow.match = this.config.allow.match || [];
      for (const entry of this.config.allow.match) {
        this.match.allow.add(entry, { allow: true });
      }
    }
    allow(match2) {
      const mm = Jsonic(match2);
      const ms = Array.isArray(match2) ? match2 : Object.keys(mm).map((x) => mm[x]);
      let found = null;
      for (const m of ms) {
        const pat = this.config.allow.modify(__spreadValues({}, m || {}));
        found = this.match.allow.find(pat);
        if (found) {
          break;
        }
      }
      return found ? !!found.allow : false;
    }
  }
  const html = (theme, enableColorScheme) => _extends$2({
    WebkitFontSmoothing: "antialiased",
    // Antialiasing.
    MozOsxFontSmoothing: "grayscale",
    // Antialiasing.
    // Change from `box-sizing: content-box` so that `width`
    // is not affected by `padding` or `border`.
    boxSizing: "border-box",
    // Fix font resize problem in iOS
    WebkitTextSizeAdjust: "100%"
  }, enableColorScheme && !theme.vars && {
    colorScheme: theme.palette.mode
  });
  const body = (theme) => _extends$2({
    color: (theme.vars || theme).palette.text.primary
  }, theme.typography.body1, {
    backgroundColor: (theme.vars || theme).palette.background.default,
    "@media print": {
      // Save printer ink.
      backgroundColor: (theme.vars || theme).palette.common.white
    }
  });
  const styles = (theme, enableColorScheme = false) => {
    var _theme$components, _theme$components$Mui;
    const colorSchemeStyles = {};
    if (enableColorScheme && theme.colorSchemes) {
      Object.entries(theme.colorSchemes).forEach(([key, scheme]) => {
        var _scheme$palette;
        colorSchemeStyles[theme.getColorSchemeSelector(key).replace(/\s*&/, "")] = {
          colorScheme: (_scheme$palette = scheme.palette) == null ? void 0 : _scheme$palette.mode
        };
      });
    }
    let defaultStyles = _extends$2({
      html: html(theme, enableColorScheme),
      "*, *::before, *::after": {
        boxSizing: "inherit"
      },
      "strong, b": {
        fontWeight: theme.typography.fontWeightBold
      },
      body: _extends$2({
        margin: 0
      }, body(theme), {
        // Add support for document.body.requestFullScreen().
        // Other elements, if background transparent, are not supported.
        "&::backdrop": {
          backgroundColor: (theme.vars || theme).palette.background.default
        }
      })
    }, colorSchemeStyles);
    const themeOverrides = (_theme$components = theme.components) == null ? void 0 : (_theme$components$Mui = _theme$components.MuiCssBaseline) == null ? void 0 : _theme$components$Mui.styleOverrides;
    if (themeOverrides) {
      defaultStyles = [defaultStyles, themeOverrides];
    }
    return defaultStyles;
  };
  function CssBaseline(inProps) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiCssBaseline"
    });
    const {
      children,
      enableColorScheme = false
    } = props;
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(React__namespace.Fragment, {
      children: [/* @__PURE__ */ jsxRuntimeExports.jsx(GlobalStyles, {
        styles: (theme) => styles(theme, enableColorScheme)
      }), children]
    });
  }
  process.env.NODE_ENV !== "production" ? CssBaseline.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * You can wrap a node.
     */
    children: PropTypes.node,
    /**
     * Enable `color-scheme` CSS property to use `theme.palette.mode`.
     * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme
     * For browser support, check out https://caniuse.com/?search=color-scheme
     * @default false
     */
    enableColorScheme: PropTypes.bool
  } : void 0;
  const Container = createContainer({
    createStyledComponent: styled("div", {
      name: "MuiContainer",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, styles2[`maxWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fixed && styles2.fixed, ownerState.disableGutters && styles2.disableGutters];
      }
    }),
    useThemeProps: (inProps) => useThemeProps({
      props: inProps,
      name: "MuiContainer"
    })
  });
  process.env.NODE_ENV !== "production" ? Container.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, the left and right padding is removed.
     * @default false
     */
    disableGutters: PropTypes.bool,
    /**
     * Set the max-width to match the min-width of the current breakpoint.
     * This is useful if you'd prefer to design for a fixed set of sizes
     * instead of trying to accommodate a fully fluid viewport.
     * It's fluid by default.
     * @default false
     */
    fixed: PropTypes.bool,
    /**
     * Determine the max-width of the container.
     * The container width grows with the size of the screen.
     * Set to `false` to disable `maxWidth`.
     * @default 'lg'
     */
    maxWidth: PropTypes.oneOfType([PropTypes.oneOf(["xs", "sm", "md", "lg", "xl", false]), PropTypes.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  } : void 0;
  function getContainerUtilityClass(slot) {
    return generateUtilityClass("MuiContainer", slot);
  }
  const containerClasses = generateUtilityClasses("MuiContainer", ["root", "disableGutters", "fixed", "maxWidthXs", "maxWidthSm", "maxWidthMd", "maxWidthLg", "maxWidthXl"]);
  function BasicAuth(props) {
    const { spec } = props;
    const { handle } = spec;
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(Container, { component: "main", maxWidth: "xs", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(CssBaseline, {}),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        Box,
        {
          sx: {
            marginTop: 8,
            display: "flex",
            flexDirection: "column",
            alignItems: "center"
          },
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("img", { style: { width: 400 }, src: spec.img.logo }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Typography,
              {
                sx: { marginTop: 4, color: "#5EB6F1" },
                component: "h1",
                variant: "h5",
                children: spec.title
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              Box,
              {
                component: "form",
                onSubmit: handle.signin,
                noValidate: true,
                sx: { mt: 1 },
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    TextField,
                    {
                      margin: "normal",
                      required: true,
                      fullWidth: true,
                      id: "email",
                      label: "Email Address",
                      name: "email",
                      autoComplete: "email",
                      autoFocus: true
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    TextField,
                    {
                      margin: "normal",
                      required: true,
                      fullWidth: true,
                      name: "password",
                      label: "Password",
                      type: "password",
                      id: "password",
                      autoComplete: "current-password"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      type: "submit",
                      fullWidth: true,
                      variant: "contained",
                      sx: { mt: 3, mb: 2 },
                      children: "Sign In"
                    }
                  )
                ]
              }
            )
          ]
        }
      )
    ] });
  }
  exports2.BasicAdmin = BasicAdmin;
  exports2.BasicAppBar = BasicAppBar;
  exports2.BasicAuth = BasicAuth;
  exports2.BasicButton = BasicButton;
  exports2.BasicDrawer = BasicDrawer;
  exports2.BasicDrawerHeader = BasicDrawerHeader;
  exports2.BasicEdit = BasicEdit;
  exports2.BasicFoot = BasicFoot;
  exports2.BasicHead = BasicHead;
  exports2.BasicLed = BasicLed;
  exports2.BasicList = BasicList;
  exports2.BasicMain = BasicMain;
  exports2.BasicSide = BasicSide;
  exports2.BasicSideMenu = BasicSideMenu;
  exports2.BasicSideMenuItem = BasicSideMenuItem;
  exports2.Vxg = Vxg;
  Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
});
